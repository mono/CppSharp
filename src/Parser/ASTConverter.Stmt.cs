// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------

using CppSharp.Parser.AST;
using static CppSharp.ConversionUtils;

namespace CppSharp
{
    // <summary>
    // <para>Implements the visitor pattern for the generated stmt bindings.</para>
    // </summary>
    public abstract class StmtVisitor<TRet> where TRet : class
    {
        public abstract TRet VisitDeclStmt(DeclStmt stmt);
        public abstract TRet VisitNullStmt(NullStmt stmt);
        public abstract TRet VisitCompoundStmt(CompoundStmt stmt);
        public abstract TRet VisitCaseStmt(CaseStmt stmt);
        public abstract TRet VisitDefaultStmt(DefaultStmt stmt);
        public abstract TRet VisitLabelStmt(LabelStmt stmt);
        public abstract TRet VisitAttributedStmt(AttributedStmt stmt);
        public abstract TRet VisitIfStmt(IfStmt stmt);
        public abstract TRet VisitSwitchStmt(SwitchStmt stmt);
        public abstract TRet VisitWhileStmt(WhileStmt stmt);
        public abstract TRet VisitDoStmt(DoStmt stmt);
        public abstract TRet VisitForStmt(ForStmt stmt);
        public abstract TRet VisitGotoStmt(GotoStmt stmt);
        public abstract TRet VisitIndirectGotoStmt(IndirectGotoStmt stmt);
        public abstract TRet VisitContinueStmt(ContinueStmt stmt);
        public abstract TRet VisitBreakStmt(BreakStmt stmt);
        public abstract TRet VisitReturnStmt(ReturnStmt stmt);
        public abstract TRet VisitGCCAsmStmt(GCCAsmStmt stmt);
        public abstract TRet VisitMSAsmStmt(MSAsmStmt stmt);
        public abstract TRet VisitSEHExceptStmt(SEHExceptStmt stmt);
        public abstract TRet VisitSEHFinallyStmt(SEHFinallyStmt stmt);
        public abstract TRet VisitSEHTryStmt(SEHTryStmt stmt);
        public abstract TRet VisitSEHLeaveStmt(SEHLeaveStmt stmt);
        public abstract TRet VisitCapturedStmt(CapturedStmt stmt);
        public abstract TRet VisitCXXCatchStmt(CXXCatchStmt stmt);
        public abstract TRet VisitCXXTryStmt(CXXTryStmt stmt);
        public abstract TRet VisitCXXForRangeStmt(CXXForRangeStmt stmt);
        public abstract TRet VisitMSDependentExistsStmt(MSDependentExistsStmt stmt);
        public abstract TRet VisitCoroutineBodyStmt(CoroutineBodyStmt stmt);
        public abstract TRet VisitCoreturnStmt(CoreturnStmt stmt);

        public virtual TRet Visit(Parser.AST.Stmt stmt)
        {
            if (stmt == null)
                return default(TRet);

            switch(stmt.stmtClass)
            {
                case Stmt.StmtClass.GCCAsmStmt:
                {
                    var _stmt = GCCAsmStmt.__CreateInstance(stmt.__Instance);
                    return VisitGCCAsmStmt(_stmt);
                }
                case Stmt.StmtClass.MSAsmStmt:
                {
                    var _stmt = MSAsmStmt.__CreateInstance(stmt.__Instance);
                    return VisitMSAsmStmt(_stmt);
                }
                case Stmt.StmtClass.AttributedStmt:
                {
                    var _stmt = AttributedStmt.__CreateInstance(stmt.__Instance);
                    return VisitAttributedStmt(_stmt);
                }
                case Stmt.StmtClass.BreakStmt:
                {
                    var _stmt = BreakStmt.__CreateInstance(stmt.__Instance);
                    return VisitBreakStmt(_stmt);
                }
                case Stmt.StmtClass.CXXCatchStmt:
                {
                    var _stmt = CXXCatchStmt.__CreateInstance(stmt.__Instance);
                    return VisitCXXCatchStmt(_stmt);
                }
                case Stmt.StmtClass.CXXForRangeStmt:
                {
                    var _stmt = CXXForRangeStmt.__CreateInstance(stmt.__Instance);
                    return VisitCXXForRangeStmt(_stmt);
                }
                case Stmt.StmtClass.CXXTryStmt:
                {
                    var _stmt = CXXTryStmt.__CreateInstance(stmt.__Instance);
                    return VisitCXXTryStmt(_stmt);
                }
                case Stmt.StmtClass.CapturedStmt:
                {
                    var _stmt = CapturedStmt.__CreateInstance(stmt.__Instance);
                    return VisitCapturedStmt(_stmt);
                }
                case Stmt.StmtClass.CompoundStmt:
                {
                    var _stmt = CompoundStmt.__CreateInstance(stmt.__Instance);
                    return VisitCompoundStmt(_stmt);
                }
                case Stmt.StmtClass.ContinueStmt:
                {
                    var _stmt = ContinueStmt.__CreateInstance(stmt.__Instance);
                    return VisitContinueStmt(_stmt);
                }
                case Stmt.StmtClass.CoreturnStmt:
                {
                    var _stmt = CoreturnStmt.__CreateInstance(stmt.__Instance);
                    return VisitCoreturnStmt(_stmt);
                }
                case Stmt.StmtClass.CoroutineBodyStmt:
                {
                    var _stmt = CoroutineBodyStmt.__CreateInstance(stmt.__Instance);
                    return VisitCoroutineBodyStmt(_stmt);
                }
                case Stmt.StmtClass.DeclStmt:
                {
                    var _stmt = DeclStmt.__CreateInstance(stmt.__Instance);
                    return VisitDeclStmt(_stmt);
                }
                case Stmt.StmtClass.DoStmt:
                {
                    var _stmt = DoStmt.__CreateInstance(stmt.__Instance);
                    return VisitDoStmt(_stmt);
                }
                case Stmt.StmtClass.BinaryConditionalOperator:
                {
                    var _stmt = BinaryConditionalOperator.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ConditionalOperator:
                {
                    var _stmt = ConditionalOperator.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.AddrLabelExpr:
                {
                    var _stmt = AddrLabelExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ArrayInitIndexExpr:
                {
                    var _stmt = ArrayInitIndexExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ArrayInitLoopExpr:
                {
                    var _stmt = ArrayInitLoopExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ArraySubscriptExpr:
                {
                    var _stmt = ArraySubscriptExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ArrayTypeTraitExpr:
                {
                    var _stmt = ArrayTypeTraitExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.AsTypeExpr:
                {
                    var _stmt = AsTypeExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.AtomicExpr:
                {
                    var _stmt = AtomicExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.BinaryOperator:
                {
                    var _stmt = BinaryOperator.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CompoundAssignOperator:
                {
                    var _stmt = CompoundAssignOperator.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.BlockExpr:
                {
                    var _stmt = BlockExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXBindTemporaryExpr:
                {
                    var _stmt = CXXBindTemporaryExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXBoolLiteralExpr:
                {
                    var _stmt = CXXBoolLiteralExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXConstructExpr:
                {
                    var _stmt = CXXConstructExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXTemporaryObjectExpr:
                {
                    var _stmt = CXXTemporaryObjectExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXDefaultArgExpr:
                {
                    var _stmt = CXXDefaultArgExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXDefaultInitExpr:
                {
                    var _stmt = CXXDefaultInitExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXDeleteExpr:
                {
                    var _stmt = CXXDeleteExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXDependentScopeMemberExpr:
                {
                    var _stmt = CXXDependentScopeMemberExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXFoldExpr:
                {
                    var _stmt = CXXFoldExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXInheritedCtorInitExpr:
                {
                    var _stmt = CXXInheritedCtorInitExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXNewExpr:
                {
                    var _stmt = CXXNewExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXNoexceptExpr:
                {
                    var _stmt = CXXNoexceptExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXNullPtrLiteralExpr:
                {
                    var _stmt = CXXNullPtrLiteralExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXPseudoDestructorExpr:
                {
                    var _stmt = CXXPseudoDestructorExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXScalarValueInitExpr:
                {
                    var _stmt = CXXScalarValueInitExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXStdInitializerListExpr:
                {
                    var _stmt = CXXStdInitializerListExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXThisExpr:
                {
                    var _stmt = CXXThisExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXThrowExpr:
                {
                    var _stmt = CXXThrowExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXTypeidExpr:
                {
                    var _stmt = CXXTypeidExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXUnresolvedConstructExpr:
                {
                    var _stmt = CXXUnresolvedConstructExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXUuidofExpr:
                {
                    var _stmt = CXXUuidofExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CallExpr:
                {
                    var _stmt = CallExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CUDAKernelCallExpr:
                {
                    var _stmt = CUDAKernelCallExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXMemberCallExpr:
                {
                    var _stmt = CXXMemberCallExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXOperatorCallExpr:
                {
                    var _stmt = CXXOperatorCallExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.UserDefinedLiteral:
                {
                    var _stmt = UserDefinedLiteral.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CStyleCastExpr:
                {
                    var _stmt = CStyleCastExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXFunctionalCastExpr:
                {
                    var _stmt = CXXFunctionalCastExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXConstCastExpr:
                {
                    var _stmt = CXXConstCastExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXDynamicCastExpr:
                {
                    var _stmt = CXXDynamicCastExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXReinterpretCastExpr:
                {
                    var _stmt = CXXReinterpretCastExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CXXStaticCastExpr:
                {
                    var _stmt = CXXStaticCastExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ImplicitCastExpr:
                {
                    var _stmt = ImplicitCastExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CharacterLiteral:
                {
                    var _stmt = CharacterLiteral.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ChooseExpr:
                {
                    var _stmt = ChooseExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CompoundLiteralExpr:
                {
                    var _stmt = CompoundLiteralExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ConvertVectorExpr:
                {
                    var _stmt = ConvertVectorExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CoawaitExpr:
                {
                    var _stmt = CoawaitExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.CoyieldExpr:
                {
                    var _stmt = CoyieldExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.DeclRefExpr:
                {
                    var _stmt = DeclRefExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.DependentCoawaitExpr:
                {
                    var _stmt = DependentCoawaitExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.DependentScopeDeclRefExpr:
                {
                    var _stmt = DependentScopeDeclRefExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.DesignatedInitExpr:
                {
                    var _stmt = DesignatedInitExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.DesignatedInitUpdateExpr:
                {
                    var _stmt = DesignatedInitUpdateExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ExpressionTraitExpr:
                {
                    var _stmt = ExpressionTraitExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ExtVectorElementExpr:
                {
                    var _stmt = ExtVectorElementExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.FixedPointLiteral:
                {
                    var _stmt = FixedPointLiteral.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.FloatingLiteral:
                {
                    var _stmt = FloatingLiteral.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ConstantExpr:
                {
                    var _stmt = ConstantExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ExprWithCleanups:
                {
                    var _stmt = ExprWithCleanups.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.FunctionParmPackExpr:
                {
                    var _stmt = FunctionParmPackExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.GNUNullExpr:
                {
                    var _stmt = GNUNullExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.GenericSelectionExpr:
                {
                    var _stmt = GenericSelectionExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ImaginaryLiteral:
                {
                    var _stmt = ImaginaryLiteral.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ImplicitValueInitExpr:
                {
                    var _stmt = ImplicitValueInitExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.InitListExpr:
                {
                    var _stmt = InitListExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.IntegerLiteral:
                {
                    var _stmt = IntegerLiteral.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.LambdaExpr:
                {
                    var _stmt = LambdaExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.MSPropertyRefExpr:
                {
                    var _stmt = MSPropertyRefExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.MSPropertySubscriptExpr:
                {
                    var _stmt = MSPropertySubscriptExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.MaterializeTemporaryExpr:
                {
                    var _stmt = MaterializeTemporaryExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.MemberExpr:
                {
                    var _stmt = MemberExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.NoInitExpr:
                {
                    var _stmt = NoInitExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.OffsetOfExpr:
                {
                    var _stmt = OffsetOfExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.OpaqueValueExpr:
                {
                    var _stmt = OpaqueValueExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.UnresolvedLookupExpr:
                {
                    var _stmt = UnresolvedLookupExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.UnresolvedMemberExpr:
                {
                    var _stmt = UnresolvedMemberExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.PackExpansionExpr:
                {
                    var _stmt = PackExpansionExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ParenExpr:
                {
                    var _stmt = ParenExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ParenListExpr:
                {
                    var _stmt = ParenListExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.PredefinedExpr:
                {
                    var _stmt = PredefinedExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.PseudoObjectExpr:
                {
                    var _stmt = PseudoObjectExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ShuffleVectorExpr:
                {
                    var _stmt = ShuffleVectorExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.SizeOfPackExpr:
                {
                    var _stmt = SizeOfPackExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.StmtExpr:
                {
                    var _stmt = StmtExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.StringLiteral:
                {
                    var _stmt = StringLiteral.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.SubstNonTypeTemplateParmExpr:
                {
                    var _stmt = SubstNonTypeTemplateParmExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.SubstNonTypeTemplateParmPackExpr:
                {
                    var _stmt = SubstNonTypeTemplateParmPackExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.TypeTraitExpr:
                {
                    var _stmt = TypeTraitExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.TypoExpr:
                {
                    var _stmt = TypoExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.UnaryExprOrTypeTraitExpr:
                {
                    var _stmt = UnaryExprOrTypeTraitExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.UnaryOperator:
                {
                    var _stmt = UnaryOperator.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.VAArgExpr:
                {
                    var _stmt = VAArgExpr.__CreateInstance(stmt.__Instance);
                    return VisitExpression(_stmt as Expr) as TRet;
                }
                case Stmt.StmtClass.ForStmt:
                {
                    var _stmt = ForStmt.__CreateInstance(stmt.__Instance);
                    return VisitForStmt(_stmt);
                }
                case Stmt.StmtClass.GotoStmt:
                {
                    var _stmt = GotoStmt.__CreateInstance(stmt.__Instance);
                    return VisitGotoStmt(_stmt);
                }
                case Stmt.StmtClass.IfStmt:
                {
                    var _stmt = IfStmt.__CreateInstance(stmt.__Instance);
                    return VisitIfStmt(_stmt);
                }
                case Stmt.StmtClass.IndirectGotoStmt:
                {
                    var _stmt = IndirectGotoStmt.__CreateInstance(stmt.__Instance);
                    return VisitIndirectGotoStmt(_stmt);
                }
                case Stmt.StmtClass.LabelStmt:
                {
                    var _stmt = LabelStmt.__CreateInstance(stmt.__Instance);
                    return VisitLabelStmt(_stmt);
                }
                case Stmt.StmtClass.MSDependentExistsStmt:
                {
                    var _stmt = MSDependentExistsStmt.__CreateInstance(stmt.__Instance);
                    return VisitMSDependentExistsStmt(_stmt);
                }
                case Stmt.StmtClass.NullStmt:
                {
                    var _stmt = NullStmt.__CreateInstance(stmt.__Instance);
                    return VisitNullStmt(_stmt);
                }
                case Stmt.StmtClass.ReturnStmt:
                {
                    var _stmt = ReturnStmt.__CreateInstance(stmt.__Instance);
                    return VisitReturnStmt(_stmt);
                }
                case Stmt.StmtClass.SEHExceptStmt:
                {
                    var _stmt = SEHExceptStmt.__CreateInstance(stmt.__Instance);
                    return VisitSEHExceptStmt(_stmt);
                }
                case Stmt.StmtClass.SEHFinallyStmt:
                {
                    var _stmt = SEHFinallyStmt.__CreateInstance(stmt.__Instance);
                    return VisitSEHFinallyStmt(_stmt);
                }
                case Stmt.StmtClass.SEHLeaveStmt:
                {
                    var _stmt = SEHLeaveStmt.__CreateInstance(stmt.__Instance);
                    return VisitSEHLeaveStmt(_stmt);
                }
                case Stmt.StmtClass.SEHTryStmt:
                {
                    var _stmt = SEHTryStmt.__CreateInstance(stmt.__Instance);
                    return VisitSEHTryStmt(_stmt);
                }
                case Stmt.StmtClass.CaseStmt:
                {
                    var _stmt = CaseStmt.__CreateInstance(stmt.__Instance);
                    return VisitCaseStmt(_stmt);
                }
                case Stmt.StmtClass.DefaultStmt:
                {
                    var _stmt = DefaultStmt.__CreateInstance(stmt.__Instance);
                    return VisitDefaultStmt(_stmt);
                }
                case Stmt.StmtClass.SwitchStmt:
                {
                    var _stmt = SwitchStmt.__CreateInstance(stmt.__Instance);
                    return VisitSwitchStmt(_stmt);
                }
                case Stmt.StmtClass.WhileStmt:
                {
                    var _stmt = WhileStmt.__CreateInstance(stmt.__Instance);
                    return VisitWhileStmt(_stmt);
                }
                default:
                    throw new System.NotImplementedException(stmt.stmtClass.ToString());
            }
        }
    }

    public unsafe class StmtConverter : StmtVisitor<AST.Stmt>
    {
        public override AST.Stmt VisitDeclStmt(DeclStmt stmt)
        {
            var _stmt = new AST.DeclStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.IsSingleDecl = stmt.IsSingleDecl;
            _stmt.SingleDecl = VisitDeclaration(stmt.SingleDecl) as AST.Declaration;
            for (uint i = 0; i < stmt.GetdeclsCount; i++)
            {
                var _E = stmt.Getdecls(i);
                _stmt.Decls.Add(VisitDeclaration(_E) as AST.Declaration);
            }
            return _stmt;
        }

        public override AST.Stmt VisitNullStmt(NullStmt stmt)
        {
            var _stmt = new AST.NullStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.SemiLoc = VisitSourceLocation(stmt.SemiLoc);
            _stmt.HasLeadingEmptyMacro = stmt.HasLeadingEmptyMacro;
            return _stmt;
        }

        public override AST.Stmt VisitCompoundStmt(CompoundStmt stmt)
        {
            var _stmt = new AST.CompoundStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.BodyEmpty = stmt.BodyEmpty;
            _stmt.Size = stmt.Size;
            _stmt.BodyFront = VisitStatement(stmt.BodyFront) as AST.Stmt;
            _stmt.BodyBack = VisitStatement(stmt.BodyBack) as AST.Stmt;
            _stmt.LBracLoc = VisitSourceLocation(stmt.LBracLoc);
            _stmt.RBracLoc = VisitSourceLocation(stmt.RBracLoc);
            for (uint i = 0; i < stmt.GetbodyCount; i++)
            {
                var _E = stmt.Getbody(i);
                _stmt.Body.Add(VisitStatement(_E) as AST.Stmt);
            }
            return _stmt;
        }

        public override AST.Stmt VisitCaseStmt(CaseStmt stmt)
        {
            var _stmt = new AST.CaseStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.KeywordLoc = VisitSourceLocation(stmt.KeywordLoc);
            _stmt.ColonLoc = VisitSourceLocation(stmt.ColonLoc);
            _stmt.SubStmt = VisitStatement(stmt.SubStmt) as AST.Stmt;
            _stmt.CaseLoc = VisitSourceLocation(stmt.CaseLoc);
            _stmt.EllipsisLoc = VisitSourceLocation(stmt.EllipsisLoc);
            _stmt.LHS = VisitExpression(stmt.LHS) as AST.Expr;
            _stmt.RHS = VisitExpression(stmt.RHS) as AST.Expr;
            _stmt.CaseStmtIsGNURange = stmt.CaseStmtIsGNURange;
            return _stmt;
        }

        public override AST.Stmt VisitDefaultStmt(DefaultStmt stmt)
        {
            var _stmt = new AST.DefaultStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.KeywordLoc = VisitSourceLocation(stmt.KeywordLoc);
            _stmt.ColonLoc = VisitSourceLocation(stmt.ColonLoc);
            _stmt.SubStmt = VisitStatement(stmt.SubStmt) as AST.Stmt;
            _stmt.DefaultLoc = VisitSourceLocation(stmt.DefaultLoc);
            return _stmt;
        }

        public override AST.Stmt VisitLabelStmt(LabelStmt stmt)
        {
            var _stmt = new AST.LabelStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.IdentLoc = VisitSourceLocation(stmt.IdentLoc);
            _stmt.SubStmt = VisitStatement(stmt.SubStmt) as AST.Stmt;
            _stmt.Name = stmt.Name;
            return _stmt;
        }

        public override AST.Stmt VisitAttributedStmt(AttributedStmt stmt)
        {
            var _stmt = new AST.AttributedStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.AttrLoc = VisitSourceLocation(stmt.AttrLoc);
            _stmt.SubStmt = VisitStatement(stmt.SubStmt) as AST.Stmt;
            return _stmt;
        }

        public override AST.Stmt VisitIfStmt(IfStmt stmt)
        {
            var _stmt = new AST.IfStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.Cond = VisitExpression(stmt.Cond) as AST.Expr;
            _stmt.Then = VisitStatement(stmt.Then) as AST.Stmt;
            _stmt.Else = VisitStatement(stmt.Else) as AST.Stmt;
            _stmt.Init = VisitStatement(stmt.Init) as AST.Stmt;
            _stmt.IfLoc = VisitSourceLocation(stmt.IfLoc);
            _stmt.ElseLoc = VisitSourceLocation(stmt.ElseLoc);
            _stmt.Constexpr = stmt.Constexpr;
            _stmt.HasInitStorage = stmt.HasInitStorage;
            _stmt.HasVarStorage = stmt.HasVarStorage;
            _stmt.HasElseStorage = stmt.HasElseStorage;
            _stmt.ConditionVariableDeclStmt = VisitStatement(stmt.ConditionVariableDeclStmt) as AST.DeclStmt;
            _stmt.IsObjCAvailabilityCheck = stmt.IsObjCAvailabilityCheck;
            return _stmt;
        }

        public override AST.Stmt VisitSwitchStmt(SwitchStmt stmt)
        {
            var _stmt = new AST.SwitchStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.Cond = VisitExpression(stmt.Cond) as AST.Expr;
            _stmt.Body = VisitStatement(stmt.Body) as AST.Stmt;
            _stmt.Init = VisitStatement(stmt.Init) as AST.Stmt;
            _stmt.SwitchLoc = VisitSourceLocation(stmt.SwitchLoc);
            _stmt.HasInitStorage = stmt.HasInitStorage;
            _stmt.HasVarStorage = stmt.HasVarStorage;
            _stmt.ConditionVariableDeclStmt = VisitStatement(stmt.ConditionVariableDeclStmt) as AST.DeclStmt;
            _stmt.IsAllEnumCasesCovered = stmt.IsAllEnumCasesCovered;
            return _stmt;
        }

        public override AST.Stmt VisitWhileStmt(WhileStmt stmt)
        {
            var _stmt = new AST.WhileStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.Cond = VisitExpression(stmt.Cond) as AST.Expr;
            _stmt.Body = VisitStatement(stmt.Body) as AST.Stmt;
            _stmt.WhileLoc = VisitSourceLocation(stmt.WhileLoc);
            _stmt.HasVarStorage = stmt.HasVarStorage;
            _stmt.ConditionVariableDeclStmt = VisitStatement(stmt.ConditionVariableDeclStmt) as AST.DeclStmt;
            return _stmt;
        }

        public override AST.Stmt VisitDoStmt(DoStmt stmt)
        {
            var _stmt = new AST.DoStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.Cond = VisitExpression(stmt.Cond) as AST.Expr;
            _stmt.Body = VisitStatement(stmt.Body) as AST.Stmt;
            _stmt.DoLoc = VisitSourceLocation(stmt.DoLoc);
            _stmt.WhileLoc = VisitSourceLocation(stmt.WhileLoc);
            _stmt.RParenLoc = VisitSourceLocation(stmt.RParenLoc);
            return _stmt;
        }

        public override AST.Stmt VisitForStmt(ForStmt stmt)
        {
            var _stmt = new AST.ForStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.Init = VisitStatement(stmt.Init) as AST.Stmt;
            _stmt.Cond = VisitExpression(stmt.Cond) as AST.Expr;
            _stmt.Inc = VisitExpression(stmt.Inc) as AST.Expr;
            _stmt.Body = VisitStatement(stmt.Body) as AST.Stmt;
            _stmt.ForLoc = VisitSourceLocation(stmt.ForLoc);
            _stmt.LParenLoc = VisitSourceLocation(stmt.LParenLoc);
            _stmt.RParenLoc = VisitSourceLocation(stmt.RParenLoc);
            _stmt.ConditionVariableDeclStmt = VisitStatement(stmt.ConditionVariableDeclStmt) as AST.DeclStmt;
            return _stmt;
        }

        public override AST.Stmt VisitGotoStmt(GotoStmt stmt)
        {
            var _stmt = new AST.GotoStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.GotoLoc = VisitSourceLocation(stmt.GotoLoc);
            _stmt.LabelLoc = VisitSourceLocation(stmt.LabelLoc);
            return _stmt;
        }

        public override AST.Stmt VisitIndirectGotoStmt(IndirectGotoStmt stmt)
        {
            var _stmt = new AST.IndirectGotoStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.GotoLoc = VisitSourceLocation(stmt.GotoLoc);
            _stmt.StarLoc = VisitSourceLocation(stmt.StarLoc);
            _stmt.Target = VisitExpression(stmt.Target) as AST.Expr;
            return _stmt;
        }

        public override AST.Stmt VisitContinueStmt(ContinueStmt stmt)
        {
            var _stmt = new AST.ContinueStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.ContinueLoc = VisitSourceLocation(stmt.ContinueLoc);
            return _stmt;
        }

        public override AST.Stmt VisitBreakStmt(BreakStmt stmt)
        {
            var _stmt = new AST.BreakStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.BreakLoc = VisitSourceLocation(stmt.BreakLoc);
            return _stmt;
        }

        public override AST.Stmt VisitReturnStmt(ReturnStmt stmt)
        {
            var _stmt = new AST.ReturnStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.RetValue = VisitExpression(stmt.RetValue) as AST.Expr;
            _stmt.ReturnLoc = VisitSourceLocation(stmt.ReturnLoc);
            return _stmt;
        }

        public override AST.Stmt VisitGCCAsmStmt(GCCAsmStmt stmt)
        {
            var _stmt = new AST.GCCAsmStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.AsmLoc = VisitSourceLocation(stmt.AsmLoc);
            _stmt.Simple = stmt.Simple;
            _stmt.Volatile = stmt.Volatile;
            _stmt.NumOutputs = stmt.NumOutputs;
            _stmt.NumPlusOperands = stmt.NumPlusOperands;
            _stmt.NumInputs = stmt.NumInputs;
            _stmt.NumClobbers = stmt.NumClobbers;
            for (uint i = 0; i < stmt.GetinputsCount; i++)
            {
                var _E = stmt.Getinputs(i);
                _stmt.Inputs.Add(VisitExpression(_E) as AST.Expr);
            }
            for (uint i = 0; i < stmt.GetoutputsCount; i++)
            {
                var _E = stmt.Getoutputs(i);
                _stmt.Outputs.Add(VisitExpression(_E) as AST.Expr);
            }
            _stmt.RParenLoc = VisitSourceLocation(stmt.RParenLoc);
            return _stmt;
        }

        public override AST.Stmt VisitMSAsmStmt(MSAsmStmt stmt)
        {
            var _stmt = new AST.MSAsmStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.AsmLoc = VisitSourceLocation(stmt.AsmLoc);
            _stmt.Simple = stmt.Simple;
            _stmt.Volatile = stmt.Volatile;
            _stmt.NumOutputs = stmt.NumOutputs;
            _stmt.NumPlusOperands = stmt.NumPlusOperands;
            _stmt.NumInputs = stmt.NumInputs;
            _stmt.NumClobbers = stmt.NumClobbers;
            for (uint i = 0; i < stmt.GetinputsCount; i++)
            {
                var _E = stmt.Getinputs(i);
                _stmt.Inputs.Add(VisitExpression(_E) as AST.Expr);
            }
            for (uint i = 0; i < stmt.GetoutputsCount; i++)
            {
                var _E = stmt.Getoutputs(i);
                _stmt.Outputs.Add(VisitExpression(_E) as AST.Expr);
            }
            _stmt.LBraceLoc = VisitSourceLocation(stmt.LBraceLoc);
            _stmt.HasBraces = stmt.HasBraces;
            _stmt.NumAsmToks = stmt.NumAsmToks;
            _stmt.AsmString = stmt.AsmString;
            return _stmt;
        }

        public override AST.Stmt VisitSEHExceptStmt(SEHExceptStmt stmt)
        {
            var _stmt = new AST.SEHExceptStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.ExceptLoc = VisitSourceLocation(stmt.ExceptLoc);
            _stmt.FilterExpr = VisitExpression(stmt.FilterExpr) as AST.Expr;
            _stmt.Block = VisitStatement(stmt.Block) as AST.CompoundStmt;
            return _stmt;
        }

        public override AST.Stmt VisitSEHFinallyStmt(SEHFinallyStmt stmt)
        {
            var _stmt = new AST.SEHFinallyStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.FinallyLoc = VisitSourceLocation(stmt.FinallyLoc);
            _stmt.Block = VisitStatement(stmt.Block) as AST.CompoundStmt;
            return _stmt;
        }

        public override AST.Stmt VisitSEHTryStmt(SEHTryStmt stmt)
        {
            var _stmt = new AST.SEHTryStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.TryLoc = VisitSourceLocation(stmt.TryLoc);
            _stmt.IsCXXTry = stmt.IsCXXTry;
            _stmt.TryBlock = VisitStatement(stmt.TryBlock) as AST.CompoundStmt;
            _stmt.Handler = VisitStatement(stmt.Handler) as AST.Stmt;
            _stmt.ExceptHandler = VisitStatement(stmt.ExceptHandler) as AST.SEHExceptStmt;
            _stmt.FinallyHandler = VisitStatement(stmt.FinallyHandler) as AST.SEHFinallyStmt;
            return _stmt;
        }

        public override AST.Stmt VisitSEHLeaveStmt(SEHLeaveStmt stmt)
        {
            var _stmt = new AST.SEHLeaveStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.LeaveLoc = VisitSourceLocation(stmt.LeaveLoc);
            return _stmt;
        }

        public override AST.Stmt VisitCapturedStmt(CapturedStmt stmt)
        {
            var _stmt = new AST.CapturedStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.capturedStmt = VisitStatement(stmt.capturedStmt) as AST.Stmt;
            _stmt.CaptureSize = stmt.CaptureSize;
            for (uint i = 0; i < stmt.GetcaptureInitsCount; i++)
            {
                var _E = stmt.GetcaptureInits(i);
                _stmt.CaptureInits.Add(VisitExpression(_E) as AST.Expr);
            }
            return _stmt;
        }

        public override AST.Stmt VisitCXXCatchStmt(CXXCatchStmt stmt)
        {
            var _stmt = new AST.CXXCatchStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.CatchLoc = VisitSourceLocation(stmt.CatchLoc);
            _stmt.CaughtType = VisitQualifiedType(stmt.CaughtType);
            _stmt.HandlerBlock = VisitStatement(stmt.HandlerBlock) as AST.Stmt;
            return _stmt;
        }

        public override AST.Stmt VisitCXXTryStmt(CXXTryStmt stmt)
        {
            var _stmt = new AST.CXXTryStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.TryLoc = VisitSourceLocation(stmt.TryLoc);
            _stmt.TryBlock = VisitStatement(stmt.TryBlock) as AST.CompoundStmt;
            _stmt.NumHandlers = stmt.NumHandlers;
            return _stmt;
        }

        public override AST.Stmt VisitCXXForRangeStmt(CXXForRangeStmt stmt)
        {
            var _stmt = new AST.CXXForRangeStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.Init = VisitStatement(stmt.Init) as AST.Stmt;
            _stmt.RangeInit = VisitExpression(stmt.RangeInit) as AST.Expr;
            _stmt.Cond = VisitExpression(stmt.Cond) as AST.Expr;
            _stmt.Inc = VisitExpression(stmt.Inc) as AST.Expr;
            _stmt.Body = VisitStatement(stmt.Body) as AST.Stmt;
            _stmt.RangeStmt = VisitStatement(stmt.RangeStmt) as AST.DeclStmt;
            _stmt.BeginStmt = VisitStatement(stmt.BeginStmt) as AST.DeclStmt;
            _stmt.EndStmt = VisitStatement(stmt.EndStmt) as AST.DeclStmt;
            _stmt.LoopVarStmt = VisitStatement(stmt.LoopVarStmt) as AST.DeclStmt;
            _stmt.ForLoc = VisitSourceLocation(stmt.ForLoc);
            _stmt.CoawaitLoc = VisitSourceLocation(stmt.CoawaitLoc);
            _stmt.ColonLoc = VisitSourceLocation(stmt.ColonLoc);
            _stmt.RParenLoc = VisitSourceLocation(stmt.RParenLoc);
            return _stmt;
        }

        public override AST.Stmt VisitMSDependentExistsStmt(MSDependentExistsStmt stmt)
        {
            var _stmt = new AST.MSDependentExistsStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.KeywordLoc = VisitSourceLocation(stmt.KeywordLoc);
            _stmt.IsIfExists = stmt.IsIfExists;
            _stmt.IsIfNotExists = stmt.IsIfNotExists;
            _stmt.SubStmt = VisitStatement(stmt.SubStmt) as AST.CompoundStmt;
            return _stmt;
        }

        public override AST.Stmt VisitCoroutineBodyStmt(CoroutineBodyStmt stmt)
        {
            var _stmt = new AST.CoroutineBodyStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.HasDependentPromiseType = stmt.HasDependentPromiseType;
            _stmt.Body = VisitStatement(stmt.Body) as AST.Stmt;
            _stmt.PromiseDeclStmt = VisitStatement(stmt.PromiseDeclStmt) as AST.Stmt;
            _stmt.InitSuspendStmt = VisitStatement(stmt.InitSuspendStmt) as AST.Stmt;
            _stmt.FinalSuspendStmt = VisitStatement(stmt.FinalSuspendStmt) as AST.Stmt;
            _stmt.ExceptionHandler = VisitStatement(stmt.ExceptionHandler) as AST.Stmt;
            _stmt.FallthroughHandler = VisitStatement(stmt.FallthroughHandler) as AST.Stmt;
            _stmt.Allocate = VisitExpression(stmt.Allocate) as AST.Expr;
            _stmt.Deallocate = VisitExpression(stmt.Deallocate) as AST.Expr;
            _stmt.ReturnValueInit = VisitExpression(stmt.ReturnValueInit) as AST.Expr;
            _stmt.ResultDecl = VisitStatement(stmt.ResultDecl) as AST.Stmt;
            _stmt.ReturnStmt = VisitStatement(stmt.ReturnStmt) as AST.Stmt;
            _stmt.ReturnStmtOnAllocFailure = VisitStatement(stmt.ReturnStmtOnAllocFailure) as AST.Stmt;
            return _stmt;
        }

        public override AST.Stmt VisitCoreturnStmt(CoreturnStmt stmt)
        {
            var _stmt = new AST.CoreturnStmt();
            _stmt.stmtClass = (AST.Stmt.StmtClass) stmt.stmtClass;
            _stmt.SourceRange = VisitSourceRange(stmt.SourceRange);
            _stmt.BeginLoc = VisitSourceLocation(stmt.BeginLoc);
            _stmt.EndLoc = VisitSourceLocation(stmt.EndLoc);
            _stmt.StripLabelLikeStatements = VisitStatement(stmt.StripLabelLikeStatements) as AST.Stmt;
            _stmt.IsImplicit = stmt.IsImplicit;
            _stmt.KeywordLoc = VisitSourceLocation(stmt.KeywordLoc);
            _stmt.Operand = VisitExpression(stmt.Operand) as AST.Expr;
            _stmt.PromiseCall = VisitExpression(stmt.PromiseCall) as AST.Expr;
            return _stmt;
        }
    }
}
