// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------

using CppSharp.Parser.AST;
using static CppSharp.ConversionUtils;

namespace CppSharp
{
    // <summary>
    // <para>Implements the visitor pattern for the generated expr bindings.</para>
    // </summary>
    public abstract class ExprVisitor<TRet> where TRet : class
    {
        public abstract TRet VisitConstantExpr(ConstantExpr expr);
        public abstract TRet VisitOpaqueValueExpr(OpaqueValueExpr expr);
        public abstract TRet VisitDeclRefExpr(DeclRefExpr expr);
        public abstract TRet VisitIntegerLiteral(IntegerLiteral expr);
        public abstract TRet VisitFixedPointLiteral(FixedPointLiteral expr);
        public abstract TRet VisitCharacterLiteral(CharacterLiteral expr);
        public abstract TRet VisitFloatingLiteral(FloatingLiteral expr);
        public abstract TRet VisitImaginaryLiteral(ImaginaryLiteral expr);
        public abstract TRet VisitStringLiteral(StringLiteral expr);
        public abstract TRet VisitPredefinedExpr(PredefinedExpr expr);
        public abstract TRet VisitParenExpr(ParenExpr expr);
        public abstract TRet VisitUnaryOperator(UnaryOperator expr);
        public abstract TRet VisitOffsetOfExpr(OffsetOfExpr expr);
        public abstract TRet VisitUnaryExprOrTypeTraitExpr(UnaryExprOrTypeTraitExpr expr);
        public abstract TRet VisitArraySubscriptExpr(ArraySubscriptExpr expr);
        public abstract TRet VisitCallExpr(CallExpr expr);
        public abstract TRet VisitMemberExpr(MemberExpr expr);
        public abstract TRet VisitCompoundLiteralExpr(CompoundLiteralExpr expr);
        public abstract TRet VisitImplicitCastExpr(ImplicitCastExpr expr);
        public abstract TRet VisitCStyleCastExpr(CStyleCastExpr expr);
        public abstract TRet VisitBinaryOperator(BinaryOperator expr);
        public abstract TRet VisitCompoundAssignOperator(CompoundAssignOperator expr);
        public abstract TRet VisitConditionalOperator(ConditionalOperator expr);
        public abstract TRet VisitBinaryConditionalOperator(BinaryConditionalOperator expr);
        public abstract TRet VisitAddrLabelExpr(AddrLabelExpr expr);
        public abstract TRet VisitStmtExpr(StmtExpr expr);
        public abstract TRet VisitShuffleVectorExpr(ShuffleVectorExpr expr);
        public abstract TRet VisitConvertVectorExpr(ConvertVectorExpr expr);
        public abstract TRet VisitChooseExpr(ChooseExpr expr);
        public abstract TRet VisitGNUNullExpr(GNUNullExpr expr);
        public abstract TRet VisitVAArgExpr(VAArgExpr expr);
        public abstract TRet VisitInitListExpr(InitListExpr expr);
        public abstract TRet VisitDesignatedInitExpr(DesignatedInitExpr expr);
        public abstract TRet VisitNoInitExpr(NoInitExpr expr);
        public abstract TRet VisitDesignatedInitUpdateExpr(DesignatedInitUpdateExpr expr);
        public abstract TRet VisitArrayInitLoopExpr(ArrayInitLoopExpr expr);
        public abstract TRet VisitArrayInitIndexExpr(ArrayInitIndexExpr expr);
        public abstract TRet VisitImplicitValueInitExpr(ImplicitValueInitExpr expr);
        public abstract TRet VisitParenListExpr(ParenListExpr expr);
        public abstract TRet VisitGenericSelectionExpr(GenericSelectionExpr expr);
        public abstract TRet VisitExtVectorElementExpr(ExtVectorElementExpr expr);
        public abstract TRet VisitBlockExpr(BlockExpr expr);
        public abstract TRet VisitAsTypeExpr(AsTypeExpr expr);
        public abstract TRet VisitPseudoObjectExpr(PseudoObjectExpr expr);
        public abstract TRet VisitAtomicExpr(AtomicExpr expr);
        public abstract TRet VisitTypoExpr(TypoExpr expr);
        public abstract TRet VisitCXXOperatorCallExpr(CXXOperatorCallExpr expr);
        public abstract TRet VisitCXXMemberCallExpr(CXXMemberCallExpr expr);
        public abstract TRet VisitCUDAKernelCallExpr(CUDAKernelCallExpr expr);
        public abstract TRet VisitCXXStaticCastExpr(CXXStaticCastExpr expr);
        public abstract TRet VisitCXXDynamicCastExpr(CXXDynamicCastExpr expr);
        public abstract TRet VisitCXXReinterpretCastExpr(CXXReinterpretCastExpr expr);
        public abstract TRet VisitCXXConstCastExpr(CXXConstCastExpr expr);
        public abstract TRet VisitUserDefinedLiteral(UserDefinedLiteral expr);
        public abstract TRet VisitCXXBoolLiteralExpr(CXXBoolLiteralExpr expr);
        public abstract TRet VisitCXXNullPtrLiteralExpr(CXXNullPtrLiteralExpr expr);
        public abstract TRet VisitCXXStdInitializerListExpr(CXXStdInitializerListExpr expr);
        public abstract TRet VisitCXXTypeidExpr(CXXTypeidExpr expr);
        public abstract TRet VisitMSPropertyRefExpr(MSPropertyRefExpr expr);
        public abstract TRet VisitMSPropertySubscriptExpr(MSPropertySubscriptExpr expr);
        public abstract TRet VisitCXXUuidofExpr(CXXUuidofExpr expr);
        public abstract TRet VisitCXXThisExpr(CXXThisExpr expr);
        public abstract TRet VisitCXXThrowExpr(CXXThrowExpr expr);
        public abstract TRet VisitCXXDefaultArgExpr(CXXDefaultArgExpr expr);
        public abstract TRet VisitCXXDefaultInitExpr(CXXDefaultInitExpr expr);
        public abstract TRet VisitCXXBindTemporaryExpr(CXXBindTemporaryExpr expr);
        public abstract TRet VisitCXXConstructExpr(CXXConstructExpr expr);
        public abstract TRet VisitCXXInheritedCtorInitExpr(CXXInheritedCtorInitExpr expr);
        public abstract TRet VisitCXXFunctionalCastExpr(CXXFunctionalCastExpr expr);
        public abstract TRet VisitCXXTemporaryObjectExpr(CXXTemporaryObjectExpr expr);
        public abstract TRet VisitLambdaExpr(LambdaExpr expr);
        public abstract TRet VisitCXXScalarValueInitExpr(CXXScalarValueInitExpr expr);
        public abstract TRet VisitCXXNewExpr(CXXNewExpr expr);
        public abstract TRet VisitCXXDeleteExpr(CXXDeleteExpr expr);
        public abstract TRet VisitCXXPseudoDestructorExpr(CXXPseudoDestructorExpr expr);
        public abstract TRet VisitTypeTraitExpr(TypeTraitExpr expr);
        public abstract TRet VisitArrayTypeTraitExpr(ArrayTypeTraitExpr expr);
        public abstract TRet VisitExpressionTraitExpr(ExpressionTraitExpr expr);
        public abstract TRet VisitUnresolvedLookupExpr(UnresolvedLookupExpr expr);
        public abstract TRet VisitDependentScopeDeclRefExpr(DependentScopeDeclRefExpr expr);
        public abstract TRet VisitExprWithCleanups(ExprWithCleanups expr);
        public abstract TRet VisitCXXUnresolvedConstructExpr(CXXUnresolvedConstructExpr expr);
        public abstract TRet VisitCXXDependentScopeMemberExpr(CXXDependentScopeMemberExpr expr);
        public abstract TRet VisitUnresolvedMemberExpr(UnresolvedMemberExpr expr);
        public abstract TRet VisitCXXNoexceptExpr(CXXNoexceptExpr expr);
        public abstract TRet VisitPackExpansionExpr(PackExpansionExpr expr);
        public abstract TRet VisitSizeOfPackExpr(SizeOfPackExpr expr);
        public abstract TRet VisitSubstNonTypeTemplateParmExpr(SubstNonTypeTemplateParmExpr expr);
        public abstract TRet VisitSubstNonTypeTemplateParmPackExpr(SubstNonTypeTemplateParmPackExpr expr);
        public abstract TRet VisitFunctionParmPackExpr(FunctionParmPackExpr expr);
        public abstract TRet VisitMaterializeTemporaryExpr(MaterializeTemporaryExpr expr);
        public abstract TRet VisitCXXFoldExpr(CXXFoldExpr expr);
        public abstract TRet VisitCoawaitExpr(CoawaitExpr expr);
        public abstract TRet VisitDependentCoawaitExpr(DependentCoawaitExpr expr);
        public abstract TRet VisitCoyieldExpr(CoyieldExpr expr);

        public virtual TRet Visit(Parser.AST.Expr expr)
        {
            if (expr == null)
                return default(TRet);

            switch(expr.StmtClass)
            {
                case StmtClass.ConstantExpr:
                {
                    var _expr = ConstantExpr.__CreateInstance(expr.__Instance);
                    return VisitConstantExpr(_expr);
                }
                case StmtClass.OpaqueValueExpr:
                {
                    var _expr = OpaqueValueExpr.__CreateInstance(expr.__Instance);
                    return VisitOpaqueValueExpr(_expr);
                }
                case StmtClass.DeclRefExpr:
                {
                    var _expr = DeclRefExpr.__CreateInstance(expr.__Instance);
                    return VisitDeclRefExpr(_expr);
                }
                case StmtClass.IntegerLiteral:
                {
                    var _expr = IntegerLiteral.__CreateInstance(expr.__Instance);
                    return VisitIntegerLiteral(_expr);
                }
                case StmtClass.FixedPointLiteral:
                {
                    var _expr = FixedPointLiteral.__CreateInstance(expr.__Instance);
                    return VisitFixedPointLiteral(_expr);
                }
                case StmtClass.CharacterLiteral:
                {
                    var _expr = CharacterLiteral.__CreateInstance(expr.__Instance);
                    return VisitCharacterLiteral(_expr);
                }
                case StmtClass.FloatingLiteral:
                {
                    var _expr = FloatingLiteral.__CreateInstance(expr.__Instance);
                    return VisitFloatingLiteral(_expr);
                }
                case StmtClass.ImaginaryLiteral:
                {
                    var _expr = ImaginaryLiteral.__CreateInstance(expr.__Instance);
                    return VisitImaginaryLiteral(_expr);
                }
                case StmtClass.StringLiteral:
                {
                    var _expr = StringLiteral.__CreateInstance(expr.__Instance);
                    return VisitStringLiteral(_expr);
                }
                case StmtClass.PredefinedExpr:
                {
                    var _expr = PredefinedExpr.__CreateInstance(expr.__Instance);
                    return VisitPredefinedExpr(_expr);
                }
                case StmtClass.ParenExpr:
                {
                    var _expr = ParenExpr.__CreateInstance(expr.__Instance);
                    return VisitParenExpr(_expr);
                }
                case StmtClass.UnaryOperator:
                {
                    var _expr = UnaryOperator.__CreateInstance(expr.__Instance);
                    return VisitUnaryOperator(_expr);
                }
                case StmtClass.OffsetOfExpr:
                {
                    var _expr = OffsetOfExpr.__CreateInstance(expr.__Instance);
                    return VisitOffsetOfExpr(_expr);
                }
                case StmtClass.UnaryExprOrTypeTraitExpr:
                {
                    var _expr = UnaryExprOrTypeTraitExpr.__CreateInstance(expr.__Instance);
                    return VisitUnaryExprOrTypeTraitExpr(_expr);
                }
                case StmtClass.ArraySubscriptExpr:
                {
                    var _expr = ArraySubscriptExpr.__CreateInstance(expr.__Instance);
                    return VisitArraySubscriptExpr(_expr);
                }
                case StmtClass.CallExpr:
                {
                    var _expr = CallExpr.__CreateInstance(expr.__Instance);
                    return VisitCallExpr(_expr);
                }
                case StmtClass.MemberExpr:
                {
                    var _expr = MemberExpr.__CreateInstance(expr.__Instance);
                    return VisitMemberExpr(_expr);
                }
                case StmtClass.CompoundLiteralExpr:
                {
                    var _expr = CompoundLiteralExpr.__CreateInstance(expr.__Instance);
                    return VisitCompoundLiteralExpr(_expr);
                }
                case StmtClass.ImplicitCastExpr:
                {
                    var _expr = ImplicitCastExpr.__CreateInstance(expr.__Instance);
                    return VisitImplicitCastExpr(_expr);
                }
                case StmtClass.CStyleCastExpr:
                {
                    var _expr = CStyleCastExpr.__CreateInstance(expr.__Instance);
                    return VisitCStyleCastExpr(_expr);
                }
                case StmtClass.BinaryOperator:
                {
                    var _expr = BinaryOperator.__CreateInstance(expr.__Instance);
                    return VisitBinaryOperator(_expr);
                }
                case StmtClass.CompoundAssignOperator:
                {
                    var _expr = CompoundAssignOperator.__CreateInstance(expr.__Instance);
                    return VisitCompoundAssignOperator(_expr);
                }
                case StmtClass.ConditionalOperator:
                {
                    var _expr = ConditionalOperator.__CreateInstance(expr.__Instance);
                    return VisitConditionalOperator(_expr);
                }
                case StmtClass.BinaryConditionalOperator:
                {
                    var _expr = BinaryConditionalOperator.__CreateInstance(expr.__Instance);
                    return VisitBinaryConditionalOperator(_expr);
                }
                case StmtClass.AddrLabelExpr:
                {
                    var _expr = AddrLabelExpr.__CreateInstance(expr.__Instance);
                    return VisitAddrLabelExpr(_expr);
                }
                case StmtClass.StmtExpr:
                {
                    var _expr = StmtExpr.__CreateInstance(expr.__Instance);
                    return VisitStmtExpr(_expr);
                }
                case StmtClass.ShuffleVectorExpr:
                {
                    var _expr = ShuffleVectorExpr.__CreateInstance(expr.__Instance);
                    return VisitShuffleVectorExpr(_expr);
                }
                case StmtClass.ConvertVectorExpr:
                {
                    var _expr = ConvertVectorExpr.__CreateInstance(expr.__Instance);
                    return VisitConvertVectorExpr(_expr);
                }
                case StmtClass.ChooseExpr:
                {
                    var _expr = ChooseExpr.__CreateInstance(expr.__Instance);
                    return VisitChooseExpr(_expr);
                }
                case StmtClass.GNUNullExpr:
                {
                    var _expr = GNUNullExpr.__CreateInstance(expr.__Instance);
                    return VisitGNUNullExpr(_expr);
                }
                case StmtClass.VAArgExpr:
                {
                    var _expr = VAArgExpr.__CreateInstance(expr.__Instance);
                    return VisitVAArgExpr(_expr);
                }
                case StmtClass.InitListExpr:
                {
                    var _expr = InitListExpr.__CreateInstance(expr.__Instance);
                    return VisitInitListExpr(_expr);
                }
                case StmtClass.DesignatedInitExpr:
                {
                    var _expr = DesignatedInitExpr.__CreateInstance(expr.__Instance);
                    return VisitDesignatedInitExpr(_expr);
                }
                case StmtClass.NoInitExpr:
                {
                    var _expr = NoInitExpr.__CreateInstance(expr.__Instance);
                    return VisitNoInitExpr(_expr);
                }
                case StmtClass.DesignatedInitUpdateExpr:
                {
                    var _expr = DesignatedInitUpdateExpr.__CreateInstance(expr.__Instance);
                    return VisitDesignatedInitUpdateExpr(_expr);
                }
                case StmtClass.ArrayInitLoopExpr:
                {
                    var _expr = ArrayInitLoopExpr.__CreateInstance(expr.__Instance);
                    return VisitArrayInitLoopExpr(_expr);
                }
                case StmtClass.ArrayInitIndexExpr:
                {
                    var _expr = ArrayInitIndexExpr.__CreateInstance(expr.__Instance);
                    return VisitArrayInitIndexExpr(_expr);
                }
                case StmtClass.ImplicitValueInitExpr:
                {
                    var _expr = ImplicitValueInitExpr.__CreateInstance(expr.__Instance);
                    return VisitImplicitValueInitExpr(_expr);
                }
                case StmtClass.ParenListExpr:
                {
                    var _expr = ParenListExpr.__CreateInstance(expr.__Instance);
                    return VisitParenListExpr(_expr);
                }
                case StmtClass.GenericSelectionExpr:
                {
                    var _expr = GenericSelectionExpr.__CreateInstance(expr.__Instance);
                    return VisitGenericSelectionExpr(_expr);
                }
                case StmtClass.ExtVectorElementExpr:
                {
                    var _expr = ExtVectorElementExpr.__CreateInstance(expr.__Instance);
                    return VisitExtVectorElementExpr(_expr);
                }
                case StmtClass.BlockExpr:
                {
                    var _expr = BlockExpr.__CreateInstance(expr.__Instance);
                    return VisitBlockExpr(_expr);
                }
                case StmtClass.AsTypeExpr:
                {
                    var _expr = AsTypeExpr.__CreateInstance(expr.__Instance);
                    return VisitAsTypeExpr(_expr);
                }
                case StmtClass.PseudoObjectExpr:
                {
                    var _expr = PseudoObjectExpr.__CreateInstance(expr.__Instance);
                    return VisitPseudoObjectExpr(_expr);
                }
                case StmtClass.AtomicExpr:
                {
                    var _expr = AtomicExpr.__CreateInstance(expr.__Instance);
                    return VisitAtomicExpr(_expr);
                }
                case StmtClass.TypoExpr:
                {
                    var _expr = TypoExpr.__CreateInstance(expr.__Instance);
                    return VisitTypoExpr(_expr);
                }
                case StmtClass.CXXOperatorCallExpr:
                {
                    var _expr = CXXOperatorCallExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXOperatorCallExpr(_expr);
                }
                case StmtClass.CXXMemberCallExpr:
                {
                    var _expr = CXXMemberCallExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXMemberCallExpr(_expr);
                }
                case StmtClass.CUDAKernelCallExpr:
                {
                    var _expr = CUDAKernelCallExpr.__CreateInstance(expr.__Instance);
                    return VisitCUDAKernelCallExpr(_expr);
                }
                case StmtClass.CXXStaticCastExpr:
                {
                    var _expr = CXXStaticCastExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXStaticCastExpr(_expr);
                }
                case StmtClass.CXXDynamicCastExpr:
                {
                    var _expr = CXXDynamicCastExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXDynamicCastExpr(_expr);
                }
                case StmtClass.CXXReinterpretCastExpr:
                {
                    var _expr = CXXReinterpretCastExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXReinterpretCastExpr(_expr);
                }
                case StmtClass.CXXConstCastExpr:
                {
                    var _expr = CXXConstCastExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXConstCastExpr(_expr);
                }
                case StmtClass.UserDefinedLiteral:
                {
                    var _expr = UserDefinedLiteral.__CreateInstance(expr.__Instance);
                    return VisitUserDefinedLiteral(_expr);
                }
                case StmtClass.CXXBoolLiteralExpr:
                {
                    var _expr = CXXBoolLiteralExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXBoolLiteralExpr(_expr);
                }
                case StmtClass.CXXNullPtrLiteralExpr:
                {
                    var _expr = CXXNullPtrLiteralExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXNullPtrLiteralExpr(_expr);
                }
                case StmtClass.CXXStdInitializerListExpr:
                {
                    var _expr = CXXStdInitializerListExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXStdInitializerListExpr(_expr);
                }
                case StmtClass.CXXTypeidExpr:
                {
                    var _expr = CXXTypeidExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXTypeidExpr(_expr);
                }
                case StmtClass.MSPropertyRefExpr:
                {
                    var _expr = MSPropertyRefExpr.__CreateInstance(expr.__Instance);
                    return VisitMSPropertyRefExpr(_expr);
                }
                case StmtClass.MSPropertySubscriptExpr:
                {
                    var _expr = MSPropertySubscriptExpr.__CreateInstance(expr.__Instance);
                    return VisitMSPropertySubscriptExpr(_expr);
                }
                case StmtClass.CXXUuidofExpr:
                {
                    var _expr = CXXUuidofExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXUuidofExpr(_expr);
                }
                case StmtClass.CXXThisExpr:
                {
                    var _expr = CXXThisExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXThisExpr(_expr);
                }
                case StmtClass.CXXThrowExpr:
                {
                    var _expr = CXXThrowExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXThrowExpr(_expr);
                }
                case StmtClass.CXXDefaultArgExpr:
                {
                    var _expr = CXXDefaultArgExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXDefaultArgExpr(_expr);
                }
                case StmtClass.CXXDefaultInitExpr:
                {
                    var _expr = CXXDefaultInitExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXDefaultInitExpr(_expr);
                }
                case StmtClass.CXXBindTemporaryExpr:
                {
                    var _expr = CXXBindTemporaryExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXBindTemporaryExpr(_expr);
                }
                case StmtClass.CXXConstructExpr:
                {
                    var _expr = CXXConstructExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXConstructExpr(_expr);
                }
                case StmtClass.CXXInheritedCtorInitExpr:
                {
                    var _expr = CXXInheritedCtorInitExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXInheritedCtorInitExpr(_expr);
                }
                case StmtClass.CXXFunctionalCastExpr:
                {
                    var _expr = CXXFunctionalCastExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXFunctionalCastExpr(_expr);
                }
                case StmtClass.CXXTemporaryObjectExpr:
                {
                    var _expr = CXXTemporaryObjectExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXTemporaryObjectExpr(_expr);
                }
                case StmtClass.LambdaExpr:
                {
                    var _expr = LambdaExpr.__CreateInstance(expr.__Instance);
                    return VisitLambdaExpr(_expr);
                }
                case StmtClass.CXXScalarValueInitExpr:
                {
                    var _expr = CXXScalarValueInitExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXScalarValueInitExpr(_expr);
                }
                case StmtClass.CXXNewExpr:
                {
                    var _expr = CXXNewExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXNewExpr(_expr);
                }
                case StmtClass.CXXDeleteExpr:
                {
                    var _expr = CXXDeleteExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXDeleteExpr(_expr);
                }
                case StmtClass.CXXPseudoDestructorExpr:
                {
                    var _expr = CXXPseudoDestructorExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXPseudoDestructorExpr(_expr);
                }
                case StmtClass.TypeTraitExpr:
                {
                    var _expr = TypeTraitExpr.__CreateInstance(expr.__Instance);
                    return VisitTypeTraitExpr(_expr);
                }
                case StmtClass.ArrayTypeTraitExpr:
                {
                    var _expr = ArrayTypeTraitExpr.__CreateInstance(expr.__Instance);
                    return VisitArrayTypeTraitExpr(_expr);
                }
                case StmtClass.ExpressionTraitExpr:
                {
                    var _expr = ExpressionTraitExpr.__CreateInstance(expr.__Instance);
                    return VisitExpressionTraitExpr(_expr);
                }
                case StmtClass.UnresolvedLookupExpr:
                {
                    var _expr = UnresolvedLookupExpr.__CreateInstance(expr.__Instance);
                    return VisitUnresolvedLookupExpr(_expr);
                }
                case StmtClass.DependentScopeDeclRefExpr:
                {
                    var _expr = DependentScopeDeclRefExpr.__CreateInstance(expr.__Instance);
                    return VisitDependentScopeDeclRefExpr(_expr);
                }
                case StmtClass.ExprWithCleanups:
                {
                    var _expr = ExprWithCleanups.__CreateInstance(expr.__Instance);
                    return VisitExprWithCleanups(_expr);
                }
                case StmtClass.CXXUnresolvedConstructExpr:
                {
                    var _expr = CXXUnresolvedConstructExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXUnresolvedConstructExpr(_expr);
                }
                case StmtClass.CXXDependentScopeMemberExpr:
                {
                    var _expr = CXXDependentScopeMemberExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXDependentScopeMemberExpr(_expr);
                }
                case StmtClass.UnresolvedMemberExpr:
                {
                    var _expr = UnresolvedMemberExpr.__CreateInstance(expr.__Instance);
                    return VisitUnresolvedMemberExpr(_expr);
                }
                case StmtClass.CXXNoexceptExpr:
                {
                    var _expr = CXXNoexceptExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXNoexceptExpr(_expr);
                }
                case StmtClass.PackExpansionExpr:
                {
                    var _expr = PackExpansionExpr.__CreateInstance(expr.__Instance);
                    return VisitPackExpansionExpr(_expr);
                }
                case StmtClass.SizeOfPackExpr:
                {
                    var _expr = SizeOfPackExpr.__CreateInstance(expr.__Instance);
                    return VisitSizeOfPackExpr(_expr);
                }
                case StmtClass.SubstNonTypeTemplateParmExpr:
                {
                    var _expr = SubstNonTypeTemplateParmExpr.__CreateInstance(expr.__Instance);
                    return VisitSubstNonTypeTemplateParmExpr(_expr);
                }
                case StmtClass.SubstNonTypeTemplateParmPackExpr:
                {
                    var _expr = SubstNonTypeTemplateParmPackExpr.__CreateInstance(expr.__Instance);
                    return VisitSubstNonTypeTemplateParmPackExpr(_expr);
                }
                case StmtClass.FunctionParmPackExpr:
                {
                    var _expr = FunctionParmPackExpr.__CreateInstance(expr.__Instance);
                    return VisitFunctionParmPackExpr(_expr);
                }
                case StmtClass.MaterializeTemporaryExpr:
                {
                    var _expr = MaterializeTemporaryExpr.__CreateInstance(expr.__Instance);
                    return VisitMaterializeTemporaryExpr(_expr);
                }
                case StmtClass.CXXFoldExpr:
                {
                    var _expr = CXXFoldExpr.__CreateInstance(expr.__Instance);
                    return VisitCXXFoldExpr(_expr);
                }
                case StmtClass.CoawaitExpr:
                {
                    var _expr = CoawaitExpr.__CreateInstance(expr.__Instance);
                    return VisitCoawaitExpr(_expr);
                }
                case StmtClass.DependentCoawaitExpr:
                {
                    var _expr = DependentCoawaitExpr.__CreateInstance(expr.__Instance);
                    return VisitDependentCoawaitExpr(_expr);
                }
                case StmtClass.CoyieldExpr:
                {
                    var _expr = CoyieldExpr.__CreateInstance(expr.__Instance);
                    return VisitCoyieldExpr(_expr);
                }
                default:
                    throw new System.NotImplementedException(expr.StmtClass.ToString());
            }
        }
    }

    public unsafe class ExprConverter : ExprVisitor<AST.Expr>
    {
        public override AST.Expr VisitConstantExpr(ConstantExpr expr)
        {
            var _expr = new AST.ConstantExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitOpaqueValueExpr(OpaqueValueExpr expr)
        {
            var _expr = new AST.OpaqueValueExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.IsUnique = expr.IsUnique;
            _expr.Location = VisitSourceLocation(expr.Location);
            _expr.SourceExpr = VisitExpression(expr.SourceExpr) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitDeclRefExpr(DeclRefExpr expr)
        {
            var _expr = new AST.DeclRefExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Location = VisitSourceLocation(expr.Location);
            _expr.HadMultipleCandidates = expr.HadMultipleCandidates;
            _expr.HasQualifier = expr.HasQualifier;
            _expr.FoundDecl = VisitDeclaration(expr.FoundDecl) as AST.Declaration;
            _expr.HasTemplateKWAndArgsInfo = expr.HasTemplateKWAndArgsInfo;
            _expr.TemplateKeywordLoc = VisitSourceLocation(expr.TemplateKeywordLoc);
            _expr.LAngleLoc = VisitSourceLocation(expr.LAngleLoc);
            _expr.RAngleLoc = VisitSourceLocation(expr.RAngleLoc);
            _expr.HasTemplateKeyword = expr.HasTemplateKeyword;
            _expr.HasExplicitTemplateArgs = expr.HasExplicitTemplateArgs;
            _expr.NumTemplateArgs = expr.NumTemplateArgs;
            _expr.RefersToEnclosingVariableOrCapture = expr.RefersToEnclosingVariableOrCapture;
            return _expr;
        }

        public override AST.Expr VisitIntegerLiteral(IntegerLiteral expr)
        {
            var _expr = new AST.IntegerLiteral();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Location = VisitSourceLocation(expr.Location);
            _expr.Value = expr.Value;
            return _expr;
        }

        public override AST.Expr VisitFixedPointLiteral(FixedPointLiteral expr)
        {
            var _expr = new AST.FixedPointLiteral();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Location = VisitSourceLocation(expr.Location);
            _expr.Value = expr.Value;
            return _expr;
        }

        public override AST.Expr VisitCharacterLiteral(CharacterLiteral expr)
        {
            var _expr = new AST.CharacterLiteral();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Location = VisitSourceLocation(expr.Location);
            _expr.Kind = (AST.CharacterLiteral.CharacterKind) expr.Kind;
            _expr.Value = expr.Value;
            return _expr;
        }

        public override AST.Expr VisitFloatingLiteral(FloatingLiteral expr)
        {
            var _expr = new AST.FloatingLiteral();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Exact = expr.Exact;
            _expr.Location = VisitSourceLocation(expr.Location);
            _expr.ValueAsApproximateDouble = expr.ValueAsApproximateDouble;
            return _expr;
        }

        public override AST.Expr VisitImaginaryLiteral(ImaginaryLiteral expr)
        {
            var _expr = new AST.ImaginaryLiteral();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitStringLiteral(StringLiteral expr)
        {
            var _expr = new AST.StringLiteral();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.String = expr.String;
            _expr.Bytes = expr.Bytes;
            _expr.ByteLength = expr.ByteLength;
            _expr.Length = expr.Length;
            _expr.CharByteWidth = expr.CharByteWidth;
            _expr.Kind = (AST.StringLiteral.StringKind) expr.Kind;
            _expr.IsAscii = expr.IsAscii;
            _expr.IsWide = expr.IsWide;
            _expr.IsUTF8 = expr.IsUTF8;
            _expr.IsUTF16 = expr.IsUTF16;
            _expr.IsUTF32 = expr.IsUTF32;
            _expr.IsPascal = expr.IsPascal;
            _expr.ContainsNonAscii = expr.ContainsNonAscii;
            _expr.ContainsNonAsciiOrNull = expr.ContainsNonAsciiOrNull;
            _expr.NumConcatenated = expr.NumConcatenated;
            return _expr;
        }

        public override AST.Expr VisitPredefinedExpr(PredefinedExpr expr)
        {
            var _expr = new AST.PredefinedExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Location = VisitSourceLocation(expr.Location);
            _expr.identKind = (AST.PredefinedExpr.IdentKind) expr.identKind;
            return _expr;
        }

        public override AST.Expr VisitParenExpr(ParenExpr expr)
        {
            var _expr = new AST.ParenExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            _expr.LParen = VisitSourceLocation(expr.LParen);
            _expr.RParen = VisitSourceLocation(expr.RParen);
            return _expr;
        }

        public override AST.Expr VisitUnaryOperator(UnaryOperator expr)
        {
            var _expr = new AST.UnaryOperator();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Opcode = (AST.UnaryOperatorKind) expr.Opcode;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.CanOverflow = expr.CanOverflow;
            _expr.IsPrefix = expr.IsPrefix;
            _expr.IsPostfix = expr.IsPostfix;
            _expr.IsIncrementOp = expr.IsIncrementOp;
            _expr.IsDecrementOp = expr.IsDecrementOp;
            _expr.IsIncrementDecrementOp = expr.IsIncrementDecrementOp;
            _expr.IsArithmeticOp = expr.IsArithmeticOp;
            return _expr;
        }

        public override AST.Expr VisitOffsetOfExpr(OffsetOfExpr expr)
        {
            var _expr = new AST.OffsetOfExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.NumComponents = expr.NumComponents;
            _expr.NumExpressions = expr.NumExpressions;
            return _expr;
        }

        public override AST.Expr VisitUnaryExprOrTypeTraitExpr(UnaryExprOrTypeTraitExpr expr)
        {
            var _expr = new AST.UnaryExprOrTypeTraitExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Kind = (AST.UnaryExprOrTypeTrait) expr.Kind;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.IsArgumentType = expr.IsArgumentType;
            _expr.ArgumentType = VisitQualifiedType(expr.ArgumentType);
            _expr.ArgumentExpr = VisitExpression(expr.ArgumentExpr) as AST.Expr;
            _expr.TypeOfArgument = VisitQualifiedType(expr.TypeOfArgument);
            return _expr;
        }

        public override AST.Expr VisitArraySubscriptExpr(ArraySubscriptExpr expr)
        {
            var _expr = new AST.ArraySubscriptExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.LHS = VisitExpression(expr.LHS) as AST.Expr;
            _expr.RHS = VisitExpression(expr.RHS) as AST.Expr;
            _expr.RBracketLoc = VisitSourceLocation(expr.RBracketLoc);
            _expr.Base = VisitExpression(expr.Base) as AST.Expr;
            _expr.Idx = VisitExpression(expr.Idx) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitCallExpr(CallExpr expr)
        {
            var _expr = new AST.CallExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Callee = VisitExpression(expr.Callee) as AST.Expr;
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.CalleeDecl = VisitDeclaration(expr.CalleeDecl) as AST.Declaration;
            _expr.DirectCallee = VisitDeclaration(expr.DirectCallee) as AST.Function;
            _expr.NumArgs = expr.NumArgs;
            _expr.NumCommas = expr.NumCommas;
            _expr.BuiltinCallee = expr.BuiltinCallee;
            _expr.IsCallToStdMove = expr.IsCallToStdMove;
            for (uint i = 0; i < expr.GetargumentsCount; i++)
            {
                var _E = expr.Getarguments(i);
                _expr.Arguments.Add(VisitExpression(_E) as AST.Expr);
            }
            return _expr;
        }

        public override AST.Expr VisitMemberExpr(MemberExpr expr)
        {
            var _expr = new AST.MemberExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Base = VisitExpression(expr.Base) as AST.Expr;
            _expr.Arrow = expr.Arrow;
            _expr.MemberLoc = VisitSourceLocation(expr.MemberLoc);
            _expr.HadMultipleCandidates = expr.HadMultipleCandidates;
            _expr.HasQualifier = expr.HasQualifier;
            _expr.TemplateKeywordLoc = VisitSourceLocation(expr.TemplateKeywordLoc);
            _expr.LAngleLoc = VisitSourceLocation(expr.LAngleLoc);
            _expr.RAngleLoc = VisitSourceLocation(expr.RAngleLoc);
            _expr.HasTemplateKeyword = expr.HasTemplateKeyword;
            _expr.HasExplicitTemplateArgs = expr.HasExplicitTemplateArgs;
            _expr.NumTemplateArgs = expr.NumTemplateArgs;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.IsImplicitAccess = expr.IsImplicitAccess;
            return _expr;
        }

        public override AST.Expr VisitCompoundLiteralExpr(CompoundLiteralExpr expr)
        {
            var _expr = new AST.CompoundLiteralExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Initializer = VisitExpression(expr.Initializer) as AST.Expr;
            _expr.FileScope = expr.FileScope;
            _expr.LParenLoc = VisitSourceLocation(expr.LParenLoc);
            return _expr;
        }

        public override AST.Expr VisitImplicitCastExpr(ImplicitCastExpr expr)
        {
            var _expr = new AST.ImplicitCastExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.CastKind = (AST.CastKind) expr.CastKind;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            _expr.CastKindName = expr.CastKindName;
            _expr.SubExprAsWritten = VisitExpression(expr.SubExprAsWritten) as AST.Expr;
            _expr.ConversionFunction = VisitDeclaration(expr.ConversionFunction) as AST.Declaration;
            _expr.PathEmpty = expr.PathEmpty;
            _expr.PathSize = expr.PathSize;
            _expr.IsPartOfExplicitCast = expr.IsPartOfExplicitCast;
            return _expr;
        }

        public override AST.Expr VisitCStyleCastExpr(CStyleCastExpr expr)
        {
            var _expr = new AST.CStyleCastExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.CastKind = (AST.CastKind) expr.CastKind;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            _expr.CastKindName = expr.CastKindName;
            _expr.SubExprAsWritten = VisitExpression(expr.SubExprAsWritten) as AST.Expr;
            _expr.ConversionFunction = VisitDeclaration(expr.ConversionFunction) as AST.Declaration;
            _expr.PathEmpty = expr.PathEmpty;
            _expr.PathSize = expr.PathSize;
            _expr.TypeAsWritten = VisitQualifiedType(expr.TypeAsWritten);
            _expr.LParenLoc = VisitSourceLocation(expr.LParenLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            return _expr;
        }

        public override AST.Expr VisitBinaryOperator(BinaryOperator expr)
        {
            var _expr = new AST.BinaryOperator();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.Opcode = (AST.BinaryOperatorKind) expr.Opcode;
            _expr.LHS = VisitExpression(expr.LHS) as AST.Expr;
            _expr.RHS = VisitExpression(expr.RHS) as AST.Expr;
            _expr.OpcodeStr = expr.OpcodeStr;
            _expr.IsPtrMemOp = expr.IsPtrMemOp;
            _expr.IsMultiplicativeOp = expr.IsMultiplicativeOp;
            _expr.IsAdditiveOp = expr.IsAdditiveOp;
            _expr.IsShiftOp = expr.IsShiftOp;
            _expr.IsBitwiseOp = expr.IsBitwiseOp;
            _expr.IsRelationalOp = expr.IsRelationalOp;
            _expr.IsEqualityOp = expr.IsEqualityOp;
            _expr.IsComparisonOp = expr.IsComparisonOp;
            _expr.IsLogicalOp = expr.IsLogicalOp;
            _expr.IsAssignmentOp = expr.IsAssignmentOp;
            _expr.IsCompoundAssignmentOp = expr.IsCompoundAssignmentOp;
            _expr.IsShiftAssignOp = expr.IsShiftAssignOp;
            _expr.IsFPContractableWithinStatement = expr.IsFPContractableWithinStatement;
            _expr.IsFEnvAccessOn = expr.IsFEnvAccessOn;
            return _expr;
        }

        public override AST.Expr VisitCompoundAssignOperator(CompoundAssignOperator expr)
        {
            var _expr = new AST.CompoundAssignOperator();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.Opcode = (AST.BinaryOperatorKind) expr.Opcode;
            _expr.LHS = VisitExpression(expr.LHS) as AST.Expr;
            _expr.RHS = VisitExpression(expr.RHS) as AST.Expr;
            _expr.OpcodeStr = expr.OpcodeStr;
            _expr.IsPtrMemOp = expr.IsPtrMemOp;
            _expr.IsMultiplicativeOp = expr.IsMultiplicativeOp;
            _expr.IsAdditiveOp = expr.IsAdditiveOp;
            _expr.IsShiftOp = expr.IsShiftOp;
            _expr.IsBitwiseOp = expr.IsBitwiseOp;
            _expr.IsRelationalOp = expr.IsRelationalOp;
            _expr.IsEqualityOp = expr.IsEqualityOp;
            _expr.IsComparisonOp = expr.IsComparisonOp;
            _expr.IsLogicalOp = expr.IsLogicalOp;
            _expr.IsAssignmentOp = expr.IsAssignmentOp;
            _expr.IsCompoundAssignmentOp = expr.IsCompoundAssignmentOp;
            _expr.IsShiftAssignOp = expr.IsShiftAssignOp;
            _expr.IsFPContractableWithinStatement = expr.IsFPContractableWithinStatement;
            _expr.IsFEnvAccessOn = expr.IsFEnvAccessOn;
            _expr.ComputationLHSType = VisitQualifiedType(expr.ComputationLHSType);
            _expr.ComputationResultType = VisitQualifiedType(expr.ComputationResultType);
            return _expr;
        }

        public override AST.Expr VisitConditionalOperator(ConditionalOperator expr)
        {
            var _expr = new AST.ConditionalOperator();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Cond = VisitExpression(expr.Cond) as AST.Expr;
            _expr.TrueExpr = VisitExpression(expr.TrueExpr) as AST.Expr;
            _expr.FalseExpr = VisitExpression(expr.FalseExpr) as AST.Expr;
            _expr.QuestionLoc = VisitSourceLocation(expr.QuestionLoc);
            _expr.ColonLoc = VisitSourceLocation(expr.ColonLoc);
            _expr.LHS = VisitExpression(expr.LHS) as AST.Expr;
            _expr.RHS = VisitExpression(expr.RHS) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitBinaryConditionalOperator(BinaryConditionalOperator expr)
        {
            var _expr = new AST.BinaryConditionalOperator();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Cond = VisitExpression(expr.Cond) as AST.Expr;
            _expr.TrueExpr = VisitExpression(expr.TrueExpr) as AST.Expr;
            _expr.FalseExpr = VisitExpression(expr.FalseExpr) as AST.Expr;
            _expr.QuestionLoc = VisitSourceLocation(expr.QuestionLoc);
            _expr.ColonLoc = VisitSourceLocation(expr.ColonLoc);
            _expr.Common = VisitExpression(expr.Common) as AST.Expr;
            _expr.OpaqueValue = VisitExpression(expr.OpaqueValue) as AST.OpaqueValueExpr;
            return _expr;
        }

        public override AST.Expr VisitAddrLabelExpr(AddrLabelExpr expr)
        {
            var _expr = new AST.AddrLabelExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.AmpAmpLoc = VisitSourceLocation(expr.AmpAmpLoc);
            _expr.LabelLoc = VisitSourceLocation(expr.LabelLoc);
            return _expr;
        }

        public override AST.Expr VisitStmtExpr(StmtExpr expr)
        {
            var _expr = new AST.StmtExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.SubStmt = VisitStatement(expr.SubStmt) as AST.CompoundStmt;
            _expr.LParenLoc = VisitSourceLocation(expr.LParenLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            return _expr;
        }

        public override AST.Expr VisitShuffleVectorExpr(ShuffleVectorExpr expr)
        {
            var _expr = new AST.ShuffleVectorExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.BuiltinLoc = VisitSourceLocation(expr.BuiltinLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.NumSubExprs = expr.NumSubExprs;
            return _expr;
        }

        public override AST.Expr VisitConvertVectorExpr(ConvertVectorExpr expr)
        {
            var _expr = new AST.ConvertVectorExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.SrcExpr = VisitExpression(expr.SrcExpr) as AST.Expr;
            _expr.BuiltinLoc = VisitSourceLocation(expr.BuiltinLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            return _expr;
        }

        public override AST.Expr VisitChooseExpr(ChooseExpr expr)
        {
            var _expr = new AST.ChooseExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.IsConditionTrue = expr.IsConditionTrue;
            _expr.Cond = VisitExpression(expr.Cond) as AST.Expr;
            _expr.LHS = VisitExpression(expr.LHS) as AST.Expr;
            _expr.RHS = VisitExpression(expr.RHS) as AST.Expr;
            _expr.BuiltinLoc = VisitSourceLocation(expr.BuiltinLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.IsConditionDependent = expr.IsConditionDependent;
            _expr.ChosenSubExpr = VisitExpression(expr.ChosenSubExpr) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitGNUNullExpr(GNUNullExpr expr)
        {
            var _expr = new AST.GNUNullExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.TokenLocation = VisitSourceLocation(expr.TokenLocation);
            return _expr;
        }

        public override AST.Expr VisitVAArgExpr(VAArgExpr expr)
        {
            var _expr = new AST.VAArgExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            _expr.IsMicrosoftABI = expr.IsMicrosoftABI;
            _expr.BuiltinLoc = VisitSourceLocation(expr.BuiltinLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            return _expr;
        }

        public override AST.Expr VisitInitListExpr(InitListExpr expr)
        {
            var _expr = new AST.InitListExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.ArrayFiller = VisitExpression(expr.ArrayFiller) as AST.Expr;
            _expr.LBraceLoc = VisitSourceLocation(expr.LBraceLoc);
            _expr.RBraceLoc = VisitSourceLocation(expr.RBraceLoc);
            _expr.SyntacticForm = VisitExpression(expr.SyntacticForm) as AST.InitListExpr;
            _expr.NumInits = expr.NumInits;
            _expr.HasArrayFiller = expr.HasArrayFiller;
            _expr.IsExplicit = expr.IsExplicit;
            _expr.IsStringLiteralInit = expr.IsStringLiteralInit;
            _expr.IsTransparent = expr.IsTransparent;
            _expr.IsSemanticForm = expr.IsSemanticForm;
            _expr.SemanticForm = VisitExpression(expr.SemanticForm) as AST.InitListExpr;
            _expr.IsSyntacticForm = expr.IsSyntacticForm;
            return _expr;
        }

        public override AST.Expr VisitDesignatedInitExpr(DesignatedInitExpr expr)
        {
            var _expr = new AST.DesignatedInitExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.EqualOrColonLoc = VisitSourceLocation(expr.EqualOrColonLoc);
            _expr.Init = VisitExpression(expr.Init) as AST.Expr;
            _expr.Size = expr.Size;
            _expr.UsesGNUSyntax = expr.UsesGNUSyntax;
            _expr.NumSubExprs = expr.NumSubExprs;
            _expr.DesignatorsSourceRange = VisitSourceRange(expr.DesignatorsSourceRange);
            return _expr;
        }

        public override AST.Expr VisitNoInitExpr(NoInitExpr expr)
        {
            var _expr = new AST.NoInitExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            return _expr;
        }

        public override AST.Expr VisitDesignatedInitUpdateExpr(DesignatedInitUpdateExpr expr)
        {
            var _expr = new AST.DesignatedInitUpdateExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Base = VisitExpression(expr.Base) as AST.Expr;
            _expr.Updater = VisitExpression(expr.Updater) as AST.InitListExpr;
            return _expr;
        }

        public override AST.Expr VisitArrayInitLoopExpr(ArrayInitLoopExpr expr)
        {
            var _expr = new AST.ArrayInitLoopExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.CommonExpr = VisitExpression(expr.CommonExpr) as AST.OpaqueValueExpr;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitArrayInitIndexExpr(ArrayInitIndexExpr expr)
        {
            var _expr = new AST.ArrayInitIndexExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            return _expr;
        }

        public override AST.Expr VisitImplicitValueInitExpr(ImplicitValueInitExpr expr)
        {
            var _expr = new AST.ImplicitValueInitExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            return _expr;
        }

        public override AST.Expr VisitParenListExpr(ParenListExpr expr)
        {
            var _expr = new AST.ParenListExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.NumExprs = expr.NumExprs;
            _expr.LParenLoc = VisitSourceLocation(expr.LParenLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            return _expr;
        }

        public override AST.Expr VisitGenericSelectionExpr(GenericSelectionExpr expr)
        {
            var _expr = new AST.GenericSelectionExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.NumAssocs = expr.NumAssocs;
            _expr.GenericLoc = VisitSourceLocation(expr.GenericLoc);
            _expr.DefaultLoc = VisitSourceLocation(expr.DefaultLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.ControllingExpr = VisitExpression(expr.ControllingExpr) as AST.Expr;
            _expr.IsResultDependent = expr.IsResultDependent;
            _expr.ResultIndex = expr.ResultIndex;
            _expr.ResultExpr = VisitExpression(expr.ResultExpr) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitExtVectorElementExpr(ExtVectorElementExpr expr)
        {
            var _expr = new AST.ExtVectorElementExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Base = VisitExpression(expr.Base) as AST.Expr;
            _expr.AccessorLoc = VisitSourceLocation(expr.AccessorLoc);
            _expr.NumElements = expr.NumElements;
            _expr.ContainsDuplicateElements = expr.ContainsDuplicateElements;
            _expr.IsArrow = expr.IsArrow;
            return _expr;
        }

        public override AST.Expr VisitBlockExpr(BlockExpr expr)
        {
            var _expr = new AST.BlockExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.CaretLocation = VisitSourceLocation(expr.CaretLocation);
            _expr.Body = VisitStatement(expr.Body) as AST.Stmt;
            return _expr;
        }

        public override AST.Expr VisitAsTypeExpr(AsTypeExpr expr)
        {
            var _expr = new AST.AsTypeExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.SrcExpr = VisitExpression(expr.SrcExpr) as AST.Expr;
            _expr.BuiltinLoc = VisitSourceLocation(expr.BuiltinLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            return _expr;
        }

        public override AST.Expr VisitPseudoObjectExpr(PseudoObjectExpr expr)
        {
            var _expr = new AST.PseudoObjectExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.SyntacticForm = VisitExpression(expr.SyntacticForm) as AST.Expr;
            _expr.ResultExprIndex = expr.ResultExprIndex;
            _expr.ResultExpr = VisitExpression(expr.ResultExpr) as AST.Expr;
            _expr.NumSemanticExprs = expr.NumSemanticExprs;
            return _expr;
        }

        public override AST.Expr VisitAtomicExpr(AtomicExpr expr)
        {
            var _expr = new AST.AtomicExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Ptr = VisitExpression(expr.Ptr) as AST.Expr;
            _expr.Order = VisitExpression(expr.Order) as AST.Expr;
            _expr.Scope = VisitExpression(expr.Scope) as AST.Expr;
            _expr.Val1 = VisitExpression(expr.Val1) as AST.Expr;
            _expr.OrderFail = VisitExpression(expr.OrderFail) as AST.Expr;
            _expr.Val2 = VisitExpression(expr.Val2) as AST.Expr;
            _expr.Weak = VisitExpression(expr.Weak) as AST.Expr;
            _expr.ValueType = VisitQualifiedType(expr.ValueType);
            _expr.Op = (AST.AtomicExpr.AtomicOp) expr.Op;
            _expr.NumSubExprs = expr.NumSubExprs;
            _expr.IsVolatile = expr.IsVolatile;
            _expr.IsCmpXChg = expr.IsCmpXChg;
            _expr.IsOpenCL = expr.IsOpenCL;
            _expr.BuiltinLoc = VisitSourceLocation(expr.BuiltinLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            return _expr;
        }

        public override AST.Expr VisitTypoExpr(TypoExpr expr)
        {
            var _expr = new AST.TypoExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            return _expr;
        }

        public override AST.Expr VisitCXXOperatorCallExpr(CXXOperatorCallExpr expr)
        {
            var _expr = new AST.CXXOperatorCallExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Callee = VisitExpression(expr.Callee) as AST.Expr;
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.CalleeDecl = VisitDeclaration(expr.CalleeDecl) as AST.Declaration;
            _expr.DirectCallee = VisitDeclaration(expr.DirectCallee) as AST.Function;
            _expr.NumArgs = expr.NumArgs;
            _expr.NumCommas = expr.NumCommas;
            _expr.BuiltinCallee = expr.BuiltinCallee;
            _expr.IsCallToStdMove = expr.IsCallToStdMove;
            for (uint i = 0; i < expr.GetargumentsCount; i++)
            {
                var _E = expr.Getarguments(i);
                _expr.Arguments.Add(VisitExpression(_E) as AST.Expr);
            }
            _expr.Operator = (AST.OverloadedOperatorKind) expr.Operator;
            _expr.IsAssignmentOp = expr.IsAssignmentOp;
            _expr.IsInfixBinaryOp = expr.IsInfixBinaryOp;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.IsFPContractableWithinStatement = expr.IsFPContractableWithinStatement;
            return _expr;
        }

        public override AST.Expr VisitCXXMemberCallExpr(CXXMemberCallExpr expr)
        {
            var _expr = new AST.CXXMemberCallExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Callee = VisitExpression(expr.Callee) as AST.Expr;
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.CalleeDecl = VisitDeclaration(expr.CalleeDecl) as AST.Declaration;
            _expr.DirectCallee = VisitDeclaration(expr.DirectCallee) as AST.Function;
            _expr.NumArgs = expr.NumArgs;
            _expr.NumCommas = expr.NumCommas;
            _expr.BuiltinCallee = expr.BuiltinCallee;
            _expr.IsCallToStdMove = expr.IsCallToStdMove;
            for (uint i = 0; i < expr.GetargumentsCount; i++)
            {
                var _E = expr.Getarguments(i);
                _expr.Arguments.Add(VisitExpression(_E) as AST.Expr);
            }
            _expr.ImplicitObjectArgument = VisitExpression(expr.ImplicitObjectArgument) as AST.Expr;
            _expr.MethodDecl = VisitDeclaration(expr.MethodDecl) as AST.Method;
            return _expr;
        }

        public override AST.Expr VisitCUDAKernelCallExpr(CUDAKernelCallExpr expr)
        {
            var _expr = new AST.CUDAKernelCallExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Callee = VisitExpression(expr.Callee) as AST.Expr;
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.CalleeDecl = VisitDeclaration(expr.CalleeDecl) as AST.Declaration;
            _expr.DirectCallee = VisitDeclaration(expr.DirectCallee) as AST.Function;
            _expr.NumArgs = expr.NumArgs;
            _expr.NumCommas = expr.NumCommas;
            _expr.BuiltinCallee = expr.BuiltinCallee;
            _expr.IsCallToStdMove = expr.IsCallToStdMove;
            for (uint i = 0; i < expr.GetargumentsCount; i++)
            {
                var _E = expr.Getarguments(i);
                _expr.Arguments.Add(VisitExpression(_E) as AST.Expr);
            }
            _expr.Config = VisitExpression(expr.Config) as AST.CallExpr;
            return _expr;
        }

        public override AST.Expr VisitCXXStaticCastExpr(CXXStaticCastExpr expr)
        {
            var _expr = new AST.CXXStaticCastExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.CastKind = (AST.CastKind) expr.CastKind;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            _expr.CastKindName = expr.CastKindName;
            _expr.SubExprAsWritten = VisitExpression(expr.SubExprAsWritten) as AST.Expr;
            _expr.ConversionFunction = VisitDeclaration(expr.ConversionFunction) as AST.Declaration;
            _expr.PathEmpty = expr.PathEmpty;
            _expr.PathSize = expr.PathSize;
            _expr.TypeAsWritten = VisitQualifiedType(expr.TypeAsWritten);
            _expr.CastName = expr.CastName;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.AngleBrackets = VisitSourceRange(expr.AngleBrackets);
            return _expr;
        }

        public override AST.Expr VisitCXXDynamicCastExpr(CXXDynamicCastExpr expr)
        {
            var _expr = new AST.CXXDynamicCastExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.CastKind = (AST.CastKind) expr.CastKind;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            _expr.CastKindName = expr.CastKindName;
            _expr.SubExprAsWritten = VisitExpression(expr.SubExprAsWritten) as AST.Expr;
            _expr.ConversionFunction = VisitDeclaration(expr.ConversionFunction) as AST.Declaration;
            _expr.PathEmpty = expr.PathEmpty;
            _expr.PathSize = expr.PathSize;
            _expr.TypeAsWritten = VisitQualifiedType(expr.TypeAsWritten);
            _expr.CastName = expr.CastName;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.AngleBrackets = VisitSourceRange(expr.AngleBrackets);
            _expr.IsAlwaysNull = expr.IsAlwaysNull;
            return _expr;
        }

        public override AST.Expr VisitCXXReinterpretCastExpr(CXXReinterpretCastExpr expr)
        {
            var _expr = new AST.CXXReinterpretCastExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.CastKind = (AST.CastKind) expr.CastKind;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            _expr.CastKindName = expr.CastKindName;
            _expr.SubExprAsWritten = VisitExpression(expr.SubExprAsWritten) as AST.Expr;
            _expr.ConversionFunction = VisitDeclaration(expr.ConversionFunction) as AST.Declaration;
            _expr.PathEmpty = expr.PathEmpty;
            _expr.PathSize = expr.PathSize;
            _expr.TypeAsWritten = VisitQualifiedType(expr.TypeAsWritten);
            _expr.CastName = expr.CastName;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.AngleBrackets = VisitSourceRange(expr.AngleBrackets);
            return _expr;
        }

        public override AST.Expr VisitCXXConstCastExpr(CXXConstCastExpr expr)
        {
            var _expr = new AST.CXXConstCastExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.CastKind = (AST.CastKind) expr.CastKind;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            _expr.CastKindName = expr.CastKindName;
            _expr.SubExprAsWritten = VisitExpression(expr.SubExprAsWritten) as AST.Expr;
            _expr.ConversionFunction = VisitDeclaration(expr.ConversionFunction) as AST.Declaration;
            _expr.PathEmpty = expr.PathEmpty;
            _expr.PathSize = expr.PathSize;
            _expr.TypeAsWritten = VisitQualifiedType(expr.TypeAsWritten);
            _expr.CastName = expr.CastName;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.AngleBrackets = VisitSourceRange(expr.AngleBrackets);
            return _expr;
        }

        public override AST.Expr VisitUserDefinedLiteral(UserDefinedLiteral expr)
        {
            var _expr = new AST.UserDefinedLiteral();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Callee = VisitExpression(expr.Callee) as AST.Expr;
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.CalleeDecl = VisitDeclaration(expr.CalleeDecl) as AST.Declaration;
            _expr.DirectCallee = VisitDeclaration(expr.DirectCallee) as AST.Function;
            _expr.NumArgs = expr.NumArgs;
            _expr.NumCommas = expr.NumCommas;
            _expr.BuiltinCallee = expr.BuiltinCallee;
            _expr.IsCallToStdMove = expr.IsCallToStdMove;
            for (uint i = 0; i < expr.GetargumentsCount; i++)
            {
                var _E = expr.Getarguments(i);
                _expr.Arguments.Add(VisitExpression(_E) as AST.Expr);
            }
            _expr.literalOperatorKind = (AST.UserDefinedLiteral.LiteralOperatorKind) expr.literalOperatorKind;
            _expr.CookedLiteral = VisitExpression(expr.CookedLiteral) as AST.Expr;
            _expr.UDSuffixLoc = VisitSourceLocation(expr.UDSuffixLoc);
            return _expr;
        }

        public override AST.Expr VisitCXXBoolLiteralExpr(CXXBoolLiteralExpr expr)
        {
            var _expr = new AST.CXXBoolLiteralExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Value = expr.Value;
            _expr.Location = VisitSourceLocation(expr.Location);
            return _expr;
        }

        public override AST.Expr VisitCXXNullPtrLiteralExpr(CXXNullPtrLiteralExpr expr)
        {
            var _expr = new AST.CXXNullPtrLiteralExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Location = VisitSourceLocation(expr.Location);
            return _expr;
        }

        public override AST.Expr VisitCXXStdInitializerListExpr(CXXStdInitializerListExpr expr)
        {
            var _expr = new AST.CXXStdInitializerListExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitCXXTypeidExpr(CXXTypeidExpr expr)
        {
            var _expr = new AST.CXXTypeidExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.ExprOperand = VisitExpression(expr.ExprOperand) as AST.Expr;
            _expr.IsPotentiallyEvaluated = expr.IsPotentiallyEvaluated;
            _expr.IsTypeOperand = expr.IsTypeOperand;
            return _expr;
        }

        public override AST.Expr VisitMSPropertyRefExpr(MSPropertyRefExpr expr)
        {
            var _expr = new AST.MSPropertyRefExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.IsImplicitAccess = expr.IsImplicitAccess;
            _expr.BaseExpr = VisitExpression(expr.BaseExpr) as AST.Expr;
            _expr.IsArrow = expr.IsArrow;
            _expr.MemberLoc = VisitSourceLocation(expr.MemberLoc);
            return _expr;
        }

        public override AST.Expr VisitMSPropertySubscriptExpr(MSPropertySubscriptExpr expr)
        {
            var _expr = new AST.MSPropertySubscriptExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.RBracketLoc = VisitSourceLocation(expr.RBracketLoc);
            _expr.Base = VisitExpression(expr.Base) as AST.Expr;
            _expr.Idx = VisitExpression(expr.Idx) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitCXXUuidofExpr(CXXUuidofExpr expr)
        {
            var _expr = new AST.CXXUuidofExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.ExprOperand = VisitExpression(expr.ExprOperand) as AST.Expr;
            _expr.UuidStr = expr.UuidStr;
            _expr.IsTypeOperand = expr.IsTypeOperand;
            return _expr;
        }

        public override AST.Expr VisitCXXThisExpr(CXXThisExpr expr)
        {
            var _expr = new AST.CXXThisExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Location = VisitSourceLocation(expr.Location);
            _expr.Implicit = expr.Implicit;
            return _expr;
        }

        public override AST.Expr VisitCXXThrowExpr(CXXThrowExpr expr)
        {
            var _expr = new AST.CXXThrowExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            _expr.ThrowLoc = VisitSourceLocation(expr.ThrowLoc);
            _expr.IsThrownVariableInScope = expr.IsThrownVariableInScope;
            return _expr;
        }

        public override AST.Expr VisitCXXDefaultArgExpr(CXXDefaultArgExpr expr)
        {
            var _expr = new AST.CXXDefaultArgExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Expr = VisitExpression(expr.Expr) as AST.Expr;
            _expr.UsedLocation = VisitSourceLocation(expr.UsedLocation);
            return _expr;
        }

        public override AST.Expr VisitCXXDefaultInitExpr(CXXDefaultInitExpr expr)
        {
            var _expr = new AST.CXXDefaultInitExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Field = VisitDeclaration(expr.Field) as AST.Field;
            _expr.Expr = VisitExpression(expr.Expr) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitCXXBindTemporaryExpr(CXXBindTemporaryExpr expr)
        {
            var _expr = new AST.CXXBindTemporaryExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitCXXConstructExpr(CXXConstructExpr expr)
        {
            var _expr = new AST.CXXConstructExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Location = VisitSourceLocation(expr.Location);
            _expr.Elidable = expr.Elidable;
            _expr.HadMultipleCandidates = expr.HadMultipleCandidates;
            _expr.ListInitialization = expr.ListInitialization;
            _expr.StdInitListInitialization = expr.StdInitListInitialization;
            _expr.RequiresZeroInitialization = expr.RequiresZeroInitialization;
            _expr.ParenOrBraceRange = VisitSourceRange(expr.ParenOrBraceRange);
            _expr.NumArgs = expr.NumArgs;
            for (uint i = 0; i < expr.GetargumentsCount; i++)
            {
                var _E = expr.Getarguments(i);
                _expr.Arguments.Add(VisitExpression(_E) as AST.Expr);
            }
            return _expr;
        }

        public override AST.Expr VisitCXXInheritedCtorInitExpr(CXXInheritedCtorInitExpr expr)
        {
            var _expr = new AST.CXXInheritedCtorInitExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.ConstructsVBase = expr.ConstructsVBase;
            _expr.InheritedFromVBase = expr.InheritedFromVBase;
            _expr.Location = VisitSourceLocation(expr.Location);
            return _expr;
        }

        public override AST.Expr VisitCXXFunctionalCastExpr(CXXFunctionalCastExpr expr)
        {
            var _expr = new AST.CXXFunctionalCastExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.CastKind = (AST.CastKind) expr.CastKind;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            _expr.CastKindName = expr.CastKindName;
            _expr.SubExprAsWritten = VisitExpression(expr.SubExprAsWritten) as AST.Expr;
            _expr.ConversionFunction = VisitDeclaration(expr.ConversionFunction) as AST.Declaration;
            _expr.PathEmpty = expr.PathEmpty;
            _expr.PathSize = expr.PathSize;
            _expr.TypeAsWritten = VisitQualifiedType(expr.TypeAsWritten);
            _expr.LParenLoc = VisitSourceLocation(expr.LParenLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.IsListInitialization = expr.IsListInitialization;
            return _expr;
        }

        public override AST.Expr VisitCXXTemporaryObjectExpr(CXXTemporaryObjectExpr expr)
        {
            var _expr = new AST.CXXTemporaryObjectExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Location = VisitSourceLocation(expr.Location);
            _expr.Elidable = expr.Elidable;
            _expr.HadMultipleCandidates = expr.HadMultipleCandidates;
            _expr.ListInitialization = expr.ListInitialization;
            _expr.StdInitListInitialization = expr.StdInitListInitialization;
            _expr.RequiresZeroInitialization = expr.RequiresZeroInitialization;
            _expr.ParenOrBraceRange = VisitSourceRange(expr.ParenOrBraceRange);
            _expr.NumArgs = expr.NumArgs;
            for (uint i = 0; i < expr.GetargumentsCount; i++)
            {
                var _E = expr.Getarguments(i);
                _expr.Arguments.Add(VisitExpression(_E) as AST.Expr);
            }
            return _expr;
        }

        public override AST.Expr VisitLambdaExpr(LambdaExpr expr)
        {
            var _expr = new AST.LambdaExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.CaptureDefaultLoc = VisitSourceLocation(expr.CaptureDefaultLoc);
            _expr.CaptureSize = expr.CaptureSize;
            _expr.IntroducerRange = VisitSourceRange(expr.IntroducerRange);
            _expr.CallOperator = VisitDeclaration(expr.CallOperator) as AST.Method;
            _expr.IsGenericLambda = expr.IsGenericLambda;
            _expr.Body = VisitStatement(expr.Body) as AST.CompoundStmt;
            _expr.IsMutable = expr.IsMutable;
            _expr.HasExplicitParameters = expr.HasExplicitParameters;
            _expr.HasExplicitResultType = expr.HasExplicitResultType;
            for (uint i = 0; i < expr.GetcaptureInitsCount; i++)
            {
                var _E = expr.GetcaptureInits(i);
                _expr.CaptureInits.Add(VisitExpression(_E) as AST.Expr);
            }
            return _expr;
        }

        public override AST.Expr VisitCXXScalarValueInitExpr(CXXScalarValueInitExpr expr)
        {
            var _expr = new AST.CXXScalarValueInitExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            return _expr;
        }

        public override AST.Expr VisitCXXNewExpr(CXXNewExpr expr)
        {
            var _expr = new AST.CXXNewExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.OperatorNew = VisitDeclaration(expr.OperatorNew) as AST.Function;
            _expr.OperatorDelete = VisitDeclaration(expr.OperatorDelete) as AST.Function;
            _expr.AllocatedType = VisitQualifiedType(expr.AllocatedType);
            _expr.IsArray = expr.IsArray;
            _expr.ArraySize = VisitExpression(expr.ArraySize) as AST.Expr;
            _expr.NumPlacementArgs = expr.NumPlacementArgs;
            _expr.IsParenTypeId = expr.IsParenTypeId;
            _expr.TypeIdParens = VisitSourceRange(expr.TypeIdParens);
            _expr.IsGlobalNew = expr.IsGlobalNew;
            _expr.HasInitializer = expr.HasInitializer;
            _expr.initializationStyle = (AST.CXXNewExpr.InitializationStyle) expr.initializationStyle;
            _expr.Initializer = VisitExpression(expr.Initializer) as AST.Expr;
            _expr.ConstructExpr = VisitExpression(expr.ConstructExpr) as AST.CXXConstructExpr;
            _expr.DirectInitRange = VisitSourceRange(expr.DirectInitRange);
            for (uint i = 0; i < expr.GetplacementArgumentsCount; i++)
            {
                var _E = expr.GetplacementArguments(i);
                _expr.PlacementArguments.Add(VisitExpression(_E) as AST.Expr);
            }
            return _expr;
        }

        public override AST.Expr VisitCXXDeleteExpr(CXXDeleteExpr expr)
        {
            var _expr = new AST.CXXDeleteExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.IsGlobalDelete = expr.IsGlobalDelete;
            _expr.IsArrayForm = expr.IsArrayForm;
            _expr.IsArrayFormAsWritten = expr.IsArrayFormAsWritten;
            _expr.OperatorDelete = VisitDeclaration(expr.OperatorDelete) as AST.Function;
            _expr.Argument = VisitExpression(expr.Argument) as AST.Expr;
            _expr.DestroyedType = VisitQualifiedType(expr.DestroyedType);
            return _expr;
        }

        public override AST.Expr VisitCXXPseudoDestructorExpr(CXXPseudoDestructorExpr expr)
        {
            var _expr = new AST.CXXPseudoDestructorExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Base = VisitExpression(expr.Base) as AST.Expr;
            _expr.HasQualifier = expr.HasQualifier;
            _expr.IsArrow = expr.IsArrow;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.ColonColonLoc = VisitSourceLocation(expr.ColonColonLoc);
            _expr.TildeLoc = VisitSourceLocation(expr.TildeLoc);
            _expr.DestroyedType = VisitQualifiedType(expr.DestroyedType);
            _expr.DestroyedTypeLoc = VisitSourceLocation(expr.DestroyedTypeLoc);
            return _expr;
        }

        public override AST.Expr VisitTypeTraitExpr(TypeTraitExpr expr)
        {
            var _expr = new AST.TypeTraitExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Value = expr.Value;
            _expr.NumArgs = expr.NumArgs;
            return _expr;
        }

        public override AST.Expr VisitArrayTypeTraitExpr(ArrayTypeTraitExpr expr)
        {
            var _expr = new AST.ArrayTypeTraitExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.QueriedType = VisitQualifiedType(expr.QueriedType);
            _expr.Value = expr.Value;
            _expr.DimensionExpression = VisitExpression(expr.DimensionExpression) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitExpressionTraitExpr(ExpressionTraitExpr expr)
        {
            var _expr = new AST.ExpressionTraitExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.QueriedExpression = VisitExpression(expr.QueriedExpression) as AST.Expr;
            _expr.Value = expr.Value;
            return _expr;
        }

        public override AST.Expr VisitUnresolvedLookupExpr(UnresolvedLookupExpr expr)
        {
            var _expr = new AST.UnresolvedLookupExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.NumDecls = expr.NumDecls;
            _expr.NameLoc = VisitSourceLocation(expr.NameLoc);
            _expr.TemplateKeywordLoc = VisitSourceLocation(expr.TemplateKeywordLoc);
            _expr.LAngleLoc = VisitSourceLocation(expr.LAngleLoc);
            _expr.RAngleLoc = VisitSourceLocation(expr.RAngleLoc);
            _expr.HasTemplateKeyword = expr.HasTemplateKeyword;
            _expr.HasExplicitTemplateArgs = expr.HasExplicitTemplateArgs;
            _expr.NumTemplateArgs = expr.NumTemplateArgs;
            _expr.RequiresADL = expr.RequiresADL;
            _expr.IsOverloaded = expr.IsOverloaded;
            return _expr;
        }

        public override AST.Expr VisitDependentScopeDeclRefExpr(DependentScopeDeclRefExpr expr)
        {
            var _expr = new AST.DependentScopeDeclRefExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Location = VisitSourceLocation(expr.Location);
            _expr.TemplateKeywordLoc = VisitSourceLocation(expr.TemplateKeywordLoc);
            _expr.LAngleLoc = VisitSourceLocation(expr.LAngleLoc);
            _expr.RAngleLoc = VisitSourceLocation(expr.RAngleLoc);
            _expr.HasTemplateKeyword = expr.HasTemplateKeyword;
            _expr.HasExplicitTemplateArgs = expr.HasExplicitTemplateArgs;
            _expr.NumTemplateArgs = expr.NumTemplateArgs;
            return _expr;
        }

        public override AST.Expr VisitExprWithCleanups(ExprWithCleanups expr)
        {
            var _expr = new AST.ExprWithCleanups();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.SubExpr = VisitExpression(expr.SubExpr) as AST.Expr;
            _expr.NumObjects = expr.NumObjects;
            _expr.CleanupsHaveSideEffects = expr.CleanupsHaveSideEffects;
            return _expr;
        }

        public override AST.Expr VisitCXXUnresolvedConstructExpr(CXXUnresolvedConstructExpr expr)
        {
            var _expr = new AST.CXXUnresolvedConstructExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.LParenLoc = VisitSourceLocation(expr.LParenLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.TypeAsWritten = VisitQualifiedType(expr.TypeAsWritten);
            _expr.IsListInitialization = expr.IsListInitialization;
            _expr.ArgSize = expr.ArgSize;
            for (uint i = 0; i < expr.GetargumentsCount; i++)
            {
                var _E = expr.Getarguments(i);
                _expr.Arguments.Add(VisitExpression(_E) as AST.Expr);
            }
            return _expr;
        }

        public override AST.Expr VisitCXXDependentScopeMemberExpr(CXXDependentScopeMemberExpr expr)
        {
            var _expr = new AST.CXXDependentScopeMemberExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.IsImplicitAccess = expr.IsImplicitAccess;
            _expr.Base = VisitExpression(expr.Base) as AST.Expr;
            _expr.BaseType = VisitQualifiedType(expr.BaseType);
            _expr.IsArrow = expr.IsArrow;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.FirstQualifierFoundInScope = VisitDeclaration(expr.FirstQualifierFoundInScope) as AST.Declaration;
            _expr.MemberLoc = VisitSourceLocation(expr.MemberLoc);
            _expr.TemplateKeywordLoc = VisitSourceLocation(expr.TemplateKeywordLoc);
            _expr.LAngleLoc = VisitSourceLocation(expr.LAngleLoc);
            _expr.RAngleLoc = VisitSourceLocation(expr.RAngleLoc);
            _expr.HasTemplateKeyword = expr.HasTemplateKeyword;
            _expr.HasExplicitTemplateArgs = expr.HasExplicitTemplateArgs;
            _expr.NumTemplateArgs = expr.NumTemplateArgs;
            return _expr;
        }

        public override AST.Expr VisitUnresolvedMemberExpr(UnresolvedMemberExpr expr)
        {
            var _expr = new AST.UnresolvedMemberExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.NumDecls = expr.NumDecls;
            _expr.NameLoc = VisitSourceLocation(expr.NameLoc);
            _expr.TemplateKeywordLoc = VisitSourceLocation(expr.TemplateKeywordLoc);
            _expr.LAngleLoc = VisitSourceLocation(expr.LAngleLoc);
            _expr.RAngleLoc = VisitSourceLocation(expr.RAngleLoc);
            _expr.HasTemplateKeyword = expr.HasTemplateKeyword;
            _expr.HasExplicitTemplateArgs = expr.HasExplicitTemplateArgs;
            _expr.NumTemplateArgs = expr.NumTemplateArgs;
            _expr.IsImplicitAccess = expr.IsImplicitAccess;
            _expr.Base = VisitExpression(expr.Base) as AST.Expr;
            _expr.BaseType = VisitQualifiedType(expr.BaseType);
            _expr.HasUnresolvedUsing = expr.HasUnresolvedUsing;
            _expr.IsArrow = expr.IsArrow;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.MemberLoc = VisitSourceLocation(expr.MemberLoc);
            return _expr;
        }

        public override AST.Expr VisitCXXNoexceptExpr(CXXNoexceptExpr expr)
        {
            var _expr = new AST.CXXNoexceptExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Operand = VisitExpression(expr.Operand) as AST.Expr;
            _expr.Value = expr.Value;
            return _expr;
        }

        public override AST.Expr VisitPackExpansionExpr(PackExpansionExpr expr)
        {
            var _expr = new AST.PackExpansionExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Pattern = VisitExpression(expr.Pattern) as AST.Expr;
            _expr.EllipsisLoc = VisitSourceLocation(expr.EllipsisLoc);
            return _expr;
        }

        public override AST.Expr VisitSizeOfPackExpr(SizeOfPackExpr expr)
        {
            var _expr = new AST.SizeOfPackExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.OperatorLoc = VisitSourceLocation(expr.OperatorLoc);
            _expr.PackLoc = VisitSourceLocation(expr.PackLoc);
            _expr.RParenLoc = VisitSourceLocation(expr.RParenLoc);
            _expr.Pack = VisitDeclaration(expr.Pack) as AST.Declaration;
            _expr.PackLength = expr.PackLength;
            _expr.IsPartiallySubstituted = expr.IsPartiallySubstituted;
            return _expr;
        }

        public override AST.Expr VisitSubstNonTypeTemplateParmExpr(SubstNonTypeTemplateParmExpr expr)
        {
            var _expr = new AST.SubstNonTypeTemplateParmExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.NameLoc = VisitSourceLocation(expr.NameLoc);
            _expr.Replacement = VisitExpression(expr.Replacement) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitSubstNonTypeTemplateParmPackExpr(SubstNonTypeTemplateParmPackExpr expr)
        {
            var _expr = new AST.SubstNonTypeTemplateParmPackExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.ParameterPackLocation = VisitSourceLocation(expr.ParameterPackLocation);
            _expr.ArgumentPack = VisitTemplateArgument(expr.ArgumentPack);
            return _expr;
        }

        public override AST.Expr VisitFunctionParmPackExpr(FunctionParmPackExpr expr)
        {
            var _expr = new AST.FunctionParmPackExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.ParameterPackLocation = VisitSourceLocation(expr.ParameterPackLocation);
            _expr.NumExpansions = expr.NumExpansions;
            return _expr;
        }

        public override AST.Expr VisitMaterializeTemporaryExpr(MaterializeTemporaryExpr expr)
        {
            var _expr = new AST.MaterializeTemporaryExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Temporary = VisitStatement(expr.Temporary) as AST.Stmt;
            _expr.TemporaryExpr = VisitExpression(expr.TemporaryExpr) as AST.Expr;
            _expr.ManglingNumber = expr.ManglingNumber;
            _expr.IsBoundToLvalueReference = expr.IsBoundToLvalueReference;
            return _expr;
        }

        public override AST.Expr VisitCXXFoldExpr(CXXFoldExpr expr)
        {
            var _expr = new AST.CXXFoldExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.LHS = VisitExpression(expr.LHS) as AST.Expr;
            _expr.RHS = VisitExpression(expr.RHS) as AST.Expr;
            _expr.IsRightFold = expr.IsRightFold;
            _expr.IsLeftFold = expr.IsLeftFold;
            _expr.Pattern = VisitExpression(expr.Pattern) as AST.Expr;
            _expr.Init = VisitExpression(expr.Init) as AST.Expr;
            _expr.EllipsisLoc = VisitSourceLocation(expr.EllipsisLoc);
            _expr.Operator = (AST.BinaryOperatorKind) expr.Operator;
            return _expr;
        }

        public override AST.Expr VisitCoawaitExpr(CoawaitExpr expr)
        {
            var _expr = new AST.CoawaitExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.KeywordLoc = VisitSourceLocation(expr.KeywordLoc);
            _expr.CommonExpr = VisitExpression(expr.CommonExpr) as AST.Expr;
            _expr.OpaqueValue = VisitExpression(expr.OpaqueValue) as AST.OpaqueValueExpr;
            _expr.ReadyExpr = VisitExpression(expr.ReadyExpr) as AST.Expr;
            _expr.SuspendExpr = VisitExpression(expr.SuspendExpr) as AST.Expr;
            _expr.ResumeExpr = VisitExpression(expr.ResumeExpr) as AST.Expr;
            _expr.IsImplicit = expr.IsImplicit;
            _expr.Operand = VisitExpression(expr.Operand) as AST.Expr;
            return _expr;
        }

        public override AST.Expr VisitDependentCoawaitExpr(DependentCoawaitExpr expr)
        {
            var _expr = new AST.DependentCoawaitExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.Operand = VisitExpression(expr.Operand) as AST.Expr;
            _expr.OperatorCoawaitLookup = VisitExpression(expr.OperatorCoawaitLookup) as AST.UnresolvedLookupExpr;
            _expr.KeywordLoc = VisitSourceLocation(expr.KeywordLoc);
            return _expr;
        }

        public override AST.Expr VisitCoyieldExpr(CoyieldExpr expr)
        {
            var _expr = new AST.CoyieldExpr();
            _expr.SourceRange = VisitSourceRange(expr.SourceRange);
            _expr.EndLoc = VisitSourceLocation(expr.EndLoc);
            _expr.StripLabelLikeStatements = VisitStatement(expr.StripLabelLikeStatements) as AST.Stmt;
            _expr.Type = VisitQualifiedType(expr.Type);
            _expr.ValueDependent = expr.ValueDependent;
            _expr.TypeDependent = expr.TypeDependent;
            _expr.InstantiationDependent = expr.InstantiationDependent;
            _expr.ContainsUnexpandedParameterPack = expr.ContainsUnexpandedParameterPack;
            _expr.ExprLoc = VisitSourceLocation(expr.ExprLoc);
            _expr.IsLValue = expr.IsLValue;
            _expr.IsRValue = expr.IsRValue;
            _expr.IsXValue = expr.IsXValue;
            _expr.IsGLValue = expr.IsGLValue;
            _expr.IsOrdinaryOrBitFieldObject = expr.IsOrdinaryOrBitFieldObject;
            _expr.SourceBitField = VisitDeclaration(expr.SourceBitField) as AST.Field;
            _expr.ReferencedDeclOfCallee = VisitDeclaration(expr.ReferencedDeclOfCallee) as AST.Declaration;
            _expr.HasPlaceholderType = expr.HasPlaceholderType;
            _expr.KeywordLoc = VisitSourceLocation(expr.KeywordLoc);
            _expr.CommonExpr = VisitExpression(expr.CommonExpr) as AST.Expr;
            _expr.OpaqueValue = VisitExpression(expr.OpaqueValue) as AST.OpaqueValueExpr;
            _expr.ReadyExpr = VisitExpression(expr.ReadyExpr) as AST.Expr;
            _expr.SuspendExpr = VisitExpression(expr.SuspendExpr) as AST.Expr;
            _expr.ResumeExpr = VisitExpression(expr.ResumeExpr) as AST.Expr;
            _expr.Operand = VisitExpression(expr.Operand) as AST.Expr;
            return _expr;
        }
    }
}
