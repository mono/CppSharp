// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------

namespace CppSharp.AST
{
    public abstract partial class AstVisitor
    {
        public virtual bool VisitDeclStmt(DeclStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitNullStmt(NullStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCompoundStmt(CompoundStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitSwitchCase(SwitchCase stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCaseStmt(CaseStmt stmt)
        {
            if (!VisitSwitchCase(stmt))
                return false;

            return true;
        }

        public virtual bool VisitDefaultStmt(DefaultStmt stmt)
        {
            if (!VisitSwitchCase(stmt))
                return false;

            return true;
        }

        public virtual bool VisitLabelStmt(LabelStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitAttributedStmt(AttributedStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitIfStmt(IfStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitSwitchStmt(SwitchStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitWhileStmt(WhileStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitDoStmt(DoStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitForStmt(ForStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitGotoStmt(GotoStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitIndirectGotoStmt(IndirectGotoStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitContinueStmt(ContinueStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitBreakStmt(BreakStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitReturnStmt(ReturnStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitAsmStmt(AsmStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitGCCAsmStmt(GCCAsmStmt stmt)
        {
            if (!VisitAsmStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitMSAsmStmt(MSAsmStmt stmt)
        {
            if (!VisitAsmStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitSEHExceptStmt(SEHExceptStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitSEHFinallyStmt(SEHFinallyStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitSEHTryStmt(SEHTryStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitSEHLeaveStmt(SEHLeaveStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCapturedStmt(CapturedStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXCatchStmt(CXXCatchStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXTryStmt(CXXTryStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXForRangeStmt(CXXForRangeStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitMSDependentExistsStmt(MSDependentExistsStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCoroutineBodyStmt(CoroutineBodyStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCoreturnStmt(CoreturnStmt stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitExpr(Expr stmt)
        {
            if (!VisitStmt(stmt))
                return false;

            return true;
        }

        public virtual bool VisitFullExpr(FullExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitConstantExpr(ConstantExpr stmt)
        {
            if (!VisitFullExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitOpaqueValueExpr(OpaqueValueExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitDeclRefExpr(DeclRefExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitIntegerLiteral(IntegerLiteral stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitFixedPointLiteral(FixedPointLiteral stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCharacterLiteral(CharacterLiteral stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitFloatingLiteral(FloatingLiteral stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitImaginaryLiteral(ImaginaryLiteral stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitStringLiteral(StringLiteral stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitPredefinedExpr(PredefinedExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitParenExpr(ParenExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitUnaryOperator(UnaryOperator stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitOffsetOfExpr(OffsetOfExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitUnaryExprOrTypeTraitExpr(UnaryExprOrTypeTraitExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitArraySubscriptExpr(ArraySubscriptExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCallExpr(CallExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitMemberExpr(MemberExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCompoundLiteralExpr(CompoundLiteralExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCastExpr(CastExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitImplicitCastExpr(ImplicitCastExpr stmt)
        {
            if (!VisitCastExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitExplicitCastExpr(ExplicitCastExpr stmt)
        {
            if (!VisitCastExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCStyleCastExpr(CStyleCastExpr stmt)
        {
            if (!VisitExplicitCastExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitBinaryOperator(BinaryOperator stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCompoundAssignOperator(CompoundAssignOperator stmt)
        {
            if (!VisitBinaryOperator(stmt))
                return false;

            return true;
        }

        public virtual bool VisitAbstractConditionalOperator(AbstractConditionalOperator stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitConditionalOperator(ConditionalOperator stmt)
        {
            if (!VisitAbstractConditionalOperator(stmt))
                return false;

            return true;
        }

        public virtual bool VisitBinaryConditionalOperator(BinaryConditionalOperator stmt)
        {
            if (!VisitAbstractConditionalOperator(stmt))
                return false;

            return true;
        }

        public virtual bool VisitAddrLabelExpr(AddrLabelExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitStmtExpr(StmtExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitShuffleVectorExpr(ShuffleVectorExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitConvertVectorExpr(ConvertVectorExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitChooseExpr(ChooseExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitGNUNullExpr(GNUNullExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitVAArgExpr(VAArgExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitInitListExpr(InitListExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitDesignatedInitExpr(DesignatedInitExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitNoInitExpr(NoInitExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitDesignatedInitUpdateExpr(DesignatedInitUpdateExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitArrayInitLoopExpr(ArrayInitLoopExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitArrayInitIndexExpr(ArrayInitIndexExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitImplicitValueInitExpr(ImplicitValueInitExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitParenListExpr(ParenListExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitGenericSelectionExpr(GenericSelectionExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitExtVectorElementExpr(ExtVectorElementExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitBlockExpr(BlockExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitAsTypeExpr(AsTypeExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitPseudoObjectExpr(PseudoObjectExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitAtomicExpr(AtomicExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitTypoExpr(TypoExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXOperatorCallExpr(CXXOperatorCallExpr stmt)
        {
            if (!VisitCallExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXMemberCallExpr(CXXMemberCallExpr stmt)
        {
            if (!VisitCallExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCUDAKernelCallExpr(CUDAKernelCallExpr stmt)
        {
            if (!VisitCallExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXNamedCastExpr(CXXNamedCastExpr stmt)
        {
            if (!VisitExplicitCastExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXStaticCastExpr(CXXStaticCastExpr stmt)
        {
            if (!VisitCXXNamedCastExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXDynamicCastExpr(CXXDynamicCastExpr stmt)
        {
            if (!VisitCXXNamedCastExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXReinterpretCastExpr(CXXReinterpretCastExpr stmt)
        {
            if (!VisitCXXNamedCastExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXConstCastExpr(CXXConstCastExpr stmt)
        {
            if (!VisitCXXNamedCastExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitUserDefinedLiteral(UserDefinedLiteral stmt)
        {
            if (!VisitCallExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXBoolLiteralExpr(CXXBoolLiteralExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXNullPtrLiteralExpr(CXXNullPtrLiteralExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXStdInitializerListExpr(CXXStdInitializerListExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXTypeidExpr(CXXTypeidExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitMSPropertyRefExpr(MSPropertyRefExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitMSPropertySubscriptExpr(MSPropertySubscriptExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXUuidofExpr(CXXUuidofExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXThisExpr(CXXThisExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXThrowExpr(CXXThrowExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXDefaultArgExpr(CXXDefaultArgExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXDefaultInitExpr(CXXDefaultInitExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXBindTemporaryExpr(CXXBindTemporaryExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXConstructExpr(CXXConstructExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXInheritedCtorInitExpr(CXXInheritedCtorInitExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXFunctionalCastExpr(CXXFunctionalCastExpr stmt)
        {
            if (!VisitExplicitCastExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXTemporaryObjectExpr(CXXTemporaryObjectExpr stmt)
        {
            if (!VisitCXXConstructExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitLambdaExpr(LambdaExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXScalarValueInitExpr(CXXScalarValueInitExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXNewExpr(CXXNewExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXDeleteExpr(CXXDeleteExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXPseudoDestructorExpr(CXXPseudoDestructorExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitTypeTraitExpr(TypeTraitExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitArrayTypeTraitExpr(ArrayTypeTraitExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitExpressionTraitExpr(ExpressionTraitExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitOverloadExpr(OverloadExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitUnresolvedLookupExpr(UnresolvedLookupExpr stmt)
        {
            if (!VisitOverloadExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitDependentScopeDeclRefExpr(DependentScopeDeclRefExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitExprWithCleanups(ExprWithCleanups stmt)
        {
            if (!VisitFullExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXUnresolvedConstructExpr(CXXUnresolvedConstructExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXDependentScopeMemberExpr(CXXDependentScopeMemberExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitUnresolvedMemberExpr(UnresolvedMemberExpr stmt)
        {
            if (!VisitOverloadExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXNoexceptExpr(CXXNoexceptExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitPackExpansionExpr(PackExpansionExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitSizeOfPackExpr(SizeOfPackExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitSubstNonTypeTemplateParmExpr(SubstNonTypeTemplateParmExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitSubstNonTypeTemplateParmPackExpr(SubstNonTypeTemplateParmPackExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitFunctionParmPackExpr(FunctionParmPackExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitMaterializeTemporaryExpr(MaterializeTemporaryExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCXXFoldExpr(CXXFoldExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCoroutineSuspendExpr(CoroutineSuspendExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCoawaitExpr(CoawaitExpr stmt)
        {
            if (!VisitCoroutineSuspendExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitDependentCoawaitExpr(DependentCoawaitExpr stmt)
        {
            if (!VisitExpr(stmt))
                return false;

            return true;
        }

        public virtual bool VisitCoyieldExpr(CoyieldExpr stmt)
        {
            if (!VisitCoroutineSuspendExpr(stmt))
                return false;

            return true;
        }
    }

    public interface IStmtVisitor<out T>
    {
        T VisitStmt(Stmt stmt);
        T VisitDeclStmt(DeclStmt stmt);
        T VisitNullStmt(NullStmt stmt);
        T VisitCompoundStmt(CompoundStmt stmt);
        T VisitSwitchCase(SwitchCase stmt);
        T VisitCaseStmt(CaseStmt stmt);
        T VisitDefaultStmt(DefaultStmt stmt);
        T VisitLabelStmt(LabelStmt stmt);
        T VisitAttributedStmt(AttributedStmt stmt);
        T VisitIfStmt(IfStmt stmt);
        T VisitSwitchStmt(SwitchStmt stmt);
        T VisitWhileStmt(WhileStmt stmt);
        T VisitDoStmt(DoStmt stmt);
        T VisitForStmt(ForStmt stmt);
        T VisitGotoStmt(GotoStmt stmt);
        T VisitIndirectGotoStmt(IndirectGotoStmt stmt);
        T VisitContinueStmt(ContinueStmt stmt);
        T VisitBreakStmt(BreakStmt stmt);
        T VisitReturnStmt(ReturnStmt stmt);
        T VisitAsmStmt(AsmStmt stmt);
        T VisitGCCAsmStmt(GCCAsmStmt stmt);
        T VisitMSAsmStmt(MSAsmStmt stmt);
        T VisitSEHExceptStmt(SEHExceptStmt stmt);
        T VisitSEHFinallyStmt(SEHFinallyStmt stmt);
        T VisitSEHTryStmt(SEHTryStmt stmt);
        T VisitSEHLeaveStmt(SEHLeaveStmt stmt);
        T VisitCapturedStmt(CapturedStmt stmt);
        T VisitCXXCatchStmt(CXXCatchStmt stmt);
        T VisitCXXTryStmt(CXXTryStmt stmt);
        T VisitCXXForRangeStmt(CXXForRangeStmt stmt);
        T VisitMSDependentExistsStmt(MSDependentExistsStmt stmt);
        T VisitCoroutineBodyStmt(CoroutineBodyStmt stmt);
        T VisitCoreturnStmt(CoreturnStmt stmt);
        T VisitExpr(Expr stmt);
        T VisitFullExpr(FullExpr stmt);
        T VisitConstantExpr(ConstantExpr stmt);
        T VisitOpaqueValueExpr(OpaqueValueExpr stmt);
        T VisitDeclRefExpr(DeclRefExpr stmt);
        T VisitIntegerLiteral(IntegerLiteral stmt);
        T VisitFixedPointLiteral(FixedPointLiteral stmt);
        T VisitCharacterLiteral(CharacterLiteral stmt);
        T VisitFloatingLiteral(FloatingLiteral stmt);
        T VisitImaginaryLiteral(ImaginaryLiteral stmt);
        T VisitStringLiteral(StringLiteral stmt);
        T VisitPredefinedExpr(PredefinedExpr stmt);
        T VisitParenExpr(ParenExpr stmt);
        T VisitUnaryOperator(UnaryOperator stmt);
        T VisitOffsetOfExpr(OffsetOfExpr stmt);
        T VisitUnaryExprOrTypeTraitExpr(UnaryExprOrTypeTraitExpr stmt);
        T VisitArraySubscriptExpr(ArraySubscriptExpr stmt);
        T VisitCallExpr(CallExpr stmt);
        T VisitMemberExpr(MemberExpr stmt);
        T VisitCompoundLiteralExpr(CompoundLiteralExpr stmt);
        T VisitCastExpr(CastExpr stmt);
        T VisitImplicitCastExpr(ImplicitCastExpr stmt);
        T VisitExplicitCastExpr(ExplicitCastExpr stmt);
        T VisitCStyleCastExpr(CStyleCastExpr stmt);
        T VisitBinaryOperator(BinaryOperator stmt);
        T VisitCompoundAssignOperator(CompoundAssignOperator stmt);
        T VisitAbstractConditionalOperator(AbstractConditionalOperator stmt);
        T VisitConditionalOperator(ConditionalOperator stmt);
        T VisitBinaryConditionalOperator(BinaryConditionalOperator stmt);
        T VisitAddrLabelExpr(AddrLabelExpr stmt);
        T VisitStmtExpr(StmtExpr stmt);
        T VisitShuffleVectorExpr(ShuffleVectorExpr stmt);
        T VisitConvertVectorExpr(ConvertVectorExpr stmt);
        T VisitChooseExpr(ChooseExpr stmt);
        T VisitGNUNullExpr(GNUNullExpr stmt);
        T VisitVAArgExpr(VAArgExpr stmt);
        T VisitInitListExpr(InitListExpr stmt);
        T VisitDesignatedInitExpr(DesignatedInitExpr stmt);
        T VisitNoInitExpr(NoInitExpr stmt);
        T VisitDesignatedInitUpdateExpr(DesignatedInitUpdateExpr stmt);
        T VisitArrayInitLoopExpr(ArrayInitLoopExpr stmt);
        T VisitArrayInitIndexExpr(ArrayInitIndexExpr stmt);
        T VisitImplicitValueInitExpr(ImplicitValueInitExpr stmt);
        T VisitParenListExpr(ParenListExpr stmt);
        T VisitGenericSelectionExpr(GenericSelectionExpr stmt);
        T VisitExtVectorElementExpr(ExtVectorElementExpr stmt);
        T VisitBlockExpr(BlockExpr stmt);
        T VisitAsTypeExpr(AsTypeExpr stmt);
        T VisitPseudoObjectExpr(PseudoObjectExpr stmt);
        T VisitAtomicExpr(AtomicExpr stmt);
        T VisitTypoExpr(TypoExpr stmt);
        T VisitCXXOperatorCallExpr(CXXOperatorCallExpr stmt);
        T VisitCXXMemberCallExpr(CXXMemberCallExpr stmt);
        T VisitCUDAKernelCallExpr(CUDAKernelCallExpr stmt);
        T VisitCXXNamedCastExpr(CXXNamedCastExpr stmt);
        T VisitCXXStaticCastExpr(CXXStaticCastExpr stmt);
        T VisitCXXDynamicCastExpr(CXXDynamicCastExpr stmt);
        T VisitCXXReinterpretCastExpr(CXXReinterpretCastExpr stmt);
        T VisitCXXConstCastExpr(CXXConstCastExpr stmt);
        T VisitUserDefinedLiteral(UserDefinedLiteral stmt);
        T VisitCXXBoolLiteralExpr(CXXBoolLiteralExpr stmt);
        T VisitCXXNullPtrLiteralExpr(CXXNullPtrLiteralExpr stmt);
        T VisitCXXStdInitializerListExpr(CXXStdInitializerListExpr stmt);
        T VisitCXXTypeidExpr(CXXTypeidExpr stmt);
        T VisitMSPropertyRefExpr(MSPropertyRefExpr stmt);
        T VisitMSPropertySubscriptExpr(MSPropertySubscriptExpr stmt);
        T VisitCXXUuidofExpr(CXXUuidofExpr stmt);
        T VisitCXXThisExpr(CXXThisExpr stmt);
        T VisitCXXThrowExpr(CXXThrowExpr stmt);
        T VisitCXXDefaultArgExpr(CXXDefaultArgExpr stmt);
        T VisitCXXDefaultInitExpr(CXXDefaultInitExpr stmt);
        T VisitCXXBindTemporaryExpr(CXXBindTemporaryExpr stmt);
        T VisitCXXConstructExpr(CXXConstructExpr stmt);
        T VisitCXXInheritedCtorInitExpr(CXXInheritedCtorInitExpr stmt);
        T VisitCXXFunctionalCastExpr(CXXFunctionalCastExpr stmt);
        T VisitCXXTemporaryObjectExpr(CXXTemporaryObjectExpr stmt);
        T VisitLambdaExpr(LambdaExpr stmt);
        T VisitCXXScalarValueInitExpr(CXXScalarValueInitExpr stmt);
        T VisitCXXNewExpr(CXXNewExpr stmt);
        T VisitCXXDeleteExpr(CXXDeleteExpr stmt);
        T VisitCXXPseudoDestructorExpr(CXXPseudoDestructorExpr stmt);
        T VisitTypeTraitExpr(TypeTraitExpr stmt);
        T VisitArrayTypeTraitExpr(ArrayTypeTraitExpr stmt);
        T VisitExpressionTraitExpr(ExpressionTraitExpr stmt);
        T VisitOverloadExpr(OverloadExpr stmt);
        T VisitUnresolvedLookupExpr(UnresolvedLookupExpr stmt);
        T VisitDependentScopeDeclRefExpr(DependentScopeDeclRefExpr stmt);
        T VisitExprWithCleanups(ExprWithCleanups stmt);
        T VisitCXXUnresolvedConstructExpr(CXXUnresolvedConstructExpr stmt);
        T VisitCXXDependentScopeMemberExpr(CXXDependentScopeMemberExpr stmt);
        T VisitUnresolvedMemberExpr(UnresolvedMemberExpr stmt);
        T VisitCXXNoexceptExpr(CXXNoexceptExpr stmt);
        T VisitPackExpansionExpr(PackExpansionExpr stmt);
        T VisitSizeOfPackExpr(SizeOfPackExpr stmt);
        T VisitSubstNonTypeTemplateParmExpr(SubstNonTypeTemplateParmExpr stmt);
        T VisitSubstNonTypeTemplateParmPackExpr(SubstNonTypeTemplateParmPackExpr stmt);
        T VisitFunctionParmPackExpr(FunctionParmPackExpr stmt);
        T VisitMaterializeTemporaryExpr(MaterializeTemporaryExpr stmt);
        T VisitCXXFoldExpr(CXXFoldExpr stmt);
        T VisitCoroutineSuspendExpr(CoroutineSuspendExpr stmt);
        T VisitCoawaitExpr(CoawaitExpr stmt);
        T VisitDependentCoawaitExpr(DependentCoawaitExpr stmt);
        T VisitCoyieldExpr(CoyieldExpr stmt);
    }
}
