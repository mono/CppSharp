//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace Parser
    {
        namespace AST
        {
            public enum TypeKind
            {
                Tag = 0,
                Array = 1,
                Function = 2,
                Pointer = 3,
                MemberPointer = 4,
                Typedef = 5,
                Attributed = 6,
                Decayed = 7,
                TemplateSpecialization = 8,
                TemplateParameter = 9,
                TemplateParameterSubstitution = 10,
                InjectedClassName = 11,
                DependentName = 12,
                PackExpansion = 13,
                Builtin = 14
            }

            public enum DeclarationKind
            {
                DeclarationContext = 0,
                Typedef = 1,
                Parameter = 2,
                Function = 3,
                Method = 4,
                Enumeration = 5,
                EnumerationItem = 6,
                Variable = 7,
                Field = 8,
                AccessSpecifier = 9,
                Class = 10,
                Template = 11,
                ClassTemplate = 12,
                ClassTemplateSpecialization = 13,
                ClassTemplatePartialSpecialization = 14,
                FunctionTemplate = 15,
                Namespace = 16,
                PreprocessedEntity = 17,
                MacroDefinition = 18,
                MacroExpansion = 19,
                TranslationUnit = 20
            }

            public enum AccessSpecifier
            {
                Private = 0,
                Protected = 1,
                Public = 2
            }

            public enum CXXMethodKind
            {
                Normal = 0,
                Constructor = 1,
                Destructor = 2,
                Conversion = 3,
                Operator = 4,
                UsingDirective = 5
            }

            public enum CXXOperatorKind
            {
                None = 0,
                New = 1,
                Delete = 2,
                Array_New = 3,
                Array_Delete = 4,
                Plus = 5,
                Minus = 6,
                Star = 7,
                Slash = 8,
                Percent = 9,
                Caret = 10,
                Amp = 11,
                Pipe = 12,
                Tilde = 13,
                Exclaim = 14,
                Equal = 15,
                Less = 16,
                Greater = 17,
                PlusEqual = 18,
                MinusEqual = 19,
                StarEqual = 20,
                SlashEqual = 21,
                PercentEqual = 22,
                CaretEqual = 23,
                AmpEqual = 24,
                PipeEqual = 25,
                LessLess = 26,
                GreaterGreater = 27,
                LessLessEqual = 28,
                GreaterGreaterEqual = 29,
                EqualEqual = 30,
                ExclaimEqual = 31,
                LessEqual = 32,
                GreaterEqual = 33,
                AmpAmp = 34,
                PipePipe = 35,
                PlusPlus = 36,
                MinusMinus = 37,
                Comma = 38,
                ArrowStar = 39,
                Arrow = 40,
                Call = 41,
                Subscript = 42,
                Conditional = 43
            }

            public enum CallingConvention
            {
                Default = 0,
                C = 1,
                StdCall = 2,
                ThisCall = 3,
                FastCall = 4,
                Unknown = 5
            }

            public enum StatementClass
            {
                Any = 0,
                BinaryOperator = 1,
                DeclRefExprClass = 2,
                CXXConstructExprClass = 3,
                CXXOperatorCallExpr = 4,
                ImplicitCastExpr = 5,
                ExplicitCastExpr = 6
            }

            public enum TemplateSpecializationKind
            {
                Undeclared = 0,
                ImplicitInstantiation = 1,
                ExplicitSpecialization = 2,
                ExplicitInstantiationDeclaration = 3,
                ExplicitInstantiationDefinition = 4
            }

            public enum CppAbi
            {
                Itanium = 0,
                Microsoft = 1,
                ARM = 2,
                iOS = 3,
                iOS64 = 4
            }

            public enum VTableComponentKind
            {
                VCallOffset = 0,
                VBaseOffset = 1,
                OffsetToTop = 2,
                RTTI = 3,
                FunctionPointer = 4,
                CompleteDtorPointer = 5,
                DeletingDtorPointer = 6,
                UnusedFunctionPointer = 7
            }

            public enum PrimitiveType
            {
                Null = 0,
                Void = 1,
                Bool = 2,
                WideChar = 3,
                Char = 4,
                UChar = 5,
                Short = 6,
                UShort = 7,
                Int = 8,
                UInt = 9,
                Long = 10,
                ULong = 11,
                LongLong = 12,
                ULongLong = 13,
                Float = 14,
                Double = 15,
                IntPtr = 16
            }

            public enum RawCommentKind
            {
                Invalid = 0,
                OrdinaryBCPL = 1,
                OrdinaryC = 2,
                BCPLSlash = 3,
                BCPLExcl = 4,
                JavaDoc = 5,
                Qt = 6,
                Merged = 7
            }

            public enum CommentKind
            {
                FullComment = 0
            }

            public enum MacroLocation
            {
                Unknown = 0,
                ClassHead = 1,
                ClassBody = 2,
                FunctionHead = 3,
                FunctionParameters = 4,
                FunctionBody = 5
            }

            public enum ArchType
            {
                UnknownArch = 0,
                x86 = 1,
                x86_64 = 2
            }

            public unsafe partial class Type : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Type@AST@CppParser@CppSharp@@QAE@W4TypeKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, CppSharp.Parser.AST.TypeKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Type@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static Type __CreateInstance(global::System.IntPtr native)
                {
                    return new Type((Type.Internal*) native);
                }

                public static Type __CreateInstance(Type.Internal native)
                {
                    return new Type(native);
                }

                private static Type.Internal* __CopyValue(Type.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(8);
                    CppSharp.Parser.AST.Type.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (Type.Internal*) ret;
                }

                private Type(Type.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Type(Type.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public Type(CppSharp.Parser.AST.TypeKind kind)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    var arg0 = kind;
                    Internal.ctor_0(__Instance, arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public CppSharp.Parser.AST.TypeKind Kind
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Kind;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Kind = value;
                    }
                }

                public bool IsDependent
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsDependent;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsDependent = value;
                    }
                }
            }

            public unsafe partial class TypeQualifiers : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 3)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public bool IsConst;

                    [FieldOffset(1)]
                    public bool IsVolatile;

                    [FieldOffset(2)]
                    public bool IsRestrict;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypeQualifiers@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_0(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static TypeQualifiers __CreateInstance(global::System.IntPtr native)
                {
                    return new TypeQualifiers((TypeQualifiers.Internal*) native);
                }

                public static TypeQualifiers __CreateInstance(TypeQualifiers.Internal native)
                {
                    return new TypeQualifiers(native);
                }

                private static TypeQualifiers.Internal* __CopyValue(TypeQualifiers.Internal native)
                {
                    var ret = (TypeQualifiers.Internal*) Marshal.AllocHGlobal(3);
                    *ret = native;
                    return ret;
                }

                private TypeQualifiers(TypeQualifiers.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected TypeQualifiers(TypeQualifiers.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public TypeQualifiers()
                {
                    __Instance = Marshal.AllocHGlobal(3);
                    __ownsNativeInstance = true;
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public bool IsConst
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsConst;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsConst = value;
                    }
                }

                public bool IsVolatile
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsVolatile;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsVolatile = value;
                    }
                }

                public bool IsRestrict
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsRestrict;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsRestrict = value;
                    }
                }
            }

            public unsafe partial class QualifiedType : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr Type;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.TypeQualifiers.Internal Qualifiers;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0QualifiedType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0QualifiedType@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static QualifiedType __CreateInstance(global::System.IntPtr native)
                {
                    return new QualifiedType((QualifiedType.Internal*) native);
                }

                public static QualifiedType __CreateInstance(QualifiedType.Internal native)
                {
                    return new QualifiedType(native);
                }

                private static QualifiedType.Internal* __CopyValue(QualifiedType.Internal native)
                {
                    var ret = (QualifiedType.Internal*) Marshal.AllocHGlobal(8);
                    *ret = native;
                    return ret;
                }

                private QualifiedType(QualifiedType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected QualifiedType(QualifiedType.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public QualifiedType()
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public CppSharp.Parser.AST.Type Type
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Type == IntPtr.Zero) ? null : CppSharp.Parser.AST.Type.__CreateInstance(__ptr->Type);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Type = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.TypeQualifiers Qualifiers
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.TypeQualifiers.__CreateInstance(__ptr->Qualifiers);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Qualifiers = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.TypeQualifiers.Internal() : *(CppSharp.Parser.AST.TypeQualifiers.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class TagType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(8)]
                    public global::System.IntPtr Declaration;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TagType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TagType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                private readonly bool __ownsNativeInstance;

                public static new TagType __CreateInstance(global::System.IntPtr native)
                {
                    return new TagType((TagType.Internal*) native);
                }

                public static TagType __CreateInstance(TagType.Internal native)
                {
                    return new TagType(native);
                }

                private static TagType.Internal* __CopyValue(TagType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    CppSharp.Parser.AST.TagType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TagType.Internal*) ret;
                }

                private TagType(TagType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected TagType(TagType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public TagType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.Declaration Declaration
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Declaration == IntPtr.Zero) ? null : CppSharp.Parser.AST.Declaration.__CreateInstance(__ptr->Declaration);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class ArrayType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal QualifiedType;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.ArrayType.ArraySize SizeType;

                    [FieldOffset(20)]
                    public int Size;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ArrayType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ArrayType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public enum ArraySize
                {
                    Constant = 0,
                    Variable = 1,
                    Dependent = 2,
                    Incomplete = 3
                }

                private readonly bool __ownsNativeInstance;

                public static new ArrayType __CreateInstance(global::System.IntPtr native)
                {
                    return new ArrayType((ArrayType.Internal*) native);
                }

                public static ArrayType __CreateInstance(ArrayType.Internal native)
                {
                    return new ArrayType(native);
                }

                private static ArrayType.Internal* __CopyValue(ArrayType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(24);
                    CppSharp.Parser.AST.ArrayType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (ArrayType.Internal*) ret;
                }

                private ArrayType(ArrayType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected ArrayType(ArrayType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public ArrayType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->QualifiedType);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.ArrayType.ArraySize SizeType
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->SizeType;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->SizeType = value;
                    }
                }

                public int Size
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Size;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Size = value;
                    }
                }
            }

            public unsafe partial class FunctionType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal ReturnType;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.CallingConvention CallingConvention;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FunctionType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FunctionType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1FunctionType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getParameters@FunctionType@AST@CppParser@CppSharp@@QAEPAVParameter@234@I@Z")]
                    internal static extern global::System.IntPtr getParameters_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addParameters@FunctionType@AST@CppParser@CppSharp@@QAEXAAPAVParameter@234@@Z")]
                    internal static extern void addParameters_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearParameters@FunctionType@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearParameters_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getParametersCount@FunctionType@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getParametersCount_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new FunctionType __CreateInstance(global::System.IntPtr native)
                {
                    return new FunctionType((FunctionType.Internal*) native);
                }

                public static FunctionType __CreateInstance(FunctionType.Internal native)
                {
                    return new FunctionType(native);
                }

                private static FunctionType.Internal* __CopyValue(FunctionType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    CppSharp.Parser.AST.FunctionType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (FunctionType.Internal*) ret;
                }

                private FunctionType(FunctionType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected FunctionType(FunctionType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public FunctionType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.Parameter getParameters(uint i)
                {
                    var __ret = Internal.getParameters_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.Parameter.__CreateInstance(__ret);
                }

                public void addParameters(CppSharp.Parser.AST.Parameter s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addParameters_0(__Instance, arg0);
                }

                public void clearParameters()
                {
                    Internal.clearParameters_0(__Instance);
                }

                public uint ParametersCount
                {
                    get
                    {
                        var __ret = Internal.getParametersCount_0(__Instance);
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.QualifiedType ReturnType
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->ReturnType);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->ReturnType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.CallingConvention CallingConvention
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->CallingConvention;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->CallingConvention = value;
                    }
                }
            }

            public unsafe partial class PointerType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal QualifiedPointee;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.PointerType.TypeModifier Modifier;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PointerType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PointerType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public enum TypeModifier
                {
                    Value = 0,
                    Pointer = 1,
                    LVReference = 2,
                    RVReference = 3
                }

                private readonly bool __ownsNativeInstance;

                public static new PointerType __CreateInstance(global::System.IntPtr native)
                {
                    return new PointerType((PointerType.Internal*) native);
                }

                public static PointerType __CreateInstance(PointerType.Internal native)
                {
                    return new PointerType(native);
                }

                private static PointerType.Internal* __CopyValue(PointerType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(20);
                    CppSharp.Parser.AST.PointerType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (PointerType.Internal*) ret;
                }

                private PointerType(PointerType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected PointerType(PointerType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public PointerType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.QualifiedType QualifiedPointee
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->QualifiedPointee);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->QualifiedPointee = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.PointerType.TypeModifier Modifier
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Modifier;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Modifier = value;
                    }
                }
            }

            public unsafe partial class MemberPointerType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Pointee;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0MemberPointerType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0MemberPointerType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                private readonly bool __ownsNativeInstance;

                public static new MemberPointerType __CreateInstance(global::System.IntPtr native)
                {
                    return new MemberPointerType((MemberPointerType.Internal*) native);
                }

                public static MemberPointerType __CreateInstance(MemberPointerType.Internal native)
                {
                    return new MemberPointerType(native);
                }

                private static MemberPointerType.Internal* __CopyValue(MemberPointerType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    CppSharp.Parser.AST.MemberPointerType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (MemberPointerType.Internal*) ret;
                }

                private MemberPointerType(MemberPointerType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected MemberPointerType(MemberPointerType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public MemberPointerType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.QualifiedType Pointee
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->Pointee);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Pointee = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class TypedefType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(8)]
                    public global::System.IntPtr Declaration;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypedefType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypedefType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                private readonly bool __ownsNativeInstance;

                public static new TypedefType __CreateInstance(global::System.IntPtr native)
                {
                    return new TypedefType((TypedefType.Internal*) native);
                }

                public static TypedefType __CreateInstance(TypedefType.Internal native)
                {
                    return new TypedefType(native);
                }

                private static TypedefType.Internal* __CopyValue(TypedefType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    CppSharp.Parser.AST.TypedefType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TypedefType.Internal*) ret;
                }

                private TypedefType(TypedefType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected TypedefType(TypedefType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public TypedefType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.TypedefDecl Declaration
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Declaration == IntPtr.Zero) ? null : CppSharp.Parser.AST.TypedefDecl.__CreateInstance(__ptr->Declaration);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class AttributedType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Modified;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Equivalent;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0AttributedType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0AttributedType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                private readonly bool __ownsNativeInstance;

                public static new AttributedType __CreateInstance(global::System.IntPtr native)
                {
                    return new AttributedType((AttributedType.Internal*) native);
                }

                public static AttributedType __CreateInstance(AttributedType.Internal native)
                {
                    return new AttributedType(native);
                }

                private static AttributedType.Internal* __CopyValue(AttributedType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(24);
                    CppSharp.Parser.AST.AttributedType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (AttributedType.Internal*) ret;
                }

                private AttributedType(AttributedType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected AttributedType(AttributedType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public AttributedType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.QualifiedType Modified
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->Modified);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Modified = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.QualifiedType Equivalent
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->Equivalent);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Equivalent = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class DecayedType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Decayed;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Original;

                    [FieldOffset(24)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Pointee;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DecayedType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DecayedType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                private readonly bool __ownsNativeInstance;

                public static new DecayedType __CreateInstance(global::System.IntPtr native)
                {
                    return new DecayedType((DecayedType.Internal*) native);
                }

                public static DecayedType __CreateInstance(DecayedType.Internal native)
                {
                    return new DecayedType(native);
                }

                private static DecayedType.Internal* __CopyValue(DecayedType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    CppSharp.Parser.AST.DecayedType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (DecayedType.Internal*) ret;
                }

                private DecayedType(DecayedType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected DecayedType(DecayedType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public DecayedType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.QualifiedType Decayed
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->Decayed);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Decayed = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.QualifiedType Original
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->Original);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Original = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.QualifiedType Pointee
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->Pointee);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Pointee = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class TemplateArgument : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 20)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TemplateArgument.ArgumentKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Type;

                    [FieldOffset(12)]
                    public global::System.IntPtr Declaration;

                    [FieldOffset(16)]
                    public int Integral;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateArgument@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateArgument@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public enum ArgumentKind
                {
                    Type = 0,
                    Declaration = 1,
                    NullPtr = 2,
                    Integral = 3,
                    Template = 4,
                    TemplateExpansion = 5,
                    Expression = 6,
                    Pack = 7
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static TemplateArgument __CreateInstance(global::System.IntPtr native)
                {
                    return new TemplateArgument((TemplateArgument.Internal*) native);
                }

                public static TemplateArgument __CreateInstance(TemplateArgument.Internal native)
                {
                    return new TemplateArgument(native);
                }

                private static TemplateArgument.Internal* __CopyValue(TemplateArgument.Internal native)
                {
                    var ret = (TemplateArgument.Internal*) Marshal.AllocHGlobal(20);
                    *ret = native;
                    return ret;
                }

                private TemplateArgument(TemplateArgument.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected TemplateArgument(TemplateArgument.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateArgument()
                {
                    __Instance = Marshal.AllocHGlobal(20);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public CppSharp.Parser.AST.TemplateArgument.ArgumentKind Kind
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Kind;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Kind = value;
                    }
                }

                public CppSharp.Parser.AST.QualifiedType Type
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->Type);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Type = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public CppSharp.Parser.AST.Declaration Declaration
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Declaration == IntPtr.Zero) ? null : CppSharp.Parser.AST.Declaration.__CreateInstance(__ptr->Declaration);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public int Integral
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Integral;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Integral = value;
                    }
                }
            }

            public unsafe partial class TemplateSpecializationType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(20)]
                    public global::System.IntPtr Template;

                    [FieldOffset(24)]
                    public global::System.IntPtr Desugared;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateSpecializationType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateSpecializationType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TemplateSpecializationType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArguments@TemplateSpecializationType@AST@CppParser@CppSharp@@QAE?AUTemplateArgument@234@I@Z")]
                    internal static extern void getArguments_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addArguments@TemplateSpecializationType@AST@CppParser@CppSharp@@QAEXAAUTemplateArgument@234@@Z")]
                    internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearArguments@TemplateSpecializationType@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArgumentsCount@TemplateSpecializationType@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new TemplateSpecializationType __CreateInstance(global::System.IntPtr native)
                {
                    return new TemplateSpecializationType((TemplateSpecializationType.Internal*) native);
                }

                public static TemplateSpecializationType __CreateInstance(TemplateSpecializationType.Internal native)
                {
                    return new TemplateSpecializationType(native);
                }

                private static TemplateSpecializationType.Internal* __CopyValue(TemplateSpecializationType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(28);
                    CppSharp.Parser.AST.TemplateSpecializationType.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (TemplateSpecializationType.Internal*) ret;
                }

                private TemplateSpecializationType(TemplateSpecializationType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected TemplateSpecializationType(TemplateSpecializationType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public TemplateSpecializationType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.TemplateArgument getArguments(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.TemplateArgument.Internal();
                    Internal.getArguments_0(__Instance, new IntPtr(&__ret), i);
                    return CppSharp.Parser.AST.TemplateArgument.__CreateInstance(__ret);
                }

                public void addArguments(CppSharp.Parser.AST.TemplateArgument s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addArguments_0(__Instance, arg0);
                }

                public void clearArguments()
                {
                    Internal.clearArguments_0(__Instance);
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = Internal.getArgumentsCount_0(__Instance);
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.Template Template
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Template == IntPtr.Zero) ? null : CppSharp.Parser.AST.Template.__CreateInstance(__ptr->Template);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Template = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.Type Desugared
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Desugared == IntPtr.Zero) ? null : CppSharp.Parser.AST.Type.__CreateInstance(__ptr->Desugared);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Desugared = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class TemplateParameter : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public partial struct Internal
                {
                    [FieldOffset(24)]
                    public bool IsTypeParameter;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateParameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateParameter@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TemplateParameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??8TemplateParameter@AST@CppParser@CppSharp@@QBE_NABV0123@@Z")]
                    [return: MarshalAsAttribute(UnmanagedType.I1)]
                    internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr param);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getName@TemplateParameter@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setName@TemplateParameter@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setName_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static TemplateParameter __CreateInstance(global::System.IntPtr native)
                {
                    return new TemplateParameter((TemplateParameter.Internal*) native);
                }

                public static TemplateParameter __CreateInstance(TemplateParameter.Internal native)
                {
                    return new TemplateParameter(native);
                }

                private static TemplateParameter.Internal* __CopyValue(TemplateParameter.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(28);
                    CppSharp.Parser.AST.TemplateParameter.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (TemplateParameter.Internal*) ret;
                }

                private TemplateParameter(TemplateParameter.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected TemplateParameter(TemplateParameter.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public TemplateParameter()
                {
                    __Instance = Marshal.AllocHGlobal(28);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    Internal.dtor_0(__Instance);
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public static bool operator !=(CppSharp.Parser.AST.TemplateParameter __op, CppSharp.Parser.AST.TemplateParameter param)
                {
                    return !(__op == param);
                }

                public static bool operator ==(CppSharp.Parser.AST.TemplateParameter __op, CppSharp.Parser.AST.TemplateParameter param)
                {
                    bool __opNull = ReferenceEquals(__op, null);
                    bool paramNull = ReferenceEquals(param, null);
                    if (__opNull || paramNull)
                        return __opNull && paramNull;
                    var arg0 = __op.__Instance;
                    var arg1 = param.__Instance;
                    var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                    return __ret;
                }

                public override bool Equals(object obj)
                {
                    return this == obj as TemplateParameter;
                }

                public string Name
                {
                    get
                    {
                        var __ret = Internal.getName_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setName_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public bool IsTypeParameter
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsTypeParameter;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsTypeParameter = value;
                    }
                }
            }

            public unsafe partial class TemplateParameterType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 48)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.TemplateParameter.Internal Parameter;

                    [FieldOffset(36)]
                    public uint Depth;

                    [FieldOffset(40)]
                    public uint Index;

                    [FieldOffset(44)]
                    public bool IsParameterPack;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateParameterType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateParameterType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TemplateParameterType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new TemplateParameterType __CreateInstance(global::System.IntPtr native)
                {
                    return new TemplateParameterType((TemplateParameterType.Internal*) native);
                }

                public static TemplateParameterType __CreateInstance(TemplateParameterType.Internal native)
                {
                    return new TemplateParameterType(native);
                }

                private static TemplateParameterType.Internal* __CopyValue(TemplateParameterType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(48);
                    CppSharp.Parser.AST.TemplateParameterType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TemplateParameterType.Internal*) ret;
                }

                private TemplateParameterType(TemplateParameterType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected TemplateParameterType(TemplateParameterType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public TemplateParameterType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(48);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.TemplateParameter Parameter
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.TemplateParameter.__CreateInstance(__ptr->Parameter);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Parameter = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.TemplateParameter.Internal() : *(CppSharp.Parser.AST.TemplateParameter.Internal*) (value.__Instance);
                    }
                }

                public uint Depth
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Depth;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Depth = value;
                    }
                }

                public uint Index
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Index;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Index = value;
                    }
                }

                public bool IsParameterPack
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsParameterPack;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsParameterPack = value;
                    }
                }
            }

            public unsafe partial class TemplateParameterSubstitutionType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.QualifiedType.Internal Replacement;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateParameterSubstitutionType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TemplateParameterSubstitutionType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                private readonly bool __ownsNativeInstance;

                public static new TemplateParameterSubstitutionType __CreateInstance(global::System.IntPtr native)
                {
                    return new TemplateParameterSubstitutionType((TemplateParameterSubstitutionType.Internal*) native);
                }

                public static TemplateParameterSubstitutionType __CreateInstance(TemplateParameterSubstitutionType.Internal native)
                {
                    return new TemplateParameterSubstitutionType(native);
                }

                private static TemplateParameterSubstitutionType.Internal* __CopyValue(TemplateParameterSubstitutionType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    CppSharp.Parser.AST.TemplateParameterSubstitutionType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TemplateParameterSubstitutionType.Internal*) ret;
                }

                private TemplateParameterSubstitutionType(TemplateParameterSubstitutionType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected TemplateParameterSubstitutionType(TemplateParameterSubstitutionType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public TemplateParameterSubstitutionType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.QualifiedType Replacement
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->Replacement);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Replacement = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class InjectedClassNameType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(8)]
                    public global::System.IntPtr TemplateSpecialization;

                    [FieldOffset(12)]
                    public global::System.IntPtr Class;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0InjectedClassNameType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0InjectedClassNameType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                private readonly bool __ownsNativeInstance;

                public static new InjectedClassNameType __CreateInstance(global::System.IntPtr native)
                {
                    return new InjectedClassNameType((InjectedClassNameType.Internal*) native);
                }

                public static InjectedClassNameType __CreateInstance(InjectedClassNameType.Internal native)
                {
                    return new InjectedClassNameType(native);
                }

                private static InjectedClassNameType.Internal* __CopyValue(InjectedClassNameType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(16);
                    CppSharp.Parser.AST.InjectedClassNameType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (InjectedClassNameType.Internal*) ret;
                }

                private InjectedClassNameType(InjectedClassNameType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected InjectedClassNameType(InjectedClassNameType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public InjectedClassNameType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.TemplateSpecializationType TemplateSpecialization
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->TemplateSpecialization == IntPtr.Zero) ? null : CppSharp.Parser.AST.TemplateSpecializationType.__CreateInstance(__ptr->TemplateSpecialization);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->TemplateSpecialization = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.Class Class
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Class == IntPtr.Zero) ? null : CppSharp.Parser.AST.Class.__CreateInstance(__ptr->Class);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class DependentNameType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DependentNameType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DependentNameType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                private readonly bool __ownsNativeInstance;

                public static new DependentNameType __CreateInstance(global::System.IntPtr native)
                {
                    return new DependentNameType((DependentNameType.Internal*) native);
                }

                public static DependentNameType __CreateInstance(DependentNameType.Internal native)
                {
                    return new DependentNameType(native);
                }

                private static DependentNameType.Internal* __CopyValue(DependentNameType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(8);
                    CppSharp.Parser.AST.DependentNameType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (DependentNameType.Internal*) ret;
                }

                private DependentNameType(DependentNameType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected DependentNameType(DependentNameType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public DependentNameType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }
            }

            public unsafe partial class PackExpansionType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PackExpansionType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PackExpansionType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                private readonly bool __ownsNativeInstance;

                public static new PackExpansionType __CreateInstance(global::System.IntPtr native)
                {
                    return new PackExpansionType((PackExpansionType.Internal*) native);
                }

                public static PackExpansionType __CreateInstance(PackExpansionType.Internal native)
                {
                    return new PackExpansionType(native);
                }

                private static PackExpansionType.Internal* __CopyValue(PackExpansionType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(8);
                    CppSharp.Parser.AST.PackExpansionType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (PackExpansionType.Internal*) ret;
                }

                private PackExpansionType(PackExpansionType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected PackExpansionType(PackExpansionType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public PackExpansionType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(8);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }
            }

            public unsafe partial class BuiltinType : CppSharp.Parser.AST.Type, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.TypeKind Kind;

                    [FieldOffset(4)]
                    public bool IsDependent;

                    [FieldOffset(8)]
                    public CppSharp.Parser.AST.PrimitiveType Type;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BuiltinType@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BuiltinType@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                private readonly bool __ownsNativeInstance;

                public static new BuiltinType __CreateInstance(global::System.IntPtr native)
                {
                    return new BuiltinType((BuiltinType.Internal*) native);
                }

                public static BuiltinType __CreateInstance(BuiltinType.Internal native)
                {
                    return new BuiltinType(native);
                }

                private static BuiltinType.Internal* __CopyValue(BuiltinType.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    CppSharp.Parser.AST.BuiltinType.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (BuiltinType.Internal*) ret;
                }

                private BuiltinType(BuiltinType.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected BuiltinType(BuiltinType.Internal* native, bool isInternalImpl = false)
                    : base((Type.Internal*) native)
                {
                }

                public BuiltinType()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.PrimitiveType Type
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Type;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Type = value;
                    }
                }
            }

            public unsafe partial class VTableComponent : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.VTableComponentKind Kind;

                    [FieldOffset(4)]
                    public uint Offset;

                    [FieldOffset(8)]
                    public global::System.IntPtr Declaration;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VTableComponent@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VTableComponent@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static VTableComponent __CreateInstance(global::System.IntPtr native)
                {
                    return new VTableComponent((VTableComponent.Internal*) native);
                }

                public static VTableComponent __CreateInstance(VTableComponent.Internal native)
                {
                    return new VTableComponent(native);
                }

                private static VTableComponent.Internal* __CopyValue(VTableComponent.Internal native)
                {
                    var ret = (VTableComponent.Internal*) Marshal.AllocHGlobal(12);
                    *ret = native;
                    return ret;
                }

                private VTableComponent(VTableComponent.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected VTableComponent(VTableComponent.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public VTableComponent()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public CppSharp.Parser.AST.VTableComponentKind Kind
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Kind;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Kind = value;
                    }
                }

                public uint Offset
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Offset;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Offset = value;
                    }
                }

                public CppSharp.Parser.AST.Declaration Declaration
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Declaration == IntPtr.Zero) ? null : CppSharp.Parser.AST.Declaration.__CreateInstance(__ptr->Declaration);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class VTableLayout : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VTableLayout@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VTableLayout@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1VTableLayout@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getComponents@VTableLayout@AST@CppParser@CppSharp@@QAE?AUVTableComponent@234@I@Z")]
                    internal static extern void getComponents_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addComponents@VTableLayout@AST@CppParser@CppSharp@@QAEXAAUVTableComponent@234@@Z")]
                    internal static extern void addComponents_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearComponents@VTableLayout@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearComponents_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getComponentsCount@VTableLayout@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getComponentsCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static VTableLayout __CreateInstance(global::System.IntPtr native)
                {
                    return new VTableLayout((VTableLayout.Internal*) native);
                }

                public static VTableLayout __CreateInstance(VTableLayout.Internal native)
                {
                    return new VTableLayout(native);
                }

                private static VTableLayout.Internal* __CopyValue(VTableLayout.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    CppSharp.Parser.AST.VTableLayout.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (VTableLayout.Internal*) ret;
                }

                private VTableLayout(VTableLayout.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected VTableLayout(VTableLayout.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public VTableLayout()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    Internal.dtor_0(__Instance);
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public CppSharp.Parser.AST.VTableComponent getComponents(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.VTableComponent.Internal();
                    Internal.getComponents_0(__Instance, new IntPtr(&__ret), i);
                    return CppSharp.Parser.AST.VTableComponent.__CreateInstance(__ret);
                }

                public void addComponents(CppSharp.Parser.AST.VTableComponent s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addComponents_0(__Instance, arg0);
                }

                public void clearComponents()
                {
                    Internal.clearComponents_0(__Instance);
                }

                public uint ComponentsCount
                {
                    get
                    {
                        var __ret = Internal.getComponentsCount_0(__Instance);
                        return __ret;
                    }
                }
            }

            public unsafe partial class VFTableInfo : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public ulong VBTableIndex;

                    [FieldOffset(8)]
                    public uint VFPtrOffset;

                    [FieldOffset(12)]
                    public uint VFPtrFullOffset;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.VTableLayout.Internal Layout;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VFTableInfo@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0VFTableInfo@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1VFTableInfo@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static VFTableInfo __CreateInstance(global::System.IntPtr native)
                {
                    return new VFTableInfo((VFTableInfo.Internal*) native);
                }

                public static VFTableInfo __CreateInstance(VFTableInfo.Internal native)
                {
                    return new VFTableInfo(native);
                }

                private static VFTableInfo.Internal* __CopyValue(VFTableInfo.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    CppSharp.Parser.AST.VFTableInfo.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (VFTableInfo.Internal*) ret;
                }

                private VFTableInfo(VFTableInfo.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected VFTableInfo(VFTableInfo.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public VFTableInfo()
                {
                    __Instance = Marshal.AllocHGlobal(32);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    Internal.dtor_0(__Instance);
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public ulong VBTableIndex
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->VBTableIndex;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->VBTableIndex = value;
                    }
                }

                public uint VFPtrOffset
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->VFPtrOffset;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->VFPtrOffset = value;
                    }
                }

                public uint VFPtrFullOffset
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->VFPtrFullOffset;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->VFPtrFullOffset = value;
                    }
                }

                public CppSharp.Parser.AST.VTableLayout Layout
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.VTableLayout.__CreateInstance(__ptr->Layout);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Layout = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.VTableLayout.Internal() : *(CppSharp.Parser.AST.VTableLayout.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class ClassLayout : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 48)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CppAbi ABI;

                    [FieldOffset(16)]
                    public CppSharp.Parser.AST.VTableLayout.Internal Layout;

                    [FieldOffset(28)]
                    public bool HasOwnVFPtr;

                    [FieldOffset(32)]
                    public int VBPtrOffset;

                    [FieldOffset(36)]
                    public int Alignment;

                    [FieldOffset(40)]
                    public int Size;

                    [FieldOffset(44)]
                    public int DataSize;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassLayout@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassLayout@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1ClassLayout@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getVFTables@ClassLayout@AST@CppParser@CppSharp@@QAE?AUVFTableInfo@234@I@Z")]
                    internal static extern void getVFTables_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addVFTables@ClassLayout@AST@CppParser@CppSharp@@QAEXAAUVFTableInfo@234@@Z")]
                    internal static extern void addVFTables_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearVFTables@ClassLayout@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearVFTables_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getVFTablesCount@ClassLayout@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getVFTablesCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static ClassLayout __CreateInstance(global::System.IntPtr native)
                {
                    return new ClassLayout((ClassLayout.Internal*) native);
                }

                public static ClassLayout __CreateInstance(ClassLayout.Internal native)
                {
                    return new ClassLayout(native);
                }

                private static ClassLayout.Internal* __CopyValue(ClassLayout.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(48);
                    CppSharp.Parser.AST.ClassLayout.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (ClassLayout.Internal*) ret;
                }

                private ClassLayout(ClassLayout.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected ClassLayout(ClassLayout.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public ClassLayout()
                {
                    __Instance = Marshal.AllocHGlobal(48);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    Internal.dtor_0(__Instance);
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public CppSharp.Parser.AST.VFTableInfo getVFTables(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.VFTableInfo.Internal();
                    Internal.getVFTables_0(__Instance, new IntPtr(&__ret), i);
                    return CppSharp.Parser.AST.VFTableInfo.__CreateInstance(__ret);
                }

                public void addVFTables(CppSharp.Parser.AST.VFTableInfo s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addVFTables_0(__Instance, arg0);
                }

                public void clearVFTables()
                {
                    Internal.clearVFTables_0(__Instance);
                }

                public uint VFTablesCount
                {
                    get
                    {
                        var __ret = Internal.getVFTablesCount_0(__Instance);
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.CppAbi ABI
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->ABI;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->ABI = value;
                    }
                }

                public CppSharp.Parser.AST.VTableLayout Layout
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.VTableLayout.__CreateInstance(__ptr->Layout);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Layout = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.VTableLayout.Internal() : *(CppSharp.Parser.AST.VTableLayout.Internal*) (value.__Instance);
                    }
                }

                public bool HasOwnVFPtr
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->HasOwnVFPtr;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->HasOwnVFPtr = value;
                    }
                }

                public int VBPtrOffset
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->VBPtrOffset;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->VBPtrOffset = value;
                    }
                }

                public int Alignment
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Alignment;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Alignment = value;
                    }
                }

                public int Size
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Size;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Size = value;
                    }
                }

                public int DataSize
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->DataSize;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->DataSize = value;
                    }
                }
            }

            public unsafe partial class Declaration : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 120)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Declaration@AST@CppParser@CppSharp@@QAE@W4DeclarationKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, CppSharp.Parser.AST.DeclarationKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Declaration@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Declaration@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getPreprocessedEntities@Declaration@AST@CppParser@CppSharp@@QAEPAVPreprocessedEntity@234@I@Z")]
                    internal static extern global::System.IntPtr getPreprocessedEntities_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addPreprocessedEntities@Declaration@AST@CppParser@CppSharp@@QAEXAAPAVPreprocessedEntity@234@@Z")]
                    internal static extern void addPreprocessedEntities_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearPreprocessedEntities@Declaration@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearPreprocessedEntities_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getName@Declaration@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setName@Declaration@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setName_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getDebugText@Declaration@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getDebugText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setDebugText@Declaration@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setDebugText_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getPreprocessedEntitiesCount@Declaration@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getPreprocessedEntitiesCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static Declaration __CreateInstance(global::System.IntPtr native)
                {
                    return new Declaration((Declaration.Internal*) native);
                }

                public static Declaration __CreateInstance(Declaration.Internal native)
                {
                    return new Declaration(native);
                }

                private static Declaration.Internal* __CopyValue(Declaration.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(120);
                    CppSharp.Parser.AST.Declaration.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (Declaration.Internal*) ret;
                }

                private Declaration(Declaration.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Declaration(Declaration.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public Declaration(CppSharp.Parser.AST.DeclarationKind kind)
                {
                    __Instance = Marshal.AllocHGlobal(120);
                    __ownsNativeInstance = true;
                    var arg0 = kind;
                    Internal.ctor_0(__Instance, arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    Internal.dtor_0(__Instance);
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public CppSharp.Parser.AST.PreprocessedEntity getPreprocessedEntities(uint i)
                {
                    var __ret = Internal.getPreprocessedEntities_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.PreprocessedEntity.__CreateInstance(__ret);
                }

                public void addPreprocessedEntities(CppSharp.Parser.AST.PreprocessedEntity s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addPreprocessedEntities_0(__Instance, arg0);
                }

                public void clearPreprocessedEntities()
                {
                    Internal.clearPreprocessedEntities_0(__Instance);
                }

                public string Name
                {
                    get
                    {
                        var __ret = Internal.getName_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setName_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public string DebugText
                {
                    get
                    {
                        var __ret = Internal.getDebugText_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setDebugText_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public uint PreprocessedEntitiesCount
                {
                    get
                    {
                        var __ret = Internal.getPreprocessedEntitiesCount_0(__Instance);
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.DeclarationKind Kind
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Kind;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Kind = value;
                    }
                }

                public CppSharp.Parser.AST.AccessSpecifier Access
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Access;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Access = value;
                    }
                }

                public CppSharp.Parser.AST.DeclarationContext _Namespace
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->_Namespace == IntPtr.Zero) ? null : CppSharp.Parser.AST.DeclarationContext.__CreateInstance(__ptr->_Namespace);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->_Namespace = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.SourceLocation Location
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.SourceLocation.__CreateInstance(__ptr->Location);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Location = value.ToInternal();
                    }
                }

                public CppSharp.Parser.AST.RawComment Comment
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Comment == IntPtr.Zero) ? null : CppSharp.Parser.AST.RawComment.__CreateInstance(__ptr->Comment);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Comment = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public bool IsIncomplete
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsIncomplete;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsIncomplete = value;
                    }
                }

                public bool IsDependent
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsDependent;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsDependent = value;
                    }
                }

                public CppSharp.Parser.AST.Declaration CompleteDeclaration
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->CompleteDeclaration == IntPtr.Zero) ? null : CppSharp.Parser.AST.Declaration.__CreateInstance(__ptr->CompleteDeclaration);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->CompleteDeclaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public uint DefinitionOrder
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->DefinitionOrder;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->DefinitionOrder = value;
                    }
                }

                public global::System.IntPtr OriginalPtr
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->OriginalPtr;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->OriginalPtr = value;
                    }
                }
            }

            public unsafe partial class DeclarationContext : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 216)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(212)]
                    public bool IsAnonymous;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DeclarationContext@AST@CppParser@CppSharp@@QAE@W4DeclarationKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, CppSharp.Parser.AST.DeclarationKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0DeclarationContext@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1DeclarationContext@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getNamespaces@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVNamespace@234@I@Z")]
                    internal static extern global::System.IntPtr getNamespaces_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addNamespaces@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVNamespace@234@@Z")]
                    internal static extern void addNamespaces_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearNamespaces@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearNamespaces_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getEnums@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVEnumeration@234@I@Z")]
                    internal static extern global::System.IntPtr getEnums_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addEnums@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVEnumeration@234@@Z")]
                    internal static extern void addEnums_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearEnums@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearEnums_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFunctions@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVFunction@234@I@Z")]
                    internal static extern global::System.IntPtr getFunctions_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addFunctions@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVFunction@234@@Z")]
                    internal static extern void addFunctions_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearFunctions@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearFunctions_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getClasses@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVClass@234@I@Z")]
                    internal static extern global::System.IntPtr getClasses_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addClasses@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVClass@234@@Z")]
                    internal static extern void addClasses_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearClasses@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearClasses_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTemplates@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVTemplate@234@I@Z")]
                    internal static extern global::System.IntPtr getTemplates_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addTemplates@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVTemplate@234@@Z")]
                    internal static extern void addTemplates_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearTemplates@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearTemplates_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTypedefs@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVTypedefDecl@234@I@Z")]
                    internal static extern global::System.IntPtr getTypedefs_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addTypedefs@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVTypedefDecl@234@@Z")]
                    internal static extern void addTypedefs_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearTypedefs@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearTypedefs_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getVariables@DeclarationContext@AST@CppParser@CppSharp@@QAEPAVVariable@234@I@Z")]
                    internal static extern global::System.IntPtr getVariables_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addVariables@DeclarationContext@AST@CppParser@CppSharp@@QAEXAAPAVVariable@234@@Z")]
                    internal static extern void addVariables_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearVariables@DeclarationContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearVariables_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getNamespacesCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getNamespacesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getEnumsCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getEnumsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFunctionsCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getFunctionsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getClassesCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getClassesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTemplatesCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getTemplatesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTypedefsCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getTypedefsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getVariablesCount@DeclarationContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getVariablesCount_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new DeclarationContext __CreateInstance(global::System.IntPtr native)
                {
                    return new DeclarationContext((DeclarationContext.Internal*) native);
                }

                public static DeclarationContext __CreateInstance(DeclarationContext.Internal native)
                {
                    return new DeclarationContext(native);
                }

                private static DeclarationContext.Internal* __CopyValue(DeclarationContext.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(216);
                    CppSharp.Parser.AST.DeclarationContext.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (DeclarationContext.Internal*) ret;
                }

                private DeclarationContext(DeclarationContext.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected DeclarationContext(DeclarationContext.Internal* native, bool isInternalImpl = false)
                    : base((Declaration.Internal*) native)
                {
                }

                public DeclarationContext(CppSharp.Parser.AST.DeclarationKind kind)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(216);
                    __ownsNativeInstance = true;
                    var arg0 = kind;
                    Internal.ctor_0(__Instance, arg0);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.Namespace getNamespaces(uint i)
                {
                    var __ret = Internal.getNamespaces_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.Namespace.__CreateInstance(__ret);
                }

                public void addNamespaces(CppSharp.Parser.AST.Namespace s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addNamespaces_0(__Instance, arg0);
                }

                public void clearNamespaces()
                {
                    Internal.clearNamespaces_0(__Instance);
                }

                public CppSharp.Parser.AST.Enumeration getEnums(uint i)
                {
                    var __ret = Internal.getEnums_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.Enumeration.__CreateInstance(__ret);
                }

                public void addEnums(CppSharp.Parser.AST.Enumeration s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addEnums_0(__Instance, arg0);
                }

                public void clearEnums()
                {
                    Internal.clearEnums_0(__Instance);
                }

                public CppSharp.Parser.AST.Function getFunctions(uint i)
                {
                    var __ret = Internal.getFunctions_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.Function.__CreateInstance(__ret);
                }

                public void addFunctions(CppSharp.Parser.AST.Function s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addFunctions_0(__Instance, arg0);
                }

                public void clearFunctions()
                {
                    Internal.clearFunctions_0(__Instance);
                }

                public CppSharp.Parser.AST.Class getClasses(uint i)
                {
                    var __ret = Internal.getClasses_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.Class.__CreateInstance(__ret);
                }

                public void addClasses(CppSharp.Parser.AST.Class s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addClasses_0(__Instance, arg0);
                }

                public void clearClasses()
                {
                    Internal.clearClasses_0(__Instance);
                }

                public CppSharp.Parser.AST.Template getTemplates(uint i)
                {
                    var __ret = Internal.getTemplates_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.Template.__CreateInstance(__ret);
                }

                public void addTemplates(CppSharp.Parser.AST.Template s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addTemplates_0(__Instance, arg0);
                }

                public void clearTemplates()
                {
                    Internal.clearTemplates_0(__Instance);
                }

                public CppSharp.Parser.AST.TypedefDecl getTypedefs(uint i)
                {
                    var __ret = Internal.getTypedefs_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.TypedefDecl.__CreateInstance(__ret);
                }

                public void addTypedefs(CppSharp.Parser.AST.TypedefDecl s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addTypedefs_0(__Instance, arg0);
                }

                public void clearTypedefs()
                {
                    Internal.clearTypedefs_0(__Instance);
                }

                public CppSharp.Parser.AST.Variable getVariables(uint i)
                {
                    var __ret = Internal.getVariables_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.Variable.__CreateInstance(__ret);
                }

                public void addVariables(CppSharp.Parser.AST.Variable s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addVariables_0(__Instance, arg0);
                }

                public void clearVariables()
                {
                    Internal.clearVariables_0(__Instance);
                }

                public uint NamespacesCount
                {
                    get
                    {
                        var __ret = Internal.getNamespacesCount_0(__Instance);
                        return __ret;
                    }
                }

                public uint EnumsCount
                {
                    get
                    {
                        var __ret = Internal.getEnumsCount_0(__Instance);
                        return __ret;
                    }
                }

                public uint FunctionsCount
                {
                    get
                    {
                        var __ret = Internal.getFunctionsCount_0(__Instance);
                        return __ret;
                    }
                }

                public uint ClassesCount
                {
                    get
                    {
                        var __ret = Internal.getClassesCount_0(__Instance);
                        return __ret;
                    }
                }

                public uint TemplatesCount
                {
                    get
                    {
                        var __ret = Internal.getTemplatesCount_0(__Instance);
                        return __ret;
                    }
                }

                public uint TypedefsCount
                {
                    get
                    {
                        var __ret = Internal.getTypedefsCount_0(__Instance);
                        return __ret;
                    }
                }

                public uint VariablesCount
                {
                    get
                    {
                        var __ret = Internal.getVariablesCount_0(__Instance);
                        return __ret;
                    }
                }

                public bool IsAnonymous
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsAnonymous;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsAnonymous = value;
                    }
                }
            }

            public unsafe partial class TypedefDecl : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 128)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(120)]
                    public CppSharp.Parser.AST.QualifiedType.Internal QualifiedType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypedefDecl@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TypedefDecl@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TypedefDecl@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new TypedefDecl __CreateInstance(global::System.IntPtr native)
                {
                    return new TypedefDecl((TypedefDecl.Internal*) native);
                }

                public static TypedefDecl __CreateInstance(TypedefDecl.Internal native)
                {
                    return new TypedefDecl(native);
                }

                private static TypedefDecl.Internal* __CopyValue(TypedefDecl.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(128);
                    CppSharp.Parser.AST.TypedefDecl.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TypedefDecl.Internal*) ret;
                }

                private TypedefDecl(TypedefDecl.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected TypedefDecl(TypedefDecl.Internal* native, bool isInternalImpl = false)
                    : base((Declaration.Internal*) native)
                {
                }

                public TypedefDecl()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(128);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->QualifiedType);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class Statement : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 32)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.StatementClass Class;

                    [FieldOffset(4)]
                    public global::System.IntPtr Decl;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Statement@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Statement@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getString@Statement@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getString_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setString@Statement@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setString_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static Statement __CreateInstance(global::System.IntPtr native)
                {
                    return new Statement((Statement.Internal*) native);
                }

                public static Statement __CreateInstance(Statement.Internal native)
                {
                    return new Statement(native);
                }

                private static Statement.Internal* __CopyValue(Statement.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(32);
                    CppSharp.Parser.AST.Statement.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Statement.Internal*) ret;
                }

                private Statement(Statement.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Statement(Statement.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    Internal.dtor_0(__Instance);
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public string String
                {
                    get
                    {
                        var __ret = Internal.getString_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setString_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public CppSharp.Parser.AST.StatementClass Class
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Class;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Class = value;
                    }
                }

                public CppSharp.Parser.AST.Declaration Decl
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Decl == IntPtr.Zero) ? null : CppSharp.Parser.AST.Declaration.__CreateInstance(__ptr->Decl);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Decl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Expression : CppSharp.Parser.AST.Statement, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 36)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.StatementClass Class;

                    [FieldOffset(4)]
                    public global::System.IntPtr Decl;

                    [FieldOffset(32)]
                    public global::System.IntPtr Subexpression;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Expression@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Expression@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new Expression __CreateInstance(global::System.IntPtr native)
                {
                    return new Expression((Expression.Internal*) native);
                }

                public static Expression __CreateInstance(Expression.Internal native)
                {
                    return new Expression(native);
                }

                private static Expression.Internal* __CopyValue(Expression.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(36);
                    CppSharp.Parser.AST.Expression.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (Expression.Internal*) ret;
                }

                private Expression(Expression.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Expression(Expression.Internal* native, bool isInternalImpl = false)
                    : base((Statement.Internal*) native)
                {
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.Expression Subexpression
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Subexpression == IntPtr.Zero) ? null : CppSharp.Parser.AST.Expression.__CreateInstance(__ptr->Subexpression);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Subexpression = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Parameter : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 140)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(120)]
                    public CppSharp.Parser.AST.QualifiedType.Internal QualifiedType;

                    [FieldOffset(128)]
                    public bool IsIndirect;

                    [FieldOffset(129)]
                    public bool HasDefaultValue;

                    [FieldOffset(132)]
                    public uint Index;

                    [FieldOffset(136)]
                    public global::System.IntPtr DefaultArgument;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Parameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Parameter@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Parameter@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new Parameter __CreateInstance(global::System.IntPtr native)
                {
                    return new Parameter((Parameter.Internal*) native);
                }

                public static Parameter __CreateInstance(Parameter.Internal native)
                {
                    return new Parameter(native);
                }

                private static Parameter.Internal* __CopyValue(Parameter.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(140);
                    CppSharp.Parser.AST.Parameter.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Parameter.Internal*) ret;
                }

                private Parameter(Parameter.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Parameter(Parameter.Internal* native, bool isInternalImpl = false)
                    : base((Declaration.Internal*) native)
                {
                }

                public Parameter()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(140);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->QualifiedType);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public bool IsIndirect
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsIndirect;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsIndirect = value;
                    }
                }

                public bool HasDefaultValue
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->HasDefaultValue;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->HasDefaultValue = value;
                    }
                }

                public uint Index
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Index;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Index = value;
                    }
                }

                public CppSharp.Parser.AST.Expression DefaultArgument
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->DefaultArgument == IntPtr.Zero) ? null : CppSharp.Parser.AST.Expression.__CreateInstance(__ptr->DefaultArgument);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->DefaultArgument = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Function : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 208)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(120)]
                    public CppSharp.Parser.AST.QualifiedType.Internal ReturnType;

                    [FieldOffset(128)]
                    public bool IsReturnIndirect;

                    [FieldOffset(129)]
                    public bool HasThisReturn;

                    [FieldOffset(130)]
                    public bool IsVariadic;

                    [FieldOffset(131)]
                    public bool IsInline;

                    [FieldOffset(132)]
                    public bool IsPure;

                    [FieldOffset(133)]
                    public bool IsDeleted;

                    [FieldOffset(136)]
                    public CppSharp.Parser.AST.CXXOperatorKind OperatorKind;

                    [FieldOffset(188)]
                    public CppSharp.Parser.AST.CallingConvention CallingConvention;

                    [FieldOffset(204)]
                    public global::System.IntPtr SpecializationInfo;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Function@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Function@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Function@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getParameters@Function@AST@CppParser@CppSharp@@QAEPAVParameter@234@I@Z")]
                    internal static extern global::System.IntPtr getParameters_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addParameters@Function@AST@CppParser@CppSharp@@QAEXAAPAVParameter@234@@Z")]
                    internal static extern void addParameters_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearParameters@Function@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearParameters_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getMangled@Function@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getMangled_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setMangled@Function@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setMangled_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSignature@Function@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getSignature_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setSignature@Function@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setSignature_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getParametersCount@Function@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getParametersCount_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new Function __CreateInstance(global::System.IntPtr native)
                {
                    return new Function((Function.Internal*) native);
                }

                public static Function __CreateInstance(Function.Internal native)
                {
                    return new Function(native);
                }

                private static Function.Internal* __CopyValue(Function.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(208);
                    CppSharp.Parser.AST.Function.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Function.Internal*) ret;
                }

                private Function(Function.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Function(Function.Internal* native, bool isInternalImpl = false)
                    : base((Declaration.Internal*) native)
                {
                }

                public Function()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(208);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.Parameter getParameters(uint i)
                {
                    var __ret = Internal.getParameters_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.Parameter.__CreateInstance(__ret);
                }

                public void addParameters(CppSharp.Parser.AST.Parameter s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addParameters_0(__Instance, arg0);
                }

                public void clearParameters()
                {
                    Internal.clearParameters_0(__Instance);
                }

                public string Mangled
                {
                    get
                    {
                        var __ret = Internal.getMangled_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setMangled_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public string Signature
                {
                    get
                    {
                        var __ret = Internal.getSignature_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setSignature_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public uint ParametersCount
                {
                    get
                    {
                        var __ret = Internal.getParametersCount_0(__Instance);
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.QualifiedType ReturnType
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->ReturnType);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->ReturnType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public bool IsReturnIndirect
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsReturnIndirect;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsReturnIndirect = value;
                    }
                }

                public bool HasThisReturn
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->HasThisReturn;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->HasThisReturn = value;
                    }
                }

                public bool IsVariadic
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsVariadic;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsVariadic = value;
                    }
                }

                public bool IsInline
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsInline;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsInline = value;
                    }
                }

                public bool IsPure
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsPure;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsPure = value;
                    }
                }

                public bool IsDeleted
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsDeleted;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsDeleted = value;
                    }
                }

                public CppSharp.Parser.AST.CXXOperatorKind OperatorKind
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->OperatorKind;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->OperatorKind = value;
                    }
                }

                public CppSharp.Parser.AST.CallingConvention CallingConvention
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->CallingConvention;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->CallingConvention = value;
                    }
                }

                public CppSharp.Parser.AST.FunctionTemplateSpecialization SpecializationInfo
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->SpecializationInfo == IntPtr.Zero) ? null : CppSharp.Parser.AST.FunctionTemplateSpecialization.__CreateInstance(__ptr->SpecializationInfo);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->SpecializationInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Method : CppSharp.Parser.AST.Function, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 236)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(120)]
                    public CppSharp.Parser.AST.QualifiedType.Internal ReturnType;

                    [FieldOffset(128)]
                    public bool IsReturnIndirect;

                    [FieldOffset(129)]
                    public bool HasThisReturn;

                    [FieldOffset(130)]
                    public bool IsVariadic;

                    [FieldOffset(131)]
                    public bool IsInline;

                    [FieldOffset(132)]
                    public bool IsPure;

                    [FieldOffset(133)]
                    public bool IsDeleted;

                    [FieldOffset(136)]
                    public CppSharp.Parser.AST.CXXOperatorKind OperatorKind;

                    [FieldOffset(188)]
                    public CppSharp.Parser.AST.CallingConvention CallingConvention;

                    [FieldOffset(204)]
                    public global::System.IntPtr SpecializationInfo;

                    [FieldOffset(208)]
                    public global::System.IntPtr AccessDecl;

                    [FieldOffset(212)]
                    public bool IsVirtual;

                    [FieldOffset(213)]
                    public bool IsStatic;

                    [FieldOffset(214)]
                    public bool IsConst;

                    [FieldOffset(215)]
                    public bool IsImplicit;

                    [FieldOffset(216)]
                    public bool IsExplicit;

                    [FieldOffset(217)]
                    public bool IsOverride;

                    [FieldOffset(220)]
                    public CppSharp.Parser.AST.CXXMethodKind MethodKind;

                    [FieldOffset(224)]
                    public bool IsDefaultConstructor;

                    [FieldOffset(225)]
                    public bool IsCopyConstructor;

                    [FieldOffset(226)]
                    public bool IsMoveConstructor;

                    [FieldOffset(228)]
                    public CppSharp.Parser.AST.QualifiedType.Internal ConversionType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Method@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Method@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Method@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new Method __CreateInstance(global::System.IntPtr native)
                {
                    return new Method((Method.Internal*) native);
                }

                public static Method __CreateInstance(Method.Internal native)
                {
                    return new Method(native);
                }

                private static Method.Internal* __CopyValue(Method.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(236);
                    CppSharp.Parser.AST.Method.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (Method.Internal*) ret;
                }

                private Method(Method.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Method(Method.Internal* native, bool isInternalImpl = false)
                    : base((Function.Internal*) native)
                {
                }

                public Method()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(236);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.AccessSpecifierDecl AccessDecl
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->AccessDecl == IntPtr.Zero) ? null : CppSharp.Parser.AST.AccessSpecifierDecl.__CreateInstance(__ptr->AccessDecl);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->AccessDecl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public bool IsVirtual
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsVirtual;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsVirtual = value;
                    }
                }

                public bool IsStatic
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsStatic;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsStatic = value;
                    }
                }

                public bool IsConst
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsConst;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsConst = value;
                    }
                }

                public bool IsImplicit
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsImplicit;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsImplicit = value;
                    }
                }

                public bool IsExplicit
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsExplicit;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsExplicit = value;
                    }
                }

                public bool IsOverride
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsOverride;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsOverride = value;
                    }
                }

                public CppSharp.Parser.AST.CXXMethodKind MethodKind
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->MethodKind;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->MethodKind = value;
                    }
                }

                public bool IsDefaultConstructor
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsDefaultConstructor;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsDefaultConstructor = value;
                    }
                }

                public bool IsCopyConstructor
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsCopyConstructor;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsCopyConstructor = value;
                    }
                }

                public bool IsMoveConstructor
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsMoveConstructor;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsMoveConstructor = value;
                    }
                }

                public CppSharp.Parser.AST.QualifiedType ConversionType
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->ConversionType);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->ConversionType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class Enumeration : CppSharp.Parser.AST.DeclarationContext, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 240)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(212)]
                    public bool IsAnonymous;

                    [FieldOffset(216)]
                    public CppSharp.Parser.AST.Enumeration.EnumModifiers Modifiers;

                    [FieldOffset(220)]
                    public global::System.IntPtr Type;

                    [FieldOffset(224)]
                    public global::System.IntPtr BuiltinType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Enumeration@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Enumeration@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Enumeration@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getItems@Enumeration@AST@CppParser@CppSharp@@QAE?AVItem@1234@I@Z")]
                    internal static extern void getItems_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addItems@Enumeration@AST@CppParser@CppSharp@@QAEXAAVItem@1234@@Z")]
                    internal static extern void addItems_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearItems@Enumeration@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearItems_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getItemsCount@Enumeration@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getItemsCount_0(global::System.IntPtr instance);
                }

                [Flags]
                public enum EnumModifiers
                {
                    Anonymous = 1,
                    Scoped = 2,
                    Flags = 4
                }

                public unsafe partial class Item : CppSharp.Parser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 152)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.Parser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.Parser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(12)]
                        public CppSharp.Parser.SourceLocation.Internal Location;

                        [FieldOffset(40)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(68)]
                        public bool IsIncomplete;

                        [FieldOffset(69)]
                        public bool IsDependent;

                        [FieldOffset(72)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(76)]
                        public uint DefinitionOrder;

                        [FieldOffset(92)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(144)]
                        public ulong Value;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??0Item@Enumeration@AST@CppParser@CppSharp@@QAE@XZ")]
                        internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??0Item@Enumeration@AST@CppParser@CppSharp@@QAE@ABV01234@@Z")]
                        internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="??1Item@Enumeration@AST@CppParser@CppSharp@@QAE@XZ")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="?getExpression@Item@Enumeration@AST@CppParser@CppSharp@@QAEPBDXZ")]
                        internal static extern global::System.IntPtr getExpression_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                            EntryPoint="?setExpression@Item@Enumeration@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                        internal static extern void setExpression_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new Item __CreateInstance(global::System.IntPtr native)
                    {
                        return new Item((Item.Internal*) native);
                    }

                    public static Item __CreateInstance(Item.Internal native)
                    {
                        return new Item(native);
                    }

                    private static Item.Internal* __CopyValue(Item.Internal native)
                    {
                        var ret = Marshal.AllocHGlobal(152);
                        CppSharp.Parser.AST.Enumeration.Item.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                        return (Item.Internal*) ret;
                    }

                    private Item(Item.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                    }

                    protected Item(Item.Internal* native, bool isInternalImpl = false)
                        : base((Declaration.Internal*) native)
                    {
                    }

                    public Item()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(152);
                        __ownsNativeInstance = true;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        if (__ownsNativeInstance)
                        {
                            Marshal.FreeHGlobal(__Instance);
                        }
                        base.Dispose(disposing);
                    }

                    public string Expression
                    {
                        get
                        {
                            var __ret = Internal.getExpression_0(__Instance);
                            if (__ret == global::System.IntPtr.Zero) return null;
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        set
                        {
                            var arg0 = Marshal.StringToHGlobalAnsi(value);
                            Internal.setExpression_0(__Instance, arg0);
                            Marshal.FreeHGlobal(arg0);
                        }
                    }

                    public ulong Value
                    {
                        get
                        {
                            var __ptr = (Internal*)__Instance.ToPointer();
                            return __ptr->Value;
                        }

                        set
                        {
                            var __ptr = (Internal*)__Instance.ToPointer();
                            __ptr->Value = value;
                        }
                    }
                }

                private readonly bool __ownsNativeInstance;

                public static new Enumeration __CreateInstance(global::System.IntPtr native)
                {
                    return new Enumeration((Enumeration.Internal*) native);
                }

                public static Enumeration __CreateInstance(Enumeration.Internal native)
                {
                    return new Enumeration(native);
                }

                private static Enumeration.Internal* __CopyValue(Enumeration.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(240);
                    CppSharp.Parser.AST.Enumeration.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Enumeration.Internal*) ret;
                }

                private Enumeration(Enumeration.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Enumeration(Enumeration.Internal* native, bool isInternalImpl = false)
                    : base((DeclarationContext.Internal*) native)
                {
                }

                public Enumeration()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(240);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.Enumeration.Item getItems(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.Enumeration.Item.Internal();
                    Internal.getItems_0(__Instance, new IntPtr(&__ret), i);
                    return CppSharp.Parser.AST.Enumeration.Item.__CreateInstance(__ret);
                }

                public void addItems(CppSharp.Parser.AST.Enumeration.Item s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addItems_0(__Instance, arg0);
                }

                public void clearItems()
                {
                    Internal.clearItems_0(__Instance);
                }

                public uint ItemsCount
                {
                    get
                    {
                        var __ret = Internal.getItemsCount_0(__Instance);
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.Enumeration.EnumModifiers Modifiers
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Modifiers;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Modifiers = value;
                    }
                }

                public CppSharp.Parser.AST.Type Type
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Type == IntPtr.Zero) ? null : CppSharp.Parser.AST.Type.__CreateInstance(__ptr->Type);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Type = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.BuiltinType BuiltinType
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->BuiltinType == IntPtr.Zero) ? null : CppSharp.Parser.AST.BuiltinType.__CreateInstance(__ptr->BuiltinType);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->BuiltinType = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Variable : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 152)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(144)]
                    public CppSharp.Parser.AST.QualifiedType.Internal QualifiedType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Variable@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Variable@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Variable@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getMangled@Variable@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getMangled_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setMangled@Variable@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setMangled_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                private readonly bool __ownsNativeInstance;

                public static new Variable __CreateInstance(global::System.IntPtr native)
                {
                    return new Variable((Variable.Internal*) native);
                }

                public static Variable __CreateInstance(Variable.Internal native)
                {
                    return new Variable(native);
                }

                private static Variable.Internal* __CopyValue(Variable.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(152);
                    CppSharp.Parser.AST.Variable.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Variable.Internal*) ret;
                }

                private Variable(Variable.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Variable(Variable.Internal* native, bool isInternalImpl = false)
                    : base((Declaration.Internal*) native)
                {
                }

                public Variable()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(152);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public string Mangled
                {
                    get
                    {
                        var __ret = Internal.getMangled_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setMangled_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->QualifiedType);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }
            }

            public unsafe partial class BaseClassSpecifier : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(4)]
                    public bool IsVirtual;

                    [FieldOffset(8)]
                    public global::System.IntPtr Type;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BaseClassSpecifier@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0BaseClassSpecifier@AST@CppParser@CppSharp@@QAE@ABU0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static BaseClassSpecifier __CreateInstance(global::System.IntPtr native)
                {
                    return new BaseClassSpecifier((BaseClassSpecifier.Internal*) native);
                }

                public static BaseClassSpecifier __CreateInstance(BaseClassSpecifier.Internal native)
                {
                    return new BaseClassSpecifier(native);
                }

                private static BaseClassSpecifier.Internal* __CopyValue(BaseClassSpecifier.Internal native)
                {
                    var ret = (BaseClassSpecifier.Internal*) Marshal.AllocHGlobal(12);
                    *ret = native;
                    return ret;
                }

                private BaseClassSpecifier(BaseClassSpecifier.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected BaseClassSpecifier(BaseClassSpecifier.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public BaseClassSpecifier()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public CppSharp.Parser.AST.AccessSpecifier Access
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Access;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Access = value;
                    }
                }

                public bool IsVirtual
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsVirtual;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsVirtual = value;
                    }
                }

                public CppSharp.Parser.AST.Type Type
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Type == IntPtr.Zero) ? null : CppSharp.Parser.AST.Type.__CreateInstance(__ptr->Type);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Type = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Field : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 144)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(120)]
                    public CppSharp.Parser.AST.QualifiedType.Internal QualifiedType;

                    [FieldOffset(128)]
                    public uint Offset;

                    [FieldOffset(132)]
                    public global::System.IntPtr Class;

                    [FieldOffset(136)]
                    public bool IsBitField;

                    [FieldOffset(140)]
                    public uint BitWidth;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Field@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Field@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Field@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new Field __CreateInstance(global::System.IntPtr native)
                {
                    return new Field((Field.Internal*) native);
                }

                public static Field __CreateInstance(Field.Internal native)
                {
                    return new Field(native);
                }

                private static Field.Internal* __CopyValue(Field.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(144);
                    CppSharp.Parser.AST.Field.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Field.Internal*) ret;
                }

                private Field(Field.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Field(Field.Internal* native, bool isInternalImpl = false)
                    : base((Declaration.Internal*) native)
                {
                }

                public Field()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(144);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.QualifiedType QualifiedType
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return CppSharp.Parser.AST.QualifiedType.__CreateInstance(__ptr->QualifiedType);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.Parser.AST.QualifiedType.Internal() : *(CppSharp.Parser.AST.QualifiedType.Internal*) (value.__Instance);
                    }
                }

                public uint Offset
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Offset;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Offset = value;
                    }
                }

                public CppSharp.Parser.AST.Class Class
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Class == IntPtr.Zero) ? null : CppSharp.Parser.AST.Class.__CreateInstance(__ptr->Class);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public bool IsBitField
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsBitField;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsBitField = value;
                    }
                }

                public uint BitWidth
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->BitWidth;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->BitWidth = value;
                    }
                }
            }

            public unsafe partial class AccessSpecifierDecl : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 120)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0AccessSpecifierDecl@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0AccessSpecifierDecl@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1AccessSpecifierDecl@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new AccessSpecifierDecl __CreateInstance(global::System.IntPtr native)
                {
                    return new AccessSpecifierDecl((AccessSpecifierDecl.Internal*) native);
                }

                public static AccessSpecifierDecl __CreateInstance(AccessSpecifierDecl.Internal native)
                {
                    return new AccessSpecifierDecl(native);
                }

                private static AccessSpecifierDecl.Internal* __CopyValue(AccessSpecifierDecl.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(120);
                    CppSharp.Parser.AST.AccessSpecifierDecl.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (AccessSpecifierDecl.Internal*) ret;
                }

                private AccessSpecifierDecl(AccessSpecifierDecl.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected AccessSpecifierDecl(AccessSpecifierDecl.Internal* native, bool isInternalImpl = false)
                    : base((Declaration.Internal*) native)
                {
                }

                public AccessSpecifierDecl()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(120);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }
            }

            public unsafe partial class Class : CppSharp.Parser.AST.DeclarationContext, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 280)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(212)]
                    public bool IsAnonymous;

                    [FieldOffset(264)]
                    public bool IsPOD;

                    [FieldOffset(265)]
                    public bool IsAbstract;

                    [FieldOffset(266)]
                    public bool IsUnion;

                    [FieldOffset(267)]
                    public bool IsDynamic;

                    [FieldOffset(268)]
                    public bool IsPolymorphic;

                    [FieldOffset(269)]
                    public bool HasNonTrivialDefaultConstructor;

                    [FieldOffset(270)]
                    public bool HasNonTrivialCopyConstructor;

                    [FieldOffset(271)]
                    public bool HasNonTrivialDestructor;

                    [FieldOffset(272)]
                    public bool IsExternCContext;

                    [FieldOffset(276)]
                    public global::System.IntPtr Layout;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Class@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Class@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Class@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getBases@Class@AST@CppParser@CppSharp@@QAEPAUBaseClassSpecifier@234@I@Z")]
                    internal static extern global::System.IntPtr getBases_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addBases@Class@AST@CppParser@CppSharp@@QAEXAAPAUBaseClassSpecifier@234@@Z")]
                    internal static extern void addBases_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearBases@Class@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearBases_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFields@Class@AST@CppParser@CppSharp@@QAEPAVField@234@I@Z")]
                    internal static extern global::System.IntPtr getFields_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addFields@Class@AST@CppParser@CppSharp@@QAEXAAPAVField@234@@Z")]
                    internal static extern void addFields_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearFields@Class@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearFields_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getMethods@Class@AST@CppParser@CppSharp@@QAEPAVMethod@234@I@Z")]
                    internal static extern global::System.IntPtr getMethods_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addMethods@Class@AST@CppParser@CppSharp@@QAEXAAPAVMethod@234@@Z")]
                    internal static extern void addMethods_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearMethods@Class@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearMethods_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecifiers@Class@AST@CppParser@CppSharp@@QAEPAVAccessSpecifierDecl@234@I@Z")]
                    internal static extern global::System.IntPtr getSpecifiers_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addSpecifiers@Class@AST@CppParser@CppSharp@@QAEXAAPAVAccessSpecifierDecl@234@@Z")]
                    internal static extern void addSpecifiers_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearSpecifiers@Class@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearSpecifiers_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getBasesCount@Class@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getBasesCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFieldsCount@Class@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getFieldsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getMethodsCount@Class@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getMethodsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecifiersCount@Class@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getSpecifiersCount_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new Class __CreateInstance(global::System.IntPtr native)
                {
                    return new Class((Class.Internal*) native);
                }

                public static Class __CreateInstance(Class.Internal native)
                {
                    return new Class(native);
                }

                private static Class.Internal* __CopyValue(Class.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(280);
                    CppSharp.Parser.AST.Class.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (Class.Internal*) ret;
                }

                private Class(Class.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Class(Class.Internal* native, bool isInternalImpl = false)
                    : base((DeclarationContext.Internal*) native)
                {
                }

                public Class()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(280);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.BaseClassSpecifier getBases(uint i)
                {
                    var __ret = Internal.getBases_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.BaseClassSpecifier.__CreateInstance(__ret);
                }

                public void addBases(CppSharp.Parser.AST.BaseClassSpecifier s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addBases_0(__Instance, arg0);
                }

                public void clearBases()
                {
                    Internal.clearBases_0(__Instance);
                }

                public CppSharp.Parser.AST.Field getFields(uint i)
                {
                    var __ret = Internal.getFields_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.Field.__CreateInstance(__ret);
                }

                public void addFields(CppSharp.Parser.AST.Field s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addFields_0(__Instance, arg0);
                }

                public void clearFields()
                {
                    Internal.clearFields_0(__Instance);
                }

                public CppSharp.Parser.AST.Method getMethods(uint i)
                {
                    var __ret = Internal.getMethods_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.Method.__CreateInstance(__ret);
                }

                public void addMethods(CppSharp.Parser.AST.Method s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addMethods_0(__Instance, arg0);
                }

                public void clearMethods()
                {
                    Internal.clearMethods_0(__Instance);
                }

                public CppSharp.Parser.AST.AccessSpecifierDecl getSpecifiers(uint i)
                {
                    var __ret = Internal.getSpecifiers_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.AccessSpecifierDecl.__CreateInstance(__ret);
                }

                public void addSpecifiers(CppSharp.Parser.AST.AccessSpecifierDecl s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addSpecifiers_0(__Instance, arg0);
                }

                public void clearSpecifiers()
                {
                    Internal.clearSpecifiers_0(__Instance);
                }

                public uint BasesCount
                {
                    get
                    {
                        var __ret = Internal.getBasesCount_0(__Instance);
                        return __ret;
                    }
                }

                public uint FieldsCount
                {
                    get
                    {
                        var __ret = Internal.getFieldsCount_0(__Instance);
                        return __ret;
                    }
                }

                public uint MethodsCount
                {
                    get
                    {
                        var __ret = Internal.getMethodsCount_0(__Instance);
                        return __ret;
                    }
                }

                public uint SpecifiersCount
                {
                    get
                    {
                        var __ret = Internal.getSpecifiersCount_0(__Instance);
                        return __ret;
                    }
                }

                public bool IsPOD
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsPOD;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsPOD = value;
                    }
                }

                public bool IsAbstract
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsAbstract;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsAbstract = value;
                    }
                }

                public bool IsUnion
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsUnion;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsUnion = value;
                    }
                }

                public bool IsDynamic
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsDynamic;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsDynamic = value;
                    }
                }

                public bool IsPolymorphic
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsPolymorphic;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsPolymorphic = value;
                    }
                }

                public bool HasNonTrivialDefaultConstructor
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->HasNonTrivialDefaultConstructor;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->HasNonTrivialDefaultConstructor = value;
                    }
                }

                public bool HasNonTrivialCopyConstructor
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->HasNonTrivialCopyConstructor;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->HasNonTrivialCopyConstructor = value;
                    }
                }

                public bool HasNonTrivialDestructor
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->HasNonTrivialDestructor;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->HasNonTrivialDestructor = value;
                    }
                }

                public bool IsExternCContext
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsExternCContext;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsExternCContext = value;
                    }
                }

                public CppSharp.Parser.AST.ClassLayout Layout
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Layout == IntPtr.Zero) ? null : CppSharp.Parser.AST.ClassLayout.__CreateInstance(__ptr->Layout);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Layout = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class Template : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 136)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(120)]
                    public global::System.IntPtr TemplatedDecl;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Template@AST@CppParser@CppSharp@@QAE@W4DeclarationKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, CppSharp.Parser.AST.DeclarationKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Template@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_1(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Template@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Template@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getParameters@Template@AST@CppParser@CppSharp@@QAE?AVTemplateParameter@234@I@Z")]
                    internal static extern void getParameters_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addParameters@Template@AST@CppParser@CppSharp@@QAEXAAVTemplateParameter@234@@Z")]
                    internal static extern void addParameters_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearParameters@Template@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearParameters_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getParametersCount@Template@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getParametersCount_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new Template __CreateInstance(global::System.IntPtr native)
                {
                    return new Template((Template.Internal*) native);
                }

                public static Template __CreateInstance(Template.Internal native)
                {
                    return new Template(native);
                }

                private static Template.Internal* __CopyValue(Template.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(136);
                    CppSharp.Parser.AST.Template.Internal.cctor_3(ret, new global::System.IntPtr(&native));
                    return (Template.Internal*) ret;
                }

                private Template(Template.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Template(Template.Internal* native, bool isInternalImpl = false)
                    : base((Declaration.Internal*) native)
                {
                }

                public Template(CppSharp.Parser.AST.DeclarationKind kind)
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(136);
                    __ownsNativeInstance = true;
                    var arg0 = kind;
                    Internal.ctor_0(__Instance, arg0);
                }

                public Template()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(136);
                    __ownsNativeInstance = true;
                    Internal.ctor_1(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.TemplateParameter getParameters(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.TemplateParameter.Internal();
                    Internal.getParameters_0(__Instance, new IntPtr(&__ret), i);
                    return CppSharp.Parser.AST.TemplateParameter.__CreateInstance(__ret);
                }

                public void addParameters(CppSharp.Parser.AST.TemplateParameter s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addParameters_0(__Instance, arg0);
                }

                public void clearParameters()
                {
                    Internal.clearParameters_0(__Instance);
                }

                public uint ParametersCount
                {
                    get
                    {
                        var __ret = Internal.getParametersCount_0(__Instance);
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.Declaration TemplatedDecl
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->TemplatedDecl == IntPtr.Zero) ? null : CppSharp.Parser.AST.Declaration.__CreateInstance(__ptr->TemplatedDecl);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->TemplatedDecl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class ClassTemplate : CppSharp.Parser.AST.Template, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 148)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(120)]
                    public global::System.IntPtr TemplatedDecl;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassTemplate@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassTemplate@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1ClassTemplate@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecializations@ClassTemplate@AST@CppParser@CppSharp@@QAEPAVClassTemplateSpecialization@234@I@Z")]
                    internal static extern global::System.IntPtr getSpecializations_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addSpecializations@ClassTemplate@AST@CppParser@CppSharp@@QAEXAAPAVClassTemplateSpecialization@234@@Z")]
                    internal static extern void addSpecializations_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearSpecializations@ClassTemplate@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearSpecializations_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecializationsCount@ClassTemplate@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getSpecializationsCount_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new ClassTemplate __CreateInstance(global::System.IntPtr native)
                {
                    return new ClassTemplate((ClassTemplate.Internal*) native);
                }

                public static ClassTemplate __CreateInstance(ClassTemplate.Internal native)
                {
                    return new ClassTemplate(native);
                }

                private static ClassTemplate.Internal* __CopyValue(ClassTemplate.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(148);
                    CppSharp.Parser.AST.ClassTemplate.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (ClassTemplate.Internal*) ret;
                }

                private ClassTemplate(ClassTemplate.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected ClassTemplate(ClassTemplate.Internal* native, bool isInternalImpl = false)
                    : base((Template.Internal*) native)
                {
                }

                public ClassTemplate()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(148);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.ClassTemplateSpecialization getSpecializations(uint i)
                {
                    var __ret = Internal.getSpecializations_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.ClassTemplateSpecialization.__CreateInstance(__ret);
                }

                public void addSpecializations(CppSharp.Parser.AST.ClassTemplateSpecialization s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addSpecializations_0(__Instance, arg0);
                }

                public void clearSpecializations()
                {
                    Internal.clearSpecializations_0(__Instance);
                }

                public uint SpecializationsCount
                {
                    get
                    {
                        var __ret = Internal.getSpecializationsCount_0(__Instance);
                        return __ret;
                    }
                }
            }

            public unsafe partial class ClassTemplateSpecialization : CppSharp.Parser.AST.Class, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 300)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(212)]
                    public bool IsAnonymous;

                    [FieldOffset(264)]
                    public bool IsPOD;

                    [FieldOffset(265)]
                    public bool IsAbstract;

                    [FieldOffset(266)]
                    public bool IsUnion;

                    [FieldOffset(267)]
                    public bool IsDynamic;

                    [FieldOffset(268)]
                    public bool IsPolymorphic;

                    [FieldOffset(269)]
                    public bool HasNonTrivialDefaultConstructor;

                    [FieldOffset(270)]
                    public bool HasNonTrivialCopyConstructor;

                    [FieldOffset(271)]
                    public bool HasNonTrivialDestructor;

                    [FieldOffset(272)]
                    public bool IsExternCContext;

                    [FieldOffset(276)]
                    public global::System.IntPtr Layout;

                    [FieldOffset(280)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(296)]
                    public CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArguments@ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAE?AUTemplateArgument@234@I@Z")]
                    internal static extern void getArguments_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addArguments@ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAEXAAUTemplateArgument@234@@Z")]
                    internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearArguments@ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArgumentsCount@ClassTemplateSpecialization@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new ClassTemplateSpecialization __CreateInstance(global::System.IntPtr native)
                {
                    return new ClassTemplateSpecialization((ClassTemplateSpecialization.Internal*) native);
                }

                public static ClassTemplateSpecialization __CreateInstance(ClassTemplateSpecialization.Internal native)
                {
                    return new ClassTemplateSpecialization(native);
                }

                private static ClassTemplateSpecialization.Internal* __CopyValue(ClassTemplateSpecialization.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(300);
                    CppSharp.Parser.AST.ClassTemplateSpecialization.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (ClassTemplateSpecialization.Internal*) ret;
                }

                private ClassTemplateSpecialization(ClassTemplateSpecialization.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected ClassTemplateSpecialization(ClassTemplateSpecialization.Internal* native, bool isInternalImpl = false)
                    : base((Class.Internal*) native)
                {
                }

                public ClassTemplateSpecialization()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(300);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.TemplateArgument getArguments(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.TemplateArgument.Internal();
                    Internal.getArguments_0(__Instance, new IntPtr(&__ret), i);
                    return CppSharp.Parser.AST.TemplateArgument.__CreateInstance(__ret);
                }

                public void addArguments(CppSharp.Parser.AST.TemplateArgument s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addArguments_0(__Instance, arg0);
                }

                public void clearArguments()
                {
                    Internal.clearArguments_0(__Instance);
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = Internal.getArgumentsCount_0(__Instance);
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.ClassTemplate TemplatedDecl
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->TemplatedDecl == IntPtr.Zero) ? null : CppSharp.Parser.AST.ClassTemplate.__CreateInstance(__ptr->TemplatedDecl);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->TemplatedDecl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->SpecializationKind;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->SpecializationKind = value;
                    }
                }
            }

            public unsafe partial class ClassTemplatePartialSpecialization : CppSharp.Parser.AST.ClassTemplateSpecialization, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 300)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(212)]
                    public bool IsAnonymous;

                    [FieldOffset(264)]
                    public bool IsPOD;

                    [FieldOffset(265)]
                    public bool IsAbstract;

                    [FieldOffset(266)]
                    public bool IsUnion;

                    [FieldOffset(267)]
                    public bool IsDynamic;

                    [FieldOffset(268)]
                    public bool IsPolymorphic;

                    [FieldOffset(269)]
                    public bool HasNonTrivialDefaultConstructor;

                    [FieldOffset(270)]
                    public bool HasNonTrivialCopyConstructor;

                    [FieldOffset(271)]
                    public bool HasNonTrivialDestructor;

                    [FieldOffset(272)]
                    public bool IsExternCContext;

                    [FieldOffset(276)]
                    public global::System.IntPtr Layout;

                    [FieldOffset(280)]
                    public global::System.IntPtr TemplatedDecl;

                    [FieldOffset(296)]
                    public CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassTemplatePartialSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ClassTemplatePartialSpecialization@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1ClassTemplatePartialSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new ClassTemplatePartialSpecialization __CreateInstance(global::System.IntPtr native)
                {
                    return new ClassTemplatePartialSpecialization((ClassTemplatePartialSpecialization.Internal*) native);
                }

                public static ClassTemplatePartialSpecialization __CreateInstance(ClassTemplatePartialSpecialization.Internal native)
                {
                    return new ClassTemplatePartialSpecialization(native);
                }

                private static ClassTemplatePartialSpecialization.Internal* __CopyValue(ClassTemplatePartialSpecialization.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(300);
                    CppSharp.Parser.AST.ClassTemplatePartialSpecialization.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (ClassTemplatePartialSpecialization.Internal*) ret;
                }

                private ClassTemplatePartialSpecialization(ClassTemplatePartialSpecialization.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected ClassTemplatePartialSpecialization(ClassTemplatePartialSpecialization.Internal* native, bool isInternalImpl = false)
                    : base((ClassTemplateSpecialization.Internal*) native)
                {
                }

                public ClassTemplatePartialSpecialization()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(300);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }
            }

            public unsafe partial class FunctionTemplate : CppSharp.Parser.AST.Template, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 148)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(120)]
                    public global::System.IntPtr TemplatedDecl;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FunctionTemplate@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FunctionTemplate@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1FunctionTemplate@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecializations@FunctionTemplate@AST@CppParser@CppSharp@@QAEPAVFunctionTemplateSpecialization@234@I@Z")]
                    internal static extern global::System.IntPtr getSpecializations_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addSpecializations@FunctionTemplate@AST@CppParser@CppSharp@@QAEXAAPAVFunctionTemplateSpecialization@234@@Z")]
                    internal static extern void addSpecializations_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearSpecializations@FunctionTemplate@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearSpecializations_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSpecializationsCount@FunctionTemplate@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getSpecializationsCount_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new FunctionTemplate __CreateInstance(global::System.IntPtr native)
                {
                    return new FunctionTemplate((FunctionTemplate.Internal*) native);
                }

                public static FunctionTemplate __CreateInstance(FunctionTemplate.Internal native)
                {
                    return new FunctionTemplate(native);
                }

                private static FunctionTemplate.Internal* __CopyValue(FunctionTemplate.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(148);
                    CppSharp.Parser.AST.FunctionTemplate.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (FunctionTemplate.Internal*) ret;
                }

                private FunctionTemplate(FunctionTemplate.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected FunctionTemplate(FunctionTemplate.Internal* native, bool isInternalImpl = false)
                    : base((Template.Internal*) native)
                {
                }

                public FunctionTemplate()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(148);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.FunctionTemplateSpecialization getSpecializations(uint i)
                {
                    var __ret = Internal.getSpecializations_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.FunctionTemplateSpecialization.__CreateInstance(__ret);
                }

                public void addSpecializations(CppSharp.Parser.AST.FunctionTemplateSpecialization s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addSpecializations_0(__Instance, arg0);
                }

                public void clearSpecializations()
                {
                    Internal.clearSpecializations_0(__Instance);
                }

                public uint SpecializationsCount
                {
                    get
                    {
                        var __ret = Internal.getSpecializationsCount_0(__Instance);
                        return __ret;
                    }
                }
            }

            public unsafe partial class FunctionTemplateSpecialization : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr Template;

                    [FieldOffset(16)]
                    public global::System.IntPtr SpecializedFunction;

                    [FieldOffset(20)]
                    public CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArguments@FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAE?AUTemplateArgument@234@I@Z")]
                    internal static extern void getArguments_0(global::System.IntPtr instance, global::System.IntPtr @return, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addArguments@FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAEXAAUTemplateArgument@234@@Z")]
                    internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearArguments@FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearArguments_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getArgumentsCount@FunctionTemplateSpecialization@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static FunctionTemplateSpecialization __CreateInstance(global::System.IntPtr native)
                {
                    return new FunctionTemplateSpecialization((FunctionTemplateSpecialization.Internal*) native);
                }

                public static FunctionTemplateSpecialization __CreateInstance(FunctionTemplateSpecialization.Internal native)
                {
                    return new FunctionTemplateSpecialization(native);
                }

                private static FunctionTemplateSpecialization.Internal* __CopyValue(FunctionTemplateSpecialization.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(24);
                    CppSharp.Parser.AST.FunctionTemplateSpecialization.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (FunctionTemplateSpecialization.Internal*) ret;
                }

                private FunctionTemplateSpecialization(FunctionTemplateSpecialization.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected FunctionTemplateSpecialization(FunctionTemplateSpecialization.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public FunctionTemplateSpecialization()
                {
                    __Instance = Marshal.AllocHGlobal(24);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    Internal.dtor_0(__Instance);
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public CppSharp.Parser.AST.TemplateArgument getArguments(uint i)
                {
                    var __ret = new CppSharp.Parser.AST.TemplateArgument.Internal();
                    Internal.getArguments_0(__Instance, new IntPtr(&__ret), i);
                    return CppSharp.Parser.AST.TemplateArgument.__CreateInstance(__ret);
                }

                public void addArguments(CppSharp.Parser.AST.TemplateArgument s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addArguments_0(__Instance, arg0);
                }

                public void clearArguments()
                {
                    Internal.clearArguments_0(__Instance);
                }

                public uint ArgumentsCount
                {
                    get
                    {
                        var __ret = Internal.getArgumentsCount_0(__Instance);
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.FunctionTemplate Template
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Template == IntPtr.Zero) ? null : CppSharp.Parser.AST.FunctionTemplate.__CreateInstance(__ptr->Template);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Template = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.Function SpecializedFunction
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->SpecializedFunction == IntPtr.Zero) ? null : CppSharp.Parser.AST.Function.__CreateInstance(__ptr->SpecializedFunction);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->SpecializedFunction = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }

                public CppSharp.Parser.AST.TemplateSpecializationKind SpecializationKind
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->SpecializationKind;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->SpecializationKind = value;
                    }
                }
            }

            public unsafe partial class Namespace : CppSharp.Parser.AST.DeclarationContext, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 220)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(212)]
                    public bool IsAnonymous;

                    [FieldOffset(216)]
                    public bool IsInline;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Namespace@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Namespace@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1Namespace@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new Namespace __CreateInstance(global::System.IntPtr native)
                {
                    return new Namespace((Namespace.Internal*) native);
                }

                public static Namespace __CreateInstance(Namespace.Internal native)
                {
                    return new Namespace(native);
                }

                private static Namespace.Internal* __CopyValue(Namespace.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(220);
                    CppSharp.Parser.AST.Namespace.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                    return (Namespace.Internal*) ret;
                }

                private Namespace(Namespace.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Namespace(Namespace.Internal* native, bool isInternalImpl = false)
                    : base((DeclarationContext.Internal*) native)
                {
                }

                public Namespace()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(220);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public bool IsInline
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsInline;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsInline = value;
                    }
                }
            }

            public unsafe partial class PreprocessedEntity : CppSharp.Parser.AST.Declaration, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 124)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(120)]
                    public CppSharp.Parser.AST.MacroLocation MacroLocation;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PreprocessedEntity@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0PreprocessedEntity@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1PreprocessedEntity@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new PreprocessedEntity __CreateInstance(global::System.IntPtr native)
                {
                    return new PreprocessedEntity((PreprocessedEntity.Internal*) native);
                }

                public static PreprocessedEntity __CreateInstance(PreprocessedEntity.Internal native)
                {
                    return new PreprocessedEntity(native);
                }

                private static PreprocessedEntity.Internal* __CopyValue(PreprocessedEntity.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(124);
                    CppSharp.Parser.AST.PreprocessedEntity.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (PreprocessedEntity.Internal*) ret;
                }

                private PreprocessedEntity(PreprocessedEntity.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected PreprocessedEntity(PreprocessedEntity.Internal* native, bool isInternalImpl = false)
                    : base((Declaration.Internal*) native)
                {
                }

                public PreprocessedEntity()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(124);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.MacroLocation MacroLocation
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->MacroLocation;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->MacroLocation = value;
                    }
                }
            }

            public unsafe partial class MacroDefinition : CppSharp.Parser.AST.PreprocessedEntity, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 148)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(120)]
                    public CppSharp.Parser.AST.MacroLocation MacroLocation;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0MacroDefinition@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0MacroDefinition@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1MacroDefinition@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getExpression@MacroDefinition@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getExpression_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setExpression@MacroDefinition@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setExpression_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                private readonly bool __ownsNativeInstance;

                public static new MacroDefinition __CreateInstance(global::System.IntPtr native)
                {
                    return new MacroDefinition((MacroDefinition.Internal*) native);
                }

                public static MacroDefinition __CreateInstance(MacroDefinition.Internal native)
                {
                    return new MacroDefinition(native);
                }

                private static MacroDefinition.Internal* __CopyValue(MacroDefinition.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(148);
                    CppSharp.Parser.AST.MacroDefinition.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (MacroDefinition.Internal*) ret;
                }

                private MacroDefinition(MacroDefinition.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected MacroDefinition(MacroDefinition.Internal* native, bool isInternalImpl = false)
                    : base((PreprocessedEntity.Internal*) native)
                {
                }

                public MacroDefinition()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(148);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public string Expression
                {
                    get
                    {
                        var __ret = Internal.getExpression_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setExpression_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }
            }

            public unsafe partial class MacroExpansion : CppSharp.Parser.AST.PreprocessedEntity, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 152)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(120)]
                    public CppSharp.Parser.AST.MacroLocation MacroLocation;

                    [FieldOffset(148)]
                    public global::System.IntPtr Definition;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0MacroExpansion@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0MacroExpansion@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1MacroExpansion@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getText@MacroExpansion@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setText@MacroExpansion@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                private readonly bool __ownsNativeInstance;

                public static new MacroExpansion __CreateInstance(global::System.IntPtr native)
                {
                    return new MacroExpansion((MacroExpansion.Internal*) native);
                }

                public static MacroExpansion __CreateInstance(MacroExpansion.Internal native)
                {
                    return new MacroExpansion(native);
                }

                private static MacroExpansion.Internal* __CopyValue(MacroExpansion.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(152);
                    CppSharp.Parser.AST.MacroExpansion.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (MacroExpansion.Internal*) ret;
                }

                private MacroExpansion(MacroExpansion.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected MacroExpansion(MacroExpansion.Internal* native, bool isInternalImpl = false)
                    : base((PreprocessedEntity.Internal*) native)
                {
                }

                public MacroExpansion()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(152);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public string Text
                {
                    get
                    {
                        var __ret = Internal.getText_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setText_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public CppSharp.Parser.AST.MacroDefinition Definition
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->Definition == IntPtr.Zero) ? null : CppSharp.Parser.AST.MacroDefinition.__CreateInstance(__ptr->Definition);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Definition = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }

            public unsafe partial class TranslationUnit : CppSharp.Parser.AST.Namespace, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 260)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.DeclarationKind Kind;

                    [FieldOffset(4)]
                    public CppSharp.Parser.AST.AccessSpecifier Access;

                    [FieldOffset(8)]
                    public global::System.IntPtr _Namespace;

                    [FieldOffset(12)]
                    public CppSharp.Parser.SourceLocation.Internal Location;

                    [FieldOffset(40)]
                    public global::System.IntPtr Comment;

                    [FieldOffset(68)]
                    public bool IsIncomplete;

                    [FieldOffset(69)]
                    public bool IsDependent;

                    [FieldOffset(72)]
                    public global::System.IntPtr CompleteDeclaration;

                    [FieldOffset(76)]
                    public uint DefinitionOrder;

                    [FieldOffset(92)]
                    public global::System.IntPtr OriginalPtr;

                    [FieldOffset(212)]
                    public bool IsAnonymous;

                    [FieldOffset(216)]
                    public bool IsInline;

                    [FieldOffset(244)]
                    public bool IsSystemHeader;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TranslationUnit@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0TranslationUnit@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1TranslationUnit@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getMacros@TranslationUnit@AST@CppParser@CppSharp@@QAEPAVMacroDefinition@234@I@Z")]
                    internal static extern global::System.IntPtr getMacros_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addMacros@TranslationUnit@AST@CppParser@CppSharp@@QAEXAAPAVMacroDefinition@234@@Z")]
                    internal static extern void addMacros_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearMacros@TranslationUnit@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearMacros_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFileName@TranslationUnit@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getFileName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setFileName@TranslationUnit@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setFileName_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getMacrosCount@TranslationUnit@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getMacrosCount_0(global::System.IntPtr instance);
                }

                private readonly bool __ownsNativeInstance;

                public static new TranslationUnit __CreateInstance(global::System.IntPtr native)
                {
                    return new TranslationUnit((TranslationUnit.Internal*) native);
                }

                public static TranslationUnit __CreateInstance(TranslationUnit.Internal native)
                {
                    return new TranslationUnit(native);
                }

                private static TranslationUnit.Internal* __CopyValue(TranslationUnit.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(260);
                    CppSharp.Parser.AST.TranslationUnit.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (TranslationUnit.Internal*) ret;
                }

                private TranslationUnit(TranslationUnit.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected TranslationUnit(TranslationUnit.Internal* native, bool isInternalImpl = false)
                    : base((Namespace.Internal*) native)
                {
                }

                public TranslationUnit()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(260);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }

                public CppSharp.Parser.AST.MacroDefinition getMacros(uint i)
                {
                    var __ret = Internal.getMacros_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.MacroDefinition.__CreateInstance(__ret);
                }

                public void addMacros(CppSharp.Parser.AST.MacroDefinition s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addMacros_0(__Instance, arg0);
                }

                public void clearMacros()
                {
                    Internal.clearMacros_0(__Instance);
                }

                public string FileName
                {
                    get
                    {
                        var __ret = Internal.getFileName_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setFileName_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public uint MacrosCount
                {
                    get
                    {
                        var __ret = Internal.getMacrosCount_0(__Instance);
                        return __ret;
                    }
                }

                public bool IsSystemHeader
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->IsSystemHeader;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->IsSystemHeader = value;
                    }
                }
            }

            public unsafe partial class NativeLibrary : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 52)]
                public partial struct Internal
                {
                    [FieldOffset(24)]
                    public CppSharp.Parser.AST.ArchType ArchType;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0NativeLibrary@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0NativeLibrary@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1NativeLibrary@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSymbols@NativeLibrary@AST@CppParser@CppSharp@@QAEPBDI@Z")]
                    internal static extern global::System.IntPtr getSymbols_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addSymbols@NativeLibrary@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void addSymbols_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearSymbols@NativeLibrary@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearSymbols_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getDependencies@NativeLibrary@AST@CppParser@CppSharp@@QAEPBDI@Z")]
                    internal static extern global::System.IntPtr getDependencies_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addDependencies@NativeLibrary@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void addDependencies_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearDependencies@NativeLibrary@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearDependencies_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getFileName@NativeLibrary@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getFileName_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setFileName@NativeLibrary@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setFileName_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getSymbolsCount@NativeLibrary@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getSymbolsCount_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getDependenciesCount@NativeLibrary@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getDependenciesCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static NativeLibrary __CreateInstance(global::System.IntPtr native)
                {
                    return new NativeLibrary((NativeLibrary.Internal*) native);
                }

                public static NativeLibrary __CreateInstance(NativeLibrary.Internal native)
                {
                    return new NativeLibrary(native);
                }

                private static NativeLibrary.Internal* __CopyValue(NativeLibrary.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(52);
                    CppSharp.Parser.AST.NativeLibrary.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (NativeLibrary.Internal*) ret;
                }

                private NativeLibrary(NativeLibrary.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected NativeLibrary(NativeLibrary.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public NativeLibrary()
                {
                    __Instance = Marshal.AllocHGlobal(52);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    Internal.dtor_0(__Instance);
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public string getSymbols(uint i)
                {
                    var __ret = Internal.getSymbols_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return Marshal.PtrToStringAnsi(__ret);
                }

                public void addSymbols(string s)
                {
                    var arg0 = Marshal.StringToHGlobalAnsi(s);
                    Internal.addSymbols_0(__Instance, arg0);
                    Marshal.FreeHGlobal(arg0);
                }

                public void clearSymbols()
                {
                    Internal.clearSymbols_0(__Instance);
                }

                public string getDependencies(uint i)
                {
                    var __ret = Internal.getDependencies_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return Marshal.PtrToStringAnsi(__ret);
                }

                public void addDependencies(string s)
                {
                    var arg0 = Marshal.StringToHGlobalAnsi(s);
                    Internal.addDependencies_0(__Instance, arg0);
                    Marshal.FreeHGlobal(arg0);
                }

                public void clearDependencies()
                {
                    Internal.clearDependencies_0(__Instance);
                }

                public string FileName
                {
                    get
                    {
                        var __ret = Internal.getFileName_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setFileName_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public uint SymbolsCount
                {
                    get
                    {
                        var __ret = Internal.getSymbolsCount_0(__Instance);
                        return __ret;
                    }
                }

                public uint DependenciesCount
                {
                    get
                    {
                        var __ret = Internal.getDependenciesCount_0(__Instance);
                        return __ret;
                    }
                }

                public CppSharp.Parser.AST.ArchType ArchType
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->ArchType;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->ArchType = value;
                    }
                }
            }

            public unsafe partial class ASTContext : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ASTContext@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0ASTContext@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1ASTContext@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTranslationUnits@ASTContext@AST@CppParser@CppSharp@@QAEPAVTranslationUnit@234@I@Z")]
                    internal static extern global::System.IntPtr getTranslationUnits_0(global::System.IntPtr instance, uint i);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?addTranslationUnits@ASTContext@AST@CppParser@CppSharp@@QAEXAAPAVTranslationUnit@234@@Z")]
                    internal static extern void addTranslationUnits_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?clearTranslationUnits@ASTContext@AST@CppParser@CppSharp@@QAEXXZ")]
                    internal static extern void clearTranslationUnits_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getTranslationUnitsCount@ASTContext@AST@CppParser@CppSharp@@QAEIXZ")]
                    internal static extern uint getTranslationUnitsCount_0(global::System.IntPtr instance);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static ASTContext __CreateInstance(global::System.IntPtr native)
                {
                    return new ASTContext((ASTContext.Internal*) native);
                }

                public static ASTContext __CreateInstance(ASTContext.Internal native)
                {
                    return new ASTContext(native);
                }

                private static ASTContext.Internal* __CopyValue(ASTContext.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    CppSharp.Parser.AST.ASTContext.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (ASTContext.Internal*) ret;
                }

                private ASTContext(ASTContext.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected ASTContext(ASTContext.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public ASTContext()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    Internal.dtor_0(__Instance);
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public CppSharp.Parser.AST.TranslationUnit getTranslationUnits(uint i)
                {
                    var __ret = Internal.getTranslationUnits_0(__Instance, i);
                    if (__ret == global::System.IntPtr.Zero) return null;
                    return (__ret == IntPtr.Zero) ? null : CppSharp.Parser.AST.TranslationUnit.__CreateInstance(__ret);
                }

                public void addTranslationUnits(CppSharp.Parser.AST.TranslationUnit s)
                {
                    var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                    Internal.addTranslationUnits_0(__Instance, arg0);
                }

                public void clearTranslationUnits()
                {
                    Internal.clearTranslationUnits_0(__Instance);
                }

                public uint TranslationUnitsCount
                {
                    get
                    {
                        var __ret = Internal.getTranslationUnitsCount_0(__Instance);
                        return __ret;
                    }
                }
            }

            public unsafe partial class Comment : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 4)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Comment@AST@CppParser@CppSharp@@QAE@W4CommentKind@123@@Z")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance, CppSharp.Parser.AST.CommentKind kind);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0Comment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static Comment __CreateInstance(global::System.IntPtr native)
                {
                    return new Comment((Comment.Internal*) native);
                }

                public static Comment __CreateInstance(Comment.Internal native)
                {
                    return new Comment(native);
                }

                private static Comment.Internal* __CopyValue(Comment.Internal native)
                {
                    var ret = (Comment.Internal*) Marshal.AllocHGlobal(4);
                    *ret = native;
                    return ret;
                }

                private Comment(Comment.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected Comment(Comment.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public Comment(CppSharp.Parser.AST.CommentKind kind)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    var arg0 = kind;
                    Internal.ctor_0(__Instance, arg0);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public CppSharp.Parser.AST.CommentKind Kind
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Kind;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Kind = value;
                    }
                }
            }

            public unsafe partial class FullComment : CppSharp.Parser.AST.Comment, IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 4)]
                public new partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.CommentKind Kind;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FullComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0FullComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                private readonly bool __ownsNativeInstance;

                public static new FullComment __CreateInstance(global::System.IntPtr native)
                {
                    return new FullComment((FullComment.Internal*) native);
                }

                public static FullComment __CreateInstance(FullComment.Internal native)
                {
                    return new FullComment(native);
                }

                private static FullComment.Internal* __CopyValue(FullComment.Internal native)
                {
                    var ret = (FullComment.Internal*) Marshal.AllocHGlobal(4);
                    *ret = native;
                    return ret;
                }

                private FullComment(FullComment.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected FullComment(FullComment.Internal* native, bool isInternalImpl = false)
                    : base((Comment.Internal*) native)
                {
                }

                public FullComment()
                    : this((Internal*) null)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                protected override void Dispose(bool disposing)
                {
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                    base.Dispose(disposing);
                }
            }

            public unsafe partial class RawComment : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 56)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public CppSharp.Parser.AST.RawCommentKind Kind;

                    [FieldOffset(52)]
                    public global::System.IntPtr FullCommentBlock;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0RawComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??0RawComment@AST@CppParser@CppSharp@@QAE@ABV0123@@Z")]
                    internal static extern global::System.IntPtr cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="??1RawComment@AST@CppParser@CppSharp@@QAE@XZ")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getText@RawComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setText@RawComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?getBriefText@RawComment@AST@CppParser@CppSharp@@QAEPBDXZ")]
                    internal static extern global::System.IntPtr getBriefText_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp.CppParser.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                        EntryPoint="?setBriefText@RawComment@AST@CppParser@CppSharp@@QAEXPBD@Z")]
                    internal static extern void setBriefText_0(global::System.IntPtr instance, global::System.IntPtr s);
                }

                public global::System.IntPtr __Instance { get; protected set; }

                private readonly bool __ownsNativeInstance;

                public static RawComment __CreateInstance(global::System.IntPtr native)
                {
                    return new RawComment((RawComment.Internal*) native);
                }

                public static RawComment __CreateInstance(RawComment.Internal native)
                {
                    return new RawComment(native);
                }

                private static RawComment.Internal* __CopyValue(RawComment.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(56);
                    CppSharp.Parser.AST.RawComment.Internal.cctor_2(ret, new global::System.IntPtr(&native));
                    return (RawComment.Internal*) ret;
                }

                private RawComment(RawComment.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                }

                protected RawComment(RawComment.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public RawComment()
                {
                    __Instance = Marshal.AllocHGlobal(56);
                    __ownsNativeInstance = true;
                    Internal.ctor_0(__Instance);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                    GC.SuppressFinalize(this);
                }

                protected virtual void Dispose(bool disposing)
                {
                    Internal.dtor_0(__Instance);
                    if (__ownsNativeInstance)
                    {
                        Marshal.FreeHGlobal(__Instance);
                    }
                }

                public string Text
                {
                    get
                    {
                        var __ret = Internal.getText_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setText_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public string BriefText
                {
                    get
                    {
                        var __ret = Internal.getBriefText_0(__Instance);
                        if (__ret == global::System.IntPtr.Zero) return null;
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    set
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(value);
                        Internal.setBriefText_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public CppSharp.Parser.AST.RawCommentKind Kind
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return __ptr->Kind;
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->Kind = value;
                    }
                }

                public CppSharp.Parser.AST.FullComment FullCommentBlock
                {
                    get
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        return (__ptr->FullCommentBlock == IntPtr.Zero) ? null : CppSharp.Parser.AST.FullComment.__CreateInstance(__ptr->FullCommentBlock);
                    }

                    set
                    {
                        var __ptr = (Internal*)__Instance.ToPointer();
                        __ptr->FullCommentBlock = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                    }
                }
            }
        }
    }
}
