//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace std
{
    namespace __1
    {
        public unsafe partial class allocator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public unsafe partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("Std-templates", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNSt3__19allocatorIcEC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, allocator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, allocator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static allocator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new allocator(native.ToPointer(), skipVTables);
            }

            public static allocator __CreateInstance(allocator.Internal native, bool skipVTables = false)
            {
                return new allocator(native, skipVTables);
            }

            private static void* __CopyValue(allocator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(0);
                *(allocator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private allocator(allocator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected allocator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public allocator()
            {
                __Instance = Marshal.AllocHGlobal(0);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                global::std.__1.allocator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public unsafe partial class __destruct_n
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public uint size;
            }
        }

        public unsafe partial class bad_weak_ptr
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr vptr_exception;
            }
        }

        public unsafe abstract partial class __shared_count
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr vptr___shared_count;

                [FieldOffset(4)]
                public int __shared_owners_;
            }
        }

        public unsafe abstract partial class __shared_weak_count
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr vptr___shared_count;

                [FieldOffset(4)]
                public int __shared_owners_;

                [FieldOffset(8)]
                public int __shared_weak_owners_;
            }
        }

        public unsafe partial class __sp_mut
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr __lx;
            }
        }

        public unsafe partial class pointer_safety
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
            }
        }

        namespace __pointer_type_imp
        {
        }
    }
}

namespace std
{
    namespace __1
    {
        public unsafe partial class basic_string : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public unsafe partial struct Internal
            {
                [FieldOffset(0)]
                public uint __cap_;

                [FieldOffset(4)]
                public uint __size_;

                [FieldOffset(8)]
                public global::System.IntPtr __data_;

                [FieldOffset(0)]
                public byte __size_1;

                [FieldOffset(0)]
                public sbyte __lx;

                [FieldOffset(1)]
                public fixed sbyte __data_1[11];

                [FieldOffset(2)]
                public sbyte __dummy___data_1_1;

                [FieldOffset(3)]
                public sbyte __dummy___data_1_2;

                [FieldOffset(4)]
                public sbyte __dummy___data_1_3;

                [FieldOffset(5)]
                public sbyte __dummy___data_1_4;

                [FieldOffset(6)]
                public sbyte __dummy___data_1_5;

                [FieldOffset(7)]
                public sbyte __dummy___data_1_6;

                [FieldOffset(8)]
                public sbyte __dummy___data_1_7;

                [FieldOffset(9)]
                public sbyte __dummy___data_1_8;

                [FieldOffset(10)]
                public sbyte __dummy___data_1_9;

                [FieldOffset(11)]
                public sbyte __dummy___data_1_10;

                [FieldOffset(0)]
                public fixed uint __words[3];

                [FieldOffset(4)]
                public uint __dummy___words_1;

                [FieldOffset(8)]
                public uint __dummy___words_2;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Std-templates", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("Std-templates", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv")]
                internal static extern global::System.IntPtr c_str_0(global::System.IntPtr instance);
            }

            internal enum short_mask : uint
            {
                __short_mask = 0x1
            }

            internal enum long_mask : uint
            {
                __long_mask = 0x1
            }

            internal enum min_cap : uint
            {
                __min_cap = 11
            }

            internal enum n_words : uint
            {
                __n_words = 3
            }

            [Flags]
            internal enum alignment : uint
            {
                __alignment = 16
            }

            public unsafe partial class __rep : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                }

                public unsafe partial struct _
                {
                    [StructLayout(LayoutKind.Explicit, Size = 12)]
                    public partial struct Internal
                    {
                    }
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, __rep> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, __rep>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static __rep __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new __rep(native.ToPointer(), skipVTables);
                }

                public static __rep __CreateInstance(__rep.Internal native, bool skipVTables = false)
                {
                    return new __rep(native, skipVTables);
                }

                private static void* __CopyValue(__rep.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    *(__rep.Internal*) ret = native;
                    return ret.ToPointer();
                }

                private __rep(__rep.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected __rep(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public __rep()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    global::std.__1.basic_string.__rep __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            public unsafe partial class __long : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public uint __cap_;

                    [FieldOffset(4)]
                    public uint __size_;

                    [FieldOffset(8)]
                    public global::System.IntPtr __data_;
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, __long> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, __long>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static __long __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new __long(native.ToPointer(), skipVTables);
                }

                public static __long __CreateInstance(__long.Internal native, bool skipVTables = false)
                {
                    return new __long(native, skipVTables);
                }

                private static void* __CopyValue(__long.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    *(__long.Internal*) ret = native;
                    return ret.ToPointer();
                }

                private __long(__long.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected __long(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public __long()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    global::std.__1.basic_string.__long __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            public unsafe partial class __short : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                    [FieldOffset(1)]
                    public fixed sbyte __data_[11];

                    [FieldOffset(2)]
                    public sbyte __dummy___data__1;

                    [FieldOffset(3)]
                    public sbyte __dummy___data__2;

                    [FieldOffset(4)]
                    public sbyte __dummy___data__3;

                    [FieldOffset(5)]
                    public sbyte __dummy___data__4;

                    [FieldOffset(6)]
                    public sbyte __dummy___data__5;

                    [FieldOffset(7)]
                    public sbyte __dummy___data__6;

                    [FieldOffset(8)]
                    public sbyte __dummy___data__7;

                    [FieldOffset(9)]
                    public sbyte __dummy___data__8;

                    [FieldOffset(10)]
                    public sbyte __dummy___data__9;

                    [FieldOffset(11)]
                    public sbyte __dummy___data__10;
                }

                public unsafe partial struct _
                {
                    [StructLayout(LayoutKind.Explicit, Size = 1)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public byte __size_;

                        [FieldOffset(0)]
                        public sbyte __lx;
                    }
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, __short> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, __short>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static __short __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new __short(native.ToPointer(), skipVTables);
                }

                public static __short __CreateInstance(__short.Internal native, bool skipVTables = false)
                {
                    return new __short(native, skipVTables);
                }

                private static void* __CopyValue(__short.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    *(__short.Internal*) ret = native;
                    return ret.ToPointer();
                }

                private __short(__short.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected __short(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public __short()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    global::std.__1.basic_string.__short __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            public unsafe partial class __raw : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public fixed uint __words[3];

                    [FieldOffset(4)]
                    public uint __dummy___words_1;

                    [FieldOffset(8)]
                    public uint __dummy___words_2;
                }

                public global::System.IntPtr __Instance { get; protected set; }

                protected int __PointerAdjustment;
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, __raw> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, __raw>();
                protected void*[] __OriginalVTables;

                protected bool __ownsNativeInstance;

                public static __raw __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new __raw(native.ToPointer(), skipVTables);
                }

                public static __raw __CreateInstance(__raw.Internal native, bool skipVTables = false)
                {
                    return new __raw(native, skipVTables);
                }

                private static void* __CopyValue(__raw.Internal native)
                {
                    var ret = Marshal.AllocHGlobal(12);
                    *(__raw.Internal*) ret = native;
                    return ret.ToPointer();
                }

                private __raw(__raw.Internal native, bool skipVTables = false)
                    : this(__CopyValue(native), skipVTables)
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected __raw(void* native, bool skipVTables = false)
                {
                    if (native == null)
                        return;
                    __Instance = new global::System.IntPtr(native);
                }

                public __raw()
                {
                    __Instance = Marshal.AllocHGlobal(12);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    global::std.__1.basic_string.__raw __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            public unsafe partial struct __ulx
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                }

                private __ulx.Internal __instance;
                public __ulx.Internal __Instance { get { return __instance; } }

                public static __ulx __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
                {
                    return new __ulx(native.ToPointer(), skipVTables);
                }

                public static __ulx __CreateInstance(__ulx.Internal native, bool skipVTables = false)
                {
                    return new __ulx(native, skipVTables);
                }

                private __ulx(__ulx.Internal native, bool skipVTables = false)
                    : this()
                {
                    __instance = native;
                }

                private __ulx(void* native, bool skipVTables = false) : this()
                {
                    __instance = *(Internal*) native;
                }
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, basic_string> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, basic_string>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static basic_string __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new basic_string(native.ToPointer(), skipVTables);
            }

            public static basic_string __CreateInstance(basic_string.Internal native, bool skipVTables = false)
            {
                return new basic_string(native, skipVTables);
            }

            private static void* __CopyValue(basic_string.Internal native)
            {
                var ret = Marshal.AllocHGlobal(12);
                *(basic_string.Internal*) ret = native;
                return ret.ToPointer();
            }

            private basic_string(basic_string.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected basic_string(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                global::std.__1.basic_string __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                Internal.dtor_0((__Instance + __PointerAdjustment));
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public string c_str()
            {
                var __ret = Internal.c_str_0((__Instance + __PointerAdjustment));
                return Marshal.PtrToStringAnsi(__ret);
            }

            public static uint npos
            {
                get
                {
                    var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("Std-templates", "_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4nposE");
                    return *__ptr;
                }
            }
        }
    }
}
