// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "AST.h"

using namespace System;
using namespace System::Runtime::InteropServices;

CppSharp::Parser::AST::NativeLibrary::NativeLibrary(::CppSharp::CppParser::AST::NativeLibrary* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::NativeLibrary^ CppSharp::Parser::AST::NativeLibrary::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::NativeLibrary((::CppSharp::CppParser::AST::NativeLibrary*) native.ToPointer());
}

CppSharp::Parser::AST::NativeLibrary::NativeLibrary(::CppSharp::CppParser::AST::NativeLibrary* native, const bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}
CppSharp::Parser::AST::NativeLibrary::~NativeLibrary()
{
    delete NativePtr;
}

CppSharp::Parser::AST::NativeLibrary::NativeLibrary()
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::NativeLibrary();
}

System::String^ CppSharp::Parser::AST::NativeLibrary::GetSymbols(unsigned int i)
{
    auto __ret = ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->getSymbols(i);
    if (__ret == nullptr) return nullptr;
    return (__ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(__ret));
}

void CppSharp::Parser::AST::NativeLibrary::AddSymbols(System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->addSymbols(__arg0);
}

void CppSharp::Parser::AST::NativeLibrary::ClearSymbols()
{
    ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->clearSymbols();
}

System::String^ CppSharp::Parser::AST::NativeLibrary::GetDependencies(unsigned int i)
{
    auto __ret = ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->getDependencies(i);
    if (__ret == nullptr) return nullptr;
    return (__ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(__ret));
}

void CppSharp::Parser::AST::NativeLibrary::AddDependencies(System::String^ s)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(s);
    auto __arg0 = ___arg0.c_str();
    ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->addDependencies(__arg0);
}

void CppSharp::Parser::AST::NativeLibrary::ClearDependencies()
{
    ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->clearDependencies();
}

CppSharp::Parser::AST::NativeLibrary::NativeLibrary(CppSharp::Parser::AST::NativeLibrary^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::NativeLibrary*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::NativeLibrary(__arg0);
}

System::IntPtr CppSharp::Parser::AST::NativeLibrary::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::NativeLibrary::__Instance::set(System::IntPtr object)
{
    NativePtr = (::CppSharp::CppParser::AST::NativeLibrary*)object.ToPointer();
}

System::String^ CppSharp::Parser::AST::NativeLibrary::FileName::get()
{
    return clix::marshalString<clix::E_UTF8>(((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->fileName);
}

void CppSharp::Parser::AST::NativeLibrary::FileName::set(System::String^ value)
{
    ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->fileName = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::AST::ArchType CppSharp::Parser::AST::NativeLibrary::ArchType::get()
{
    return (CppSharp::Parser::AST::ArchType)((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->archType;
}

void CppSharp::Parser::AST::NativeLibrary::ArchType::set(CppSharp::Parser::AST::ArchType value)
{
    ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->archType = (::CppSharp::CppParser::AST::ArchType)value;
}

System::Collections::Generic::List<System::String^>^ CppSharp::Parser::AST::NativeLibrary::Symbols::get()
{
    auto _tmp__Symbols = gcnew System::Collections::Generic::List<System::String^>();
    for(auto _element : ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->Symbols)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__Symbols->Add(_marshalElement);
    }
    return _tmp__Symbols;
}

void CppSharp::Parser::AST::NativeLibrary::Symbols::set(System::Collections::Generic::List<System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->Symbols = _tmpvalue;
}

System::Collections::Generic::List<System::String^>^ CppSharp::Parser::AST::NativeLibrary::Dependencies::get()
{
    auto _tmp__Dependencies = gcnew System::Collections::Generic::List<System::String^>();
    for(auto _element : ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->Dependencies)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmp__Dependencies->Add(_marshalElement);
    }
    return _tmp__Dependencies;
}

void CppSharp::Parser::AST::NativeLibrary::Dependencies::set(System::Collections::Generic::List<System::String^>^ value)
{
    auto _tmpvalue = std::vector<::std::string>();
    for each(System::String^ _element in value)
    {
        auto _marshalElement = clix::marshalString<clix::E_UTF8>(_element);
        _tmpvalue.push_back(_marshalElement);
    }
    ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->Dependencies = _tmpvalue;
}

unsigned int CppSharp::Parser::AST::NativeLibrary::SymbolsCount::get()
{
    auto __ret = ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->getSymbolsCount();
    return __ret;
}

unsigned int CppSharp::Parser::AST::NativeLibrary::DependenciesCount::get()
{
    auto __ret = ((::CppSharp::CppParser::AST::NativeLibrary*)NativePtr)->getDependenciesCount();
    return __ret;
}

CppSharp::Parser::AST::Comment::Comment(::CppSharp::CppParser::AST::Comment* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::Comment^ CppSharp::Parser::AST::Comment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*) native.ToPointer());
}

CppSharp::Parser::AST::Comment::Comment(::CppSharp::CppParser::AST::Comment* native, const bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}
CppSharp::Parser::AST::Comment::~Comment()
{
    delete NativePtr;
}

CppSharp::Parser::AST::Comment::Comment(CppSharp::Parser::AST::CommentKind kind)
{
    __ownsNativeInstance = true;
    auto __arg0 = (::CppSharp::CppParser::AST::CommentKind)kind;
    NativePtr = new ::CppSharp::CppParser::AST::Comment(__arg0);
}

CppSharp::Parser::AST::Comment::Comment(CppSharp::Parser::AST::Comment^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::Comment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::Comment(__arg0);
}

CppSharp::Parser::AST::Comment::operator CppSharp::Parser::AST::Comment^(CppSharp::Parser::AST::CommentKind kind)
{
    auto __arg0 = (::CppSharp::CppParser::AST::CommentKind)kind;
    auto __ret = (::CppSharp::CppParser::AST::Comment) __arg0;
    auto ____ret = new ::CppSharp::CppParser::AST::Comment(__ret);
    return (____ret == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)____ret, true);
}

System::IntPtr CppSharp::Parser::AST::Comment::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::Comment::__Instance::set(System::IntPtr object)
{
    NativePtr = (::CppSharp::CppParser::AST::Comment*)object.ToPointer();
}

CppSharp::Parser::AST::CommentKind CppSharp::Parser::AST::Comment::Kind::get()
{
    return (CppSharp::Parser::AST::CommentKind)((::CppSharp::CppParser::AST::Comment*)NativePtr)->kind;
}

void CppSharp::Parser::AST::Comment::Kind::set(CppSharp::Parser::AST::CommentKind value)
{
    ((::CppSharp::CppParser::AST::Comment*)NativePtr)->kind = (::CppSharp::CppParser::AST::CommentKind)value;
}

CppSharp::Parser::AST::BlockContentComment::BlockContentComment(::CppSharp::CppParser::AST::BlockContentComment* native)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)native)
{
}

CppSharp::Parser::AST::BlockContentComment^ CppSharp::Parser::AST::BlockContentComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*) native.ToPointer());
}

CppSharp::Parser::AST::BlockContentComment::BlockContentComment(::CppSharp::CppParser::AST::BlockContentComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::BlockContentComment::~BlockContentComment()
{
}

CppSharp::Parser::AST::BlockContentComment::BlockContentComment()
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::BlockContentComment();
}

CppSharp::Parser::AST::BlockContentComment::BlockContentComment(CppSharp::Parser::AST::CommentKind Kind)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (::CppSharp::CppParser::AST::CommentKind)Kind;
    NativePtr = new ::CppSharp::CppParser::AST::BlockContentComment(__arg0);
}

CppSharp::Parser::AST::BlockContentComment::BlockContentComment(CppSharp::Parser::AST::BlockContentComment^ _0)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::BlockContentComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::BlockContentComment(__arg0);
}

CppSharp::Parser::AST::BlockContentComment::operator CppSharp::Parser::AST::BlockContentComment^(CppSharp::Parser::AST::CommentKind Kind)
{
    auto __arg0 = (::CppSharp::CppParser::AST::CommentKind)Kind;
    auto __ret = (::CppSharp::CppParser::AST::BlockContentComment) __arg0;
    auto ____ret = new ::CppSharp::CppParser::AST::BlockContentComment(__ret);
    return (____ret == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*)____ret, true);
}

CppSharp::Parser::AST::FullComment::FullComment(::CppSharp::CppParser::AST::FullComment* native)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)native)
{
}

CppSharp::Parser::AST::FullComment^ CppSharp::Parser::AST::FullComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::FullComment((::CppSharp::CppParser::AST::FullComment*) native.ToPointer());
}

CppSharp::Parser::AST::FullComment::FullComment(::CppSharp::CppParser::AST::FullComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::FullComment::~FullComment()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::CppSharp::CppParser::AST::FullComment*) __nativePtr;
    }
}

CppSharp::Parser::AST::FullComment::FullComment()
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::FullComment();
}

CppSharp::Parser::AST::BlockContentComment^ CppSharp::Parser::AST::FullComment::GetBlocks(unsigned int i)
{
    auto __ret = ((::CppSharp::CppParser::AST::FullComment*)NativePtr)->getBlocks(i);
    if (__ret == nullptr) return nullptr;
    return (__ret == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*)__ret);
}

void CppSharp::Parser::AST::FullComment::AddBlocks(CppSharp::Parser::AST::BlockContentComment^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (::CppSharp::CppParser::AST::BlockContentComment*)s->NativePtr;
    ((::CppSharp::CppParser::AST::FullComment*)NativePtr)->addBlocks(__arg0);
}

void CppSharp::Parser::AST::FullComment::ClearBlocks()
{
    ((::CppSharp::CppParser::AST::FullComment*)NativePtr)->clearBlocks();
}

CppSharp::Parser::AST::FullComment::FullComment(CppSharp::Parser::AST::FullComment^ _0)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::FullComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::FullComment(__arg0);
}

System::Collections::Generic::List<CppSharp::Parser::AST::BlockContentComment^>^ CppSharp::Parser::AST::FullComment::Blocks::get()
{
    auto _tmp__Blocks = gcnew System::Collections::Generic::List<CppSharp::Parser::AST::BlockContentComment^>();
    for(auto _element : ((::CppSharp::CppParser::AST::FullComment*)NativePtr)->Blocks)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*)_element);
        _tmp__Blocks->Add(_marshalElement);
    }
    return _tmp__Blocks;
}

void CppSharp::Parser::AST::FullComment::Blocks::set(System::Collections::Generic::List<CppSharp::Parser::AST::BlockContentComment^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::BlockContentComment*>();
    for each(CppSharp::Parser::AST::BlockContentComment^ _element in value)
    {
        auto _marshalElement = (::CppSharp::CppParser::AST::BlockContentComment*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((::CppSharp::CppParser::AST::FullComment*)NativePtr)->Blocks = _tmpvalue;
}

unsigned int CppSharp::Parser::AST::FullComment::BlocksCount::get()
{
    auto __ret = ((::CppSharp::CppParser::AST::FullComment*)NativePtr)->getBlocksCount();
    return __ret;
}

CppSharp::Parser::AST::InlineContentComment::InlineContentComment(::CppSharp::CppParser::AST::InlineContentComment* native)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)native)
{
}

CppSharp::Parser::AST::InlineContentComment^ CppSharp::Parser::AST::InlineContentComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*) native.ToPointer());
}

CppSharp::Parser::AST::InlineContentComment::InlineContentComment(::CppSharp::CppParser::AST::InlineContentComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::InlineContentComment::~InlineContentComment()
{
}

CppSharp::Parser::AST::InlineContentComment::InlineContentComment()
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::InlineContentComment();
}

CppSharp::Parser::AST::InlineContentComment::InlineContentComment(CppSharp::Parser::AST::CommentKind Kind)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (::CppSharp::CppParser::AST::CommentKind)Kind;
    NativePtr = new ::CppSharp::CppParser::AST::InlineContentComment(__arg0);
}

CppSharp::Parser::AST::InlineContentComment::InlineContentComment(CppSharp::Parser::AST::InlineContentComment^ _0)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::InlineContentComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::InlineContentComment(__arg0);
}

CppSharp::Parser::AST::InlineContentComment::operator CppSharp::Parser::AST::InlineContentComment^(CppSharp::Parser::AST::CommentKind Kind)
{
    auto __arg0 = (::CppSharp::CppParser::AST::CommentKind)Kind;
    auto __ret = (::CppSharp::CppParser::AST::InlineContentComment) __arg0;
    auto ____ret = new ::CppSharp::CppParser::AST::InlineContentComment(__ret);
    return (____ret == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)____ret, true);
}

bool CppSharp::Parser::AST::InlineContentComment::HasTrailingNewline::get()
{
    return ((::CppSharp::CppParser::AST::InlineContentComment*)NativePtr)->hasTrailingNewline;
}

void CppSharp::Parser::AST::InlineContentComment::HasTrailingNewline::set(bool value)
{
    ((::CppSharp::CppParser::AST::InlineContentComment*)NativePtr)->hasTrailingNewline = value;
}

CppSharp::Parser::AST::ParagraphComment::ParagraphComment(::CppSharp::CppParser::AST::ParagraphComment* native)
    : CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*)native)
{
}

CppSharp::Parser::AST::ParagraphComment^ CppSharp::Parser::AST::ParagraphComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ParagraphComment((::CppSharp::CppParser::AST::ParagraphComment*) native.ToPointer());
}

CppSharp::Parser::AST::ParagraphComment::ParagraphComment(::CppSharp::CppParser::AST::ParagraphComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::ParagraphComment::~ParagraphComment()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::CppSharp::CppParser::AST::ParagraphComment*) __nativePtr;
    }
}

CppSharp::Parser::AST::ParagraphComment::ParagraphComment()
    : CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::ParagraphComment();
}

CppSharp::Parser::AST::InlineContentComment^ CppSharp::Parser::AST::ParagraphComment::GetContent(unsigned int i)
{
    auto __ret = ((::CppSharp::CppParser::AST::ParagraphComment*)NativePtr)->getContent(i);
    if (__ret == nullptr) return nullptr;
    return (__ret == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)__ret);
}

void CppSharp::Parser::AST::ParagraphComment::AddContent(CppSharp::Parser::AST::InlineContentComment^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (::CppSharp::CppParser::AST::InlineContentComment*)s->NativePtr;
    ((::CppSharp::CppParser::AST::ParagraphComment*)NativePtr)->addContent(__arg0);
}

void CppSharp::Parser::AST::ParagraphComment::ClearContent()
{
    ((::CppSharp::CppParser::AST::ParagraphComment*)NativePtr)->clearContent();
}

CppSharp::Parser::AST::ParagraphComment::ParagraphComment(CppSharp::Parser::AST::ParagraphComment^ _0)
    : CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::ParagraphComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::ParagraphComment(__arg0);
}

bool CppSharp::Parser::AST::ParagraphComment::IsWhitespace::get()
{
    return ((::CppSharp::CppParser::AST::ParagraphComment*)NativePtr)->isWhitespace;
}

void CppSharp::Parser::AST::ParagraphComment::IsWhitespace::set(bool value)
{
    ((::CppSharp::CppParser::AST::ParagraphComment*)NativePtr)->isWhitespace = value;
}

System::Collections::Generic::List<CppSharp::Parser::AST::InlineContentComment^>^ CppSharp::Parser::AST::ParagraphComment::Content::get()
{
    auto _tmp__Content = gcnew System::Collections::Generic::List<CppSharp::Parser::AST::InlineContentComment^>();
    for(auto _element : ((::CppSharp::CppParser::AST::ParagraphComment*)NativePtr)->Content)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)_element);
        _tmp__Content->Add(_marshalElement);
    }
    return _tmp__Content;
}

void CppSharp::Parser::AST::ParagraphComment::Content::set(System::Collections::Generic::List<CppSharp::Parser::AST::InlineContentComment^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::InlineContentComment*>();
    for each(CppSharp::Parser::AST::InlineContentComment^ _element in value)
    {
        auto _marshalElement = (::CppSharp::CppParser::AST::InlineContentComment*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((::CppSharp::CppParser::AST::ParagraphComment*)NativePtr)->Content = _tmpvalue;
}

unsigned int CppSharp::Parser::AST::ParagraphComment::ContentCount::get()
{
    auto __ret = ((::CppSharp::CppParser::AST::ParagraphComment*)NativePtr)->getContentCount();
    return __ret;
}

CppSharp::Parser::AST::BlockCommandComment::Argument::Argument(::CppSharp::CppParser::AST::BlockCommandComment::Argument* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::BlockCommandComment::Argument^ CppSharp::Parser::AST::BlockCommandComment::Argument::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::BlockCommandComment::Argument((::CppSharp::CppParser::AST::BlockCommandComment::Argument*) native.ToPointer());
}

CppSharp::Parser::AST::BlockCommandComment::Argument::Argument(::CppSharp::CppParser::AST::BlockCommandComment::Argument* native, const bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}
CppSharp::Parser::AST::BlockCommandComment::Argument::~Argument()
{
    delete NativePtr;
}

CppSharp::Parser::AST::BlockCommandComment::Argument::Argument()
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::BlockCommandComment::Argument();
}

CppSharp::Parser::AST::BlockCommandComment::Argument::Argument(CppSharp::Parser::AST::BlockCommandComment::Argument^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::BlockCommandComment::Argument*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::BlockCommandComment::Argument(__arg0);
}

System::IntPtr CppSharp::Parser::AST::BlockCommandComment::Argument::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::BlockCommandComment::Argument::__Instance::set(System::IntPtr object)
{
    NativePtr = (::CppSharp::CppParser::AST::BlockCommandComment::Argument*)object.ToPointer();
}

System::String^ CppSharp::Parser::AST::BlockCommandComment::Argument::Text::get()
{
    return clix::marshalString<clix::E_UTF8>(((::CppSharp::CppParser::AST::BlockCommandComment::Argument*)NativePtr)->text);
}

void CppSharp::Parser::AST::BlockCommandComment::Argument::Text::set(System::String^ value)
{
    ((::CppSharp::CppParser::AST::BlockCommandComment::Argument*)NativePtr)->text = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::AST::BlockCommandComment::BlockCommandComment(::CppSharp::CppParser::AST::BlockCommandComment* native)
    : CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*)native)
{
}

CppSharp::Parser::AST::BlockCommandComment^ CppSharp::Parser::AST::BlockCommandComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*) native.ToPointer());
}

CppSharp::Parser::AST::BlockCommandComment::BlockCommandComment(::CppSharp::CppParser::AST::BlockCommandComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::BlockCommandComment::~BlockCommandComment()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::CppSharp::CppParser::AST::BlockCommandComment*) __nativePtr;
    }
}

CppSharp::Parser::AST::BlockCommandComment::BlockCommandComment()
    : CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::BlockCommandComment();
}

CppSharp::Parser::AST::BlockCommandComment::BlockCommandComment(CppSharp::Parser::AST::CommentKind Kind)
    : CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (::CppSharp::CppParser::AST::CommentKind)Kind;
    NativePtr = new ::CppSharp::CppParser::AST::BlockCommandComment(__arg0);
}

CppSharp::Parser::AST::BlockCommandComment::Argument^ CppSharp::Parser::AST::BlockCommandComment::GetArguments(unsigned int i)
{
    auto __ret = ((::CppSharp::CppParser::AST::BlockCommandComment*)NativePtr)->getArguments(i);
    auto ____ret = new ::CppSharp::CppParser::AST::BlockCommandComment::Argument(__ret);
    return (____ret == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::BlockCommandComment::Argument((::CppSharp::CppParser::AST::BlockCommandComment::Argument*)____ret, true);
}

void CppSharp::Parser::AST::BlockCommandComment::AddArguments(CppSharp::Parser::AST::BlockCommandComment::Argument^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::BlockCommandComment::Argument*)s->NativePtr;
    ((::CppSharp::CppParser::AST::BlockCommandComment*)NativePtr)->addArguments(__arg0);
}

void CppSharp::Parser::AST::BlockCommandComment::ClearArguments()
{
    ((::CppSharp::CppParser::AST::BlockCommandComment*)NativePtr)->clearArguments();
}

CppSharp::Parser::AST::BlockCommandComment::BlockCommandComment(CppSharp::Parser::AST::BlockCommandComment^ _0)
    : CppSharp::Parser::AST::BlockContentComment((::CppSharp::CppParser::AST::BlockContentComment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::BlockCommandComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::BlockCommandComment(__arg0);
}

CppSharp::Parser::AST::BlockCommandComment::operator CppSharp::Parser::AST::BlockCommandComment^(CppSharp::Parser::AST::CommentKind Kind)
{
    auto __arg0 = (::CppSharp::CppParser::AST::CommentKind)Kind;
    auto __ret = (::CppSharp::CppParser::AST::BlockCommandComment) __arg0;
    auto ____ret = new ::CppSharp::CppParser::AST::BlockCommandComment(__ret);
    return (____ret == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)____ret, true);
}

unsigned int CppSharp::Parser::AST::BlockCommandComment::CommandId::get()
{
    return ((::CppSharp::CppParser::AST::BlockCommandComment*)NativePtr)->commandId;
}

void CppSharp::Parser::AST::BlockCommandComment::CommandId::set(unsigned int value)
{
    ((::CppSharp::CppParser::AST::BlockCommandComment*)NativePtr)->commandId = value;
}

CppSharp::Parser::AST::ParagraphComment^ CppSharp::Parser::AST::BlockCommandComment::ParagraphComment::get()
{
    return (((::CppSharp::CppParser::AST::BlockCommandComment*)NativePtr)->paragraphComment == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::ParagraphComment((::CppSharp::CppParser::AST::ParagraphComment*)((::CppSharp::CppParser::AST::BlockCommandComment*)NativePtr)->paragraphComment);
}

void CppSharp::Parser::AST::BlockCommandComment::ParagraphComment::set(CppSharp::Parser::AST::ParagraphComment^ value)
{
    ((::CppSharp::CppParser::AST::BlockCommandComment*)NativePtr)->paragraphComment = (::CppSharp::CppParser::AST::ParagraphComment*)value->NativePtr;
}

System::Collections::Generic::List<CppSharp::Parser::AST::BlockCommandComment::Argument^>^ CppSharp::Parser::AST::BlockCommandComment::Arguments::get()
{
    auto _tmp__Arguments = gcnew System::Collections::Generic::List<CppSharp::Parser::AST::BlockCommandComment::Argument^>();
    for(auto _element : ((::CppSharp::CppParser::AST::BlockCommandComment*)NativePtr)->Arguments)
    {
        auto ___element = new ::CppSharp::CppParser::AST::BlockCommandComment::Argument(_element);
        auto _marshalElement = (___element == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::BlockCommandComment::Argument((::CppSharp::CppParser::AST::BlockCommandComment::Argument*)___element, true);
        _tmp__Arguments->Add(_marshalElement);
    }
    return _tmp__Arguments;
}

void CppSharp::Parser::AST::BlockCommandComment::Arguments::set(System::Collections::Generic::List<CppSharp::Parser::AST::BlockCommandComment::Argument^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::BlockCommandComment::Argument>();
    for each(CppSharp::Parser::AST::BlockCommandComment::Argument^ _element in value)
    {
        if (ReferenceEquals(_element, nullptr))
        throw gcnew ::System::ArgumentNullException("_element", "Cannot be null because it is passed by value.");
        auto _marshalElement = *(::CppSharp::CppParser::AST::BlockCommandComment::Argument*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((::CppSharp::CppParser::AST::BlockCommandComment*)NativePtr)->Arguments = _tmpvalue;
}

unsigned int CppSharp::Parser::AST::BlockCommandComment::ArgumentsCount::get()
{
    auto __ret = ((::CppSharp::CppParser::AST::BlockCommandComment*)NativePtr)->getArgumentsCount();
    return __ret;
}

CppSharp::Parser::AST::ParamCommandComment::ParamCommandComment(::CppSharp::CppParser::AST::ParamCommandComment* native)
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)native)
{
}

CppSharp::Parser::AST::ParamCommandComment^ CppSharp::Parser::AST::ParamCommandComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ParamCommandComment((::CppSharp::CppParser::AST::ParamCommandComment*) native.ToPointer());
}

CppSharp::Parser::AST::ParamCommandComment::ParamCommandComment(::CppSharp::CppParser::AST::ParamCommandComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::ParamCommandComment::~ParamCommandComment()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::CppSharp::CppParser::AST::ParamCommandComment*) __nativePtr;
    }
}

CppSharp::Parser::AST::ParamCommandComment::ParamCommandComment()
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::ParamCommandComment();
}

CppSharp::Parser::AST::ParamCommandComment::ParamCommandComment(CppSharp::Parser::AST::ParamCommandComment^ _0)
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::ParamCommandComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::ParamCommandComment(__arg0);
}

CppSharp::Parser::AST::ParamCommandComment::PassDirection CppSharp::Parser::AST::ParamCommandComment::Direction::get()
{
    return (CppSharp::Parser::AST::ParamCommandComment::PassDirection)((::CppSharp::CppParser::AST::ParamCommandComment*)NativePtr)->direction;
}

void CppSharp::Parser::AST::ParamCommandComment::Direction::set(CppSharp::Parser::AST::ParamCommandComment::PassDirection value)
{
    ((::CppSharp::CppParser::AST::ParamCommandComment*)NativePtr)->direction = (::CppSharp::CppParser::AST::ParamCommandComment::PassDirection)value;
}

unsigned int CppSharp::Parser::AST::ParamCommandComment::ParamIndex::get()
{
    return ((::CppSharp::CppParser::AST::ParamCommandComment*)NativePtr)->paramIndex;
}

void CppSharp::Parser::AST::ParamCommandComment::ParamIndex::set(unsigned int value)
{
    ((::CppSharp::CppParser::AST::ParamCommandComment*)NativePtr)->paramIndex = value;
}

CppSharp::Parser::AST::TParamCommandComment::TParamCommandComment(::CppSharp::CppParser::AST::TParamCommandComment* native)
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)native)
{
}

CppSharp::Parser::AST::TParamCommandComment^ CppSharp::Parser::AST::TParamCommandComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::TParamCommandComment((::CppSharp::CppParser::AST::TParamCommandComment*) native.ToPointer());
}

CppSharp::Parser::AST::TParamCommandComment::TParamCommandComment(::CppSharp::CppParser::AST::TParamCommandComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::TParamCommandComment::~TParamCommandComment()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::CppSharp::CppParser::AST::TParamCommandComment*) __nativePtr;
    }
}

CppSharp::Parser::AST::TParamCommandComment::TParamCommandComment()
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::TParamCommandComment();
}

unsigned int CppSharp::Parser::AST::TParamCommandComment::GetPosition(unsigned int i)
{
    auto __ret = ((::CppSharp::CppParser::AST::TParamCommandComment*)NativePtr)->getPosition(i);
    return __ret;
}

void CppSharp::Parser::AST::TParamCommandComment::AddPosition([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] unsigned int% s)
{
    unsigned int __arg0 = s;
    ((::CppSharp::CppParser::AST::TParamCommandComment*)NativePtr)->addPosition(__arg0);
    s = __arg0;
}

void CppSharp::Parser::AST::TParamCommandComment::ClearPosition()
{
    ((::CppSharp::CppParser::AST::TParamCommandComment*)NativePtr)->clearPosition();
}

CppSharp::Parser::AST::TParamCommandComment::TParamCommandComment(CppSharp::Parser::AST::TParamCommandComment^ _0)
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::TParamCommandComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::TParamCommandComment(__arg0);
}

System::Collections::Generic::List<unsigned int>^ CppSharp::Parser::AST::TParamCommandComment::Position::get()
{
    auto _tmp__Position = gcnew System::Collections::Generic::List<unsigned int>();
    for(auto _element : ((::CppSharp::CppParser::AST::TParamCommandComment*)NativePtr)->Position)
    {
        auto _marshalElement = _element;
        _tmp__Position->Add(_marshalElement);
    }
    return _tmp__Position;
}

void CppSharp::Parser::AST::TParamCommandComment::Position::set(System::Collections::Generic::List<unsigned int>^ value)
{
    auto _tmpvalue = std::vector<unsigned int>();
    for each(unsigned int _element in value)
    {
        auto _marshalElement = _element;
        _tmpvalue.push_back(_marshalElement);
    }
    ((::CppSharp::CppParser::AST::TParamCommandComment*)NativePtr)->Position = _tmpvalue;
}

unsigned int CppSharp::Parser::AST::TParamCommandComment::PositionCount::get()
{
    auto __ret = ((::CppSharp::CppParser::AST::TParamCommandComment*)NativePtr)->getPositionCount();
    return __ret;
}

CppSharp::Parser::AST::VerbatimBlockLineComment::VerbatimBlockLineComment(::CppSharp::CppParser::AST::VerbatimBlockLineComment* native)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)native)
{
}

CppSharp::Parser::AST::VerbatimBlockLineComment^ CppSharp::Parser::AST::VerbatimBlockLineComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::VerbatimBlockLineComment((::CppSharp::CppParser::AST::VerbatimBlockLineComment*) native.ToPointer());
}

CppSharp::Parser::AST::VerbatimBlockLineComment::VerbatimBlockLineComment(::CppSharp::CppParser::AST::VerbatimBlockLineComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::VerbatimBlockLineComment::~VerbatimBlockLineComment()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::CppSharp::CppParser::AST::VerbatimBlockLineComment*) __nativePtr;
    }
}

CppSharp::Parser::AST::VerbatimBlockLineComment::VerbatimBlockLineComment()
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::VerbatimBlockLineComment();
}

CppSharp::Parser::AST::VerbatimBlockLineComment::VerbatimBlockLineComment(CppSharp::Parser::AST::VerbatimBlockLineComment^ _0)
    : CppSharp::Parser::AST::Comment((::CppSharp::CppParser::AST::Comment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::VerbatimBlockLineComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::VerbatimBlockLineComment(__arg0);
}

System::String^ CppSharp::Parser::AST::VerbatimBlockLineComment::Text::get()
{
    return clix::marshalString<clix::E_UTF8>(((::CppSharp::CppParser::AST::VerbatimBlockLineComment*)NativePtr)->text);
}

void CppSharp::Parser::AST::VerbatimBlockLineComment::Text::set(System::String^ value)
{
    ((::CppSharp::CppParser::AST::VerbatimBlockLineComment*)NativePtr)->text = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::AST::VerbatimBlockComment::VerbatimBlockComment(::CppSharp::CppParser::AST::VerbatimBlockComment* native)
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)native)
{
}

CppSharp::Parser::AST::VerbatimBlockComment^ CppSharp::Parser::AST::VerbatimBlockComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::VerbatimBlockComment((::CppSharp::CppParser::AST::VerbatimBlockComment*) native.ToPointer());
}

CppSharp::Parser::AST::VerbatimBlockComment::VerbatimBlockComment(::CppSharp::CppParser::AST::VerbatimBlockComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::VerbatimBlockComment::~VerbatimBlockComment()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::CppSharp::CppParser::AST::VerbatimBlockComment*) __nativePtr;
    }
}

CppSharp::Parser::AST::VerbatimBlockComment::VerbatimBlockComment()
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::VerbatimBlockComment();
}

CppSharp::Parser::AST::VerbatimBlockLineComment^ CppSharp::Parser::AST::VerbatimBlockComment::GetLines(unsigned int i)
{
    auto __ret = ((::CppSharp::CppParser::AST::VerbatimBlockComment*)NativePtr)->getLines(i);
    if (__ret == nullptr) return nullptr;
    return (__ret == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::VerbatimBlockLineComment((::CppSharp::CppParser::AST::VerbatimBlockLineComment*)__ret);
}

void CppSharp::Parser::AST::VerbatimBlockComment::AddLines(CppSharp::Parser::AST::VerbatimBlockLineComment^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (::CppSharp::CppParser::AST::VerbatimBlockLineComment*)s->NativePtr;
    ((::CppSharp::CppParser::AST::VerbatimBlockComment*)NativePtr)->addLines(__arg0);
}

void CppSharp::Parser::AST::VerbatimBlockComment::ClearLines()
{
    ((::CppSharp::CppParser::AST::VerbatimBlockComment*)NativePtr)->clearLines();
}

CppSharp::Parser::AST::VerbatimBlockComment::VerbatimBlockComment(CppSharp::Parser::AST::VerbatimBlockComment^ _0)
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::VerbatimBlockComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::VerbatimBlockComment(__arg0);
}

System::Collections::Generic::List<CppSharp::Parser::AST::VerbatimBlockLineComment^>^ CppSharp::Parser::AST::VerbatimBlockComment::Lines::get()
{
    auto _tmp__Lines = gcnew System::Collections::Generic::List<CppSharp::Parser::AST::VerbatimBlockLineComment^>();
    for(auto _element : ((::CppSharp::CppParser::AST::VerbatimBlockComment*)NativePtr)->Lines)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::VerbatimBlockLineComment((::CppSharp::CppParser::AST::VerbatimBlockLineComment*)_element);
        _tmp__Lines->Add(_marshalElement);
    }
    return _tmp__Lines;
}

void CppSharp::Parser::AST::VerbatimBlockComment::Lines::set(System::Collections::Generic::List<CppSharp::Parser::AST::VerbatimBlockLineComment^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::VerbatimBlockLineComment*>();
    for each(CppSharp::Parser::AST::VerbatimBlockLineComment^ _element in value)
    {
        auto _marshalElement = (::CppSharp::CppParser::AST::VerbatimBlockLineComment*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((::CppSharp::CppParser::AST::VerbatimBlockComment*)NativePtr)->Lines = _tmpvalue;
}

unsigned int CppSharp::Parser::AST::VerbatimBlockComment::LinesCount::get()
{
    auto __ret = ((::CppSharp::CppParser::AST::VerbatimBlockComment*)NativePtr)->getLinesCount();
    return __ret;
}

CppSharp::Parser::AST::VerbatimLineComment::VerbatimLineComment(::CppSharp::CppParser::AST::VerbatimLineComment* native)
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)native)
{
}

CppSharp::Parser::AST::VerbatimLineComment^ CppSharp::Parser::AST::VerbatimLineComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::VerbatimLineComment((::CppSharp::CppParser::AST::VerbatimLineComment*) native.ToPointer());
}

CppSharp::Parser::AST::VerbatimLineComment::VerbatimLineComment(::CppSharp::CppParser::AST::VerbatimLineComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::VerbatimLineComment::~VerbatimLineComment()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::CppSharp::CppParser::AST::VerbatimLineComment*) __nativePtr;
    }
}

CppSharp::Parser::AST::VerbatimLineComment::VerbatimLineComment()
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::VerbatimLineComment();
}

CppSharp::Parser::AST::VerbatimLineComment::VerbatimLineComment(CppSharp::Parser::AST::VerbatimLineComment^ _0)
    : CppSharp::Parser::AST::BlockCommandComment((::CppSharp::CppParser::AST::BlockCommandComment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::VerbatimLineComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::VerbatimLineComment(__arg0);
}

System::String^ CppSharp::Parser::AST::VerbatimLineComment::Text::get()
{
    return clix::marshalString<clix::E_UTF8>(((::CppSharp::CppParser::AST::VerbatimLineComment*)NativePtr)->text);
}

void CppSharp::Parser::AST::VerbatimLineComment::Text::set(System::String^ value)
{
    ((::CppSharp::CppParser::AST::VerbatimLineComment*)NativePtr)->text = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::AST::InlineCommandComment::Argument::Argument(::CppSharp::CppParser::AST::InlineCommandComment::Argument* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::InlineCommandComment::Argument^ CppSharp::Parser::AST::InlineCommandComment::Argument::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::InlineCommandComment::Argument((::CppSharp::CppParser::AST::InlineCommandComment::Argument*) native.ToPointer());
}

CppSharp::Parser::AST::InlineCommandComment::Argument::Argument(::CppSharp::CppParser::AST::InlineCommandComment::Argument* native, const bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}
CppSharp::Parser::AST::InlineCommandComment::Argument::~Argument()
{
    delete NativePtr;
}

CppSharp::Parser::AST::InlineCommandComment::Argument::Argument()
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::InlineCommandComment::Argument();
}

CppSharp::Parser::AST::InlineCommandComment::Argument::Argument(CppSharp::Parser::AST::InlineCommandComment::Argument^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::InlineCommandComment::Argument*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::InlineCommandComment::Argument(__arg0);
}

System::IntPtr CppSharp::Parser::AST::InlineCommandComment::Argument::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::InlineCommandComment::Argument::__Instance::set(System::IntPtr object)
{
    NativePtr = (::CppSharp::CppParser::AST::InlineCommandComment::Argument*)object.ToPointer();
}

System::String^ CppSharp::Parser::AST::InlineCommandComment::Argument::Text::get()
{
    return clix::marshalString<clix::E_UTF8>(((::CppSharp::CppParser::AST::InlineCommandComment::Argument*)NativePtr)->text);
}

void CppSharp::Parser::AST::InlineCommandComment::Argument::Text::set(System::String^ value)
{
    ((::CppSharp::CppParser::AST::InlineCommandComment::Argument*)NativePtr)->text = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::AST::InlineCommandComment::InlineCommandComment(::CppSharp::CppParser::AST::InlineCommandComment* native)
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)native)
{
}

CppSharp::Parser::AST::InlineCommandComment^ CppSharp::Parser::AST::InlineCommandComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::InlineCommandComment((::CppSharp::CppParser::AST::InlineCommandComment*) native.ToPointer());
}

CppSharp::Parser::AST::InlineCommandComment::InlineCommandComment(::CppSharp::CppParser::AST::InlineCommandComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::InlineCommandComment::~InlineCommandComment()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::CppSharp::CppParser::AST::InlineCommandComment*) __nativePtr;
    }
}

CppSharp::Parser::AST::InlineCommandComment::InlineCommandComment()
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::InlineCommandComment();
}

CppSharp::Parser::AST::InlineCommandComment::Argument^ CppSharp::Parser::AST::InlineCommandComment::GetArguments(unsigned int i)
{
    auto __ret = ((::CppSharp::CppParser::AST::InlineCommandComment*)NativePtr)->getArguments(i);
    auto ____ret = new ::CppSharp::CppParser::AST::InlineCommandComment::Argument(__ret);
    return (____ret == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::InlineCommandComment::Argument((::CppSharp::CppParser::AST::InlineCommandComment::Argument*)____ret, true);
}

void CppSharp::Parser::AST::InlineCommandComment::AddArguments(CppSharp::Parser::AST::InlineCommandComment::Argument^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::InlineCommandComment::Argument*)s->NativePtr;
    ((::CppSharp::CppParser::AST::InlineCommandComment*)NativePtr)->addArguments(__arg0);
}

void CppSharp::Parser::AST::InlineCommandComment::ClearArguments()
{
    ((::CppSharp::CppParser::AST::InlineCommandComment*)NativePtr)->clearArguments();
}

CppSharp::Parser::AST::InlineCommandComment::InlineCommandComment(CppSharp::Parser::AST::InlineCommandComment^ _0)
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::InlineCommandComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::InlineCommandComment(__arg0);
}

unsigned int CppSharp::Parser::AST::InlineCommandComment::CommandId::get()
{
    return ((::CppSharp::CppParser::AST::InlineCommandComment*)NativePtr)->commandId;
}

void CppSharp::Parser::AST::InlineCommandComment::CommandId::set(unsigned int value)
{
    ((::CppSharp::CppParser::AST::InlineCommandComment*)NativePtr)->commandId = value;
}

CppSharp::Parser::AST::InlineCommandComment::RenderKind CppSharp::Parser::AST::InlineCommandComment::CommentRenderKind::get()
{
    return (CppSharp::Parser::AST::InlineCommandComment::RenderKind)((::CppSharp::CppParser::AST::InlineCommandComment*)NativePtr)->commentRenderKind;
}

void CppSharp::Parser::AST::InlineCommandComment::CommentRenderKind::set(CppSharp::Parser::AST::InlineCommandComment::RenderKind value)
{
    ((::CppSharp::CppParser::AST::InlineCommandComment*)NativePtr)->commentRenderKind = (::CppSharp::CppParser::AST::InlineCommandComment::RenderKind)value;
}

System::Collections::Generic::List<CppSharp::Parser::AST::InlineCommandComment::Argument^>^ CppSharp::Parser::AST::InlineCommandComment::Arguments::get()
{
    auto _tmp__Arguments = gcnew System::Collections::Generic::List<CppSharp::Parser::AST::InlineCommandComment::Argument^>();
    for(auto _element : ((::CppSharp::CppParser::AST::InlineCommandComment*)NativePtr)->Arguments)
    {
        auto ___element = new ::CppSharp::CppParser::AST::InlineCommandComment::Argument(_element);
        auto _marshalElement = (___element == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::InlineCommandComment::Argument((::CppSharp::CppParser::AST::InlineCommandComment::Argument*)___element, true);
        _tmp__Arguments->Add(_marshalElement);
    }
    return _tmp__Arguments;
}

void CppSharp::Parser::AST::InlineCommandComment::Arguments::set(System::Collections::Generic::List<CppSharp::Parser::AST::InlineCommandComment::Argument^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::InlineCommandComment::Argument>();
    for each(CppSharp::Parser::AST::InlineCommandComment::Argument^ _element in value)
    {
        if (ReferenceEquals(_element, nullptr))
        throw gcnew ::System::ArgumentNullException("_element", "Cannot be null because it is passed by value.");
        auto _marshalElement = *(::CppSharp::CppParser::AST::InlineCommandComment::Argument*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((::CppSharp::CppParser::AST::InlineCommandComment*)NativePtr)->Arguments = _tmpvalue;
}

unsigned int CppSharp::Parser::AST::InlineCommandComment::ArgumentsCount::get()
{
    auto __ret = ((::CppSharp::CppParser::AST::InlineCommandComment*)NativePtr)->getArgumentsCount();
    return __ret;
}

CppSharp::Parser::AST::HTMLTagComment::HTMLTagComment(::CppSharp::CppParser::AST::HTMLTagComment* native)
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)native)
{
}

CppSharp::Parser::AST::HTMLTagComment^ CppSharp::Parser::AST::HTMLTagComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::HTMLTagComment((::CppSharp::CppParser::AST::HTMLTagComment*) native.ToPointer());
}

CppSharp::Parser::AST::HTMLTagComment::HTMLTagComment(::CppSharp::CppParser::AST::HTMLTagComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::HTMLTagComment::~HTMLTagComment()
{
}

CppSharp::Parser::AST::HTMLTagComment::HTMLTagComment()
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::HTMLTagComment();
}

CppSharp::Parser::AST::HTMLTagComment::HTMLTagComment(CppSharp::Parser::AST::CommentKind Kind)
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (::CppSharp::CppParser::AST::CommentKind)Kind;
    NativePtr = new ::CppSharp::CppParser::AST::HTMLTagComment(__arg0);
}

CppSharp::Parser::AST::HTMLTagComment::HTMLTagComment(CppSharp::Parser::AST::HTMLTagComment^ _0)
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::HTMLTagComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::HTMLTagComment(__arg0);
}

CppSharp::Parser::AST::HTMLTagComment::operator CppSharp::Parser::AST::HTMLTagComment^(CppSharp::Parser::AST::CommentKind Kind)
{
    auto __arg0 = (::CppSharp::CppParser::AST::CommentKind)Kind;
    auto __ret = (::CppSharp::CppParser::AST::HTMLTagComment) __arg0;
    auto ____ret = new ::CppSharp::CppParser::AST::HTMLTagComment(__ret);
    return (____ret == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::HTMLTagComment((::CppSharp::CppParser::AST::HTMLTagComment*)____ret, true);
}

CppSharp::Parser::AST::HTMLStartTagComment::Attribute::Attribute(::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::HTMLStartTagComment::Attribute^ CppSharp::Parser::AST::HTMLStartTagComment::Attribute::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::HTMLStartTagComment::Attribute((::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute*) native.ToPointer());
}

CppSharp::Parser::AST::HTMLStartTagComment::Attribute::Attribute(::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute* native, const bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}
CppSharp::Parser::AST::HTMLStartTagComment::Attribute::~Attribute()
{
    delete NativePtr;
}

CppSharp::Parser::AST::HTMLStartTagComment::Attribute::Attribute()
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute();
}

CppSharp::Parser::AST::HTMLStartTagComment::Attribute::Attribute(CppSharp::Parser::AST::HTMLStartTagComment::Attribute^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute(__arg0);
}

System::IntPtr CppSharp::Parser::AST::HTMLStartTagComment::Attribute::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::HTMLStartTagComment::Attribute::__Instance::set(System::IntPtr object)
{
    NativePtr = (::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute*)object.ToPointer();
}

System::String^ CppSharp::Parser::AST::HTMLStartTagComment::Attribute::Name::get()
{
    return clix::marshalString<clix::E_UTF8>(((::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute*)NativePtr)->name);
}

void CppSharp::Parser::AST::HTMLStartTagComment::Attribute::Name::set(System::String^ value)
{
    ((::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute*)NativePtr)->name = clix::marshalString<clix::E_UTF8>(value);
}

System::String^ CppSharp::Parser::AST::HTMLStartTagComment::Attribute::Value::get()
{
    return clix::marshalString<clix::E_UTF8>(((::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute*)NativePtr)->value);
}

void CppSharp::Parser::AST::HTMLStartTagComment::Attribute::Value::set(System::String^ value)
{
    ((::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute*)NativePtr)->value = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::AST::HTMLStartTagComment::HTMLStartTagComment(::CppSharp::CppParser::AST::HTMLStartTagComment* native)
    : CppSharp::Parser::AST::HTMLTagComment((::CppSharp::CppParser::AST::HTMLTagComment*)native)
{
}

CppSharp::Parser::AST::HTMLStartTagComment^ CppSharp::Parser::AST::HTMLStartTagComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::HTMLStartTagComment((::CppSharp::CppParser::AST::HTMLStartTagComment*) native.ToPointer());
}

CppSharp::Parser::AST::HTMLStartTagComment::HTMLStartTagComment(::CppSharp::CppParser::AST::HTMLStartTagComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::HTMLTagComment((::CppSharp::CppParser::AST::HTMLTagComment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::HTMLStartTagComment::~HTMLStartTagComment()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::CppSharp::CppParser::AST::HTMLStartTagComment*) __nativePtr;
    }
}

CppSharp::Parser::AST::HTMLStartTagComment::HTMLStartTagComment()
    : CppSharp::Parser::AST::HTMLTagComment((::CppSharp::CppParser::AST::HTMLTagComment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::HTMLStartTagComment();
}

CppSharp::Parser::AST::HTMLStartTagComment::Attribute^ CppSharp::Parser::AST::HTMLStartTagComment::GetAttributes(unsigned int i)
{
    auto __ret = ((::CppSharp::CppParser::AST::HTMLStartTagComment*)NativePtr)->getAttributes(i);
    auto ____ret = new ::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute(__ret);
    return (____ret == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::HTMLStartTagComment::Attribute((::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute*)____ret, true);
}

void CppSharp::Parser::AST::HTMLStartTagComment::AddAttributes(CppSharp::Parser::AST::HTMLStartTagComment::Attribute^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute*)s->NativePtr;
    ((::CppSharp::CppParser::AST::HTMLStartTagComment*)NativePtr)->addAttributes(__arg0);
}

void CppSharp::Parser::AST::HTMLStartTagComment::ClearAttributes()
{
    ((::CppSharp::CppParser::AST::HTMLStartTagComment*)NativePtr)->clearAttributes();
}

CppSharp::Parser::AST::HTMLStartTagComment::HTMLStartTagComment(CppSharp::Parser::AST::HTMLStartTagComment^ _0)
    : CppSharp::Parser::AST::HTMLTagComment((::CppSharp::CppParser::AST::HTMLTagComment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::HTMLStartTagComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::HTMLStartTagComment(__arg0);
}

System::String^ CppSharp::Parser::AST::HTMLStartTagComment::TagName::get()
{
    return clix::marshalString<clix::E_UTF8>(((::CppSharp::CppParser::AST::HTMLStartTagComment*)NativePtr)->tagName);
}

void CppSharp::Parser::AST::HTMLStartTagComment::TagName::set(System::String^ value)
{
    ((::CppSharp::CppParser::AST::HTMLStartTagComment*)NativePtr)->tagName = clix::marshalString<clix::E_UTF8>(value);
}

System::Collections::Generic::List<CppSharp::Parser::AST::HTMLStartTagComment::Attribute^>^ CppSharp::Parser::AST::HTMLStartTagComment::Attributes::get()
{
    auto _tmp__Attributes = gcnew System::Collections::Generic::List<CppSharp::Parser::AST::HTMLStartTagComment::Attribute^>();
    for(auto _element : ((::CppSharp::CppParser::AST::HTMLStartTagComment*)NativePtr)->Attributes)
    {
        auto ___element = new ::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute(_element);
        auto _marshalElement = (___element == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::HTMLStartTagComment::Attribute((::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute*)___element, true);
        _tmp__Attributes->Add(_marshalElement);
    }
    return _tmp__Attributes;
}

void CppSharp::Parser::AST::HTMLStartTagComment::Attributes::set(System::Collections::Generic::List<CppSharp::Parser::AST::HTMLStartTagComment::Attribute^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute>();
    for each(CppSharp::Parser::AST::HTMLStartTagComment::Attribute^ _element in value)
    {
        if (ReferenceEquals(_element, nullptr))
        throw gcnew ::System::ArgumentNullException("_element", "Cannot be null because it is passed by value.");
        auto _marshalElement = *(::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((::CppSharp::CppParser::AST::HTMLStartTagComment*)NativePtr)->Attributes = _tmpvalue;
}

unsigned int CppSharp::Parser::AST::HTMLStartTagComment::AttributesCount::get()
{
    auto __ret = ((::CppSharp::CppParser::AST::HTMLStartTagComment*)NativePtr)->getAttributesCount();
    return __ret;
}

CppSharp::Parser::AST::HTMLEndTagComment::HTMLEndTagComment(::CppSharp::CppParser::AST::HTMLEndTagComment* native)
    : CppSharp::Parser::AST::HTMLTagComment((::CppSharp::CppParser::AST::HTMLTagComment*)native)
{
}

CppSharp::Parser::AST::HTMLEndTagComment^ CppSharp::Parser::AST::HTMLEndTagComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::HTMLEndTagComment((::CppSharp::CppParser::AST::HTMLEndTagComment*) native.ToPointer());
}

CppSharp::Parser::AST::HTMLEndTagComment::HTMLEndTagComment(::CppSharp::CppParser::AST::HTMLEndTagComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::HTMLTagComment((::CppSharp::CppParser::AST::HTMLTagComment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::HTMLEndTagComment::~HTMLEndTagComment()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::CppSharp::CppParser::AST::HTMLEndTagComment*) __nativePtr;
    }
}

CppSharp::Parser::AST::HTMLEndTagComment::HTMLEndTagComment()
    : CppSharp::Parser::AST::HTMLTagComment((::CppSharp::CppParser::AST::HTMLTagComment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::HTMLEndTagComment();
}

CppSharp::Parser::AST::HTMLEndTagComment::HTMLEndTagComment(CppSharp::Parser::AST::HTMLEndTagComment^ _0)
    : CppSharp::Parser::AST::HTMLTagComment((::CppSharp::CppParser::AST::HTMLTagComment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::HTMLEndTagComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::HTMLEndTagComment(__arg0);
}

System::String^ CppSharp::Parser::AST::HTMLEndTagComment::TagName::get()
{
    return clix::marshalString<clix::E_UTF8>(((::CppSharp::CppParser::AST::HTMLEndTagComment*)NativePtr)->tagName);
}

void CppSharp::Parser::AST::HTMLEndTagComment::TagName::set(System::String^ value)
{
    ((::CppSharp::CppParser::AST::HTMLEndTagComment*)NativePtr)->tagName = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::AST::TextComment::TextComment(::CppSharp::CppParser::AST::TextComment* native)
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)native)
{
}

CppSharp::Parser::AST::TextComment^ CppSharp::Parser::AST::TextComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::TextComment((::CppSharp::CppParser::AST::TextComment*) native.ToPointer());
}

CppSharp::Parser::AST::TextComment::TextComment(::CppSharp::CppParser::AST::TextComment* native, const bool ownNativeInstance)
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)native, ownNativeInstance)
{
}
CppSharp::Parser::AST::TextComment::~TextComment()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::CppSharp::CppParser::AST::TextComment*) __nativePtr;
    }
}

CppSharp::Parser::AST::TextComment::TextComment()
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::TextComment();
}

CppSharp::Parser::AST::TextComment::TextComment(CppSharp::Parser::AST::TextComment^ _0)
    : CppSharp::Parser::AST::InlineContentComment((::CppSharp::CppParser::AST::InlineContentComment*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::TextComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::TextComment(__arg0);
}

System::String^ CppSharp::Parser::AST::TextComment::Text::get()
{
    return clix::marshalString<clix::E_UTF8>(((::CppSharp::CppParser::AST::TextComment*)NativePtr)->text);
}

void CppSharp::Parser::AST::TextComment::Text::set(System::String^ value)
{
    ((::CppSharp::CppParser::AST::TextComment*)NativePtr)->text = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::AST::RawComment::RawComment(::CppSharp::CppParser::AST::RawComment* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::RawComment^ CppSharp::Parser::AST::RawComment::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::RawComment((::CppSharp::CppParser::AST::RawComment*) native.ToPointer());
}

CppSharp::Parser::AST::RawComment::RawComment(::CppSharp::CppParser::AST::RawComment* native, const bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}
CppSharp::Parser::AST::RawComment::~RawComment()
{
    delete NativePtr;
}

CppSharp::Parser::AST::RawComment::RawComment()
{
    __ownsNativeInstance = true;
    NativePtr = new ::CppSharp::CppParser::AST::RawComment();
}

CppSharp::Parser::AST::RawComment::RawComment(CppSharp::Parser::AST::RawComment^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::CppSharp::CppParser::AST::RawComment*)_0->NativePtr;
    NativePtr = new ::CppSharp::CppParser::AST::RawComment(__arg0);
}

System::IntPtr CppSharp::Parser::AST::RawComment::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::RawComment::__Instance::set(System::IntPtr object)
{
    NativePtr = (::CppSharp::CppParser::AST::RawComment*)object.ToPointer();
}

CppSharp::Parser::AST::RawCommentKind CppSharp::Parser::AST::RawComment::Kind::get()
{
    return (CppSharp::Parser::AST::RawCommentKind)((::CppSharp::CppParser::AST::RawComment*)NativePtr)->kind;
}

void CppSharp::Parser::AST::RawComment::Kind::set(CppSharp::Parser::AST::RawCommentKind value)
{
    ((::CppSharp::CppParser::AST::RawComment*)NativePtr)->kind = (::CppSharp::CppParser::AST::RawCommentKind)value;
}

System::String^ CppSharp::Parser::AST::RawComment::Text::get()
{
    return clix::marshalString<clix::E_UTF8>(((::CppSharp::CppParser::AST::RawComment*)NativePtr)->text);
}

void CppSharp::Parser::AST::RawComment::Text::set(System::String^ value)
{
    ((::CppSharp::CppParser::AST::RawComment*)NativePtr)->text = clix::marshalString<clix::E_UTF8>(value);
}

System::String^ CppSharp::Parser::AST::RawComment::BriefText::get()
{
    return clix::marshalString<clix::E_UTF8>(((::CppSharp::CppParser::AST::RawComment*)NativePtr)->briefText);
}

void CppSharp::Parser::AST::RawComment::BriefText::set(System::String^ value)
{
    ((::CppSharp::CppParser::AST::RawComment*)NativePtr)->briefText = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::AST::FullComment^ CppSharp::Parser::AST::RawComment::FullCommentBlock::get()
{
    return (((::CppSharp::CppParser::AST::RawComment*)NativePtr)->fullCommentBlock == nullptr) ? nullptr : gcnew CppSharp::Parser::AST::FullComment((::CppSharp::CppParser::AST::FullComment*)((::CppSharp::CppParser::AST::RawComment*)NativePtr)->fullCommentBlock);
}

void CppSharp::Parser::AST::RawComment::FullCommentBlock::set(CppSharp::Parser::AST::FullComment^ value)
{
    ((::CppSharp::CppParser::AST::RawComment*)NativePtr)->fullCommentBlock = (::CppSharp::CppParser::AST::FullComment*)value->NativePtr;
}

