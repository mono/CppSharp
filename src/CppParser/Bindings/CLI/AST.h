// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include <AST.h>
#include "Sources.h"

namespace CppSharp
{
    namespace Parser
    {
        namespace AST
        {
            enum struct AccessSpecifier;
            enum struct ArchType;
            enum struct CXXMethodKind;
            enum struct CXXOperatorKind;
            enum struct CallingConvention;
            enum struct CommentKind;
            enum struct CppAbi;
            enum struct DeclarationKind;
            enum struct ExceptionSpecType;
            enum struct FriendKind;
            enum struct MacroLocation;
            enum struct PrimitiveType;
            enum struct RawCommentKind;
            enum struct RefQualifierKind;
            enum struct StatementClass;
            enum struct TemplateSpecializationKind;
            enum struct TypeKind;
            enum struct VTableComponentKind;
            ref class ASTContext;
            ref class AccessSpecifierDecl;
            ref class ArrayType;
            ref class AttributedType;
            ref class BaseClassSpecifier;
            ref class BinaryOperator;
            ref class BlockCommandComment;
            ref class BlockContentComment;
            ref class BuiltinType;
            ref class CXXConstructExpr;
            ref class CallExpr;
            ref class Class;
            ref class ClassLayout;
            ref class ClassTemplate;
            ref class ClassTemplatePartialSpecialization;
            ref class ClassTemplateSpecialization;
            ref class Comment;
            ref class DecayedType;
            ref class Declaration;
            ref class DeclarationContext;
            ref class DependentNameType;
            ref class DependentTemplateSpecializationType;
            ref class Enumeration;
            ref class Expression;
            ref class Field;
            ref class Friend;
            ref class FullComment;
            ref class Function;
            ref class FunctionTemplate;
            ref class FunctionTemplateSpecialization;
            ref class FunctionType;
            ref class HTMLEndTagComment;
            ref class HTMLStartTagComment;
            ref class HTMLTagComment;
            ref class InjectedClassNameType;
            ref class InlineCommandComment;
            ref class InlineContentComment;
            ref class LayoutBase;
            ref class LayoutField;
            ref class MacroDefinition;
            ref class MacroExpansion;
            ref class MemberPointerType;
            ref class Method;
            ref class Namespace;
            ref class NativeLibrary;
            ref class NonTypeTemplateParameter;
            ref class PackExpansionType;
            ref class ParagraphComment;
            ref class ParamCommandComment;
            ref class Parameter;
            ref class PointerType;
            ref class PreprocessedEntity;
            ref class QualifiedType;
            ref class RawComment;
            ref class Statement;
            ref class TParamCommandComment;
            ref class TagType;
            ref class Template;
            ref class TemplateArgument;
            ref class TemplateParameter;
            ref class TemplateParameterSubstitutionType;
            ref class TemplateParameterType;
            ref class TemplateSpecializationType;
            ref class TemplateTemplateParameter;
            ref class TextComment;
            ref class TranslationUnit;
            ref class Type;
            ref class TypeAlias;
            ref class TypeAliasTemplate;
            ref class TypeQualifiers;
            ref class TypeTemplateParameter;
            ref class TypedefDecl;
            ref class TypedefNameDecl;
            ref class TypedefType;
            ref class UnaryTransformType;
            ref class VFTableInfo;
            ref class VTableComponent;
            ref class VTableLayout;
            ref class VarTemplate;
            ref class VarTemplatePartialSpecialization;
            ref class VarTemplateSpecialization;
            ref class Variable;
            ref class VectorType;
            ref class VerbatimBlockComment;
            ref class VerbatimBlockLineComment;
            ref class VerbatimLineComment;
        }
    }
}

namespace CppSharp
{
    namespace Parser
    {
        namespace AST
        {
            public enum struct TypeKind
            {
                Tag = 0,
                Array = 1,
                Function = 2,
                Pointer = 3,
                MemberPointer = 4,
                Typedef = 5,
                Attributed = 6,
                Decayed = 7,
                TemplateSpecialization = 8,
                DependentTemplateSpecialization = 9,
                TemplateParameter = 10,
                TemplateParameterSubstitution = 11,
                InjectedClassName = 12,
                DependentName = 13,
                PackExpansion = 14,
                Builtin = 15,
                UnaryTransform = 16,
                Vector = 17
            };

            public enum struct DeclarationKind
            {
                DeclarationContext = 0,
                Typedef = 1,
                TypeAlias = 2,
                Parameter = 3,
                Function = 4,
                Method = 5,
                Enumeration = 6,
                EnumerationItem = 7,
                Variable = 8,
                Field = 9,
                AccessSpecifier = 10,
                Class = 11,
                Template = 12,
                TypeAliasTemplate = 13,
                ClassTemplate = 14,
                ClassTemplateSpecialization = 15,
                ClassTemplatePartialSpecialization = 16,
                FunctionTemplate = 17,
                Namespace = 18,
                PreprocessedEntity = 19,
                MacroDefinition = 20,
                MacroExpansion = 21,
                TranslationUnit = 22,
                Friend = 23,
                TemplateTemplateParm = 24,
                TemplateTypeParm = 25,
                NonTypeTemplateParm = 26,
                VarTemplate = 27,
                VarTemplateSpecialization = 28,
                VarTemplatePartialSpecialization = 29
            };

            public enum struct AccessSpecifier
            {
                Private = 0,
                Protected = 1,
                Public = 2
            };

            public enum struct MacroLocation
            {
                Unknown = 0,
                ClassHead = 1,
                ClassBody = 2,
                FunctionHead = 3,
                FunctionParameters = 4,
                FunctionBody = 5
            };

            public enum struct RawCommentKind
            {
                Invalid = 0,
                OrdinaryBCPL = 1,
                OrdinaryC = 2,
                BCPLSlash = 3,
                BCPLExcl = 4,
                JavaDoc = 5,
                Qt = 6,
                Merged = 7
            };

            public enum struct CommentKind
            {
                FullComment = 0,
                BlockContentComment = 1,
                BlockCommandComment = 2,
                ParamCommandComment = 3,
                TParamCommandComment = 4,
                VerbatimBlockComment = 5,
                VerbatimLineComment = 6,
                ParagraphComment = 7,
                HTMLTagComment = 8,
                HTMLStartTagComment = 9,
                HTMLEndTagComment = 10,
                TextComment = 11,
                InlineContentComment = 12,
                InlineCommandComment = 13,
                VerbatimBlockLineComment = 14
            };

            public enum struct FriendKind
            {
                None = 0,
                Declared = 1,
                Undeclared = 2
            };

            public enum struct CXXOperatorKind
            {
                None = 0,
                New = 1,
                Delete = 2,
                ArrayNew = 3,
                ArrayDelete = 4,
                Plus = 5,
                Minus = 6,
                Star = 7,
                Slash = 8,
                Percent = 9,
                Caret = 10,
                Amp = 11,
                Pipe = 12,
                Tilde = 13,
                Exclaim = 14,
                Equal = 15,
                Less = 16,
                Greater = 17,
                PlusEqual = 18,
                MinusEqual = 19,
                StarEqual = 20,
                SlashEqual = 21,
                PercentEqual = 22,
                CaretEqual = 23,
                AmpEqual = 24,
                PipeEqual = 25,
                LessLess = 26,
                GreaterGreater = 27,
                LessLessEqual = 28,
                GreaterGreaterEqual = 29,
                EqualEqual = 30,
                ExclaimEqual = 31,
                LessEqual = 32,
                GreaterEqual = 33,
                AmpAmp = 34,
                PipePipe = 35,
                PlusPlus = 36,
                MinusMinus = 37,
                Comma = 38,
                ArrowStar = 39,
                Arrow = 40,
                Call = 41,
                Subscript = 42,
                Conditional = 43,
                Coawait = 44
            };

            public enum struct CallingConvention
            {
                Default = 0,
                C = 1,
                StdCall = 2,
                ThisCall = 3,
                FastCall = 4,
                Unknown = 5
            };

            public enum struct StatementClass
            {
                Any = 0,
                BinaryOperator = 1,
                CallExprClass = 2,
                DeclRefExprClass = 3,
                CXXConstructExprClass = 4,
                CXXOperatorCallExpr = 5,
                ImplicitCastExpr = 6,
                ExplicitCastExpr = 7
            };

            public enum struct TemplateSpecializationKind
            {
                Undeclared = 0,
                ImplicitInstantiation = 1,
                ExplicitSpecialization = 2,
                ExplicitInstantiationDeclaration = 3,
                ExplicitInstantiationDefinition = 4
            };

            public enum struct CXXMethodKind
            {
                Normal = 0,
                Constructor = 1,
                Destructor = 2,
                Conversion = 3,
                Operator = 4,
                UsingDirective = 5
            };

            public enum struct RefQualifierKind
            {
                None = 0,
                LValue = 1,
                RValue = 2
            };

            public enum struct CppAbi
            {
                Itanium = 0,
                Microsoft = 1,
                ARM = 2,
                iOS = 3,
                iOS64 = 4
            };

            public enum struct VTableComponentKind
            {
                VCallOffset = 0,
                VBaseOffset = 1,
                OffsetToTop = 2,
                RTTI = 3,
                FunctionPointer = 4,
                CompleteDtorPointer = 5,
                DeletingDtorPointer = 6,
                UnusedFunctionPointer = 7
            };

            public enum struct PrimitiveType
            {
                Null = 0,
                Void = 1,
                Bool = 2,
                WideChar = 3,
                Char = 4,
                SChar = 5,
                UChar = 6,
                Char16 = 7,
                Char32 = 8,
                Short = 9,
                UShort = 10,
                Int = 11,
                UInt = 12,
                Long = 13,
                ULong = 14,
                LongLong = 15,
                ULongLong = 16,
                Int128 = 17,
                UInt128 = 18,
                Half = 19,
                Float = 20,
                Double = 21,
                LongDouble = 22,
                Float128 = 23,
                IntPtr = 24
            };

            public enum struct ExceptionSpecType
            {
                None = 0,
                DynamicNone = 1,
                Dynamic = 2,
                MSAny = 3,
                BasicNoexcept = 4,
                ComputedNoexcept = 5,
                Unevaluated = 6,
                Uninstantiated = 7,
                Unparsed = 8
            };

            public enum struct ArchType
            {
                UnknownArch = 0,
                X86 = 1,
                X86_64 = 2
            };

            public ref class Type : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::Type* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                Type(::CppSharp::CppParser::AST::Type* native);
                static Type^ __CreateInstance(::System::IntPtr native);
                Type(CppSharp::Parser::AST::TypeKind kind);

                Type(CppSharp::Parser::AST::Type^ _0);

                ~Type();

                property CppSharp::Parser::AST::TypeKind Kind
                {
                    CppSharp::Parser::AST::TypeKind get();
                    void set(CppSharp::Parser::AST::TypeKind);
                }

                property bool IsDependent
                {
                    bool get();
                    void set(bool);
                }

                static operator CppSharp::Parser::AST::Type^(CppSharp::Parser::AST::TypeKind kind);

                protected:
                bool __ownsNativeInstance;
            };

            public ref class TypeQualifiers : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::TypeQualifiers* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                TypeQualifiers(::CppSharp::CppParser::AST::TypeQualifiers* native);
                static TypeQualifiers^ __CreateInstance(::System::IntPtr native);
                TypeQualifiers(CppSharp::Parser::AST::TypeQualifiers^ _0);

                TypeQualifiers();

                ~TypeQualifiers();

                property bool IsConst
                {
                    bool get();
                    void set(bool);
                }

                property bool IsVolatile
                {
                    bool get();
                    void set(bool);
                }

                property bool IsRestrict
                {
                    bool get();
                    void set(bool);
                }

                protected:
                bool __ownsNativeInstance;
            };

            public ref class QualifiedType : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::QualifiedType* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                QualifiedType(::CppSharp::CppParser::AST::QualifiedType* native);
                static QualifiedType^ __CreateInstance(::System::IntPtr native);
                QualifiedType();

                QualifiedType(CppSharp::Parser::AST::QualifiedType^ _0);

                ~QualifiedType();

                property CppSharp::Parser::AST::Type^ Type
                {
                    CppSharp::Parser::AST::Type^ get();
                    void set(CppSharp::Parser::AST::Type^);
                }

                property CppSharp::Parser::AST::TypeQualifiers^ Qualifiers
                {
                    CppSharp::Parser::AST::TypeQualifiers^ get();
                    void set(CppSharp::Parser::AST::TypeQualifiers^);
                }

                protected:
                bool __ownsNativeInstance;
            };

            public ref class TagType : CppSharp::Parser::AST::Type
            {
            public:

                TagType(::CppSharp::CppParser::AST::TagType* native);
                static TagType^ __CreateInstance(::System::IntPtr native);
                TagType();

                TagType(CppSharp::Parser::AST::TagType^ _0);

                ~TagType();

                property CppSharp::Parser::AST::Declaration^ Declaration
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }
            };

            public ref class ArrayType : CppSharp::Parser::AST::Type
            {
            public:

                enum struct ArraySize
                {
                    Constant = 0,
                    Variable = 1,
                    Dependent = 2,
                    Incomplete = 3
                };

                ArrayType(::CppSharp::CppParser::AST::ArrayType* native);
                static ArrayType^ __CreateInstance(::System::IntPtr native);
                ArrayType();

                ArrayType(CppSharp::Parser::AST::ArrayType^ _0);

                ~ArrayType();

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::ArrayType::ArraySize SizeType
                {
                    CppSharp::Parser::AST::ArrayType::ArraySize get();
                    void set(CppSharp::Parser::AST::ArrayType::ArraySize);
                }

                property long Size
                {
                    long get();
                    void set(long);
                }

                property long ElementSize
                {
                    long get();
                    void set(long);
                }
            };

            public ref class FunctionType : CppSharp::Parser::AST::Type
            {
            public:

                FunctionType(::CppSharp::CppParser::AST::FunctionType* native);
                static FunctionType^ __CreateInstance(::System::IntPtr native);
                FunctionType();

                FunctionType(CppSharp::Parser::AST::FunctionType^ _0);

                ~FunctionType();

                property CppSharp::Parser::AST::QualifiedType^ ReturnType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::CallingConvention CallingConvention
                {
                    CppSharp::Parser::AST::CallingConvention get();
                    void set(CppSharp::Parser::AST::CallingConvention);
                }

                property CppSharp::Parser::AST::ExceptionSpecType ExceptionSpecType
                {
                    CppSharp::Parser::AST::ExceptionSpecType get();
                    void set(CppSharp::Parser::AST::ExceptionSpecType);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Parameter^>^ Parameters
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Parameter^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Parameter^>^);
                }

                property unsigned int ParametersCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Parameter^ GetParameters(unsigned int i);

                void AddParameters(CppSharp::Parser::AST::Parameter^ s);

                void ClearParameters();
            };

            public ref class PointerType : CppSharp::Parser::AST::Type
            {
            public:

                enum struct TypeModifier
                {
                    Value = 0,
                    Pointer = 1,
                    LVReference = 2,
                    RVReference = 3
                };

                PointerType(::CppSharp::CppParser::AST::PointerType* native);
                static PointerType^ __CreateInstance(::System::IntPtr native);
                PointerType();

                PointerType(CppSharp::Parser::AST::PointerType^ _0);

                ~PointerType();

                property CppSharp::Parser::AST::QualifiedType^ QualifiedPointee
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::PointerType::TypeModifier Modifier
                {
                    CppSharp::Parser::AST::PointerType::TypeModifier get();
                    void set(CppSharp::Parser::AST::PointerType::TypeModifier);
                }
            };

            public ref class MemberPointerType : CppSharp::Parser::AST::Type
            {
            public:

                MemberPointerType(::CppSharp::CppParser::AST::MemberPointerType* native);
                static MemberPointerType^ __CreateInstance(::System::IntPtr native);
                MemberPointerType();

                MemberPointerType(CppSharp::Parser::AST::MemberPointerType^ _0);

                ~MemberPointerType();

                property CppSharp::Parser::AST::QualifiedType^ Pointee
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }
            };

            public ref class TypedefType : CppSharp::Parser::AST::Type
            {
            public:

                TypedefType(::CppSharp::CppParser::AST::TypedefType* native);
                static TypedefType^ __CreateInstance(::System::IntPtr native);
                TypedefType();

                TypedefType(CppSharp::Parser::AST::TypedefType^ _0);

                ~TypedefType();

                property CppSharp::Parser::AST::TypedefNameDecl^ Declaration
                {
                    CppSharp::Parser::AST::TypedefNameDecl^ get();
                    void set(CppSharp::Parser::AST::TypedefNameDecl^);
                }
            };

            public ref class AttributedType : CppSharp::Parser::AST::Type
            {
            public:

                AttributedType(::CppSharp::CppParser::AST::AttributedType* native);
                static AttributedType^ __CreateInstance(::System::IntPtr native);
                AttributedType();

                AttributedType(CppSharp::Parser::AST::AttributedType^ _0);

                ~AttributedType();

                property CppSharp::Parser::AST::QualifiedType^ Modified
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::QualifiedType^ Equivalent
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }
            };

            public ref class DecayedType : CppSharp::Parser::AST::Type
            {
            public:

                DecayedType(::CppSharp::CppParser::AST::DecayedType* native);
                static DecayedType^ __CreateInstance(::System::IntPtr native);
                DecayedType();

                DecayedType(CppSharp::Parser::AST::DecayedType^ _0);

                ~DecayedType();

                property CppSharp::Parser::AST::QualifiedType^ Decayed
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::QualifiedType^ Original
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::QualifiedType^ Pointee
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }
            };

            public ref class TemplateArgument : ICppInstance
            {
            public:

                enum struct ArgumentKind
                {
                    Type = 0,
                    Declaration = 1,
                    NullPtr = 2,
                    Integral = 3,
                    Template = 4,
                    TemplateExpansion = 5,
                    Expression = 6,
                    Pack = 7
                };

                property ::CppSharp::CppParser::AST::TemplateArgument* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                TemplateArgument(::CppSharp::CppParser::AST::TemplateArgument* native);
                static TemplateArgument^ __CreateInstance(::System::IntPtr native);
                TemplateArgument();

                TemplateArgument(CppSharp::Parser::AST::TemplateArgument^ _0);

                ~TemplateArgument();

                property CppSharp::Parser::AST::TemplateArgument::ArgumentKind Kind
                {
                    CppSharp::Parser::AST::TemplateArgument::ArgumentKind get();
                    void set(CppSharp::Parser::AST::TemplateArgument::ArgumentKind);
                }

                property CppSharp::Parser::AST::QualifiedType^ Type
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::Declaration^ Declaration
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }

                property long Integral
                {
                    long get();
                    void set(long);
                }

                protected:
                bool __ownsNativeInstance;
            };

            public ref class TemplateSpecializationType : CppSharp::Parser::AST::Type
            {
            public:

                TemplateSpecializationType(::CppSharp::CppParser::AST::TemplateSpecializationType* native);
                static TemplateSpecializationType^ __CreateInstance(::System::IntPtr native);
                TemplateSpecializationType();

                TemplateSpecializationType(CppSharp::Parser::AST::TemplateSpecializationType^ _0);

                ~TemplateSpecializationType();

                property System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^);
                }

                property CppSharp::Parser::AST::Template^ Template
                {
                    CppSharp::Parser::AST::Template^ get();
                    void set(CppSharp::Parser::AST::Template^);
                }

                property CppSharp::Parser::AST::QualifiedType^ Desugared
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::TemplateArgument^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::TemplateArgument^ s);

                void ClearArguments();
            };

            public ref class DependentTemplateSpecializationType : CppSharp::Parser::AST::Type
            {
            public:

                DependentTemplateSpecializationType(::CppSharp::CppParser::AST::DependentTemplateSpecializationType* native);
                static DependentTemplateSpecializationType^ __CreateInstance(::System::IntPtr native);
                DependentTemplateSpecializationType();

                DependentTemplateSpecializationType(CppSharp::Parser::AST::DependentTemplateSpecializationType^ _0);

                ~DependentTemplateSpecializationType();

                property System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^);
                }

                property CppSharp::Parser::AST::QualifiedType^ Desugared
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::TemplateArgument^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::TemplateArgument^ s);

                void ClearArguments();
            };

            public ref class TemplateParameterType : CppSharp::Parser::AST::Type
            {
            public:

                TemplateParameterType(::CppSharp::CppParser::AST::TemplateParameterType* native);
                static TemplateParameterType^ __CreateInstance(::System::IntPtr native);
                TemplateParameterType();

                TemplateParameterType(CppSharp::Parser::AST::TemplateParameterType^ _0);

                ~TemplateParameterType();

                property CppSharp::Parser::AST::TypeTemplateParameter^ Parameter
                {
                    CppSharp::Parser::AST::TypeTemplateParameter^ get();
                    void set(CppSharp::Parser::AST::TypeTemplateParameter^);
                }

                property unsigned int Depth
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int Index
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property bool IsParameterPack
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class TemplateParameterSubstitutionType : CppSharp::Parser::AST::Type
            {
            public:

                TemplateParameterSubstitutionType(::CppSharp::CppParser::AST::TemplateParameterSubstitutionType* native);
                static TemplateParameterSubstitutionType^ __CreateInstance(::System::IntPtr native);
                TemplateParameterSubstitutionType();

                TemplateParameterSubstitutionType(CppSharp::Parser::AST::TemplateParameterSubstitutionType^ _0);

                ~TemplateParameterSubstitutionType();

                property CppSharp::Parser::AST::QualifiedType^ Replacement
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::TemplateParameterType^ ReplacedParameter
                {
                    CppSharp::Parser::AST::TemplateParameterType^ get();
                    void set(CppSharp::Parser::AST::TemplateParameterType^);
                }
            };

            public ref class InjectedClassNameType : CppSharp::Parser::AST::Type
            {
            public:

                InjectedClassNameType(::CppSharp::CppParser::AST::InjectedClassNameType* native);
                static InjectedClassNameType^ __CreateInstance(::System::IntPtr native);
                InjectedClassNameType();

                InjectedClassNameType(CppSharp::Parser::AST::InjectedClassNameType^ _0);

                ~InjectedClassNameType();

                property CppSharp::Parser::AST::QualifiedType^ InjectedSpecializationType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::Class^ Class
                {
                    CppSharp::Parser::AST::Class^ get();
                    void set(CppSharp::Parser::AST::Class^);
                }
            };

            public ref class DependentNameType : CppSharp::Parser::AST::Type
            {
            public:

                DependentNameType(::CppSharp::CppParser::AST::DependentNameType* native);
                static DependentNameType^ __CreateInstance(::System::IntPtr native);
                DependentNameType();

                DependentNameType(CppSharp::Parser::AST::DependentNameType^ _0);

                ~DependentNameType();

                property CppSharp::Parser::AST::QualifiedType^ Qualifier
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property System::String^ Identifier
                {
                    System::String^ get();
                    void set(System::String^);
                }
            };

            public ref class PackExpansionType : CppSharp::Parser::AST::Type
            {
            public:

                PackExpansionType(::CppSharp::CppParser::AST::PackExpansionType* native);
                static PackExpansionType^ __CreateInstance(::System::IntPtr native);
                PackExpansionType();

                PackExpansionType(CppSharp::Parser::AST::PackExpansionType^ _0);

                ~PackExpansionType();
            };

            public ref class UnaryTransformType : CppSharp::Parser::AST::Type
            {
            public:

                UnaryTransformType(::CppSharp::CppParser::AST::UnaryTransformType* native);
                static UnaryTransformType^ __CreateInstance(::System::IntPtr native);
                UnaryTransformType();

                UnaryTransformType(CppSharp::Parser::AST::UnaryTransformType^ _0);

                ~UnaryTransformType();

                property CppSharp::Parser::AST::QualifiedType^ Desugared
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::QualifiedType^ BaseType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }
            };

            public ref class VectorType : CppSharp::Parser::AST::Type
            {
            public:

                VectorType(::CppSharp::CppParser::AST::VectorType* native);
                static VectorType^ __CreateInstance(::System::IntPtr native);
                VectorType();

                VectorType(CppSharp::Parser::AST::VectorType^ _0);

                ~VectorType();

                property CppSharp::Parser::AST::QualifiedType^ ElementType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property unsigned int NumElements
                {
                    unsigned int get();
                    void set(unsigned int);
                }
            };

            public ref class BuiltinType : CppSharp::Parser::AST::Type
            {
            public:

                BuiltinType(::CppSharp::CppParser::AST::BuiltinType* native);
                static BuiltinType^ __CreateInstance(::System::IntPtr native);
                BuiltinType();

                BuiltinType(CppSharp::Parser::AST::BuiltinType^ _0);

                ~BuiltinType();

                property CppSharp::Parser::AST::PrimitiveType Type
                {
                    CppSharp::Parser::AST::PrimitiveType get();
                    void set(CppSharp::Parser::AST::PrimitiveType);
                }
            };

            public ref class VTableComponent : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::VTableComponent* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                VTableComponent(::CppSharp::CppParser::AST::VTableComponent* native);
                static VTableComponent^ __CreateInstance(::System::IntPtr native);
                VTableComponent();

                VTableComponent(CppSharp::Parser::AST::VTableComponent^ _0);

                ~VTableComponent();

                property CppSharp::Parser::AST::VTableComponentKind Kind
                {
                    CppSharp::Parser::AST::VTableComponentKind get();
                    void set(CppSharp::Parser::AST::VTableComponentKind);
                }

                property unsigned int Offset
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property CppSharp::Parser::AST::Declaration^ Declaration
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }

                protected:
                bool __ownsNativeInstance;
            };

            public ref class VTableLayout : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::VTableLayout* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                VTableLayout(::CppSharp::CppParser::AST::VTableLayout* native);
                static VTableLayout^ __CreateInstance(::System::IntPtr native);
                VTableLayout();

                VTableLayout(CppSharp::Parser::AST::VTableLayout^ _0);

                ~VTableLayout();

                property System::Collections::Generic::List<CppSharp::Parser::AST::VTableComponent^>^ Components
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::VTableComponent^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::VTableComponent^>^);
                }

                property unsigned int ComponentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::VTableComponent^ GetComponents(unsigned int i);

                void AddComponents(CppSharp::Parser::AST::VTableComponent^ s);

                void ClearComponents();

                protected:
                bool __ownsNativeInstance;
            };

            public ref class VFTableInfo : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::VFTableInfo* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                VFTableInfo(::CppSharp::CppParser::AST::VFTableInfo* native);
                static VFTableInfo^ __CreateInstance(::System::IntPtr native);
                VFTableInfo();

                VFTableInfo(CppSharp::Parser::AST::VFTableInfo^ _0);

                ~VFTableInfo();

                property unsigned long long VBTableIndex
                {
                    unsigned long long get();
                    void set(unsigned long long);
                }

                property unsigned int VFPtrOffset
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int VFPtrFullOffset
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property CppSharp::Parser::AST::VTableLayout^ Layout
                {
                    CppSharp::Parser::AST::VTableLayout^ get();
                    void set(CppSharp::Parser::AST::VTableLayout^);
                }

                protected:
                bool __ownsNativeInstance;
            };

            public ref class LayoutField : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::LayoutField* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                LayoutField(::CppSharp::CppParser::AST::LayoutField* native);
                static LayoutField^ __CreateInstance(::System::IntPtr native);
                LayoutField();

                LayoutField(CppSharp::Parser::AST::LayoutField^ other);

                ~LayoutField();

                property unsigned int Offset
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property System::String^ Name
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property ::System::IntPtr FieldPtr
                {
                    ::System::IntPtr get();
                    void set(::System::IntPtr);
                }

                protected:
                bool __ownsNativeInstance;
            };

            public ref class LayoutBase : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::LayoutBase* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                LayoutBase(::CppSharp::CppParser::AST::LayoutBase* native);
                static LayoutBase^ __CreateInstance(::System::IntPtr native);
                LayoutBase();

                LayoutBase(CppSharp::Parser::AST::LayoutBase^ other);

                ~LayoutBase();

                property unsigned int Offset
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property CppSharp::Parser::AST::Class^ Class
                {
                    CppSharp::Parser::AST::Class^ get();
                    void set(CppSharp::Parser::AST::Class^);
                }

                protected:
                bool __ownsNativeInstance;
            };

            public ref class ClassLayout : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::ClassLayout* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                ClassLayout(::CppSharp::CppParser::AST::ClassLayout* native);
                static ClassLayout^ __CreateInstance(::System::IntPtr native);
                ClassLayout();

                ClassLayout(CppSharp::Parser::AST::ClassLayout^ _0);

                ~ClassLayout();

                property CppSharp::Parser::AST::CppAbi ABI
                {
                    CppSharp::Parser::AST::CppAbi get();
                    void set(CppSharp::Parser::AST::CppAbi);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::VFTableInfo^>^ VFTables
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::VFTableInfo^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::VFTableInfo^>^);
                }

                property CppSharp::Parser::AST::VTableLayout^ Layout
                {
                    CppSharp::Parser::AST::VTableLayout^ get();
                    void set(CppSharp::Parser::AST::VTableLayout^);
                }

                property bool HasOwnVFPtr
                {
                    bool get();
                    void set(bool);
                }

                property long VBPtrOffset
                {
                    long get();
                    void set(long);
                }

                property int Alignment
                {
                    int get();
                    void set(int);
                }

                property int Size
                {
                    int get();
                    void set(int);
                }

                property int DataSize
                {
                    int get();
                    void set(int);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::LayoutField^>^ Fields
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::LayoutField^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::LayoutField^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::LayoutBase^>^ Bases
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::LayoutBase^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::LayoutBase^>^);
                }

                property unsigned int VFTablesCount
                {
                    unsigned int get();
                }

                property unsigned int FieldsCount
                {
                    unsigned int get();
                }

                property unsigned int BasesCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::VFTableInfo^ GetVFTables(unsigned int i);

                void AddVFTables(CppSharp::Parser::AST::VFTableInfo^ s);

                void ClearVFTables();

                CppSharp::Parser::AST::LayoutField^ GetFields(unsigned int i);

                void AddFields(CppSharp::Parser::AST::LayoutField^ s);

                void ClearFields();

                CppSharp::Parser::AST::LayoutBase^ GetBases(unsigned int i);

                void AddBases(CppSharp::Parser::AST::LayoutBase^ s);

                void ClearBases();

                protected:
                bool __ownsNativeInstance;
            };

            public ref class Declaration : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::Declaration* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                Declaration(::CppSharp::CppParser::AST::Declaration* native);
                static Declaration^ __CreateInstance(::System::IntPtr native);
                Declaration(CppSharp::Parser::AST::DeclarationKind kind);

                Declaration(CppSharp::Parser::AST::Declaration^ _0);

                ~Declaration();

                property CppSharp::Parser::AST::DeclarationKind Kind
                {
                    CppSharp::Parser::AST::DeclarationKind get();
                    void set(CppSharp::Parser::AST::DeclarationKind);
                }

                property int MaxFieldAlignment
                {
                    int get();
                    void set(int);
                }

                property CppSharp::Parser::AST::AccessSpecifier Access
                {
                    CppSharp::Parser::AST::AccessSpecifier get();
                    void set(CppSharp::Parser::AST::AccessSpecifier);
                }

                property CppSharp::Parser::AST::DeclarationContext^ Namespace
                {
                    CppSharp::Parser::AST::DeclarationContext^ get();
                    void set(CppSharp::Parser::AST::DeclarationContext^);
                }

                property CppSharp::Parser::SourceLocation Location
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property int LineNumberStart
                {
                    int get();
                    void set(int);
                }

                property int LineNumberEnd
                {
                    int get();
                    void set(int);
                }

                property System::String^ Name
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ USR
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ DebugText
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property bool IsIncomplete
                {
                    bool get();
                    void set(bool);
                }

                property bool IsDependent
                {
                    bool get();
                    void set(bool);
                }

                property bool IsImplicit
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::Declaration^ CompleteDeclaration
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }

                property unsigned int DefinitionOrder
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::PreprocessedEntity^>^ PreprocessedEntities
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::PreprocessedEntity^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::PreprocessedEntity^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ Redeclarations
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^);
                }

                property ::System::IntPtr OriginalPtr
                {
                    ::System::IntPtr get();
                    void set(::System::IntPtr);
                }

                property CppSharp::Parser::AST::RawComment^ Comment
                {
                    CppSharp::Parser::AST::RawComment^ get();
                    void set(CppSharp::Parser::AST::RawComment^);
                }

                property unsigned int PreprocessedEntitiesCount
                {
                    unsigned int get();
                }

                property unsigned int RedeclarationsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::PreprocessedEntity^ GetPreprocessedEntities(unsigned int i);

                void AddPreprocessedEntities(CppSharp::Parser::AST::PreprocessedEntity^ s);

                void ClearPreprocessedEntities();

                CppSharp::Parser::AST::Declaration^ GetRedeclarations(unsigned int i);

                void AddRedeclarations(CppSharp::Parser::AST::Declaration^ s);

                void ClearRedeclarations();

                static operator CppSharp::Parser::AST::Declaration^(CppSharp::Parser::AST::DeclarationKind kind);

                protected:
                bool __ownsNativeInstance;
            };

            public ref class DeclarationContext : CppSharp::Parser::AST::Declaration
            {
            public:

                DeclarationContext(::CppSharp::CppParser::AST::DeclarationContext* native);
                static DeclarationContext^ __CreateInstance(::System::IntPtr native);
                DeclarationContext(CppSharp::Parser::AST::DeclarationKind kind);

                DeclarationContext(CppSharp::Parser::AST::DeclarationContext^ _0);

                ~DeclarationContext();

                property System::Collections::Generic::List<CppSharp::Parser::AST::Namespace^>^ Namespaces
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Namespace^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Namespace^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Enumeration^>^ Enums
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Enumeration^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Enumeration^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Function^>^ Functions
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Function^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Function^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Class^>^ Classes
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Class^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Class^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Template^>^ Templates
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Template^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Template^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::TypedefDecl^>^ Typedefs
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TypedefDecl^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TypedefDecl^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::TypeAlias^>^ TypeAliases
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TypeAlias^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TypeAlias^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Variable^>^ Variables
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Variable^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Variable^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Friend^>^ Friends
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Friend^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Friend^>^);
                }

                property bool IsAnonymous
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int NamespacesCount
                {
                    unsigned int get();
                }

                property unsigned int EnumsCount
                {
                    unsigned int get();
                }

                property unsigned int FunctionsCount
                {
                    unsigned int get();
                }

                property unsigned int ClassesCount
                {
                    unsigned int get();
                }

                property unsigned int TemplatesCount
                {
                    unsigned int get();
                }

                property unsigned int TypedefsCount
                {
                    unsigned int get();
                }

                property unsigned int TypeAliasesCount
                {
                    unsigned int get();
                }

                property unsigned int VariablesCount
                {
                    unsigned int get();
                }

                property unsigned int FriendsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Namespace^ GetNamespaces(unsigned int i);

                void AddNamespaces(CppSharp::Parser::AST::Namespace^ s);

                void ClearNamespaces();

                CppSharp::Parser::AST::Enumeration^ GetEnums(unsigned int i);

                void AddEnums(CppSharp::Parser::AST::Enumeration^ s);

                void ClearEnums();

                CppSharp::Parser::AST::Function^ GetFunctions(unsigned int i);

                void AddFunctions(CppSharp::Parser::AST::Function^ s);

                void ClearFunctions();

                CppSharp::Parser::AST::Class^ GetClasses(unsigned int i);

                void AddClasses(CppSharp::Parser::AST::Class^ s);

                void ClearClasses();

                CppSharp::Parser::AST::Template^ GetTemplates(unsigned int i);

                void AddTemplates(CppSharp::Parser::AST::Template^ s);

                void ClearTemplates();

                CppSharp::Parser::AST::TypedefDecl^ GetTypedefs(unsigned int i);

                void AddTypedefs(CppSharp::Parser::AST::TypedefDecl^ s);

                void ClearTypedefs();

                CppSharp::Parser::AST::TypeAlias^ GetTypeAliases(unsigned int i);

                void AddTypeAliases(CppSharp::Parser::AST::TypeAlias^ s);

                void ClearTypeAliases();

                CppSharp::Parser::AST::Variable^ GetVariables(unsigned int i);

                void AddVariables(CppSharp::Parser::AST::Variable^ s);

                void ClearVariables();

                CppSharp::Parser::AST::Friend^ GetFriends(unsigned int i);

                void AddFriends(CppSharp::Parser::AST::Friend^ s);

                void ClearFriends();

                static operator CppSharp::Parser::AST::DeclarationContext^(CppSharp::Parser::AST::DeclarationKind kind);
            };

            public ref class TypedefNameDecl : CppSharp::Parser::AST::Declaration
            {
            public:

                TypedefNameDecl(::CppSharp::CppParser::AST::TypedefNameDecl* native);
                static TypedefNameDecl^ __CreateInstance(::System::IntPtr native);
                TypedefNameDecl(CppSharp::Parser::AST::DeclarationKind kind);

                TypedefNameDecl(CppSharp::Parser::AST::TypedefNameDecl^ _0);

                ~TypedefNameDecl();

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                static operator CppSharp::Parser::AST::TypedefNameDecl^(CppSharp::Parser::AST::DeclarationKind kind);
            };

            public ref class TypedefDecl : CppSharp::Parser::AST::TypedefNameDecl
            {
            public:

                TypedefDecl(::CppSharp::CppParser::AST::TypedefDecl* native);
                static TypedefDecl^ __CreateInstance(::System::IntPtr native);
                TypedefDecl();

                TypedefDecl(CppSharp::Parser::AST::TypedefDecl^ _0);

                ~TypedefDecl();
            };

            public ref class TypeAlias : CppSharp::Parser::AST::TypedefNameDecl
            {
            public:

                TypeAlias(::CppSharp::CppParser::AST::TypeAlias* native);
                static TypeAlias^ __CreateInstance(::System::IntPtr native);
                TypeAlias();

                TypeAlias(CppSharp::Parser::AST::TypeAlias^ _0);

                ~TypeAlias();

                property CppSharp::Parser::AST::TypeAliasTemplate^ DescribedAliasTemplate
                {
                    CppSharp::Parser::AST::TypeAliasTemplate^ get();
                    void set(CppSharp::Parser::AST::TypeAliasTemplate^);
                }
            };

            public ref class Friend : CppSharp::Parser::AST::Declaration
            {
            public:

                Friend(::CppSharp::CppParser::AST::Friend* native);
                static Friend^ __CreateInstance(::System::IntPtr native);
                Friend();

                Friend(CppSharp::Parser::AST::Friend^ _0);

                ~Friend();

                property CppSharp::Parser::AST::Declaration^ Declaration
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }
            };

            public ref class Statement : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::Statement* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                Statement(::CppSharp::CppParser::AST::Statement* native);
                static Statement^ __CreateInstance(::System::IntPtr native);
                Statement(System::String^ str, CppSharp::Parser::AST::StatementClass Class, CppSharp::Parser::AST::Declaration^ decl);

                Statement(CppSharp::Parser::AST::Statement^ _0);

                ~Statement();

                property CppSharp::Parser::AST::StatementClass Class
                {
                    CppSharp::Parser::AST::StatementClass get();
                    void set(CppSharp::Parser::AST::StatementClass);
                }

                property CppSharp::Parser::AST::Declaration^ Decl
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }

                property System::String^ String
                {
                    System::String^ get();
                    void set(System::String^);
                }

                protected:
                bool __ownsNativeInstance;
            };

            public ref class Expression : CppSharp::Parser::AST::Statement
            {
            public:

                Expression(::CppSharp::CppParser::AST::Expression* native);
                static Expression^ __CreateInstance(::System::IntPtr native);
                Expression(System::String^ str, CppSharp::Parser::AST::StatementClass Class, CppSharp::Parser::AST::Declaration^ decl);

                Expression(CppSharp::Parser::AST::Expression^ _0);

                ~Expression();
            };

            public ref class BinaryOperator : CppSharp::Parser::AST::Expression
            {
            public:

                BinaryOperator(::CppSharp::CppParser::AST::BinaryOperator* native);
                static BinaryOperator^ __CreateInstance(::System::IntPtr native);
                BinaryOperator(System::String^ str, CppSharp::Parser::AST::Expression^ lhs, CppSharp::Parser::AST::Expression^ rhs, System::String^ opcodeStr);

                BinaryOperator(CppSharp::Parser::AST::BinaryOperator^ _0);

                ~BinaryOperator();

                property CppSharp::Parser::AST::Expression^ LHS
                {
                    CppSharp::Parser::AST::Expression^ get();
                    void set(CppSharp::Parser::AST::Expression^);
                }

                property CppSharp::Parser::AST::Expression^ RHS
                {
                    CppSharp::Parser::AST::Expression^ get();
                    void set(CppSharp::Parser::AST::Expression^);
                }

                property System::String^ OpcodeStr
                {
                    System::String^ get();
                    void set(System::String^);
                }
            };

            public ref class CallExpr : CppSharp::Parser::AST::Expression
            {
            public:

                CallExpr(::CppSharp::CppParser::AST::CallExpr* native);
                static CallExpr^ __CreateInstance(::System::IntPtr native);
                CallExpr(System::String^ str, CppSharp::Parser::AST::Declaration^ decl);

                CallExpr(CppSharp::Parser::AST::CallExpr^ _0);

                ~CallExpr();

                property System::Collections::Generic::List<CppSharp::Parser::AST::Expression^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Expression^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Expression^>^);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Expression^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::Expression^ s);

                void ClearArguments();
            };

            public ref class CXXConstructExpr : CppSharp::Parser::AST::Expression
            {
            public:

                CXXConstructExpr(::CppSharp::CppParser::AST::CXXConstructExpr* native);
                static CXXConstructExpr^ __CreateInstance(::System::IntPtr native);
                CXXConstructExpr(System::String^ str, CppSharp::Parser::AST::Declaration^ decl);

                CXXConstructExpr(CppSharp::Parser::AST::CXXConstructExpr^ _0);

                ~CXXConstructExpr();

                property System::Collections::Generic::List<CppSharp::Parser::AST::Expression^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Expression^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Expression^>^);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Expression^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::Expression^ s);

                void ClearArguments();
            };

            public ref class Parameter : CppSharp::Parser::AST::Declaration
            {
            public:

                Parameter(::CppSharp::CppParser::AST::Parameter* native);
                static Parameter^ __CreateInstance(::System::IntPtr native);
                Parameter();

                Parameter(CppSharp::Parser::AST::Parameter^ _0);

                ~Parameter();

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property bool IsIndirect
                {
                    bool get();
                    void set(bool);
                }

                property bool HasDefaultValue
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int Index
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property CppSharp::Parser::AST::Expression^ DefaultArgument
                {
                    CppSharp::Parser::AST::Expression^ get();
                    void set(CppSharp::Parser::AST::Expression^);
                }
            };

            public ref class Function : CppSharp::Parser::AST::DeclarationContext
            {
            public:

                Function(::CppSharp::CppParser::AST::Function* native);
                static Function^ __CreateInstance(::System::IntPtr native);
                Function();

                Function(CppSharp::Parser::AST::Function^ _0);

                ~Function();

                property CppSharp::Parser::AST::QualifiedType^ ReturnType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property bool IsReturnIndirect
                {
                    bool get();
                    void set(bool);
                }

                property bool HasThisReturn
                {
                    bool get();
                    void set(bool);
                }

                property bool IsConstExpr
                {
                    bool get();
                    void set(bool);
                }

                property bool IsVariadic
                {
                    bool get();
                    void set(bool);
                }

                property bool IsInline
                {
                    bool get();
                    void set(bool);
                }

                property bool IsPure
                {
                    bool get();
                    void set(bool);
                }

                property bool IsDeleted
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::FriendKind FriendKind
                {
                    CppSharp::Parser::AST::FriendKind get();
                    void set(CppSharp::Parser::AST::FriendKind);
                }

                property CppSharp::Parser::AST::CXXOperatorKind OperatorKind
                {
                    CppSharp::Parser::AST::CXXOperatorKind get();
                    void set(CppSharp::Parser::AST::CXXOperatorKind);
                }

                property System::String^ Mangled
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ Signature
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ Body
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property CppSharp::Parser::AST::CallingConvention CallingConvention
                {
                    CppSharp::Parser::AST::CallingConvention get();
                    void set(CppSharp::Parser::AST::CallingConvention);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Parameter^>^ Parameters
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Parameter^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Parameter^>^);
                }

                property CppSharp::Parser::AST::FunctionTemplateSpecialization^ SpecializationInfo
                {
                    CppSharp::Parser::AST::FunctionTemplateSpecialization^ get();
                    void set(CppSharp::Parser::AST::FunctionTemplateSpecialization^);
                }

                property CppSharp::Parser::AST::Function^ InstantiatedFrom
                {
                    CppSharp::Parser::AST::Function^ get();
                    void set(CppSharp::Parser::AST::Function^);
                }

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property unsigned int ParametersCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Parameter^ GetParameters(unsigned int i);

                void AddParameters(CppSharp::Parser::AST::Parameter^ s);

                void ClearParameters();
            };

            public ref class Method : CppSharp::Parser::AST::Function
            {
            public:

                Method(::CppSharp::CppParser::AST::Method* native);
                static Method^ __CreateInstance(::System::IntPtr native);
                Method();

                Method(CppSharp::Parser::AST::Method^ _0);

                ~Method();

                property bool IsVirtual
                {
                    bool get();
                    void set(bool);
                }

                property bool IsStatic
                {
                    bool get();
                    void set(bool);
                }

                property bool IsConst
                {
                    bool get();
                    void set(bool);
                }

                property bool IsExplicit
                {
                    bool get();
                    void set(bool);
                }

                property bool IsOverride
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::CXXMethodKind MethodKind
                {
                    CppSharp::Parser::AST::CXXMethodKind get();
                    void set(CppSharp::Parser::AST::CXXMethodKind);
                }

                property bool IsDefaultConstructor
                {
                    bool get();
                    void set(bool);
                }

                property bool IsCopyConstructor
                {
                    bool get();
                    void set(bool);
                }

                property bool IsMoveConstructor
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::QualifiedType^ ConversionType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::RefQualifierKind RefQualifier
                {
                    CppSharp::Parser::AST::RefQualifierKind get();
                    void set(CppSharp::Parser::AST::RefQualifierKind);
                }
            };

            public ref class Enumeration : CppSharp::Parser::AST::DeclarationContext
            {
            public:

                [System::Flags]
                enum struct EnumModifiers
                {
                    Anonymous = 1,
                    Scoped = 2,
                    Flags = 4
                };

                ref class Item : CppSharp::Parser::AST::Declaration
                {
                public:

                    Item(::CppSharp::CppParser::AST::Enumeration::Item* native);
                    static Item^ __CreateInstance(::System::IntPtr native);
                    Item();

                    Item(CppSharp::Parser::AST::Enumeration::Item^ _0);

                    ~Item();

                    property System::String^ Expression
                    {
                        System::String^ get();
                        void set(System::String^);
                    }

                    property unsigned long long Value
                    {
                        unsigned long long get();
                        void set(unsigned long long);
                    }
                };

                Enumeration(::CppSharp::CppParser::AST::Enumeration* native);
                static Enumeration^ __CreateInstance(::System::IntPtr native);
                Enumeration();

                Enumeration(CppSharp::Parser::AST::Enumeration^ _0);

                ~Enumeration();

                property CppSharp::Parser::AST::Enumeration::EnumModifiers Modifiers
                {
                    CppSharp::Parser::AST::Enumeration::EnumModifiers get();
                    void set(CppSharp::Parser::AST::Enumeration::EnumModifiers);
                }

                property CppSharp::Parser::AST::Type^ Type
                {
                    CppSharp::Parser::AST::Type^ get();
                    void set(CppSharp::Parser::AST::Type^);
                }

                property CppSharp::Parser::AST::BuiltinType^ BuiltinType
                {
                    CppSharp::Parser::AST::BuiltinType^ get();
                    void set(CppSharp::Parser::AST::BuiltinType^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Enumeration::Item^>^ Items
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Enumeration::Item^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Enumeration::Item^>^);
                }

                property unsigned int ItemsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Enumeration::Item^ GetItems(unsigned int i);

                void AddItems(CppSharp::Parser::AST::Enumeration::Item^ s);

                void ClearItems();

                CppSharp::Parser::AST::Enumeration::Item^ FindItemByName(System::String^ Name);
            };

            public ref class Variable : CppSharp::Parser::AST::Declaration
            {
            public:

                Variable(::CppSharp::CppParser::AST::Variable* native);
                static Variable^ __CreateInstance(::System::IntPtr native);
                Variable();

                Variable(CppSharp::Parser::AST::Variable^ _0);

                ~Variable();

                property System::String^ Mangled
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }
            };

            public ref class BaseClassSpecifier : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::BaseClassSpecifier* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                BaseClassSpecifier(::CppSharp::CppParser::AST::BaseClassSpecifier* native);
                static BaseClassSpecifier^ __CreateInstance(::System::IntPtr native);
                BaseClassSpecifier();

                BaseClassSpecifier(CppSharp::Parser::AST::BaseClassSpecifier^ _0);

                ~BaseClassSpecifier();

                property CppSharp::Parser::AST::AccessSpecifier Access
                {
                    CppSharp::Parser::AST::AccessSpecifier get();
                    void set(CppSharp::Parser::AST::AccessSpecifier);
                }

                property bool IsVirtual
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::Type^ Type
                {
                    CppSharp::Parser::AST::Type^ get();
                    void set(CppSharp::Parser::AST::Type^);
                }

                property int Offset
                {
                    int get();
                    void set(int);
                }

                protected:
                bool __ownsNativeInstance;
            };

            public ref class Field : CppSharp::Parser::AST::Declaration
            {
            public:

                Field(::CppSharp::CppParser::AST::Field* native);
                static Field^ __CreateInstance(::System::IntPtr native);
                Field();

                Field(CppSharp::Parser::AST::Field^ _0);

                ~Field();

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::Class^ Class
                {
                    CppSharp::Parser::AST::Class^ get();
                    void set(CppSharp::Parser::AST::Class^);
                }

                property bool IsBitField
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int BitWidth
                {
                    unsigned int get();
                    void set(unsigned int);
                }
            };

            public ref class AccessSpecifierDecl : CppSharp::Parser::AST::Declaration
            {
            public:

                AccessSpecifierDecl(::CppSharp::CppParser::AST::AccessSpecifierDecl* native);
                static AccessSpecifierDecl^ __CreateInstance(::System::IntPtr native);
                AccessSpecifierDecl();

                AccessSpecifierDecl(CppSharp::Parser::AST::AccessSpecifierDecl^ _0);

                ~AccessSpecifierDecl();
            };

            public ref class Class : CppSharp::Parser::AST::DeclarationContext
            {
            public:

                Class(::CppSharp::CppParser::AST::Class* native);
                static Class^ __CreateInstance(::System::IntPtr native);
                Class();

                Class(CppSharp::Parser::AST::Class^ _0);

                ~Class();

                property System::Collections::Generic::List<CppSharp::Parser::AST::BaseClassSpecifier^>^ Bases
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::BaseClassSpecifier^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::BaseClassSpecifier^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Field^>^ Fields
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Field^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Field^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Method^>^ Methods
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Method^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Method^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::AccessSpecifierDecl^>^ Specifiers
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::AccessSpecifierDecl^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::AccessSpecifierDecl^>^);
                }

                property bool IsPOD
                {
                    bool get();
                    void set(bool);
                }

                property bool IsAbstract
                {
                    bool get();
                    void set(bool);
                }

                property bool IsUnion
                {
                    bool get();
                    void set(bool);
                }

                property bool IsDynamic
                {
                    bool get();
                    void set(bool);
                }

                property bool IsPolymorphic
                {
                    bool get();
                    void set(bool);
                }

                property bool HasNonTrivialDefaultConstructor
                {
                    bool get();
                    void set(bool);
                }

                property bool HasNonTrivialCopyConstructor
                {
                    bool get();
                    void set(bool);
                }

                property bool HasNonTrivialDestructor
                {
                    bool get();
                    void set(bool);
                }

                property bool IsExternCContext
                {
                    bool get();
                    void set(bool);
                }

                property bool IsInjected
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::ClassLayout^ Layout
                {
                    CppSharp::Parser::AST::ClassLayout^ get();
                    void set(CppSharp::Parser::AST::ClassLayout^);
                }

                property unsigned int BasesCount
                {
                    unsigned int get();
                }

                property unsigned int FieldsCount
                {
                    unsigned int get();
                }

                property unsigned int MethodsCount
                {
                    unsigned int get();
                }

                property unsigned int SpecifiersCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::BaseClassSpecifier^ GetBases(unsigned int i);

                void AddBases(CppSharp::Parser::AST::BaseClassSpecifier^ s);

                void ClearBases();

                CppSharp::Parser::AST::Field^ GetFields(unsigned int i);

                void AddFields(CppSharp::Parser::AST::Field^ s);

                void ClearFields();

                CppSharp::Parser::AST::Method^ GetMethods(unsigned int i);

                void AddMethods(CppSharp::Parser::AST::Method^ s);

                void ClearMethods();

                CppSharp::Parser::AST::AccessSpecifierDecl^ GetSpecifiers(unsigned int i);

                void AddSpecifiers(CppSharp::Parser::AST::AccessSpecifierDecl^ s);

                void ClearSpecifiers();
            };

            public ref class Template : CppSharp::Parser::AST::Declaration
            {
            public:

                Template(::CppSharp::CppParser::AST::Template* native);
                static Template^ __CreateInstance(::System::IntPtr native);
                Template(CppSharp::Parser::AST::DeclarationKind kind);

                Template();

                Template(CppSharp::Parser::AST::Template^ _0);

                ~Template();

                property CppSharp::Parser::AST::Declaration^ TemplatedDecl
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ Parameters
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^);
                }

                property unsigned int ParametersCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Declaration^ GetParameters(unsigned int i);

                void AddParameters(CppSharp::Parser::AST::Declaration^ s);

                void ClearParameters();

                static operator CppSharp::Parser::AST::Template^(CppSharp::Parser::AST::DeclarationKind kind);
            };

            public ref class TypeAliasTemplate : CppSharp::Parser::AST::Template
            {
            public:

                TypeAliasTemplate(::CppSharp::CppParser::AST::TypeAliasTemplate* native);
                static TypeAliasTemplate^ __CreateInstance(::System::IntPtr native);
                TypeAliasTemplate();

                TypeAliasTemplate(CppSharp::Parser::AST::TypeAliasTemplate^ _0);

                ~TypeAliasTemplate();
            };

            public ref class TemplateParameter : CppSharp::Parser::AST::Declaration
            {
            public:

                TemplateParameter(::CppSharp::CppParser::AST::TemplateParameter* native);
                static TemplateParameter^ __CreateInstance(::System::IntPtr native);
                TemplateParameter(CppSharp::Parser::AST::DeclarationKind kind);

                TemplateParameter(CppSharp::Parser::AST::TemplateParameter^ _0);

                ~TemplateParameter();

                property unsigned int Depth
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int Index
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property bool IsParameterPack
                {
                    bool get();
                    void set(bool);
                }

                static operator CppSharp::Parser::AST::TemplateParameter^(CppSharp::Parser::AST::DeclarationKind kind);
            };

            public ref class TemplateTemplateParameter : CppSharp::Parser::AST::Template
            {
            public:

                TemplateTemplateParameter(::CppSharp::CppParser::AST::TemplateTemplateParameter* native);
                static TemplateTemplateParameter^ __CreateInstance(::System::IntPtr native);
                TemplateTemplateParameter();

                TemplateTemplateParameter(CppSharp::Parser::AST::TemplateTemplateParameter^ _0);

                ~TemplateTemplateParameter();

                property bool IsParameterPack
                {
                    bool get();
                    void set(bool);
                }

                property bool IsPackExpansion
                {
                    bool get();
                    void set(bool);
                }

                property bool IsExpandedParameterPack
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class TypeTemplateParameter : CppSharp::Parser::AST::TemplateParameter
            {
            public:

                TypeTemplateParameter(::CppSharp::CppParser::AST::TypeTemplateParameter* native);
                static TypeTemplateParameter^ __CreateInstance(::System::IntPtr native);
                TypeTemplateParameter();

                TypeTemplateParameter(CppSharp::Parser::AST::TypeTemplateParameter^ _0);

                ~TypeTemplateParameter();

                property CppSharp::Parser::AST::QualifiedType^ DefaultArgument
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }
            };

            public ref class NonTypeTemplateParameter : CppSharp::Parser::AST::TemplateParameter
            {
            public:

                NonTypeTemplateParameter(::CppSharp::CppParser::AST::NonTypeTemplateParameter* native);
                static NonTypeTemplateParameter^ __CreateInstance(::System::IntPtr native);
                NonTypeTemplateParameter();

                NonTypeTemplateParameter(CppSharp::Parser::AST::NonTypeTemplateParameter^ _0);

                ~NonTypeTemplateParameter();

                property CppSharp::Parser::AST::Expression^ DefaultArgument
                {
                    CppSharp::Parser::AST::Expression^ get();
                    void set(CppSharp::Parser::AST::Expression^);
                }

                property unsigned int Position
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property bool IsPackExpansion
                {
                    bool get();
                    void set(bool);
                }

                property bool IsExpandedParameterPack
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class ClassTemplate : CppSharp::Parser::AST::Template
            {
            public:

                ClassTemplate(::CppSharp::CppParser::AST::ClassTemplate* native);
                static ClassTemplate^ __CreateInstance(::System::IntPtr native);
                ClassTemplate();

                ClassTemplate(CppSharp::Parser::AST::ClassTemplate^ _0);

                ~ClassTemplate();

                property System::Collections::Generic::List<CppSharp::Parser::AST::ClassTemplateSpecialization^>^ Specializations
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::ClassTemplateSpecialization^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::ClassTemplateSpecialization^>^);
                }

                property unsigned int SpecializationsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::ClassTemplateSpecialization^ GetSpecializations(unsigned int i);

                void AddSpecializations(CppSharp::Parser::AST::ClassTemplateSpecialization^ s);

                void ClearSpecializations();

                CppSharp::Parser::AST::ClassTemplateSpecialization^ FindSpecialization(System::String^ usr);

                CppSharp::Parser::AST::ClassTemplatePartialSpecialization^ FindPartialSpecialization(System::String^ usr);
            };

            public ref class ClassTemplateSpecialization : CppSharp::Parser::AST::Class
            {
            public:

                ClassTemplateSpecialization(::CppSharp::CppParser::AST::ClassTemplateSpecialization* native);
                static ClassTemplateSpecialization^ __CreateInstance(::System::IntPtr native);
                ClassTemplateSpecialization();

                ClassTemplateSpecialization(CppSharp::Parser::AST::ClassTemplateSpecialization^ _0);

                ~ClassTemplateSpecialization();

                property CppSharp::Parser::AST::ClassTemplate^ TemplatedDecl
                {
                    CppSharp::Parser::AST::ClassTemplate^ get();
                    void set(CppSharp::Parser::AST::ClassTemplate^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^);
                }

                property CppSharp::Parser::AST::TemplateSpecializationKind SpecializationKind
                {
                    CppSharp::Parser::AST::TemplateSpecializationKind get();
                    void set(CppSharp::Parser::AST::TemplateSpecializationKind);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::TemplateArgument^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::TemplateArgument^ s);

                void ClearArguments();
            };

            public ref class ClassTemplatePartialSpecialization : CppSharp::Parser::AST::ClassTemplateSpecialization
            {
            public:

                ClassTemplatePartialSpecialization(::CppSharp::CppParser::AST::ClassTemplatePartialSpecialization* native);
                static ClassTemplatePartialSpecialization^ __CreateInstance(::System::IntPtr native);
                ClassTemplatePartialSpecialization();

                ClassTemplatePartialSpecialization(CppSharp::Parser::AST::ClassTemplatePartialSpecialization^ _0);

                ~ClassTemplatePartialSpecialization();
            };

            public ref class FunctionTemplate : CppSharp::Parser::AST::Template
            {
            public:

                FunctionTemplate(::CppSharp::CppParser::AST::FunctionTemplate* native);
                static FunctionTemplate^ __CreateInstance(::System::IntPtr native);
                FunctionTemplate();

                FunctionTemplate(CppSharp::Parser::AST::FunctionTemplate^ _0);

                ~FunctionTemplate();

                property System::Collections::Generic::List<CppSharp::Parser::AST::FunctionTemplateSpecialization^>^ Specializations
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::FunctionTemplateSpecialization^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::FunctionTemplateSpecialization^>^);
                }

                property unsigned int SpecializationsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::FunctionTemplateSpecialization^ GetSpecializations(unsigned int i);

                void AddSpecializations(CppSharp::Parser::AST::FunctionTemplateSpecialization^ s);

                void ClearSpecializations();

                CppSharp::Parser::AST::FunctionTemplateSpecialization^ FindSpecialization(System::String^ usr);
            };

            public ref class FunctionTemplateSpecialization : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::FunctionTemplateSpecialization* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                FunctionTemplateSpecialization(::CppSharp::CppParser::AST::FunctionTemplateSpecialization* native);
                static FunctionTemplateSpecialization^ __CreateInstance(::System::IntPtr native);
                FunctionTemplateSpecialization();

                FunctionTemplateSpecialization(CppSharp::Parser::AST::FunctionTemplateSpecialization^ _0);

                ~FunctionTemplateSpecialization();

                property CppSharp::Parser::AST::FunctionTemplate^ Template
                {
                    CppSharp::Parser::AST::FunctionTemplate^ get();
                    void set(CppSharp::Parser::AST::FunctionTemplate^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^);
                }

                property CppSharp::Parser::AST::Function^ SpecializedFunction
                {
                    CppSharp::Parser::AST::Function^ get();
                    void set(CppSharp::Parser::AST::Function^);
                }

                property CppSharp::Parser::AST::TemplateSpecializationKind SpecializationKind
                {
                    CppSharp::Parser::AST::TemplateSpecializationKind get();
                    void set(CppSharp::Parser::AST::TemplateSpecializationKind);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::TemplateArgument^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::TemplateArgument^ s);

                void ClearArguments();

                protected:
                bool __ownsNativeInstance;
            };

            public ref class VarTemplate : CppSharp::Parser::AST::Template
            {
            public:

                VarTemplate(::CppSharp::CppParser::AST::VarTemplate* native);
                static VarTemplate^ __CreateInstance(::System::IntPtr native);
                VarTemplate();

                VarTemplate(CppSharp::Parser::AST::VarTemplate^ _0);

                ~VarTemplate();

                property System::Collections::Generic::List<CppSharp::Parser::AST::VarTemplateSpecialization^>^ Specializations
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::VarTemplateSpecialization^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::VarTemplateSpecialization^>^);
                }

                property unsigned int SpecializationsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::VarTemplateSpecialization^ GetSpecializations(unsigned int i);

                void AddSpecializations(CppSharp::Parser::AST::VarTemplateSpecialization^ s);

                void ClearSpecializations();

                CppSharp::Parser::AST::VarTemplateSpecialization^ FindSpecialization(System::String^ usr);

                CppSharp::Parser::AST::VarTemplatePartialSpecialization^ FindPartialSpecialization(System::String^ usr);
            };

            public ref class VarTemplateSpecialization : CppSharp::Parser::AST::Variable
            {
            public:

                VarTemplateSpecialization(::CppSharp::CppParser::AST::VarTemplateSpecialization* native);
                static VarTemplateSpecialization^ __CreateInstance(::System::IntPtr native);
                VarTemplateSpecialization();

                VarTemplateSpecialization(CppSharp::Parser::AST::VarTemplateSpecialization^ _0);

                ~VarTemplateSpecialization();

                property CppSharp::Parser::AST::VarTemplate^ TemplatedDecl
                {
                    CppSharp::Parser::AST::VarTemplate^ get();
                    void set(CppSharp::Parser::AST::VarTemplate^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^);
                }

                property CppSharp::Parser::AST::TemplateSpecializationKind SpecializationKind
                {
                    CppSharp::Parser::AST::TemplateSpecializationKind get();
                    void set(CppSharp::Parser::AST::TemplateSpecializationKind);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::TemplateArgument^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::TemplateArgument^ s);

                void ClearArguments();
            };

            public ref class VarTemplatePartialSpecialization : CppSharp::Parser::AST::VarTemplateSpecialization
            {
            public:

                VarTemplatePartialSpecialization(::CppSharp::CppParser::AST::VarTemplatePartialSpecialization* native);
                static VarTemplatePartialSpecialization^ __CreateInstance(::System::IntPtr native);
                VarTemplatePartialSpecialization();

                VarTemplatePartialSpecialization(CppSharp::Parser::AST::VarTemplatePartialSpecialization^ _0);

                ~VarTemplatePartialSpecialization();
            };

            public ref class Namespace : CppSharp::Parser::AST::DeclarationContext
            {
            public:

                Namespace(::CppSharp::CppParser::AST::Namespace* native);
                static Namespace^ __CreateInstance(::System::IntPtr native);
                Namespace();

                Namespace(CppSharp::Parser::AST::Namespace^ _0);

                ~Namespace();

                property bool IsInline
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class PreprocessedEntity : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::PreprocessedEntity* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                PreprocessedEntity(::CppSharp::CppParser::AST::PreprocessedEntity* native);
                static PreprocessedEntity^ __CreateInstance(::System::IntPtr native);
                PreprocessedEntity();

                PreprocessedEntity(CppSharp::Parser::AST::PreprocessedEntity^ _0);

                ~PreprocessedEntity();

                property CppSharp::Parser::AST::MacroLocation MacroLocation
                {
                    CppSharp::Parser::AST::MacroLocation get();
                    void set(CppSharp::Parser::AST::MacroLocation);
                }

                property ::System::IntPtr OriginalPtr
                {
                    ::System::IntPtr get();
                    void set(::System::IntPtr);
                }

                property CppSharp::Parser::AST::DeclarationKind Kind
                {
                    CppSharp::Parser::AST::DeclarationKind get();
                    void set(CppSharp::Parser::AST::DeclarationKind);
                }

                protected:
                bool __ownsNativeInstance;
            };

            public ref class MacroDefinition : CppSharp::Parser::AST::PreprocessedEntity
            {
            public:

                MacroDefinition(::CppSharp::CppParser::AST::MacroDefinition* native);
                static MacroDefinition^ __CreateInstance(::System::IntPtr native);
                MacroDefinition();

                MacroDefinition(CppSharp::Parser::AST::MacroDefinition^ _0);

                ~MacroDefinition();

                property System::String^ Name
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ Expression
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property int LineNumberStart
                {
                    int get();
                    void set(int);
                }

                property int LineNumberEnd
                {
                    int get();
                    void set(int);
                }
            };

            public ref class MacroExpansion : CppSharp::Parser::AST::PreprocessedEntity
            {
            public:

                MacroExpansion(::CppSharp::CppParser::AST::MacroExpansion* native);
                static MacroExpansion^ __CreateInstance(::System::IntPtr native);
                MacroExpansion();

                MacroExpansion(CppSharp::Parser::AST::MacroExpansion^ _0);

                ~MacroExpansion();

                property System::String^ Name
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ Text
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property CppSharp::Parser::AST::MacroDefinition^ Definition
                {
                    CppSharp::Parser::AST::MacroDefinition^ get();
                    void set(CppSharp::Parser::AST::MacroDefinition^);
                }
            };

            public ref class TranslationUnit : CppSharp::Parser::AST::Namespace
            {
            public:

                TranslationUnit(::CppSharp::CppParser::AST::TranslationUnit* native);
                static TranslationUnit^ __CreateInstance(::System::IntPtr native);
                TranslationUnit();

                TranslationUnit(CppSharp::Parser::AST::TranslationUnit^ _0);

                ~TranslationUnit();

                property System::String^ FileName
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property bool IsSystemHeader
                {
                    bool get();
                    void set(bool);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::MacroDefinition^>^ Macros
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::MacroDefinition^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::MacroDefinition^>^);
                }

                property unsigned int MacrosCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::MacroDefinition^ GetMacros(unsigned int i);

                void AddMacros(CppSharp::Parser::AST::MacroDefinition^ s);

                void ClearMacros();
            };

            public ref class NativeLibrary : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::NativeLibrary* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                NativeLibrary(::CppSharp::CppParser::AST::NativeLibrary* native);
                static NativeLibrary^ __CreateInstance(::System::IntPtr native);
                NativeLibrary();

                NativeLibrary(CppSharp::Parser::AST::NativeLibrary^ _0);

                ~NativeLibrary();

                property System::String^ FileName
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property CppSharp::Parser::AST::ArchType ArchType
                {
                    CppSharp::Parser::AST::ArchType get();
                    void set(CppSharp::Parser::AST::ArchType);
                }

                property System::Collections::Generic::List<System::String^>^ Symbols
                {
                    System::Collections::Generic::List<System::String^>^ get();
                    void set(System::Collections::Generic::List<System::String^>^);
                }

                property System::Collections::Generic::List<System::String^>^ Dependencies
                {
                    System::Collections::Generic::List<System::String^>^ get();
                    void set(System::Collections::Generic::List<System::String^>^);
                }

                property unsigned int SymbolsCount
                {
                    unsigned int get();
                }

                property unsigned int DependenciesCount
                {
                    unsigned int get();
                }

                System::String^ GetSymbols(unsigned int i);

                void AddSymbols(System::String^ s);

                void ClearSymbols();

                System::String^ GetDependencies(unsigned int i);

                void AddDependencies(System::String^ s);

                void ClearDependencies();

                protected:
                bool __ownsNativeInstance;
            };

            public ref class ASTContext : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::ASTContext* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                ASTContext(::CppSharp::CppParser::AST::ASTContext* native);
                static ASTContext^ __CreateInstance(::System::IntPtr native);
                ASTContext();

                ASTContext(CppSharp::Parser::AST::ASTContext^ _0);

                ~ASTContext();

                property System::Collections::Generic::List<CppSharp::Parser::AST::TranslationUnit^>^ TranslationUnits
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TranslationUnit^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TranslationUnit^>^);
                }

                property unsigned int TranslationUnitsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::TranslationUnit^ FindOrCreateModule(System::String^ File);

                CppSharp::Parser::AST::TranslationUnit^ GetTranslationUnits(unsigned int i);

                void AddTranslationUnits(CppSharp::Parser::AST::TranslationUnit^ s);

                void ClearTranslationUnits();

                protected:
                bool __ownsNativeInstance;
            };

            public ref class Comment : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::Comment* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                Comment(::CppSharp::CppParser::AST::Comment* native);
                static Comment^ __CreateInstance(::System::IntPtr native);
                Comment(CppSharp::Parser::AST::CommentKind kind);

                Comment(CppSharp::Parser::AST::Comment^ _0);

                ~Comment();

                property CppSharp::Parser::AST::CommentKind Kind
                {
                    CppSharp::Parser::AST::CommentKind get();
                    void set(CppSharp::Parser::AST::CommentKind);
                }

                static operator CppSharp::Parser::AST::Comment^(CppSharp::Parser::AST::CommentKind kind);

                protected:
                bool __ownsNativeInstance;
            };

            public ref class BlockContentComment : CppSharp::Parser::AST::Comment
            {
            public:

                BlockContentComment(::CppSharp::CppParser::AST::BlockContentComment* native);
                static BlockContentComment^ __CreateInstance(::System::IntPtr native);
                BlockContentComment();

                BlockContentComment(CppSharp::Parser::AST::CommentKind Kind);

                BlockContentComment(CppSharp::Parser::AST::BlockContentComment^ _0);

                ~BlockContentComment();

                static operator CppSharp::Parser::AST::BlockContentComment^(CppSharp::Parser::AST::CommentKind Kind);
            };

            public ref class FullComment : CppSharp::Parser::AST::Comment
            {
            public:

                FullComment(::CppSharp::CppParser::AST::FullComment* native);
                static FullComment^ __CreateInstance(::System::IntPtr native);
                FullComment();

                FullComment(CppSharp::Parser::AST::FullComment^ _0);

                ~FullComment();

                property System::Collections::Generic::List<CppSharp::Parser::AST::BlockContentComment^>^ Blocks
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::BlockContentComment^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::BlockContentComment^>^);
                }

                property unsigned int BlocksCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::BlockContentComment^ GetBlocks(unsigned int i);

                void AddBlocks(CppSharp::Parser::AST::BlockContentComment^ s);

                void ClearBlocks();
            };

            public ref class InlineContentComment : CppSharp::Parser::AST::Comment
            {
            public:

                InlineContentComment(::CppSharp::CppParser::AST::InlineContentComment* native);
                static InlineContentComment^ __CreateInstance(::System::IntPtr native);
                InlineContentComment();

                InlineContentComment(CppSharp::Parser::AST::CommentKind Kind);

                InlineContentComment(CppSharp::Parser::AST::InlineContentComment^ _0);

                ~InlineContentComment();

                property bool HasTrailingNewline
                {
                    bool get();
                    void set(bool);
                }

                static operator CppSharp::Parser::AST::InlineContentComment^(CppSharp::Parser::AST::CommentKind Kind);
            };

            public ref class ParagraphComment : CppSharp::Parser::AST::BlockContentComment
            {
            public:

                ParagraphComment(::CppSharp::CppParser::AST::ParagraphComment* native);
                static ParagraphComment^ __CreateInstance(::System::IntPtr native);
                ParagraphComment();

                ParagraphComment(CppSharp::Parser::AST::ParagraphComment^ _0);

                ~ParagraphComment();

                property bool IsWhitespace
                {
                    bool get();
                    void set(bool);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::InlineContentComment^>^ Content
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::InlineContentComment^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::InlineContentComment^>^);
                }

                property unsigned int ContentCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::InlineContentComment^ GetContent(unsigned int i);

                void AddContent(CppSharp::Parser::AST::InlineContentComment^ s);

                void ClearContent();
            };

            public ref class BlockCommandComment : CppSharp::Parser::AST::BlockContentComment
            {
            public:

                ref class Argument : ICppInstance
                {
                public:

                    property ::CppSharp::CppParser::AST::BlockCommandComment::Argument* NativePtr;
                    property System::IntPtr __Instance
                    {
                        virtual System::IntPtr get();
                        virtual void set(System::IntPtr instance);
                    }

                    Argument(::CppSharp::CppParser::AST::BlockCommandComment::Argument* native);
                    static Argument^ __CreateInstance(::System::IntPtr native);
                    Argument();

                    Argument(CppSharp::Parser::AST::BlockCommandComment::Argument^ _0);

                    ~Argument();

                    property System::String^ Text
                    {
                        System::String^ get();
                        void set(System::String^);
                    }

                    protected:
                    bool __ownsNativeInstance;
                };

                BlockCommandComment(::CppSharp::CppParser::AST::BlockCommandComment* native);
                static BlockCommandComment^ __CreateInstance(::System::IntPtr native);
                BlockCommandComment();

                BlockCommandComment(CppSharp::Parser::AST::CommentKind Kind);

                BlockCommandComment(CppSharp::Parser::AST::BlockCommandComment^ _0);

                ~BlockCommandComment();

                property unsigned int CommandId
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property CppSharp::Parser::AST::ParagraphComment^ ParagraphComment
                {
                    CppSharp::Parser::AST::ParagraphComment^ get();
                    void set(CppSharp::Parser::AST::ParagraphComment^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::BlockCommandComment::Argument^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::BlockCommandComment::Argument^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::BlockCommandComment::Argument^>^);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::BlockCommandComment::Argument^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::BlockCommandComment::Argument^ s);

                void ClearArguments();

                static operator CppSharp::Parser::AST::BlockCommandComment^(CppSharp::Parser::AST::CommentKind Kind);
            };

            public ref class ParamCommandComment : CppSharp::Parser::AST::BlockCommandComment
            {
            public:

                enum struct PassDirection
                {
                    In = 0,
                    Out = 1,
                    InOut = 2
                };

                ParamCommandComment(::CppSharp::CppParser::AST::ParamCommandComment* native);
                static ParamCommandComment^ __CreateInstance(::System::IntPtr native);
                ParamCommandComment();

                ParamCommandComment(CppSharp::Parser::AST::ParamCommandComment^ _0);

                ~ParamCommandComment();

                property CppSharp::Parser::AST::ParamCommandComment::PassDirection Direction
                {
                    CppSharp::Parser::AST::ParamCommandComment::PassDirection get();
                    void set(CppSharp::Parser::AST::ParamCommandComment::PassDirection);
                }

                property unsigned int ParamIndex
                {
                    unsigned int get();
                    void set(unsigned int);
                }
            };

            public ref class TParamCommandComment : CppSharp::Parser::AST::BlockCommandComment
            {
            public:

                TParamCommandComment(::CppSharp::CppParser::AST::TParamCommandComment* native);
                static TParamCommandComment^ __CreateInstance(::System::IntPtr native);
                TParamCommandComment();

                TParamCommandComment(CppSharp::Parser::AST::TParamCommandComment^ _0);

                ~TParamCommandComment();

                property System::Collections::Generic::List<unsigned int>^ Position
                {
                    System::Collections::Generic::List<unsigned int>^ get();
                    void set(System::Collections::Generic::List<unsigned int>^);
                }

                property unsigned int PositionCount
                {
                    unsigned int get();
                }

                unsigned int GetPosition(unsigned int i);

                void AddPosition([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] unsigned int% s);

                void ClearPosition();
            };

            public ref class VerbatimBlockLineComment : CppSharp::Parser::AST::Comment
            {
            public:

                VerbatimBlockLineComment(::CppSharp::CppParser::AST::VerbatimBlockLineComment* native);
                static VerbatimBlockLineComment^ __CreateInstance(::System::IntPtr native);
                VerbatimBlockLineComment();

                VerbatimBlockLineComment(CppSharp::Parser::AST::VerbatimBlockLineComment^ _0);

                ~VerbatimBlockLineComment();

                property System::String^ Text
                {
                    System::String^ get();
                    void set(System::String^);
                }
            };

            public ref class VerbatimBlockComment : CppSharp::Parser::AST::BlockCommandComment
            {
            public:

                VerbatimBlockComment(::CppSharp::CppParser::AST::VerbatimBlockComment* native);
                static VerbatimBlockComment^ __CreateInstance(::System::IntPtr native);
                VerbatimBlockComment();

                VerbatimBlockComment(CppSharp::Parser::AST::VerbatimBlockComment^ _0);

                ~VerbatimBlockComment();

                property System::Collections::Generic::List<CppSharp::Parser::AST::VerbatimBlockLineComment^>^ Lines
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::VerbatimBlockLineComment^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::VerbatimBlockLineComment^>^);
                }

                property unsigned int LinesCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::VerbatimBlockLineComment^ GetLines(unsigned int i);

                void AddLines(CppSharp::Parser::AST::VerbatimBlockLineComment^ s);

                void ClearLines();
            };

            public ref class VerbatimLineComment : CppSharp::Parser::AST::BlockCommandComment
            {
            public:

                VerbatimLineComment(::CppSharp::CppParser::AST::VerbatimLineComment* native);
                static VerbatimLineComment^ __CreateInstance(::System::IntPtr native);
                VerbatimLineComment();

                VerbatimLineComment(CppSharp::Parser::AST::VerbatimLineComment^ _0);

                ~VerbatimLineComment();

                property System::String^ Text
                {
                    System::String^ get();
                    void set(System::String^);
                }
            };

            public ref class InlineCommandComment : CppSharp::Parser::AST::InlineContentComment
            {
            public:

                enum struct RenderKind
                {
                    RenderNormal = 0,
                    RenderBold = 1,
                    RenderMonospaced = 2,
                    RenderEmphasized = 3
                };

                ref class Argument : ICppInstance
                {
                public:

                    property ::CppSharp::CppParser::AST::InlineCommandComment::Argument* NativePtr;
                    property System::IntPtr __Instance
                    {
                        virtual System::IntPtr get();
                        virtual void set(System::IntPtr instance);
                    }

                    Argument(::CppSharp::CppParser::AST::InlineCommandComment::Argument* native);
                    static Argument^ __CreateInstance(::System::IntPtr native);
                    Argument();

                    Argument(CppSharp::Parser::AST::InlineCommandComment::Argument^ _0);

                    ~Argument();

                    property System::String^ Text
                    {
                        System::String^ get();
                        void set(System::String^);
                    }

                    protected:
                    bool __ownsNativeInstance;
                };

                InlineCommandComment(::CppSharp::CppParser::AST::InlineCommandComment* native);
                static InlineCommandComment^ __CreateInstance(::System::IntPtr native);
                InlineCommandComment();

                InlineCommandComment(CppSharp::Parser::AST::InlineCommandComment^ _0);

                ~InlineCommandComment();

                property unsigned int CommandId
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property CppSharp::Parser::AST::InlineCommandComment::RenderKind CommentRenderKind
                {
                    CppSharp::Parser::AST::InlineCommandComment::RenderKind get();
                    void set(CppSharp::Parser::AST::InlineCommandComment::RenderKind);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::InlineCommandComment::Argument^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::InlineCommandComment::Argument^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::InlineCommandComment::Argument^>^);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::InlineCommandComment::Argument^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::InlineCommandComment::Argument^ s);

                void ClearArguments();
            };

            public ref class HTMLTagComment : CppSharp::Parser::AST::InlineContentComment
            {
            public:

                HTMLTagComment(::CppSharp::CppParser::AST::HTMLTagComment* native);
                static HTMLTagComment^ __CreateInstance(::System::IntPtr native);
                HTMLTagComment();

                HTMLTagComment(CppSharp::Parser::AST::CommentKind Kind);

                HTMLTagComment(CppSharp::Parser::AST::HTMLTagComment^ _0);

                ~HTMLTagComment();

                static operator CppSharp::Parser::AST::HTMLTagComment^(CppSharp::Parser::AST::CommentKind Kind);
            };

            public ref class HTMLStartTagComment : CppSharp::Parser::AST::HTMLTagComment
            {
            public:

                ref class Attribute : ICppInstance
                {
                public:

                    property ::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute* NativePtr;
                    property System::IntPtr __Instance
                    {
                        virtual System::IntPtr get();
                        virtual void set(System::IntPtr instance);
                    }

                    Attribute(::CppSharp::CppParser::AST::HTMLStartTagComment::Attribute* native);
                    static Attribute^ __CreateInstance(::System::IntPtr native);
                    Attribute();

                    Attribute(CppSharp::Parser::AST::HTMLStartTagComment::Attribute^ _0);

                    ~Attribute();

                    property System::String^ Name
                    {
                        System::String^ get();
                        void set(System::String^);
                    }

                    property System::String^ Value
                    {
                        System::String^ get();
                        void set(System::String^);
                    }

                    protected:
                    bool __ownsNativeInstance;
                };

                HTMLStartTagComment(::CppSharp::CppParser::AST::HTMLStartTagComment* native);
                static HTMLStartTagComment^ __CreateInstance(::System::IntPtr native);
                HTMLStartTagComment();

                HTMLStartTagComment(CppSharp::Parser::AST::HTMLStartTagComment^ _0);

                ~HTMLStartTagComment();

                property System::String^ TagName
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::HTMLStartTagComment::Attribute^>^ Attributes
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::HTMLStartTagComment::Attribute^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::HTMLStartTagComment::Attribute^>^);
                }

                property unsigned int AttributesCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::HTMLStartTagComment::Attribute^ GetAttributes(unsigned int i);

                void AddAttributes(CppSharp::Parser::AST::HTMLStartTagComment::Attribute^ s);

                void ClearAttributes();
            };

            public ref class HTMLEndTagComment : CppSharp::Parser::AST::HTMLTagComment
            {
            public:

                HTMLEndTagComment(::CppSharp::CppParser::AST::HTMLEndTagComment* native);
                static HTMLEndTagComment^ __CreateInstance(::System::IntPtr native);
                HTMLEndTagComment();

                HTMLEndTagComment(CppSharp::Parser::AST::HTMLEndTagComment^ _0);

                ~HTMLEndTagComment();

                property System::String^ TagName
                {
                    System::String^ get();
                    void set(System::String^);
                }
            };

            public ref class TextComment : CppSharp::Parser::AST::InlineContentComment
            {
            public:

                TextComment(::CppSharp::CppParser::AST::TextComment* native);
                static TextComment^ __CreateInstance(::System::IntPtr native);
                TextComment();

                TextComment(CppSharp::Parser::AST::TextComment^ _0);

                ~TextComment();

                property System::String^ Text
                {
                    System::String^ get();
                    void set(System::String^);
                }
            };

            public ref class RawComment : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::RawComment* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                RawComment(::CppSharp::CppParser::AST::RawComment* native);
                static RawComment^ __CreateInstance(::System::IntPtr native);
                RawComment();

                RawComment(CppSharp::Parser::AST::RawComment^ _0);

                ~RawComment();

                property CppSharp::Parser::AST::RawCommentKind Kind
                {
                    CppSharp::Parser::AST::RawCommentKind get();
                    void set(CppSharp::Parser::AST::RawCommentKind);
                }

                property System::String^ Text
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ BriefText
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property CppSharp::Parser::AST::FullComment^ FullCommentBlock
                {
                    CppSharp::Parser::AST::FullComment^ get();
                    void set(CppSharp::Parser::AST::FullComment^);
                }

                protected:
                bool __ownsNativeInstance;
            };
        }
    }
}
