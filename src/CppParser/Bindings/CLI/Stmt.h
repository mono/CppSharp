// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include <Stmt.h>
#include "Sources.h"

namespace CppSharp
{
    namespace Parser
    {
        ref class SourceRange;
        namespace AST
        {
            enum struct StmtClass;
            ref class AsmStmt;
            ref class AttributedStmt;
            ref class BreakStmt;
            ref class CXXCatchStmt;
            ref class CXXForRangeStmt;
            ref class CXXTryStmt;
            ref class CapturedStmt;
            ref class CaseStmt;
            ref class CompoundStmt;
            ref class ContinueStmt;
            ref class CoreturnStmt;
            ref class CoroutineBodyStmt;
            ref class DeclStmt;
            ref class Declaration;
            ref class DefaultStmt;
            ref class DoStmt;
            ref class Expr;
            ref class ForStmt;
            ref class GCCAsmStmt;
            ref class GotoStmt;
            ref class IfStmt;
            ref class IndirectGotoStmt;
            ref class LabelStmt;
            ref class MSAsmStmt;
            ref class MSDependentExistsStmt;
            ref class NullStmt;
            ref class QualifiedType;
            ref class ReturnStmt;
            ref class SEHExceptStmt;
            ref class SEHFinallyStmt;
            ref class SEHLeaveStmt;
            ref class SEHTryStmt;
            ref class Stmt;
            ref class SwitchCase;
            ref class SwitchStmt;
            ref class WhileStmt;
        }
    }
}

namespace CppSharp
{
    namespace Parser
    {
        namespace AST
        {
            public enum struct StmtClass
            {
                NoStmt = 0,
                GCCAsmStmt = 1,
                MSAsmStmt = 2,
                AttributedStmt = 3,
                BreakStmt = 4,
                CXXCatchStmt = 5,
                CXXForRangeStmt = 6,
                CXXTryStmt = 7,
                CapturedStmt = 8,
                CompoundStmt = 9,
                ContinueStmt = 10,
                CoreturnStmt = 11,
                CoroutineBodyStmt = 12,
                DeclStmt = 13,
                DoStmt = 14,
                BinaryConditionalOperator = 15,
                ConditionalOperator = 16,
                AddrLabelExpr = 17,
                ArrayInitIndexExpr = 18,
                ArrayInitLoopExpr = 19,
                ArraySubscriptExpr = 20,
                ArrayTypeTraitExpr = 21,
                AsTypeExpr = 22,
                AtomicExpr = 23,
                BinaryOperator = 24,
                CompoundAssignOperator = 25,
                BlockExpr = 26,
                CXXBindTemporaryExpr = 27,
                CXXBoolLiteralExpr = 28,
                CXXConstructExpr = 29,
                CXXTemporaryObjectExpr = 30,
                CXXDefaultArgExpr = 31,
                CXXDefaultInitExpr = 32,
                CXXDeleteExpr = 33,
                CXXDependentScopeMemberExpr = 34,
                CXXFoldExpr = 35,
                CXXInheritedCtorInitExpr = 36,
                CXXNewExpr = 37,
                CXXNoexceptExpr = 38,
                CXXNullPtrLiteralExpr = 39,
                CXXPseudoDestructorExpr = 40,
                CXXScalarValueInitExpr = 41,
                CXXStdInitializerListExpr = 42,
                CXXThisExpr = 43,
                CXXThrowExpr = 44,
                CXXTypeidExpr = 45,
                CXXUnresolvedConstructExpr = 46,
                CXXUuidofExpr = 47,
                CallExpr = 48,
                CUDAKernelCallExpr = 49,
                CXXMemberCallExpr = 50,
                CXXOperatorCallExpr = 51,
                UserDefinedLiteral = 52,
                CStyleCastExpr = 53,
                CXXFunctionalCastExpr = 54,
                CXXConstCastExpr = 55,
                CXXDynamicCastExpr = 56,
                CXXReinterpretCastExpr = 57,
                CXXStaticCastExpr = 58,
                ImplicitCastExpr = 60,
                CharacterLiteral = 61,
                ChooseExpr = 62,
                CompoundLiteralExpr = 63,
                ConvertVectorExpr = 64,
                CoawaitExpr = 65,
                CoyieldExpr = 66,
                DeclRefExpr = 67,
                DependentCoawaitExpr = 68,
                DependentScopeDeclRefExpr = 69,
                DesignatedInitExpr = 70,
                DesignatedInitUpdateExpr = 71,
                ExpressionTraitExpr = 72,
                ExtVectorElementExpr = 73,
                FixedPointLiteral = 74,
                FloatingLiteral = 75,
                ConstantExpr = 76,
                ExprWithCleanups = 77,
                FunctionParmPackExpr = 78,
                GNUNullExpr = 79,
                GenericSelectionExpr = 80,
                ImaginaryLiteral = 81,
                ImplicitValueInitExpr = 82,
                InitListExpr = 83,
                IntegerLiteral = 84,
                LambdaExpr = 85,
                MSPropertyRefExpr = 86,
                MSPropertySubscriptExpr = 87,
                MaterializeTemporaryExpr = 88,
                MemberExpr = 89,
                NoInitExpr = 90,
                OffsetOfExpr = 107,
                OpaqueValueExpr = 108,
                UnresolvedLookupExpr = 109,
                UnresolvedMemberExpr = 110,
                PackExpansionExpr = 111,
                ParenExpr = 112,
                ParenListExpr = 113,
                PredefinedExpr = 114,
                PseudoObjectExpr = 115,
                ShuffleVectorExpr = 116,
                SizeOfPackExpr = 117,
                StmtExpr = 118,
                StringLiteral = 119,
                SubstNonTypeTemplateParmExpr = 120,
                SubstNonTypeTemplateParmPackExpr = 121,
                TypeTraitExpr = 122,
                TypoExpr = 123,
                UnaryExprOrTypeTraitExpr = 124,
                UnaryOperator = 125,
                VAArgExpr = 126,
                ForStmt = 127,
                GotoStmt = 128,
                IfStmt = 129,
                IndirectGotoStmt = 130,
                LabelStmt = 131,
                MSDependentExistsStmt = 132,
                NullStmt = 133,
                ReturnStmt = 188,
                SEHExceptStmt = 189,
                SEHFinallyStmt = 190,
                SEHLeaveStmt = 191,
                SEHTryStmt = 192,
                CaseStmt = 193,
                DefaultStmt = 194,
                SwitchStmt = 195,
                WhileStmt = 196
            };

            public ref class Stmt : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::Stmt* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                Stmt(::CppSharp::CppParser::AST::Stmt* native);
                static Stmt^ __CreateInstance(::System::IntPtr native);
                Stmt();

                Stmt(CppSharp::Parser::AST::StmtClass klass);

                Stmt(CppSharp::Parser::AST::Stmt^ _0);

                ~Stmt();

                property CppSharp::Parser::AST::StmtClass StmtClass
                {
                    CppSharp::Parser::AST::StmtClass get();
                    void set(CppSharp::Parser::AST::StmtClass);
                }

                property CppSharp::Parser::SourceRange^ SourceRange
                {
                    CppSharp::Parser::SourceRange^ get();
                    void set(CppSharp::Parser::SourceRange^);
                }

                property CppSharp::Parser::SourceLocation EndLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::Stmt^ StripLabelLikeStatements
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                static operator CppSharp::Parser::AST::Stmt^(CppSharp::Parser::AST::StmtClass klass);

            protected:
                bool __ownsNativeInstance;
            };

            public ref class DeclStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                DeclStmt(::CppSharp::CppParser::AST::DeclStmt* native);
                static DeclStmt^ __CreateInstance(::System::IntPtr native);
                DeclStmt();

                DeclStmt(CppSharp::Parser::AST::DeclStmt^ _0);

                ~DeclStmt();

                property System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ Decls
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^);
                }

                property bool IsSingleDecl
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::Declaration^ SingleDecl
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }

                property unsigned int GetdeclsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Declaration^ Getdecls(unsigned int i);

                void Adddecls(CppSharp::Parser::AST::Declaration^ s);

                void Cleardecls();
            };

            public ref class NullStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                NullStmt(::CppSharp::CppParser::AST::NullStmt* native);
                static NullStmt^ __CreateInstance(::System::IntPtr native);
                NullStmt();

                NullStmt(CppSharp::Parser::AST::NullStmt^ _0);

                ~NullStmt();

                property CppSharp::Parser::SourceLocation SemiLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool HasLeadingEmptyMacro
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class CompoundStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                CompoundStmt(::CppSharp::CppParser::AST::CompoundStmt* native);
                static CompoundStmt^ __CreateInstance(::System::IntPtr native);
                CompoundStmt();

                CompoundStmt(CppSharp::Parser::AST::CompoundStmt^ _0);

                ~CompoundStmt();

                property System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^ Body
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^);
                }

                property bool BodyEmpty
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int Size
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property CppSharp::Parser::AST::Stmt^ BodyFront
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ BodyBack
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::SourceLocation LBracLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation RBracLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property unsigned int GetbodyCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Stmt^ Getbody(unsigned int i);

                void Addbody(CppSharp::Parser::AST::Stmt^ s);

                void Clearbody();
            };

            public ref class SwitchCase : CppSharp::Parser::AST::Stmt
            {
            public:

                SwitchCase(::CppSharp::CppParser::AST::SwitchCase* native);
                static SwitchCase^ __CreateInstance(::System::IntPtr native);
                SwitchCase();

                SwitchCase(CppSharp::Parser::AST::StmtClass klass);

                SwitchCase(CppSharp::Parser::AST::SwitchCase^ _0);

                ~SwitchCase();

                property CppSharp::Parser::SourceLocation KeywordLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation ColonLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::Stmt^ SubStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                static operator CppSharp::Parser::AST::SwitchCase^(CppSharp::Parser::AST::StmtClass klass);
            };

            public ref class CaseStmt : CppSharp::Parser::AST::SwitchCase
            {
            public:

                CaseStmt(::CppSharp::CppParser::AST::CaseStmt* native);
                static CaseStmt^ __CreateInstance(::System::IntPtr native);
                CaseStmt();

                CaseStmt(CppSharp::Parser::AST::CaseStmt^ _0);

                ~CaseStmt();

                property CppSharp::Parser::SourceLocation CaseLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation EllipsisLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::Expr^ LHS
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ RHS
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property bool CaseStmtIsGNURange
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class DefaultStmt : CppSharp::Parser::AST::SwitchCase
            {
            public:

                DefaultStmt(::CppSharp::CppParser::AST::DefaultStmt* native);
                static DefaultStmt^ __CreateInstance(::System::IntPtr native);
                DefaultStmt();

                DefaultStmt(CppSharp::Parser::AST::DefaultStmt^ _0);

                ~DefaultStmt();

                property CppSharp::Parser::SourceLocation DefaultLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class LabelStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                LabelStmt(::CppSharp::CppParser::AST::LabelStmt* native);
                static LabelStmt^ __CreateInstance(::System::IntPtr native);
                LabelStmt();

                LabelStmt(CppSharp::Parser::AST::LabelStmt^ _0);

                ~LabelStmt();

                property CppSharp::Parser::SourceLocation IdentLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::Stmt^ SubStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property System::String^ Name
                {
                    System::String^ get();
                    void set(System::String^);
                }
            };

            public ref class AttributedStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                AttributedStmt(::CppSharp::CppParser::AST::AttributedStmt* native);
                static AttributedStmt^ __CreateInstance(::System::IntPtr native);
                AttributedStmt();

                AttributedStmt(CppSharp::Parser::AST::AttributedStmt^ _0);

                ~AttributedStmt();

                property CppSharp::Parser::SourceLocation AttrLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::Stmt^ SubStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }
            };

            public ref class IfStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                IfStmt(::CppSharp::CppParser::AST::IfStmt* native);
                static IfStmt^ __CreateInstance(::System::IntPtr native);
                IfStmt();

                IfStmt(CppSharp::Parser::AST::IfStmt^ _0);

                ~IfStmt();

                property CppSharp::Parser::AST::Expr^ Cond
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ Then
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ Else
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ Init
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::SourceLocation IfLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation ElseLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool Constexpr
                {
                    bool get();
                    void set(bool);
                }

                property bool HasInitStorage
                {
                    bool get();
                    void set(bool);
                }

                property bool HasVarStorage
                {
                    bool get();
                    void set(bool);
                }

                property bool HasElseStorage
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::DeclStmt^ ConditionVariableDeclStmt
                {
                    CppSharp::Parser::AST::DeclStmt^ get();
                    void set(CppSharp::Parser::AST::DeclStmt^);
                }

                property bool IsObjCAvailabilityCheck
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class SwitchStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                SwitchStmt(::CppSharp::CppParser::AST::SwitchStmt* native);
                static SwitchStmt^ __CreateInstance(::System::IntPtr native);
                SwitchStmt();

                SwitchStmt(CppSharp::Parser::AST::SwitchStmt^ _0);

                ~SwitchStmt();

                property CppSharp::Parser::AST::Expr^ Cond
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ Body
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ Init
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::SourceLocation SwitchLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool HasInitStorage
                {
                    bool get();
                    void set(bool);
                }

                property bool HasVarStorage
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::DeclStmt^ ConditionVariableDeclStmt
                {
                    CppSharp::Parser::AST::DeclStmt^ get();
                    void set(CppSharp::Parser::AST::DeclStmt^);
                }

                property bool IsAllEnumCasesCovered
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class WhileStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                WhileStmt(::CppSharp::CppParser::AST::WhileStmt* native);
                static WhileStmt^ __CreateInstance(::System::IntPtr native);
                WhileStmt();

                WhileStmt(CppSharp::Parser::AST::WhileStmt^ _0);

                ~WhileStmt();

                property CppSharp::Parser::AST::Expr^ Cond
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ Body
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::SourceLocation WhileLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool HasVarStorage
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::DeclStmt^ ConditionVariableDeclStmt
                {
                    CppSharp::Parser::AST::DeclStmt^ get();
                    void set(CppSharp::Parser::AST::DeclStmt^);
                }
            };

            public ref class DoStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                DoStmt(::CppSharp::CppParser::AST::DoStmt* native);
                static DoStmt^ __CreateInstance(::System::IntPtr native);
                DoStmt();

                DoStmt(CppSharp::Parser::AST::DoStmt^ _0);

                ~DoStmt();

                property CppSharp::Parser::AST::Expr^ Cond
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ Body
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::SourceLocation DoLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation WhileLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation RParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class ForStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                ForStmt(::CppSharp::CppParser::AST::ForStmt* native);
                static ForStmt^ __CreateInstance(::System::IntPtr native);
                ForStmt();

                ForStmt(CppSharp::Parser::AST::ForStmt^ _0);

                ~ForStmt();

                property CppSharp::Parser::AST::Stmt^ Init
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Expr^ Cond
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ Inc
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ Body
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::SourceLocation ForLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation LParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation RParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::DeclStmt^ ConditionVariableDeclStmt
                {
                    CppSharp::Parser::AST::DeclStmt^ get();
                    void set(CppSharp::Parser::AST::DeclStmt^);
                }
            };

            public ref class GotoStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                GotoStmt(::CppSharp::CppParser::AST::GotoStmt* native);
                static GotoStmt^ __CreateInstance(::System::IntPtr native);
                GotoStmt();

                GotoStmt(CppSharp::Parser::AST::GotoStmt^ _0);

                ~GotoStmt();

                property CppSharp::Parser::SourceLocation GotoLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation LabelLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class IndirectGotoStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                IndirectGotoStmt(::CppSharp::CppParser::AST::IndirectGotoStmt* native);
                static IndirectGotoStmt^ __CreateInstance(::System::IntPtr native);
                IndirectGotoStmt();

                IndirectGotoStmt(CppSharp::Parser::AST::IndirectGotoStmt^ _0);

                ~IndirectGotoStmt();

                property CppSharp::Parser::SourceLocation GotoLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation StarLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::Expr^ Target
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }
            };

            public ref class ContinueStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                ContinueStmt(::CppSharp::CppParser::AST::ContinueStmt* native);
                static ContinueStmt^ __CreateInstance(::System::IntPtr native);
                ContinueStmt();

                ContinueStmt(CppSharp::Parser::AST::ContinueStmt^ _0);

                ~ContinueStmt();

                property CppSharp::Parser::SourceLocation ContinueLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class BreakStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                BreakStmt(::CppSharp::CppParser::AST::BreakStmt* native);
                static BreakStmt^ __CreateInstance(::System::IntPtr native);
                BreakStmt();

                BreakStmt(CppSharp::Parser::AST::BreakStmt^ _0);

                ~BreakStmt();

                property CppSharp::Parser::SourceLocation BreakLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class ReturnStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                ReturnStmt(::CppSharp::CppParser::AST::ReturnStmt* native);
                static ReturnStmt^ __CreateInstance(::System::IntPtr native);
                ReturnStmt();

                ReturnStmt(CppSharp::Parser::AST::ReturnStmt^ _0);

                ~ReturnStmt();

                property CppSharp::Parser::AST::Expr^ RetValue
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::SourceLocation ReturnLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class AsmStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                AsmStmt(::CppSharp::CppParser::AST::AsmStmt* native);
                static AsmStmt^ __CreateInstance(::System::IntPtr native);
                AsmStmt();

                AsmStmt(CppSharp::Parser::AST::StmtClass klass);

                AsmStmt(CppSharp::Parser::AST::AsmStmt^ _0);

                ~AsmStmt();

                property System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ Inputs
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ Outputs
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^);
                }

                property CppSharp::Parser::SourceLocation AsmLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool Simple
                {
                    bool get();
                    void set(bool);
                }

                property bool Volatile
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int NumOutputs
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int NumPlusOperands
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int NumInputs
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int NumClobbers
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int GetinputsCount
                {
                    unsigned int get();
                }

                property unsigned int GetoutputsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Expr^ Getinputs(unsigned int i);

                void Addinputs(CppSharp::Parser::AST::Expr^ s);

                void Clearinputs();

                CppSharp::Parser::AST::Expr^ Getoutputs(unsigned int i);

                void Addoutputs(CppSharp::Parser::AST::Expr^ s);

                void Clearoutputs();

                static operator CppSharp::Parser::AST::AsmStmt^(CppSharp::Parser::AST::StmtClass klass);
            };

            public ref class GCCAsmStmt : CppSharp::Parser::AST::AsmStmt
            {
            public:

                ref class AsmStringPiece : ICppInstance
                {
                public:

                    enum struct Kind
                    {
                        String = 0,
                        Operand = 1
                    };

                    property ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece* NativePtr;
                    property System::IntPtr __Instance
                    {
                        virtual System::IntPtr get();
                        virtual void set(System::IntPtr instance);
                    }

                    AsmStringPiece(::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece* native);
                    static AsmStringPiece^ __CreateInstance(::System::IntPtr native);
                    AsmStringPiece();

                    AsmStringPiece(CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece^ _0);

                    ~AsmStringPiece();

                    property bool IsString
                    {
                        bool get();
                        void set(bool);
                    }

                    property bool IsOperand
                    {
                        bool get();
                        void set(bool);
                    }

                    property System::String^ String
                    {
                        System::String^ get();
                        void set(System::String^);
                    }

                    property unsigned int OperandNo
                    {
                        unsigned int get();
                        void set(unsigned int);
                    }

                    property char Modifier
                    {
                        char get();
                        void set(char);
                    }

                protected:
                    bool __ownsNativeInstance;
                };

                GCCAsmStmt(::CppSharp::CppParser::AST::GCCAsmStmt* native);
                static GCCAsmStmt^ __CreateInstance(::System::IntPtr native);
                GCCAsmStmt();

                GCCAsmStmt(CppSharp::Parser::AST::GCCAsmStmt^ _0);

                ~GCCAsmStmt();

                property CppSharp::Parser::SourceLocation RParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class MSAsmStmt : CppSharp::Parser::AST::AsmStmt
            {
            public:

                MSAsmStmt(::CppSharp::CppParser::AST::MSAsmStmt* native);
                static MSAsmStmt^ __CreateInstance(::System::IntPtr native);
                MSAsmStmt();

                MSAsmStmt(CppSharp::Parser::AST::MSAsmStmt^ _0);

                ~MSAsmStmt();

                property CppSharp::Parser::SourceLocation LBraceLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool HasBraces
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int NumAsmToks
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property System::String^ AsmString
                {
                    System::String^ get();
                    void set(System::String^);
                }
            };

            public ref class SEHExceptStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                SEHExceptStmt(::CppSharp::CppParser::AST::SEHExceptStmt* native);
                static SEHExceptStmt^ __CreateInstance(::System::IntPtr native);
                SEHExceptStmt();

                SEHExceptStmt(CppSharp::Parser::AST::SEHExceptStmt^ _0);

                ~SEHExceptStmt();

                property CppSharp::Parser::SourceLocation ExceptLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::Expr^ FilterExpr
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::CompoundStmt^ Block
                {
                    CppSharp::Parser::AST::CompoundStmt^ get();
                    void set(CppSharp::Parser::AST::CompoundStmt^);
                }
            };

            public ref class SEHFinallyStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                SEHFinallyStmt(::CppSharp::CppParser::AST::SEHFinallyStmt* native);
                static SEHFinallyStmt^ __CreateInstance(::System::IntPtr native);
                SEHFinallyStmt();

                SEHFinallyStmt(CppSharp::Parser::AST::SEHFinallyStmt^ _0);

                ~SEHFinallyStmt();

                property CppSharp::Parser::SourceLocation FinallyLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::CompoundStmt^ Block
                {
                    CppSharp::Parser::AST::CompoundStmt^ get();
                    void set(CppSharp::Parser::AST::CompoundStmt^);
                }
            };

            public ref class SEHTryStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                SEHTryStmt(::CppSharp::CppParser::AST::SEHTryStmt* native);
                static SEHTryStmt^ __CreateInstance(::System::IntPtr native);
                SEHTryStmt();

                SEHTryStmt(CppSharp::Parser::AST::SEHTryStmt^ _0);

                ~SEHTryStmt();

                property CppSharp::Parser::SourceLocation TryLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool IsCXXTry
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::CompoundStmt^ TryBlock
                {
                    CppSharp::Parser::AST::CompoundStmt^ get();
                    void set(CppSharp::Parser::AST::CompoundStmt^);
                }

                property CppSharp::Parser::AST::Stmt^ Handler
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::SEHExceptStmt^ ExceptHandler
                {
                    CppSharp::Parser::AST::SEHExceptStmt^ get();
                    void set(CppSharp::Parser::AST::SEHExceptStmt^);
                }

                property CppSharp::Parser::AST::SEHFinallyStmt^ FinallyHandler
                {
                    CppSharp::Parser::AST::SEHFinallyStmt^ get();
                    void set(CppSharp::Parser::AST::SEHFinallyStmt^);
                }
            };

            public ref class SEHLeaveStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                SEHLeaveStmt(::CppSharp::CppParser::AST::SEHLeaveStmt* native);
                static SEHLeaveStmt^ __CreateInstance(::System::IntPtr native);
                SEHLeaveStmt();

                SEHLeaveStmt(CppSharp::Parser::AST::SEHLeaveStmt^ _0);

                ~SEHLeaveStmt();

                property CppSharp::Parser::SourceLocation LeaveLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class CapturedStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                enum struct VariableCaptureKind
                {
                    This = 0,
                    ByRef = 1,
                    ByCopy = 2,
                    VLAType = 3
                };

                ref class Capture : ICppInstance
                {
                public:

                    property ::CppSharp::CppParser::AST::CapturedStmt::Capture* NativePtr;
                    property System::IntPtr __Instance
                    {
                        virtual System::IntPtr get();
                        virtual void set(System::IntPtr instance);
                    }

                    Capture(::CppSharp::CppParser::AST::CapturedStmt::Capture* native);
                    static Capture^ __CreateInstance(::System::IntPtr native);
                    Capture();

                    Capture(CppSharp::Parser::AST::CapturedStmt::Capture^ _0);

                    ~Capture();

                    property CppSharp::Parser::AST::CapturedStmt::VariableCaptureKind CaptureKind
                    {
                        CppSharp::Parser::AST::CapturedStmt::VariableCaptureKind get();
                        void set(CppSharp::Parser::AST::CapturedStmt::VariableCaptureKind);
                    }

                    property CppSharp::Parser::SourceLocation Location
                    {
                        CppSharp::Parser::SourceLocation get();
                        void set(CppSharp::Parser::SourceLocation);
                    }

                    property bool CapturesThis
                    {
                        bool get();
                        void set(bool);
                    }

                    property bool CapturesVariable
                    {
                        bool get();
                        void set(bool);
                    }

                    property bool CapturesVariableByCopy
                    {
                        bool get();
                        void set(bool);
                    }

                    property bool CapturesVariableArrayType
                    {
                        bool get();
                        void set(bool);
                    }

                protected:
                    bool __ownsNativeInstance;
                };

                CapturedStmt(::CppSharp::CppParser::AST::CapturedStmt* native);
                static CapturedStmt^ __CreateInstance(::System::IntPtr native);
                CapturedStmt();

                CapturedStmt(CppSharp::Parser::AST::CapturedStmt^ _0);

                ~CapturedStmt();

                property System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ CaptureInits
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^);
                }

                property CppSharp::Parser::AST::Stmt^ capturedStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property unsigned int CaptureSize
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int GetcaptureInitsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Expr^ GetcaptureInits(unsigned int i);

                void AddcaptureInits(CppSharp::Parser::AST::Expr^ s);

                void ClearcaptureInits();
            };

            public ref class CXXCatchStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                CXXCatchStmt(::CppSharp::CppParser::AST::CXXCatchStmt* native);
                static CXXCatchStmt^ __CreateInstance(::System::IntPtr native);
                CXXCatchStmt();

                CXXCatchStmt(CppSharp::Parser::AST::CXXCatchStmt^ _0);

                ~CXXCatchStmt();

                property CppSharp::Parser::SourceLocation CatchLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::QualifiedType^ CaughtType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::Stmt^ HandlerBlock
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }
            };

            public ref class CXXTryStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                CXXTryStmt(::CppSharp::CppParser::AST::CXXTryStmt* native);
                static CXXTryStmt^ __CreateInstance(::System::IntPtr native);
                CXXTryStmt();

                CXXTryStmt(CppSharp::Parser::AST::CXXTryStmt^ _0);

                ~CXXTryStmt();

                property CppSharp::Parser::SourceLocation TryLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::CompoundStmt^ TryBlock
                {
                    CppSharp::Parser::AST::CompoundStmt^ get();
                    void set(CppSharp::Parser::AST::CompoundStmt^);
                }

                property unsigned int NumHandlers
                {
                    unsigned int get();
                    void set(unsigned int);
                }
            };

            public ref class CXXForRangeStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                CXXForRangeStmt(::CppSharp::CppParser::AST::CXXForRangeStmt* native);
                static CXXForRangeStmt^ __CreateInstance(::System::IntPtr native);
                CXXForRangeStmt();

                CXXForRangeStmt(CppSharp::Parser::AST::CXXForRangeStmt^ _0);

                ~CXXForRangeStmt();

                property CppSharp::Parser::AST::Stmt^ Init
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Expr^ RangeInit
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ Cond
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ Inc
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ Body
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::DeclStmt^ RangeStmt
                {
                    CppSharp::Parser::AST::DeclStmt^ get();
                    void set(CppSharp::Parser::AST::DeclStmt^);
                }

                property CppSharp::Parser::AST::DeclStmt^ BeginStmt
                {
                    CppSharp::Parser::AST::DeclStmt^ get();
                    void set(CppSharp::Parser::AST::DeclStmt^);
                }

                property CppSharp::Parser::AST::DeclStmt^ EndStmt
                {
                    CppSharp::Parser::AST::DeclStmt^ get();
                    void set(CppSharp::Parser::AST::DeclStmt^);
                }

                property CppSharp::Parser::AST::DeclStmt^ LoopVarStmt
                {
                    CppSharp::Parser::AST::DeclStmt^ get();
                    void set(CppSharp::Parser::AST::DeclStmt^);
                }

                property CppSharp::Parser::SourceLocation ForLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation CoawaitLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation ColonLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation RParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class MSDependentExistsStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                MSDependentExistsStmt(::CppSharp::CppParser::AST::MSDependentExistsStmt* native);
                static MSDependentExistsStmt^ __CreateInstance(::System::IntPtr native);
                MSDependentExistsStmt();

                MSDependentExistsStmt(CppSharp::Parser::AST::MSDependentExistsStmt^ _0);

                ~MSDependentExistsStmt();

                property CppSharp::Parser::SourceLocation KeywordLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool IsIfExists
                {
                    bool get();
                    void set(bool);
                }

                property bool IsIfNotExists
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::CompoundStmt^ SubStmt
                {
                    CppSharp::Parser::AST::CompoundStmt^ get();
                    void set(CppSharp::Parser::AST::CompoundStmt^);
                }
            };

            public ref class CoroutineBodyStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                enum struct SubStmt
                {
                    Body = 0,
                    Promise = 1,
                    InitSuspend = 2,
                    FinalSuspend = 3,
                    OnException = 4,
                    OnFallthrough = 5,
                    Allocate = 6,
                    Deallocate = 7,
                    ReturnValue = 8,
                    ResultDecl = 9,
                    ReturnStmt = 10,
                    ReturnStmtOnAllocFailure = 11,
                    FirstParamMove = 12
                };

                ref class CtorArgs : ICppInstance
                {
                public:

                    property ::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs* NativePtr;
                    property System::IntPtr __Instance
                    {
                        virtual System::IntPtr get();
                        virtual void set(System::IntPtr instance);
                    }

                    CtorArgs(::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs* native);
                    static CtorArgs^ __CreateInstance(::System::IntPtr native);
                    CtorArgs();

                    CtorArgs(CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs^ _0);

                    ~CtorArgs();

                protected:
                    bool __ownsNativeInstance;
                };

                CoroutineBodyStmt(::CppSharp::CppParser::AST::CoroutineBodyStmt* native);
                static CoroutineBodyStmt^ __CreateInstance(::System::IntPtr native);
                CoroutineBodyStmt();

                CoroutineBodyStmt(CppSharp::Parser::AST::CoroutineBodyStmt^ _0);

                ~CoroutineBodyStmt();

                property bool HasDependentPromiseType
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::Stmt^ Body
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ PromiseDeclStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ InitSuspendStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ FinalSuspendStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ ExceptionHandler
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ FallthroughHandler
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Expr^ Allocate
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ Deallocate
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ ReturnValueInit
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ ResultDecl
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ ReturnStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ ReturnStmtOnAllocFailure
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }
            };

            public ref class CoreturnStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                enum struct SubStmt
                {
                    Operand = 0,
                    PromiseCall = 1,
                    Count = 2
                };

                CoreturnStmt(::CppSharp::CppParser::AST::CoreturnStmt* native);
                static CoreturnStmt^ __CreateInstance(::System::IntPtr native);
                CoreturnStmt();

                CoreturnStmt(CppSharp::Parser::AST::CoreturnStmt^ _0);

                ~CoreturnStmt();

                property bool IsImplicit
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::SourceLocation KeywordLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::Expr^ Operand
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ PromiseCall
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }
            };
        }
    }
}
