// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include <Stmt.h>
#include "Sources.h"

namespace CppSharp
{
    namespace Parser
    {
        ref class SourceRange;
        namespace AST
        {
            enum class IfStatementKind : unsigned int;
            enum class StmtClass;
            ref class AddrLabelExpr;
            ref class AsmStmt;
            ref class AttributedStmt;
            ref class BreakStmt;
            ref class CXXCatchStmt;
            ref class CXXForRangeStmt;
            ref class CXXTryStmt;
            ref class CapturedStmt;
            ref class CaseStmt;
            ref class CompoundStmt;
            ref class ContinueStmt;
            ref class CoreturnStmt;
            ref class CoroutineBodyStmt;
            ref class DeclStmt;
            ref class Declaration;
            ref class DefaultStmt;
            ref class DoStmt;
            ref class Expr;
            ref class ForStmt;
            ref class GCCAsmStmt;
            ref class GotoStmt;
            ref class IfStmt;
            ref class IndirectGotoStmt;
            ref class LabelStmt;
            ref class MSAsmStmt;
            ref class MSDependentExistsStmt;
            ref class NullStmt;
            ref class QualifiedType;
            ref class ReturnStmt;
            ref class SEHExceptStmt;
            ref class SEHFinallyStmt;
            ref class SEHLeaveStmt;
            ref class SEHTryStmt;
            ref class Stmt;
            ref class SwitchCase;
            ref class SwitchStmt;
            ref class ValueStmt;
            ref class WhileStmt;
        }
    }
}

namespace CppSharp
{
    namespace Parser
    {
        namespace AST
        {
            public enum class StmtClass
            {
                NoStmt = 0,
                GCCAsmStmt = 1,
                MSAsmStmt = 2,
                BreakStmt = 3,
                CXXCatchStmt = 4,
                CXXForRangeStmt = 5,
                CXXTryStmt = 6,
                CapturedStmt = 7,
                CompoundStmt = 8,
                ContinueStmt = 9,
                CoreturnStmt = 10,
                CoroutineBodyStmt = 11,
                DeclStmt = 12,
                DoStmt = 13,
                ForStmt = 14,
                GotoStmt = 15,
                IfStmt = 16,
                IndirectGotoStmt = 17,
                MSDependentExistsStmt = 18,
                NullStmt = 19,
                ReturnStmt = 99,
                SEHExceptStmt = 100,
                SEHFinallyStmt = 101,
                SEHLeaveStmt = 102,
                SEHTryStmt = 103,
                CaseStmt = 104,
                DefaultStmt = 105,
                SwitchStmt = 106,
                AttributedStmt = 107,
                BinaryConditionalOperator = 108,
                ConditionalOperator = 109,
                AddrLabelExpr = 110,
                ArrayInitIndexExpr = 111,
                ArrayInitLoopExpr = 112,
                ArraySubscriptExpr = 113,
                ArrayTypeTraitExpr = 114,
                AsTypeExpr = 115,
                AtomicExpr = 116,
                BinaryOperator = 117,
                CompoundAssignOperator = 118,
                BlockExpr = 119,
                CXXBindTemporaryExpr = 120,
                CXXBoolLiteralExpr = 121,
                CXXConstructExpr = 122,
                CXXTemporaryObjectExpr = 123,
                CXXDefaultArgExpr = 124,
                CXXDefaultInitExpr = 125,
                CXXDeleteExpr = 126,
                CXXDependentScopeMemberExpr = 127,
                CXXFoldExpr = 128,
                CXXInheritedCtorInitExpr = 129,
                CXXNewExpr = 130,
                CXXNoexceptExpr = 131,
                CXXNullPtrLiteralExpr = 132,
                CXXParenListInitExpr = 133,
                CXXPseudoDestructorExpr = 134,
                CXXRewrittenBinaryOperator = 135,
                CXXScalarValueInitExpr = 136,
                CXXStdInitializerListExpr = 137,
                CXXThisExpr = 138,
                CXXThrowExpr = 139,
                CXXTypeidExpr = 140,
                CXXUnresolvedConstructExpr = 141,
                CXXUuidofExpr = 142,
                CallExpr = 143,
                CUDAKernelCallExpr = 144,
                CXXMemberCallExpr = 145,
                CXXOperatorCallExpr = 146,
                UserDefinedLiteral = 147,
                BuiltinBitCastExpr = 148,
                CStyleCastExpr = 149,
                CXXFunctionalCastExpr = 150,
                CXXAddrspaceCastExpr = 151,
                CXXConstCastExpr = 152,
                CXXDynamicCastExpr = 153,
                CXXReinterpretCastExpr = 154,
                CXXStaticCastExpr = 155,
                ImplicitCastExpr = 157,
                CharacterLiteral = 158,
                ChooseExpr = 159,
                CompoundLiteralExpr = 160,
                ConceptSpecializationExpr = 161,
                ConvertVectorExpr = 162,
                CoawaitExpr = 163,
                CoyieldExpr = 164,
                DeclRefExpr = 165,
                DependentCoawaitExpr = 166,
                DependentScopeDeclRefExpr = 167,
                DesignatedInitExpr = 168,
                DesignatedInitUpdateExpr = 169,
                ExpressionTraitExpr = 170,
                ExtVectorElementExpr = 171,
                FixedPointLiteral = 172,
                FloatingLiteral = 173,
                ConstantExpr = 174,
                ExprWithCleanups = 175,
                FunctionParmPackExpr = 176,
                GNUNullExpr = 177,
                GenericSelectionExpr = 178,
                ImaginaryLiteral = 179,
                ImplicitValueInitExpr = 180,
                InitListExpr = 181,
                IntegerLiteral = 182,
                LambdaExpr = 183,
                MSPropertyRefExpr = 184,
                MSPropertySubscriptExpr = 185,
                MaterializeTemporaryExpr = 186,
                MatrixSubscriptExpr = 187,
                MemberExpr = 188,
                NoInitExpr = 189,
                OffsetOfExpr = 208,
                OpaqueValueExpr = 209,
                UnresolvedLookupExpr = 210,
                UnresolvedMemberExpr = 211,
                PackExpansionExpr = 212,
                ParenExpr = 213,
                ParenListExpr = 214,
                PredefinedExpr = 215,
                PseudoObjectExpr = 216,
                RecoveryExpr = 217,
                RequiresExpr = 218,
                SYCLUniqueStableNameExpr = 219,
                ShuffleVectorExpr = 220,
                SizeOfPackExpr = 221,
                SourceLocExpr = 222,
                StmtExpr = 223,
                StringLiteral = 224,
                SubstNonTypeTemplateParmExpr = 225,
                SubstNonTypeTemplateParmPackExpr = 226,
                TypeTraitExpr = 227,
                TypoExpr = 228,
                UnaryExprOrTypeTraitExpr = 229,
                UnaryOperator = 230,
                VAArgExpr = 231,
                LabelStmt = 232,
                WhileStmt = 233
            };

            /// <summary>
            /// <para>&gt;</para>
            /// <para>&gt;In an if statement, this denotes whether the statement is&gt;</para>
            /// <para>&gt;a constexpr or consteval if statement.&gt;</para>
            /// <para>&gt;</para>
            /// </summary>
            public enum class IfStatementKind : unsigned int
            {
                Ordinary = 0,
                Constexpr = 1,
                ConstevalNonNegated = 2,
                ConstevalNegated = 3
            };

            public ref class Stmt : ICppInstance
            {
            public:

                /// <summary>&gt;The likelihood of a branch being taken.&gt;</summary>
                enum class Likelihood
                {
                    /// <summary>&gt;Branch has the [[unlikely]] attribute.&gt;</summary>
                    Unlikely = -1,
                    /// <summary>
                    /// <para>&gt;</para>
                    /// <para>&gt;No attribute set or branches of the IfStmt have&gt;</para>
                    /// <para>&gt;the same attribute.&gt;</para>
                    /// <para>&gt;</para>
                    /// </summary>
                    None = 0,
                    /// <summary>&gt;Branch has the [[likely]] attribute.&gt;</summary>
                    Likely = 1
                };

                property class ::CppSharp::CppParser::AST::Stmt* NativePtr;
                property ::System::IntPtr __Instance
                {
                    virtual ::System::IntPtr get();
                    virtual void set(::System::IntPtr instance);
                }

                Stmt(class ::CppSharp::CppParser::AST::Stmt* native);
                Stmt(class ::CppSharp::CppParser::AST::Stmt* native, bool ownNativeInstance);
                static Stmt^ __CreateInstance(::System::IntPtr native);
                static Stmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                Stmt();

                Stmt(CppSharp::Parser::AST::StmtClass klass);

                Stmt(CppSharp::Parser::AST::Stmt^ _0);

                ~Stmt();

                property CppSharp::Parser::AST::StmtClass StmtClass
                {
                    CppSharp::Parser::AST::StmtClass get();
                    void set(CppSharp::Parser::AST::StmtClass);
                }

                property CppSharp::Parser::SourceRange^ SourceRange
                {
                    CppSharp::Parser::SourceRange^ get();
                    void set(CppSharp::Parser::SourceRange^);
                }

                property CppSharp::Parser::SourceLocation BeginLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation EndLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                static operator CppSharp::Parser::AST::Stmt^(CppSharp::Parser::AST::StmtClass klass);

            protected:

                bool __ownsNativeInstance;
            };

            public ref class DeclStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                DeclStmt(class ::CppSharp::CppParser::AST::DeclStmt* native);
                DeclStmt(class ::CppSharp::CppParser::AST::DeclStmt* native, bool ownNativeInstance);
                static DeclStmt^ __CreateInstance(::System::IntPtr native);
                static DeclStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                DeclStmt();

                DeclStmt(CppSharp::Parser::AST::DeclStmt^ _0);

                ~DeclStmt();

                property ::System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ Decls
                {
                    ::System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ get();
                    void set(::System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^);
                }

                property bool IsSingleDecl
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int GetdeclsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Declaration^ Getdecls(unsigned int i);

                void Adddecls(CppSharp::Parser::AST::Declaration^ s);

                void Cleardecls();
            };

            public ref class NullStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                NullStmt(class ::CppSharp::CppParser::AST::NullStmt* native);
                NullStmt(class ::CppSharp::CppParser::AST::NullStmt* native, bool ownNativeInstance);
                static NullStmt^ __CreateInstance(::System::IntPtr native);
                static NullStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                NullStmt();

                NullStmt(CppSharp::Parser::AST::NullStmt^ _0);

                ~NullStmt();

                property CppSharp::Parser::SourceLocation SemiLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool HasLeadingEmptyMacro
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class CompoundStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                CompoundStmt(class ::CppSharp::CppParser::AST::CompoundStmt* native);
                CompoundStmt(class ::CppSharp::CppParser::AST::CompoundStmt* native, bool ownNativeInstance);
                static CompoundStmt^ __CreateInstance(::System::IntPtr native);
                static CompoundStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                CompoundStmt();

                CompoundStmt(CppSharp::Parser::AST::CompoundStmt^ _0);

                ~CompoundStmt();

                property ::System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^ Body
                {
                    ::System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^ get();
                    void set(::System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^);
                }

                property bool BodyEmpty
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int Size
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property bool HasStoredFPFeatures
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::SourceLocation LBracLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation RBracLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property unsigned int GetbodyCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Stmt^ Getbody(unsigned int i);

                void Addbody(CppSharp::Parser::AST::Stmt^ s);

                void Clearbody();
            };

            public ref class SwitchCase : CppSharp::Parser::AST::Stmt
            {
            public:

                SwitchCase(class ::CppSharp::CppParser::AST::SwitchCase* native);
                SwitchCase(class ::CppSharp::CppParser::AST::SwitchCase* native, bool ownNativeInstance);
                static SwitchCase^ __CreateInstance(::System::IntPtr native);
                static SwitchCase^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                SwitchCase();

                SwitchCase(CppSharp::Parser::AST::StmtClass klass);

                SwitchCase(CppSharp::Parser::AST::SwitchCase^ _0);

                ~SwitchCase();

                property CppSharp::Parser::SourceLocation KeywordLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation ColonLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                static operator CppSharp::Parser::AST::SwitchCase^(CppSharp::Parser::AST::StmtClass klass);
            };

            public ref class CaseStmt : CppSharp::Parser::AST::SwitchCase
            {
            public:

                CaseStmt(class ::CppSharp::CppParser::AST::CaseStmt* native);
                CaseStmt(class ::CppSharp::CppParser::AST::CaseStmt* native, bool ownNativeInstance);
                static CaseStmt^ __CreateInstance(::System::IntPtr native);
                static CaseStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                CaseStmt();

                CaseStmt(CppSharp::Parser::AST::CaseStmt^ _0);

                ~CaseStmt();

                property bool CaseStmtIsGNURange
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::SourceLocation CaseLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation EllipsisLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::Expr^ LHS
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ RHS
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ SubStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }
            };

            public ref class DefaultStmt : CppSharp::Parser::AST::SwitchCase
            {
            public:

                DefaultStmt(class ::CppSharp::CppParser::AST::DefaultStmt* native);
                DefaultStmt(class ::CppSharp::CppParser::AST::DefaultStmt* native, bool ownNativeInstance);
                static DefaultStmt^ __CreateInstance(::System::IntPtr native);
                static DefaultStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                DefaultStmt();

                DefaultStmt(CppSharp::Parser::AST::DefaultStmt^ _0);

                ~DefaultStmt();

                property CppSharp::Parser::AST::Stmt^ SubStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::SourceLocation DefaultLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class ValueStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                ValueStmt(class ::CppSharp::CppParser::AST::ValueStmt* native);
                ValueStmt(class ::CppSharp::CppParser::AST::ValueStmt* native, bool ownNativeInstance);
                static ValueStmt^ __CreateInstance(::System::IntPtr native);
                static ValueStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                ValueStmt();

                ValueStmt(CppSharp::Parser::AST::StmtClass klass);

                ValueStmt(CppSharp::Parser::AST::ValueStmt^ _0);

                ~ValueStmt();

                static operator CppSharp::Parser::AST::ValueStmt^(CppSharp::Parser::AST::StmtClass klass);
            };

            public ref class LabelStmt : CppSharp::Parser::AST::ValueStmt
            {
            public:

                LabelStmt(class ::CppSharp::CppParser::AST::LabelStmt* native);
                LabelStmt(class ::CppSharp::CppParser::AST::LabelStmt* native, bool ownNativeInstance);
                static LabelStmt^ __CreateInstance(::System::IntPtr native);
                static LabelStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                LabelStmt();

                LabelStmt(CppSharp::Parser::AST::LabelStmt^ _0);

                ~LabelStmt();

                property CppSharp::Parser::SourceLocation IdentLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property ::System::String^ Name
                {
                    ::System::String^ get();
                    void set(::System::String^);
                }

                property CppSharp::Parser::AST::Stmt^ SubStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property bool SideEntry
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class AttributedStmt : CppSharp::Parser::AST::ValueStmt
            {
            public:

                AttributedStmt(class ::CppSharp::CppParser::AST::AttributedStmt* native);
                AttributedStmt(class ::CppSharp::CppParser::AST::AttributedStmt* native, bool ownNativeInstance);
                static AttributedStmt^ __CreateInstance(::System::IntPtr native);
                static AttributedStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                AttributedStmt();

                AttributedStmt(CppSharp::Parser::AST::AttributedStmt^ _0);

                ~AttributedStmt();

                property CppSharp::Parser::SourceLocation AttrLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class IfStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                IfStmt(class ::CppSharp::CppParser::AST::IfStmt* native);
                IfStmt(class ::CppSharp::CppParser::AST::IfStmt* native, bool ownNativeInstance);
                static IfStmt^ __CreateInstance(::System::IntPtr native);
                static IfStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                IfStmt();

                IfStmt(CppSharp::Parser::AST::IfStmt^ _0);

                ~IfStmt();

                property bool HasInitStorage
                {
                    bool get();
                    void set(bool);
                }

                property bool HasVarStorage
                {
                    bool get();
                    void set(bool);
                }

                property bool HasElseStorage
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::Expr^ Cond
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ Then
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ Else
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::DeclStmt^ ConditionVariableDeclStmt
                {
                    CppSharp::Parser::AST::DeclStmt^ get();
                    void set(CppSharp::Parser::AST::DeclStmt^);
                }

                property CppSharp::Parser::AST::Stmt^ Init
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::SourceLocation IfLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation ElseLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool IsConsteval
                {
                    bool get();
                    void set(bool);
                }

                property bool IsNonNegatedConsteval
                {
                    bool get();
                    void set(bool);
                }

                property bool IsNegatedConsteval
                {
                    bool get();
                    void set(bool);
                }

                property bool IsConstexpr
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::IfStatementKind StatementKind
                {
                    CppSharp::Parser::AST::IfStatementKind get();
                    void set(CppSharp::Parser::AST::IfStatementKind);
                }

                property bool IsObjCAvailabilityCheck
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::SourceLocation LParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation RParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class SwitchStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                SwitchStmt(class ::CppSharp::CppParser::AST::SwitchStmt* native);
                SwitchStmt(class ::CppSharp::CppParser::AST::SwitchStmt* native, bool ownNativeInstance);
                static SwitchStmt^ __CreateInstance(::System::IntPtr native);
                static SwitchStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                SwitchStmt();

                SwitchStmt(CppSharp::Parser::AST::SwitchStmt^ _0);

                ~SwitchStmt();

                property bool HasInitStorage
                {
                    bool get();
                    void set(bool);
                }

                property bool HasVarStorage
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::Expr^ Cond
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ Body
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ Init
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::DeclStmt^ ConditionVariableDeclStmt
                {
                    CppSharp::Parser::AST::DeclStmt^ get();
                    void set(CppSharp::Parser::AST::DeclStmt^);
                }

                property CppSharp::Parser::SourceLocation SwitchLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation LParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation RParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool IsAllEnumCasesCovered
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class WhileStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                WhileStmt(class ::CppSharp::CppParser::AST::WhileStmt* native);
                WhileStmt(class ::CppSharp::CppParser::AST::WhileStmt* native, bool ownNativeInstance);
                static WhileStmt^ __CreateInstance(::System::IntPtr native);
                static WhileStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                WhileStmt();

                WhileStmt(CppSharp::Parser::AST::WhileStmt^ _0);

                ~WhileStmt();

                property bool HasVarStorage
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::Expr^ Cond
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ Body
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::DeclStmt^ ConditionVariableDeclStmt
                {
                    CppSharp::Parser::AST::DeclStmt^ get();
                    void set(CppSharp::Parser::AST::DeclStmt^);
                }

                property CppSharp::Parser::SourceLocation WhileLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation LParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation RParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class DoStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                DoStmt(class ::CppSharp::CppParser::AST::DoStmt* native);
                DoStmt(class ::CppSharp::CppParser::AST::DoStmt* native, bool ownNativeInstance);
                static DoStmt^ __CreateInstance(::System::IntPtr native);
                static DoStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                DoStmt();

                DoStmt(CppSharp::Parser::AST::DoStmt^ _0);

                ~DoStmt();

                property CppSharp::Parser::AST::Expr^ Cond
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ Body
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::SourceLocation DoLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation WhileLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation RParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class ForStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                ForStmt(class ::CppSharp::CppParser::AST::ForStmt* native);
                ForStmt(class ::CppSharp::CppParser::AST::ForStmt* native, bool ownNativeInstance);
                static ForStmt^ __CreateInstance(::System::IntPtr native);
                static ForStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                ForStmt();

                ForStmt(CppSharp::Parser::AST::ForStmt^ _0);

                ~ForStmt();

                property CppSharp::Parser::AST::Stmt^ Init
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::DeclStmt^ ConditionVariableDeclStmt
                {
                    CppSharp::Parser::AST::DeclStmt^ get();
                    void set(CppSharp::Parser::AST::DeclStmt^);
                }

                property CppSharp::Parser::AST::Expr^ Cond
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ Inc
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ Body
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::SourceLocation ForLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation LParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation RParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class GotoStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                GotoStmt(class ::CppSharp::CppParser::AST::GotoStmt* native);
                GotoStmt(class ::CppSharp::CppParser::AST::GotoStmt* native, bool ownNativeInstance);
                static GotoStmt^ __CreateInstance(::System::IntPtr native);
                static GotoStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                GotoStmt();

                GotoStmt(CppSharp::Parser::AST::GotoStmt^ _0);

                ~GotoStmt();

                property CppSharp::Parser::SourceLocation GotoLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation LabelLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class IndirectGotoStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                IndirectGotoStmt(class ::CppSharp::CppParser::AST::IndirectGotoStmt* native);
                IndirectGotoStmt(class ::CppSharp::CppParser::AST::IndirectGotoStmt* native, bool ownNativeInstance);
                static IndirectGotoStmt^ __CreateInstance(::System::IntPtr native);
                static IndirectGotoStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                IndirectGotoStmt();

                IndirectGotoStmt(CppSharp::Parser::AST::IndirectGotoStmt^ _0);

                ~IndirectGotoStmt();

                property CppSharp::Parser::SourceLocation GotoLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation StarLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::Expr^ Target
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }
            };

            public ref class ContinueStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                ContinueStmt(class ::CppSharp::CppParser::AST::ContinueStmt* native);
                ContinueStmt(class ::CppSharp::CppParser::AST::ContinueStmt* native, bool ownNativeInstance);
                static ContinueStmt^ __CreateInstance(::System::IntPtr native);
                static ContinueStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                ContinueStmt();

                ContinueStmt(CppSharp::Parser::AST::ContinueStmt^ _0);

                ~ContinueStmt();

                property CppSharp::Parser::SourceLocation ContinueLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class BreakStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                BreakStmt(class ::CppSharp::CppParser::AST::BreakStmt* native);
                BreakStmt(class ::CppSharp::CppParser::AST::BreakStmt* native, bool ownNativeInstance);
                static BreakStmt^ __CreateInstance(::System::IntPtr native);
                static BreakStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                BreakStmt();

                BreakStmt(CppSharp::Parser::AST::BreakStmt^ _0);

                ~BreakStmt();

                property CppSharp::Parser::SourceLocation BreakLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class ReturnStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                ReturnStmt(class ::CppSharp::CppParser::AST::ReturnStmt* native);
                ReturnStmt(class ::CppSharp::CppParser::AST::ReturnStmt* native, bool ownNativeInstance);
                static ReturnStmt^ __CreateInstance(::System::IntPtr native);
                static ReturnStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                ReturnStmt();

                ReturnStmt(CppSharp::Parser::AST::ReturnStmt^ _0);

                ~ReturnStmt();

                property CppSharp::Parser::AST::Expr^ RetValue
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::SourceLocation ReturnLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class AsmStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                AsmStmt(class ::CppSharp::CppParser::AST::AsmStmt* native);
                AsmStmt(class ::CppSharp::CppParser::AST::AsmStmt* native, bool ownNativeInstance);
                static AsmStmt^ __CreateInstance(::System::IntPtr native);
                static AsmStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                AsmStmt();

                AsmStmt(CppSharp::Parser::AST::StmtClass klass);

                AsmStmt(CppSharp::Parser::AST::AsmStmt^ _0);

                ~AsmStmt();

                property ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ Inputs
                {
                    ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ get();
                    void set(::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^);
                }

                property ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ Outputs
                {
                    ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ get();
                    void set(::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^);
                }

                property CppSharp::Parser::SourceLocation AsmLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool Simple
                {
                    bool get();
                    void set(bool);
                }

                property bool Volatile
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int NumOutputs
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int NumPlusOperands
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int NumInputs
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int NumClobbers
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int GetinputsCount
                {
                    unsigned int get();
                }

                property unsigned int GetoutputsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Expr^ Getinputs(unsigned int i);

                void Addinputs(CppSharp::Parser::AST::Expr^ s);

                void Clearinputs();

                CppSharp::Parser::AST::Expr^ Getoutputs(unsigned int i);

                void Addoutputs(CppSharp::Parser::AST::Expr^ s);

                void Clearoutputs();

                static operator CppSharp::Parser::AST::AsmStmt^(CppSharp::Parser::AST::StmtClass klass);
            };

            public ref class GCCAsmStmt : CppSharp::Parser::AST::AsmStmt
            {
            public:

                ref class AsmStringPiece : ICppInstance
                {
                public:

                    enum class Kind
                    {
                        String = 0,
                        Operand = 1
                    };

                    property class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece* NativePtr;
                    property ::System::IntPtr __Instance
                    {
                        virtual ::System::IntPtr get();
                        virtual void set(::System::IntPtr instance);
                    }

                    AsmStringPiece(class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece* native);
                    AsmStringPiece(class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece* native, bool ownNativeInstance);
                    static AsmStringPiece^ __CreateInstance(::System::IntPtr native);
                    static AsmStringPiece^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                    AsmStringPiece();

                    AsmStringPiece(CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece^ _0);

                    ~AsmStringPiece();

                    property bool IsString
                    {
                        bool get();
                        void set(bool);
                    }

                    property bool IsOperand
                    {
                        bool get();
                        void set(bool);
                    }

                    property ::System::String^ String
                    {
                        ::System::String^ get();
                        void set(::System::String^);
                    }

                    property unsigned int OperandNo
                    {
                        unsigned int get();
                        void set(unsigned int);
                    }

                    property char Modifier
                    {
                        char get();
                        void set(char);
                    }

                protected:

                    bool __ownsNativeInstance;
                };

                GCCAsmStmt(class ::CppSharp::CppParser::AST::GCCAsmStmt* native);
                GCCAsmStmt(class ::CppSharp::CppParser::AST::GCCAsmStmt* native, bool ownNativeInstance);
                static GCCAsmStmt^ __CreateInstance(::System::IntPtr native);
                static GCCAsmStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                GCCAsmStmt();

                GCCAsmStmt(CppSharp::Parser::AST::GCCAsmStmt^ _0);

                ~GCCAsmStmt();

                property ::System::Collections::Generic::List<CppSharp::Parser::AST::AddrLabelExpr^>^ Labels
                {
                    ::System::Collections::Generic::List<CppSharp::Parser::AST::AddrLabelExpr^>^ get();
                    void set(::System::Collections::Generic::List<CppSharp::Parser::AST::AddrLabelExpr^>^);
                }

                property CppSharp::Parser::SourceLocation RParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool IsAsmGoto
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int NumLabels
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int GetlabelsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::AddrLabelExpr^ Getlabels(unsigned int i);

                void Addlabels(CppSharp::Parser::AST::AddrLabelExpr^ s);

                void Clearlabels();
            };

            public ref class MSAsmStmt : CppSharp::Parser::AST::AsmStmt
            {
            public:

                MSAsmStmt(class ::CppSharp::CppParser::AST::MSAsmStmt* native);
                MSAsmStmt(class ::CppSharp::CppParser::AST::MSAsmStmt* native, bool ownNativeInstance);
                static MSAsmStmt^ __CreateInstance(::System::IntPtr native);
                static MSAsmStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                MSAsmStmt();

                MSAsmStmt(CppSharp::Parser::AST::MSAsmStmt^ _0);

                ~MSAsmStmt();

                property CppSharp::Parser::SourceLocation LBraceLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool HasBraces
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int NumAsmToks
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property ::System::String^ AsmString
                {
                    ::System::String^ get();
                    void set(::System::String^);
                }
            };

            public ref class SEHExceptStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                SEHExceptStmt(class ::CppSharp::CppParser::AST::SEHExceptStmt* native);
                SEHExceptStmt(class ::CppSharp::CppParser::AST::SEHExceptStmt* native, bool ownNativeInstance);
                static SEHExceptStmt^ __CreateInstance(::System::IntPtr native);
                static SEHExceptStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                SEHExceptStmt();

                SEHExceptStmt(CppSharp::Parser::AST::SEHExceptStmt^ _0);

                ~SEHExceptStmt();

                property CppSharp::Parser::SourceLocation ExceptLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::Expr^ FilterExpr
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::CompoundStmt^ Block
                {
                    CppSharp::Parser::AST::CompoundStmt^ get();
                    void set(CppSharp::Parser::AST::CompoundStmt^);
                }
            };

            public ref class SEHFinallyStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                SEHFinallyStmt(class ::CppSharp::CppParser::AST::SEHFinallyStmt* native);
                SEHFinallyStmt(class ::CppSharp::CppParser::AST::SEHFinallyStmt* native, bool ownNativeInstance);
                static SEHFinallyStmt^ __CreateInstance(::System::IntPtr native);
                static SEHFinallyStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                SEHFinallyStmt();

                SEHFinallyStmt(CppSharp::Parser::AST::SEHFinallyStmt^ _0);

                ~SEHFinallyStmt();

                property CppSharp::Parser::SourceLocation FinallyLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::CompoundStmt^ Block
                {
                    CppSharp::Parser::AST::CompoundStmt^ get();
                    void set(CppSharp::Parser::AST::CompoundStmt^);
                }
            };

            public ref class SEHTryStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                SEHTryStmt(class ::CppSharp::CppParser::AST::SEHTryStmt* native);
                SEHTryStmt(class ::CppSharp::CppParser::AST::SEHTryStmt* native, bool ownNativeInstance);
                static SEHTryStmt^ __CreateInstance(::System::IntPtr native);
                static SEHTryStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                SEHTryStmt();

                SEHTryStmt(CppSharp::Parser::AST::SEHTryStmt^ _0);

                ~SEHTryStmt();

                property CppSharp::Parser::SourceLocation TryLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool IsCXXTry
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::CompoundStmt^ TryBlock
                {
                    CppSharp::Parser::AST::CompoundStmt^ get();
                    void set(CppSharp::Parser::AST::CompoundStmt^);
                }

                property CppSharp::Parser::AST::Stmt^ Handler
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::SEHExceptStmt^ ExceptHandler
                {
                    CppSharp::Parser::AST::SEHExceptStmt^ get();
                    void set(CppSharp::Parser::AST::SEHExceptStmt^);
                }

                property CppSharp::Parser::AST::SEHFinallyStmt^ FinallyHandler
                {
                    CppSharp::Parser::AST::SEHFinallyStmt^ get();
                    void set(CppSharp::Parser::AST::SEHFinallyStmt^);
                }
            };

            public ref class SEHLeaveStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                SEHLeaveStmt(class ::CppSharp::CppParser::AST::SEHLeaveStmt* native);
                SEHLeaveStmt(class ::CppSharp::CppParser::AST::SEHLeaveStmt* native, bool ownNativeInstance);
                static SEHLeaveStmt^ __CreateInstance(::System::IntPtr native);
                static SEHLeaveStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                SEHLeaveStmt();

                SEHLeaveStmt(CppSharp::Parser::AST::SEHLeaveStmt^ _0);

                ~SEHLeaveStmt();

                property CppSharp::Parser::SourceLocation LeaveLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class CapturedStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                /// <summary>
                /// <para>&gt;</para>
                /// <para>&gt;The different capture forms: by 'this', by reference, capture for&gt;</para>
                /// <para>&gt;variable-length array type etc.&gt;</para>
                /// <para>&gt;</para>
                /// </summary>
                enum class VariableCaptureKind
                {
                    This = 0,
                    ByRef = 1,
                    ByCopy = 2,
                    VLAType = 3
                };

                ref class Capture : ICppInstance
                {
                public:

                    property class ::CppSharp::CppParser::AST::CapturedStmt::Capture* NativePtr;
                    property ::System::IntPtr __Instance
                    {
                        virtual ::System::IntPtr get();
                        virtual void set(::System::IntPtr instance);
                    }

                    Capture(class ::CppSharp::CppParser::AST::CapturedStmt::Capture* native);
                    Capture(class ::CppSharp::CppParser::AST::CapturedStmt::Capture* native, bool ownNativeInstance);
                    static Capture^ __CreateInstance(::System::IntPtr native);
                    static Capture^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                    Capture();

                    Capture(CppSharp::Parser::AST::CapturedStmt::Capture^ _0);

                    ~Capture();

                    property CppSharp::Parser::AST::CapturedStmt::VariableCaptureKind CaptureKind
                    {
                        CppSharp::Parser::AST::CapturedStmt::VariableCaptureKind get();
                        void set(CppSharp::Parser::AST::CapturedStmt::VariableCaptureKind);
                    }

                    property CppSharp::Parser::SourceLocation Location
                    {
                        CppSharp::Parser::SourceLocation get();
                        void set(CppSharp::Parser::SourceLocation);
                    }

                    property bool CapturesThis
                    {
                        bool get();
                        void set(bool);
                    }

                    property bool CapturesVariable
                    {
                        bool get();
                        void set(bool);
                    }

                    property bool CapturesVariableByCopy
                    {
                        bool get();
                        void set(bool);
                    }

                    property bool CapturesVariableArrayType
                    {
                        bool get();
                        void set(bool);
                    }

                protected:

                    bool __ownsNativeInstance;
                };

                CapturedStmt(class ::CppSharp::CppParser::AST::CapturedStmt* native);
                CapturedStmt(class ::CppSharp::CppParser::AST::CapturedStmt* native, bool ownNativeInstance);
                static CapturedStmt^ __CreateInstance(::System::IntPtr native);
                static CapturedStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                CapturedStmt();

                CapturedStmt(CppSharp::Parser::AST::CapturedStmt^ _0);

                ~CapturedStmt();

                property ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ CaptureInits
                {
                    ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ get();
                    void set(::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^);
                }

                property unsigned int CaptureSize
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property CppSharp::Parser::SourceRange^ SourceRange
                {
                    CppSharp::Parser::SourceRange^ get();
                    void set(CppSharp::Parser::SourceRange^);
                }

                property unsigned int GetcaptureInitsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Expr^ GetcaptureInits(unsigned int i);

                void AddcaptureInits(CppSharp::Parser::AST::Expr^ s);

                void ClearcaptureInits();
            };

            public ref class CXXCatchStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                CXXCatchStmt(class ::CppSharp::CppParser::AST::CXXCatchStmt* native);
                CXXCatchStmt(class ::CppSharp::CppParser::AST::CXXCatchStmt* native, bool ownNativeInstance);
                static CXXCatchStmt^ __CreateInstance(::System::IntPtr native);
                static CXXCatchStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                CXXCatchStmt();

                CXXCatchStmt(CppSharp::Parser::AST::CXXCatchStmt^ _0);

                ~CXXCatchStmt();

                property CppSharp::Parser::SourceLocation CatchLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::QualifiedType^ CaughtType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::Stmt^ HandlerBlock
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }
            };

            public ref class CXXTryStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                CXXTryStmt(class ::CppSharp::CppParser::AST::CXXTryStmt* native);
                CXXTryStmt(class ::CppSharp::CppParser::AST::CXXTryStmt* native, bool ownNativeInstance);
                static CXXTryStmt^ __CreateInstance(::System::IntPtr native);
                static CXXTryStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                CXXTryStmt();

                CXXTryStmt(CppSharp::Parser::AST::CXXTryStmt^ _0);

                ~CXXTryStmt();

                property CppSharp::Parser::SourceLocation TryLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property unsigned int NumHandlers
                {
                    unsigned int get();
                    void set(unsigned int);
                }
            };

            public ref class CXXForRangeStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                CXXForRangeStmt(class ::CppSharp::CppParser::AST::CXXForRangeStmt* native);
                CXXForRangeStmt(class ::CppSharp::CppParser::AST::CXXForRangeStmt* native, bool ownNativeInstance);
                static CXXForRangeStmt^ __CreateInstance(::System::IntPtr native);
                static CXXForRangeStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                CXXForRangeStmt();

                CXXForRangeStmt(CppSharp::Parser::AST::CXXForRangeStmt^ _0);

                ~CXXForRangeStmt();

                property CppSharp::Parser::AST::Stmt^ Init
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Expr^ RangeInit
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ Cond
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ Inc
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ Body
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::SourceLocation ForLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation CoawaitLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation ColonLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::SourceLocation RParenLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }
            };

            public ref class MSDependentExistsStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                MSDependentExistsStmt(class ::CppSharp::CppParser::AST::MSDependentExistsStmt* native);
                MSDependentExistsStmt(class ::CppSharp::CppParser::AST::MSDependentExistsStmt* native, bool ownNativeInstance);
                static MSDependentExistsStmt^ __CreateInstance(::System::IntPtr native);
                static MSDependentExistsStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                MSDependentExistsStmt();

                MSDependentExistsStmt(CppSharp::Parser::AST::MSDependentExistsStmt^ _0);

                ~MSDependentExistsStmt();

                property CppSharp::Parser::SourceLocation KeywordLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property bool IsIfExists
                {
                    bool get();
                    void set(bool);
                }

                property bool IsIfNotExists
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::CompoundStmt^ SubStmt
                {
                    CppSharp::Parser::AST::CompoundStmt^ get();
                    void set(CppSharp::Parser::AST::CompoundStmt^);
                }
            };

            public ref class CoroutineBodyStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                enum class SubStmt
                {
                    /// <summary>&gt;The body of the coroutine.&gt;</summary>
                    Body = 0,
                    /// <summary>&gt;The promise statement.&gt;</summary>
                    Promise = 1,
                    /// <summary>&gt;The initial suspend statement, run before the body.&gt;</summary>
                    InitSuspend = 2,
                    /// <summary>&gt;The final suspend statement, run after the body.&gt;</summary>
                    FinalSuspend = 3,
                    /// <summary>&gt;Handler for exceptions thrown in the body.&gt;</summary>
                    OnException = 4,
                    /// <summary>&gt;Handler for control flow falling off the body.&gt;</summary>
                    OnFallthrough = 5,
                    /// <summary>&gt;Coroutine frame memory allocation.&gt;</summary>
                    Allocate = 6,
                    /// <summary>&gt;Coroutine frame memory deallocation.&gt;</summary>
                    Deallocate = 7,
                    /// <summary>&gt;Declaration holding the result of get_return_object.&gt;</summary>
                    ResultDecl = 8,
                    /// <summary>&gt;Return value for thunk function: p.get_return_object().&gt;</summary>
                    ReturnValue = 9,
                    /// <summary>&gt;Return statement for the thunk function.&gt;</summary>
                    ReturnStmt = 10,
                    /// <summary>&gt;Return statement if allocation failed.&gt;</summary>
                    ReturnStmtOnAllocFailure = 11,
                    /// <summary>&gt;First offset for move construction of parameter copies.&gt;</summary>
                    FirstParamMove = 12
                };

                ref class CtorArgs : ICppInstance
                {
                public:

                    property class ::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs* NativePtr;
                    property ::System::IntPtr __Instance
                    {
                        virtual ::System::IntPtr get();
                        virtual void set(::System::IntPtr instance);
                    }

                    CtorArgs(class ::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs* native);
                    CtorArgs(class ::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs* native, bool ownNativeInstance);
                    static CtorArgs^ __CreateInstance(::System::IntPtr native);
                    static CtorArgs^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                    CtorArgs();

                    CtorArgs(CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs^ _0);

                    ~CtorArgs();

                protected:

                    bool __ownsNativeInstance;
                };

                CoroutineBodyStmt(class ::CppSharp::CppParser::AST::CoroutineBodyStmt* native);
                CoroutineBodyStmt(class ::CppSharp::CppParser::AST::CoroutineBodyStmt* native, bool ownNativeInstance);
                static CoroutineBodyStmt^ __CreateInstance(::System::IntPtr native);
                static CoroutineBodyStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                CoroutineBodyStmt();

                CoroutineBodyStmt(CppSharp::Parser::AST::CoroutineBodyStmt^ _0);

                ~CoroutineBodyStmt();

                property ::System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^ ChildrenExclBody
                {
                    ::System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^ get();
                    void set(::System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^);
                }

                property bool HasDependentPromiseType
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::CompoundStmt^ Body
                {
                    CppSharp::Parser::AST::CompoundStmt^ get();
                    void set(CppSharp::Parser::AST::CompoundStmt^);
                }

                property CppSharp::Parser::AST::Stmt^ PromiseDeclStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ InitSuspendStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ FinalSuspendStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ ExceptionHandler
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ FallthroughHandler
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Expr^ Allocate
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ Deallocate
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ ResultDecl
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Expr^ ReturnValueInit
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ ReturnValue
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Stmt^ ReturnStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::Stmt^ ReturnStmtOnAllocFailure
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property unsigned int GetchildrenExclBodyCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Stmt^ GetchildrenExclBody(unsigned int i);

                void AddchildrenExclBody(CppSharp::Parser::AST::Stmt^ s);

                void ClearchildrenExclBody();
            };

            public ref class CoreturnStmt : CppSharp::Parser::AST::Stmt
            {
            public:

                enum class SubStmt
                {
                    Operand = 0,
                    PromiseCall = 1,
                    Count = 2
                };

                CoreturnStmt(class ::CppSharp::CppParser::AST::CoreturnStmt* native);
                CoreturnStmt(class ::CppSharp::CppParser::AST::CoreturnStmt* native, bool ownNativeInstance);
                static CoreturnStmt^ __CreateInstance(::System::IntPtr native);
                static CoreturnStmt^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                CoreturnStmt();

                CoreturnStmt(CppSharp::Parser::AST::CoreturnStmt^ _0);

                ~CoreturnStmt();

                property CppSharp::Parser::SourceLocation KeywordLoc
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property CppSharp::Parser::AST::Expr^ Operand
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property CppSharp::Parser::AST::Expr^ PromiseCall
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property bool IsImplicit
                {
                    bool get();
                    void set(bool);
                }
            };
        }
    }
}
