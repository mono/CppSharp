// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include <Decl.h>
#include "Sources.h"

namespace CppSharp
{
    namespace Parser
    {
        namespace AST
        {
            enum class AccessSpecifier;
            enum class CXXMethodKind;
            enum class CXXOperatorKind;
            enum class CallingConvention;
            enum class CppAbi;
            enum class DeclarationKind;
            enum class FriendKind;
            enum class MacroLocation;
            enum class RecordArgABI;
            enum class RefQualifierKind;
            enum class StatementClassObsolete;
            enum class TemplateSpecializationKind;
            enum class VTableComponentKind;
            ref class ASTContext;
            ref class AccessSpecifierDecl;
            ref class BaseClassSpecifier;
            ref class BinaryOperatorObsolete;
            ref class BuiltinType;
            ref class CXXConstructExprObsolete;
            ref class CallExprObsolete;
            ref class Class;
            ref class ClassLayout;
            ref class ClassTemplate;
            ref class ClassTemplatePartialSpecialization;
            ref class ClassTemplateSpecialization;
            ref class Declaration;
            ref class DeclarationContext;
            ref class Enumeration;
            ref class Expr;
            ref class ExpressionObsolete;
            ref class Field;
            ref class Friend;
            ref class Function;
            ref class FunctionTemplate;
            ref class FunctionTemplateSpecialization;
            ref class LayoutBase;
            ref class LayoutField;
            ref class MacroDefinition;
            ref class MacroExpansion;
            ref class Method;
            ref class Namespace;
            ref class NonTypeTemplateParameter;
            ref class Parameter;
            ref class PreprocessedEntity;
            ref class QualifiedType;
            ref class RawComment;
            ref class StatementObsolete;
            ref class Stmt;
            ref class Template;
            ref class TemplateArgument;
            ref class TemplateParameter;
            ref class TemplateTemplateParameter;
            ref class TranslationUnit;
            ref class Type;
            ref class TypeAlias;
            ref class TypeAliasTemplate;
            ref class TypeTemplateParameter;
            ref class TypedefDecl;
            ref class TypedefNameDecl;
            ref class UnresolvedUsingTypename;
            ref class VFTableInfo;
            ref class VTableComponent;
            ref class VTableLayout;
            ref class VarTemplate;
            ref class VarTemplatePartialSpecialization;
            ref class VarTemplateSpecialization;
            ref class Variable;
        }
    }
}

namespace CppSharp
{
    namespace Parser
    {
        namespace AST
        {
            public enum class DeclarationKind
            {
                DeclarationContext = 0,
                Typedef = 1,
                TypeAlias = 2,
                Parameter = 3,
                Function = 4,
                Method = 5,
                Enumeration = 6,
                EnumerationItem = 7,
                Variable = 8,
                Field = 9,
                AccessSpecifier = 10,
                Class = 11,
                Template = 12,
                TypeAliasTemplate = 13,
                ClassTemplate = 14,
                ClassTemplateSpecialization = 15,
                ClassTemplatePartialSpecialization = 16,
                FunctionTemplate = 17,
                Namespace = 18,
                PreprocessedEntity = 19,
                MacroDefinition = 20,
                MacroExpansion = 21,
                TranslationUnit = 22,
                Friend = 23,
                TemplateTemplateParm = 24,
                TemplateTypeParm = 25,
                NonTypeTemplateParm = 26,
                VarTemplate = 27,
                VarTemplateSpecialization = 28,
                VarTemplatePartialSpecialization = 29,
                UnresolvedUsingTypename = 30
            };

            public enum class AccessSpecifier
            {
                Private = 0,
                Protected = 1,
                Public = 2
            };

            public enum class MacroLocation
            {
                Unknown = 0,
                ClassHead = 1,
                ClassBody = 2,
                FunctionHead = 3,
                FunctionParameters = 4,
                FunctionBody = 5
            };

            public enum class StatementClassObsolete
            {
                Any = 0,
                BinaryOperator = 1,
                CallExprClass = 2,
                DeclRefExprClass = 3,
                CXXConstructExprClass = 4,
                CXXOperatorCallExpr = 5,
                ImplicitCastExpr = 6,
                ExplicitCastExpr = 7
            };

            public enum class FriendKind
            {
                None = 0,
                Declared = 1,
                Undeclared = 2
            };

            public enum class CXXOperatorKind
            {
                None = 0,
                New = 1,
                Delete = 2,
                ArrayNew = 3,
                ArrayDelete = 4,
                Plus = 5,
                Minus = 6,
                Star = 7,
                Slash = 8,
                Percent = 9,
                Caret = 10,
                Amp = 11,
                Pipe = 12,
                Tilde = 13,
                Exclaim = 14,
                Equal = 15,
                Less = 16,
                Greater = 17,
                PlusEqual = 18,
                MinusEqual = 19,
                StarEqual = 20,
                SlashEqual = 21,
                PercentEqual = 22,
                CaretEqual = 23,
                AmpEqual = 24,
                PipeEqual = 25,
                LessLess = 26,
                GreaterGreater = 27,
                LessLessEqual = 28,
                GreaterGreaterEqual = 29,
                EqualEqual = 30,
                ExclaimEqual = 31,
                LessEqual = 32,
                GreaterEqual = 33,
                Spaceship = 34,
                AmpAmp = 35,
                PipePipe = 36,
                PlusPlus = 37,
                MinusMinus = 38,
                Comma = 39,
                ArrowStar = 40,
                Arrow = 41,
                Call = 42,
                Subscript = 43,
                Conditional = 44,
                Coawait = 45
            };

            public enum class TemplateSpecializationKind
            {
                Undeclared = 0,
                ImplicitInstantiation = 1,
                ExplicitSpecialization = 2,
                ExplicitInstantiationDeclaration = 3,
                ExplicitInstantiationDefinition = 4
            };

            public enum class CXXMethodKind
            {
                Normal = 0,
                Constructor = 1,
                Destructor = 2,
                Conversion = 3,
                Operator = 4,
                UsingDirective = 5
            };

            public enum class RefQualifierKind
            {
                None = 0,
                LValue = 1,
                RValue = 2
            };

            public enum class CppAbi
            {
                Itanium = 0,
                Microsoft = 1,
                ARM = 2,
                iOS = 3,
                iOS64 = 4
            };

            public enum class RecordArgABI
            {
                /// <summary>
                /// <para>Pass it using the normal C aggregate rules for the ABI,</para>
                /// <para>potentially introducing extra copies and passing some</para>
                /// <para>or all of it in registers.</para>
                /// </summary>
                Default = 0,
                /// <summary>
                /// <para>Pass it on the stack using its defined layout.</para>
                /// <para>The argument must be evaluated directly into the correct</para>
                /// <para>stack position in the arguments area, and the call machinery</para>
                /// <para>must not move it or introduce extra copies.</para>
                /// </summary>
                DirectInMemory = 1,
                /// <summary>Pass it as a pointer to temporary memory.</summary>
                Indirect = 2
            };

            public enum class VTableComponentKind
            {
                VCallOffset = 0,
                VBaseOffset = 1,
                OffsetToTop = 2,
                RTTI = 3,
                FunctionPointer = 4,
                CompleteDtorPointer = 5,
                DeletingDtorPointer = 6,
                UnusedFunctionPointer = 7
            };

            public ref class Declaration : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::Declaration* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                Declaration(::CppSharp::CppParser::AST::Declaration* native);
                Declaration(::CppSharp::CppParser::AST::Declaration* native, bool ownNativeInstance);
                static Declaration^ __CreateInstance(::System::IntPtr native);
                static Declaration^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                Declaration(CppSharp::Parser::AST::DeclarationKind kind);

                Declaration(CppSharp::Parser::AST::Declaration^ _0);

                ~Declaration();

                property CppSharp::Parser::AST::DeclarationKind Kind
                {
                    CppSharp::Parser::AST::DeclarationKind get();
                    void set(CppSharp::Parser::AST::DeclarationKind);
                }

                property int AlignAs
                {
                    int get();
                    void set(int);
                }

                property int MaxFieldAlignment
                {
                    int get();
                    void set(int);
                }

                property CppSharp::Parser::AST::AccessSpecifier Access
                {
                    CppSharp::Parser::AST::AccessSpecifier get();
                    void set(CppSharp::Parser::AST::AccessSpecifier);
                }

                property CppSharp::Parser::AST::DeclarationContext^ Namespace
                {
                    CppSharp::Parser::AST::DeclarationContext^ get();
                    void set(CppSharp::Parser::AST::DeclarationContext^);
                }

                property CppSharp::Parser::SourceLocation Location
                {
                    CppSharp::Parser::SourceLocation get();
                    void set(CppSharp::Parser::SourceLocation);
                }

                property int LineNumberStart
                {
                    int get();
                    void set(int);
                }

                property int LineNumberEnd
                {
                    int get();
                    void set(int);
                }

                property System::String^ Name
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ USR
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ DebugText
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property bool IsIncomplete
                {
                    bool get();
                    void set(bool);
                }

                property bool IsDependent
                {
                    bool get();
                    void set(bool);
                }

                property bool IsImplicit
                {
                    bool get();
                    void set(bool);
                }

                property bool IsInvalid
                {
                    bool get();
                    void set(bool);
                }

                property bool IsDeprecated
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::Declaration^ CompleteDeclaration
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }

                property unsigned int DefinitionOrder
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::PreprocessedEntity^>^ PreprocessedEntities
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::PreprocessedEntity^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::PreprocessedEntity^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ Redeclarations
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^);
                }

                property ::System::IntPtr OriginalPtr
                {
                    ::System::IntPtr get();
                    void set(::System::IntPtr);
                }

                property CppSharp::Parser::AST::RawComment^ Comment
                {
                    CppSharp::Parser::AST::RawComment^ get();
                    void set(CppSharp::Parser::AST::RawComment^);
                }

                property unsigned int PreprocessedEntitiesCount
                {
                    unsigned int get();
                }

                property unsigned int RedeclarationsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::PreprocessedEntity^ GetPreprocessedEntities(unsigned int i);

                void AddPreprocessedEntities(CppSharp::Parser::AST::PreprocessedEntity^ s);

                void ClearPreprocessedEntities();

                CppSharp::Parser::AST::Declaration^ GetRedeclarations(unsigned int i);

                void AddRedeclarations(CppSharp::Parser::AST::Declaration^ s);

                void ClearRedeclarations();

                static operator CppSharp::Parser::AST::Declaration^(CppSharp::Parser::AST::DeclarationKind kind);

            protected:
                bool __ownsNativeInstance;
            };

            public ref class DeclarationContext : CppSharp::Parser::AST::Declaration
            {
            public:

                DeclarationContext(::CppSharp::CppParser::AST::DeclarationContext* native);
                DeclarationContext(::CppSharp::CppParser::AST::DeclarationContext* native, bool ownNativeInstance);
                static DeclarationContext^ __CreateInstance(::System::IntPtr native);
                static DeclarationContext^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                DeclarationContext(CppSharp::Parser::AST::DeclarationKind kind);

                DeclarationContext(CppSharp::Parser::AST::DeclarationContext^ _0);

                ~DeclarationContext();

                property System::Collections::Generic::List<CppSharp::Parser::AST::Namespace^>^ Namespaces
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Namespace^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Namespace^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Enumeration^>^ Enums
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Enumeration^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Enumeration^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Function^>^ Functions
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Function^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Function^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Class^>^ Classes
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Class^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Class^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Template^>^ Templates
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Template^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Template^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::TypedefDecl^>^ Typedefs
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TypedefDecl^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TypedefDecl^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::TypeAlias^>^ TypeAliases
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TypeAlias^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TypeAlias^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Variable^>^ Variables
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Variable^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Variable^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Friend^>^ Friends
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Friend^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Friend^>^);
                }

                property bool IsAnonymous
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int NamespacesCount
                {
                    unsigned int get();
                }

                property unsigned int EnumsCount
                {
                    unsigned int get();
                }

                property unsigned int FunctionsCount
                {
                    unsigned int get();
                }

                property unsigned int ClassesCount
                {
                    unsigned int get();
                }

                property unsigned int TemplatesCount
                {
                    unsigned int get();
                }

                property unsigned int TypedefsCount
                {
                    unsigned int get();
                }

                property unsigned int TypeAliasesCount
                {
                    unsigned int get();
                }

                property unsigned int VariablesCount
                {
                    unsigned int get();
                }

                property unsigned int FriendsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Namespace^ GetNamespaces(unsigned int i);

                void AddNamespaces(CppSharp::Parser::AST::Namespace^ s);

                void ClearNamespaces();

                CppSharp::Parser::AST::Enumeration^ GetEnums(unsigned int i);

                void AddEnums(CppSharp::Parser::AST::Enumeration^ s);

                void ClearEnums();

                CppSharp::Parser::AST::Function^ GetFunctions(unsigned int i);

                void AddFunctions(CppSharp::Parser::AST::Function^ s);

                void ClearFunctions();

                CppSharp::Parser::AST::Class^ GetClasses(unsigned int i);

                void AddClasses(CppSharp::Parser::AST::Class^ s);

                void ClearClasses();

                CppSharp::Parser::AST::Template^ GetTemplates(unsigned int i);

                void AddTemplates(CppSharp::Parser::AST::Template^ s);

                void ClearTemplates();

                CppSharp::Parser::AST::TypedefDecl^ GetTypedefs(unsigned int i);

                void AddTypedefs(CppSharp::Parser::AST::TypedefDecl^ s);

                void ClearTypedefs();

                CppSharp::Parser::AST::TypeAlias^ GetTypeAliases(unsigned int i);

                void AddTypeAliases(CppSharp::Parser::AST::TypeAlias^ s);

                void ClearTypeAliases();

                CppSharp::Parser::AST::Variable^ GetVariables(unsigned int i);

                void AddVariables(CppSharp::Parser::AST::Variable^ s);

                void ClearVariables();

                CppSharp::Parser::AST::Friend^ GetFriends(unsigned int i);

                void AddFriends(CppSharp::Parser::AST::Friend^ s);

                void ClearFriends();

                static operator CppSharp::Parser::AST::DeclarationContext^(CppSharp::Parser::AST::DeclarationKind kind);
            };

            public ref class TypedefNameDecl : CppSharp::Parser::AST::Declaration
            {
            public:

                TypedefNameDecl(::CppSharp::CppParser::AST::TypedefNameDecl* native);
                TypedefNameDecl(::CppSharp::CppParser::AST::TypedefNameDecl* native, bool ownNativeInstance);
                static TypedefNameDecl^ __CreateInstance(::System::IntPtr native);
                static TypedefNameDecl^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                TypedefNameDecl(CppSharp::Parser::AST::DeclarationKind kind);

                TypedefNameDecl(CppSharp::Parser::AST::TypedefNameDecl^ _0);

                ~TypedefNameDecl();

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                static operator CppSharp::Parser::AST::TypedefNameDecl^(CppSharp::Parser::AST::DeclarationKind kind);
            };

            public ref class TypedefDecl : CppSharp::Parser::AST::TypedefNameDecl
            {
            public:

                TypedefDecl(::CppSharp::CppParser::AST::TypedefDecl* native);
                TypedefDecl(::CppSharp::CppParser::AST::TypedefDecl* native, bool ownNativeInstance);
                static TypedefDecl^ __CreateInstance(::System::IntPtr native);
                static TypedefDecl^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                TypedefDecl();

                TypedefDecl(CppSharp::Parser::AST::TypedefDecl^ _0);

                ~TypedefDecl();
            };

            public ref class TypeAlias : CppSharp::Parser::AST::TypedefNameDecl
            {
            public:

                TypeAlias(::CppSharp::CppParser::AST::TypeAlias* native);
                TypeAlias(::CppSharp::CppParser::AST::TypeAlias* native, bool ownNativeInstance);
                static TypeAlias^ __CreateInstance(::System::IntPtr native);
                static TypeAlias^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                TypeAlias();

                TypeAlias(CppSharp::Parser::AST::TypeAlias^ _0);

                ~TypeAlias();

                property CppSharp::Parser::AST::TypeAliasTemplate^ DescribedAliasTemplate
                {
                    CppSharp::Parser::AST::TypeAliasTemplate^ get();
                    void set(CppSharp::Parser::AST::TypeAliasTemplate^);
                }
            };

            public ref class Friend : CppSharp::Parser::AST::Declaration
            {
            public:

                Friend(::CppSharp::CppParser::AST::Friend* native);
                Friend(::CppSharp::CppParser::AST::Friend* native, bool ownNativeInstance);
                static Friend^ __CreateInstance(::System::IntPtr native);
                static Friend^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                Friend();

                Friend(CppSharp::Parser::AST::Friend^ _0);

                ~Friend();

                property CppSharp::Parser::AST::Declaration^ Declaration
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }
            };

            public ref class StatementObsolete : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::StatementObsolete* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                StatementObsolete(::CppSharp::CppParser::AST::StatementObsolete* native);
                StatementObsolete(::CppSharp::CppParser::AST::StatementObsolete* native, bool ownNativeInstance);
                static StatementObsolete^ __CreateInstance(::System::IntPtr native);
                static StatementObsolete^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                StatementObsolete(System::String^ str, CppSharp::Parser::AST::StatementClassObsolete Class, CppSharp::Parser::AST::Declaration^ decl);

                StatementObsolete(CppSharp::Parser::AST::StatementObsolete^ _0);

                ~StatementObsolete();

                property CppSharp::Parser::AST::StatementClassObsolete Class
                {
                    CppSharp::Parser::AST::StatementClassObsolete get();
                    void set(CppSharp::Parser::AST::StatementClassObsolete);
                }

                property CppSharp::Parser::AST::Declaration^ Decl
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }

                property System::String^ String
                {
                    System::String^ get();
                    void set(System::String^);
                }

            protected:
                bool __ownsNativeInstance;
            };

            public ref class ExpressionObsolete : CppSharp::Parser::AST::StatementObsolete
            {
            public:

                ExpressionObsolete(::CppSharp::CppParser::AST::ExpressionObsolete* native);
                ExpressionObsolete(::CppSharp::CppParser::AST::ExpressionObsolete* native, bool ownNativeInstance);
                static ExpressionObsolete^ __CreateInstance(::System::IntPtr native);
                static ExpressionObsolete^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                ExpressionObsolete(System::String^ str, CppSharp::Parser::AST::StatementClassObsolete Class, CppSharp::Parser::AST::Declaration^ decl);

                ExpressionObsolete(CppSharp::Parser::AST::ExpressionObsolete^ _0);

                ~ExpressionObsolete();
            };

            public ref class BinaryOperatorObsolete : CppSharp::Parser::AST::ExpressionObsolete
            {
            public:

                BinaryOperatorObsolete(::CppSharp::CppParser::AST::BinaryOperatorObsolete* native);
                BinaryOperatorObsolete(::CppSharp::CppParser::AST::BinaryOperatorObsolete* native, bool ownNativeInstance);
                static BinaryOperatorObsolete^ __CreateInstance(::System::IntPtr native);
                static BinaryOperatorObsolete^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                BinaryOperatorObsolete(System::String^ str, CppSharp::Parser::AST::ExpressionObsolete^ lhs, CppSharp::Parser::AST::ExpressionObsolete^ rhs, System::String^ opcodeStr);

                BinaryOperatorObsolete(CppSharp::Parser::AST::BinaryOperatorObsolete^ _0);

                ~BinaryOperatorObsolete();

                property CppSharp::Parser::AST::ExpressionObsolete^ LHS
                {
                    CppSharp::Parser::AST::ExpressionObsolete^ get();
                    void set(CppSharp::Parser::AST::ExpressionObsolete^);
                }

                property CppSharp::Parser::AST::ExpressionObsolete^ RHS
                {
                    CppSharp::Parser::AST::ExpressionObsolete^ get();
                    void set(CppSharp::Parser::AST::ExpressionObsolete^);
                }

                property System::String^ OpcodeStr
                {
                    System::String^ get();
                    void set(System::String^);
                }
            };

            public ref class CallExprObsolete : CppSharp::Parser::AST::ExpressionObsolete
            {
            public:

                CallExprObsolete(::CppSharp::CppParser::AST::CallExprObsolete* native);
                CallExprObsolete(::CppSharp::CppParser::AST::CallExprObsolete* native, bool ownNativeInstance);
                static CallExprObsolete^ __CreateInstance(::System::IntPtr native);
                static CallExprObsolete^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                CallExprObsolete(System::String^ str, CppSharp::Parser::AST::Declaration^ decl);

                CallExprObsolete(CppSharp::Parser::AST::CallExprObsolete^ _0);

                ~CallExprObsolete();

                property System::Collections::Generic::List<CppSharp::Parser::AST::ExpressionObsolete^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::ExpressionObsolete^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::ExpressionObsolete^>^);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::ExpressionObsolete^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::ExpressionObsolete^ s);

                void ClearArguments();
            };

            public ref class CXXConstructExprObsolete : CppSharp::Parser::AST::ExpressionObsolete
            {
            public:

                CXXConstructExprObsolete(::CppSharp::CppParser::AST::CXXConstructExprObsolete* native);
                CXXConstructExprObsolete(::CppSharp::CppParser::AST::CXXConstructExprObsolete* native, bool ownNativeInstance);
                static CXXConstructExprObsolete^ __CreateInstance(::System::IntPtr native);
                static CXXConstructExprObsolete^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                CXXConstructExprObsolete(System::String^ str, CppSharp::Parser::AST::Declaration^ decl);

                CXXConstructExprObsolete(CppSharp::Parser::AST::CXXConstructExprObsolete^ _0);

                ~CXXConstructExprObsolete();

                property System::Collections::Generic::List<CppSharp::Parser::AST::ExpressionObsolete^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::ExpressionObsolete^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::ExpressionObsolete^>^);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::ExpressionObsolete^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::ExpressionObsolete^ s);

                void ClearArguments();
            };

            public ref class Parameter : CppSharp::Parser::AST::Declaration
            {
            public:

                Parameter(::CppSharp::CppParser::AST::Parameter* native);
                Parameter(::CppSharp::CppParser::AST::Parameter* native, bool ownNativeInstance);
                static Parameter^ __CreateInstance(::System::IntPtr native);
                static Parameter^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                Parameter();

                Parameter(CppSharp::Parser::AST::Parameter^ _0);

                ~Parameter();

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property bool IsIndirect
                {
                    bool get();
                    void set(bool);
                }

                property bool HasDefaultValue
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int Index
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property CppSharp::Parser::AST::ExpressionObsolete^ DefaultArgument
                {
                    CppSharp::Parser::AST::ExpressionObsolete^ get();
                    void set(CppSharp::Parser::AST::ExpressionObsolete^);
                }

                property CppSharp::Parser::AST::Expr^ DefaultValue
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }
            };

            public ref class Function : CppSharp::Parser::AST::DeclarationContext
            {
            public:

                Function(::CppSharp::CppParser::AST::Function* native);
                Function(::CppSharp::CppParser::AST::Function* native, bool ownNativeInstance);
                static Function^ __CreateInstance(::System::IntPtr native);
                static Function^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                Function();

                Function(CppSharp::Parser::AST::Function^ _0);

                ~Function();

                property CppSharp::Parser::AST::QualifiedType^ ReturnType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property bool IsReturnIndirect
                {
                    bool get();
                    void set(bool);
                }

                property bool HasThisReturn
                {
                    bool get();
                    void set(bool);
                }

                property bool IsConstExpr
                {
                    bool get();
                    void set(bool);
                }

                property bool IsVariadic
                {
                    bool get();
                    void set(bool);
                }

                property bool IsInline
                {
                    bool get();
                    void set(bool);
                }

                property bool IsPure
                {
                    bool get();
                    void set(bool);
                }

                property bool IsDeleted
                {
                    bool get();
                    void set(bool);
                }

                property bool IsDefaulted
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::FriendKind FriendKind
                {
                    CppSharp::Parser::AST::FriendKind get();
                    void set(CppSharp::Parser::AST::FriendKind);
                }

                property CppSharp::Parser::AST::CXXOperatorKind OperatorKind
                {
                    CppSharp::Parser::AST::CXXOperatorKind get();
                    void set(CppSharp::Parser::AST::CXXOperatorKind);
                }

                property System::String^ Mangled
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ Signature
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ Body
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property CppSharp::Parser::AST::Stmt^ BodyStmt
                {
                    CppSharp::Parser::AST::Stmt^ get();
                    void set(CppSharp::Parser::AST::Stmt^);
                }

                property CppSharp::Parser::AST::CallingConvention CallingConvention
                {
                    CppSharp::Parser::AST::CallingConvention get();
                    void set(CppSharp::Parser::AST::CallingConvention);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Parameter^>^ Parameters
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Parameter^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Parameter^>^);
                }

                property CppSharp::Parser::AST::FunctionTemplateSpecialization^ SpecializationInfo
                {
                    CppSharp::Parser::AST::FunctionTemplateSpecialization^ get();
                    void set(CppSharp::Parser::AST::FunctionTemplateSpecialization^);
                }

                property CppSharp::Parser::AST::Function^ InstantiatedFrom
                {
                    CppSharp::Parser::AST::Function^ get();
                    void set(CppSharp::Parser::AST::Function^);
                }

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property unsigned int ParametersCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Parameter^ GetParameters(unsigned int i);

                void AddParameters(CppSharp::Parser::AST::Parameter^ s);

                void ClearParameters();
            };

            public ref class Method : CppSharp::Parser::AST::Function
            {
            public:

                Method(::CppSharp::CppParser::AST::Method* native);
                Method(::CppSharp::CppParser::AST::Method* native, bool ownNativeInstance);
                static Method^ __CreateInstance(::System::IntPtr native);
                static Method^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                Method();

                Method(CppSharp::Parser::AST::Method^ _0);

                ~Method();

                property bool IsVirtual
                {
                    bool get();
                    void set(bool);
                }

                property bool IsStatic
                {
                    bool get();
                    void set(bool);
                }

                property bool IsConst
                {
                    bool get();
                    void set(bool);
                }

                property bool IsExplicit
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::CXXMethodKind MethodKind
                {
                    CppSharp::Parser::AST::CXXMethodKind get();
                    void set(CppSharp::Parser::AST::CXXMethodKind);
                }

                property bool IsDefaultConstructor
                {
                    bool get();
                    void set(bool);
                }

                property bool IsCopyConstructor
                {
                    bool get();
                    void set(bool);
                }

                property bool IsMoveConstructor
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::QualifiedType^ ConversionType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::RefQualifierKind RefQualifier
                {
                    CppSharp::Parser::AST::RefQualifierKind get();
                    void set(CppSharp::Parser::AST::RefQualifierKind);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Method^>^ OverriddenMethods
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Method^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Method^>^);
                }

                property unsigned int OverriddenMethodsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Method^ GetOverriddenMethods(unsigned int i);

                void AddOverriddenMethods(CppSharp::Parser::AST::Method^ s);

                void ClearOverriddenMethods();
            };

            public ref class Enumeration : CppSharp::Parser::AST::DeclarationContext
            {
            public:

                [System::Flags]
                enum class EnumModifiers
                {
                    Anonymous = 1,
                    Scoped = 2,
                    Flags = 4
                };

                ref class Item : CppSharp::Parser::AST::Declaration
                {
                public:

                    Item(::CppSharp::CppParser::AST::Enumeration::Item* native);
                    Item(::CppSharp::CppParser::AST::Enumeration::Item* native, bool ownNativeInstance);
                    static Item^ __CreateInstance(::System::IntPtr native);
                    static Item^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                    Item();

                    Item(CppSharp::Parser::AST::Enumeration::Item^ _0);

                    ~Item();

                    property System::String^ Expression
                    {
                        System::String^ get();
                        void set(System::String^);
                    }

                    property unsigned long long Value
                    {
                        unsigned long long get();
                        void set(unsigned long long);
                    }
                };

                Enumeration(::CppSharp::CppParser::AST::Enumeration* native);
                Enumeration(::CppSharp::CppParser::AST::Enumeration* native, bool ownNativeInstance);
                static Enumeration^ __CreateInstance(::System::IntPtr native);
                static Enumeration^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                Enumeration();

                Enumeration(CppSharp::Parser::AST::Enumeration^ _0);

                ~Enumeration();

                property CppSharp::Parser::AST::Enumeration::EnumModifiers Modifiers
                {
                    CppSharp::Parser::AST::Enumeration::EnumModifiers get();
                    void set(CppSharp::Parser::AST::Enumeration::EnumModifiers);
                }

                property CppSharp::Parser::AST::Type^ Type
                {
                    CppSharp::Parser::AST::Type^ get();
                    void set(CppSharp::Parser::AST::Type^);
                }

                property CppSharp::Parser::AST::BuiltinType^ BuiltinType
                {
                    CppSharp::Parser::AST::BuiltinType^ get();
                    void set(CppSharp::Parser::AST::BuiltinType^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Enumeration::Item^>^ Items
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Enumeration::Item^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Enumeration::Item^>^);
                }

                property unsigned int ItemsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Enumeration::Item^ GetItems(unsigned int i);

                void AddItems(CppSharp::Parser::AST::Enumeration::Item^ s);

                void ClearItems();

                CppSharp::Parser::AST::Enumeration::Item^ FindItemByName(System::String^ Name);
            };

            public ref class Variable : CppSharp::Parser::AST::Declaration
            {
            public:

                Variable(::CppSharp::CppParser::AST::Variable* native);
                Variable(::CppSharp::CppParser::AST::Variable* native, bool ownNativeInstance);
                static Variable^ __CreateInstance(::System::IntPtr native);
                static Variable^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                Variable();

                Variable(CppSharp::Parser::AST::Variable^ _0);

                ~Variable();

                property bool IsConstExpr
                {
                    bool get();
                    void set(bool);
                }

                property System::String^ Mangled
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::ExpressionObsolete^ Initializer
                {
                    CppSharp::Parser::AST::ExpressionObsolete^ get();
                    void set(CppSharp::Parser::AST::ExpressionObsolete^);
                }
            };

            public ref class BaseClassSpecifier : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::BaseClassSpecifier* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                BaseClassSpecifier(::CppSharp::CppParser::AST::BaseClassSpecifier* native);
                BaseClassSpecifier(::CppSharp::CppParser::AST::BaseClassSpecifier* native, bool ownNativeInstance);
                static BaseClassSpecifier^ __CreateInstance(::System::IntPtr native);
                static BaseClassSpecifier^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                BaseClassSpecifier();

                BaseClassSpecifier(CppSharp::Parser::AST::BaseClassSpecifier^ _0);

                ~BaseClassSpecifier();

                property CppSharp::Parser::AST::AccessSpecifier Access
                {
                    CppSharp::Parser::AST::AccessSpecifier get();
                    void set(CppSharp::Parser::AST::AccessSpecifier);
                }

                property bool IsVirtual
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::Type^ Type
                {
                    CppSharp::Parser::AST::Type^ get();
                    void set(CppSharp::Parser::AST::Type^);
                }

                property int Offset
                {
                    int get();
                    void set(int);
                }

            protected:
                bool __ownsNativeInstance;
            };

            public ref class Field : CppSharp::Parser::AST::Declaration
            {
            public:

                Field(::CppSharp::CppParser::AST::Field* native);
                Field(::CppSharp::CppParser::AST::Field* native, bool ownNativeInstance);
                static Field^ __CreateInstance(::System::IntPtr native);
                static Field^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                Field();

                Field(CppSharp::Parser::AST::Field^ _0);

                ~Field();

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property CppSharp::Parser::AST::Class^ Class
                {
                    CppSharp::Parser::AST::Class^ get();
                    void set(CppSharp::Parser::AST::Class^);
                }

                property bool IsBitField
                {
                    bool get();
                    void set(bool);
                }

                property unsigned int BitWidth
                {
                    unsigned int get();
                    void set(unsigned int);
                }
            };

            public ref class AccessSpecifierDecl : CppSharp::Parser::AST::Declaration
            {
            public:

                AccessSpecifierDecl(::CppSharp::CppParser::AST::AccessSpecifierDecl* native);
                AccessSpecifierDecl(::CppSharp::CppParser::AST::AccessSpecifierDecl* native, bool ownNativeInstance);
                static AccessSpecifierDecl^ __CreateInstance(::System::IntPtr native);
                static AccessSpecifierDecl^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                AccessSpecifierDecl();

                AccessSpecifierDecl(CppSharp::Parser::AST::AccessSpecifierDecl^ _0);

                ~AccessSpecifierDecl();
            };

            public ref class VTableComponent : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::VTableComponent* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                VTableComponent(::CppSharp::CppParser::AST::VTableComponent* native);
                VTableComponent(::CppSharp::CppParser::AST::VTableComponent* native, bool ownNativeInstance);
                static VTableComponent^ __CreateInstance(::System::IntPtr native);
                static VTableComponent^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                VTableComponent();

                VTableComponent(CppSharp::Parser::AST::VTableComponent^ _0);

                ~VTableComponent();

                property CppSharp::Parser::AST::VTableComponentKind Kind
                {
                    CppSharp::Parser::AST::VTableComponentKind get();
                    void set(CppSharp::Parser::AST::VTableComponentKind);
                }

                property unsigned int Offset
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property CppSharp::Parser::AST::Declaration^ Declaration
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }

            protected:
                bool __ownsNativeInstance;
            };

            public ref class VTableLayout : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::VTableLayout* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                VTableLayout(::CppSharp::CppParser::AST::VTableLayout* native);
                VTableLayout(::CppSharp::CppParser::AST::VTableLayout* native, bool ownNativeInstance);
                static VTableLayout^ __CreateInstance(::System::IntPtr native);
                static VTableLayout^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                VTableLayout();

                VTableLayout(CppSharp::Parser::AST::VTableLayout^ _0);

                ~VTableLayout();

                property System::Collections::Generic::List<CppSharp::Parser::AST::VTableComponent^>^ Components
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::VTableComponent^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::VTableComponent^>^);
                }

                property unsigned int ComponentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::VTableComponent^ GetComponents(unsigned int i);

                void AddComponents(CppSharp::Parser::AST::VTableComponent^ s);

                void ClearComponents();

            protected:
                bool __ownsNativeInstance;
            };

            public ref class VFTableInfo : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::VFTableInfo* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                VFTableInfo(::CppSharp::CppParser::AST::VFTableInfo* native);
                VFTableInfo(::CppSharp::CppParser::AST::VFTableInfo* native, bool ownNativeInstance);
                static VFTableInfo^ __CreateInstance(::System::IntPtr native);
                static VFTableInfo^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                VFTableInfo();

                VFTableInfo(CppSharp::Parser::AST::VFTableInfo^ _0);

                ~VFTableInfo();

                property unsigned long long VBTableIndex
                {
                    unsigned long long get();
                    void set(unsigned long long);
                }

                property unsigned int VFPtrOffset
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int VFPtrFullOffset
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property CppSharp::Parser::AST::VTableLayout^ Layout
                {
                    CppSharp::Parser::AST::VTableLayout^ get();
                    void set(CppSharp::Parser::AST::VTableLayout^);
                }

            protected:
                bool __ownsNativeInstance;
            };

            public ref class LayoutField : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::LayoutField* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                LayoutField(::CppSharp::CppParser::AST::LayoutField* native);
                LayoutField(::CppSharp::CppParser::AST::LayoutField* native, bool ownNativeInstance);
                static LayoutField^ __CreateInstance(::System::IntPtr native);
                static LayoutField^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                LayoutField();

                LayoutField(CppSharp::Parser::AST::LayoutField^ other);

                ~LayoutField();

                property unsigned int Offset
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property System::String^ Name
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property CppSharp::Parser::AST::QualifiedType^ QualifiedType
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }

                property ::System::IntPtr FieldPtr
                {
                    ::System::IntPtr get();
                    void set(::System::IntPtr);
                }

            protected:
                bool __ownsNativeInstance;
            };

            public ref class LayoutBase : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::LayoutBase* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                LayoutBase(::CppSharp::CppParser::AST::LayoutBase* native);
                LayoutBase(::CppSharp::CppParser::AST::LayoutBase* native, bool ownNativeInstance);
                static LayoutBase^ __CreateInstance(::System::IntPtr native);
                static LayoutBase^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                LayoutBase();

                LayoutBase(CppSharp::Parser::AST::LayoutBase^ other);

                ~LayoutBase();

                property unsigned int Offset
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property CppSharp::Parser::AST::Class^ Class
                {
                    CppSharp::Parser::AST::Class^ get();
                    void set(CppSharp::Parser::AST::Class^);
                }

            protected:
                bool __ownsNativeInstance;
            };

            public ref class ClassLayout : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::ClassLayout* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                ClassLayout(::CppSharp::CppParser::AST::ClassLayout* native);
                ClassLayout(::CppSharp::CppParser::AST::ClassLayout* native, bool ownNativeInstance);
                static ClassLayout^ __CreateInstance(::System::IntPtr native);
                static ClassLayout^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                ClassLayout();

                ClassLayout(CppSharp::Parser::AST::ClassLayout^ _0);

                ~ClassLayout();

                property CppSharp::Parser::AST::CppAbi ABI
                {
                    CppSharp::Parser::AST::CppAbi get();
                    void set(CppSharp::Parser::AST::CppAbi);
                }

                property CppSharp::Parser::AST::RecordArgABI ArgABI
                {
                    CppSharp::Parser::AST::RecordArgABI get();
                    void set(CppSharp::Parser::AST::RecordArgABI);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::VFTableInfo^>^ VFTables
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::VFTableInfo^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::VFTableInfo^>^);
                }

                property CppSharp::Parser::AST::VTableLayout^ Layout
                {
                    CppSharp::Parser::AST::VTableLayout^ get();
                    void set(CppSharp::Parser::AST::VTableLayout^);
                }

                property bool HasOwnVFPtr
                {
                    bool get();
                    void set(bool);
                }

                property long VBPtrOffset
                {
                    long get();
                    void set(long);
                }

                property int Alignment
                {
                    int get();
                    void set(int);
                }

                property int Size
                {
                    int get();
                    void set(int);
                }

                property int DataSize
                {
                    int get();
                    void set(int);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::LayoutField^>^ Fields
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::LayoutField^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::LayoutField^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::LayoutBase^>^ Bases
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::LayoutBase^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::LayoutBase^>^);
                }

                property unsigned int VFTablesCount
                {
                    unsigned int get();
                }

                property unsigned int FieldsCount
                {
                    unsigned int get();
                }

                property unsigned int BasesCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::VFTableInfo^ GetVFTables(unsigned int i);

                void AddVFTables(CppSharp::Parser::AST::VFTableInfo^ s);

                void ClearVFTables();

                CppSharp::Parser::AST::LayoutField^ GetFields(unsigned int i);

                void AddFields(CppSharp::Parser::AST::LayoutField^ s);

                void ClearFields();

                CppSharp::Parser::AST::LayoutBase^ GetBases(unsigned int i);

                void AddBases(CppSharp::Parser::AST::LayoutBase^ s);

                void ClearBases();

            protected:
                bool __ownsNativeInstance;
            };

            public ref class Class : CppSharp::Parser::AST::DeclarationContext
            {
            public:

                Class(::CppSharp::CppParser::AST::Class* native);
                Class(::CppSharp::CppParser::AST::Class* native, bool ownNativeInstance);
                static Class^ __CreateInstance(::System::IntPtr native);
                static Class^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                Class();

                Class(CppSharp::Parser::AST::Class^ _0);

                ~Class();

                property System::Collections::Generic::List<CppSharp::Parser::AST::BaseClassSpecifier^>^ Bases
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::BaseClassSpecifier^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::BaseClassSpecifier^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Field^>^ Fields
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Field^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Field^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Method^>^ Methods
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Method^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Method^>^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::AccessSpecifierDecl^>^ Specifiers
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::AccessSpecifierDecl^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::AccessSpecifierDecl^>^);
                }

                property bool IsPOD
                {
                    bool get();
                    void set(bool);
                }

                property bool IsAbstract
                {
                    bool get();
                    void set(bool);
                }

                property bool IsUnion
                {
                    bool get();
                    void set(bool);
                }

                property bool IsDynamic
                {
                    bool get();
                    void set(bool);
                }

                property bool IsPolymorphic
                {
                    bool get();
                    void set(bool);
                }

                property bool HasNonTrivialDefaultConstructor
                {
                    bool get();
                    void set(bool);
                }

                property bool HasNonTrivialCopyConstructor
                {
                    bool get();
                    void set(bool);
                }

                property bool HasNonTrivialDestructor
                {
                    bool get();
                    void set(bool);
                }

                property bool IsExternCContext
                {
                    bool get();
                    void set(bool);
                }

                property bool IsInjected
                {
                    bool get();
                    void set(bool);
                }

                property CppSharp::Parser::AST::ClassLayout^ Layout
                {
                    CppSharp::Parser::AST::ClassLayout^ get();
                    void set(CppSharp::Parser::AST::ClassLayout^);
                }

                property unsigned int BasesCount
                {
                    unsigned int get();
                }

                property unsigned int FieldsCount
                {
                    unsigned int get();
                }

                property unsigned int MethodsCount
                {
                    unsigned int get();
                }

                property unsigned int SpecifiersCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::BaseClassSpecifier^ GetBases(unsigned int i);

                void AddBases(CppSharp::Parser::AST::BaseClassSpecifier^ s);

                void ClearBases();

                CppSharp::Parser::AST::Field^ GetFields(unsigned int i);

                void AddFields(CppSharp::Parser::AST::Field^ s);

                void ClearFields();

                CppSharp::Parser::AST::Method^ GetMethods(unsigned int i);

                void AddMethods(CppSharp::Parser::AST::Method^ s);

                void ClearMethods();

                CppSharp::Parser::AST::AccessSpecifierDecl^ GetSpecifiers(unsigned int i);

                void AddSpecifiers(CppSharp::Parser::AST::AccessSpecifierDecl^ s);

                void ClearSpecifiers();
            };

            public ref class Template : CppSharp::Parser::AST::Declaration
            {
            public:

                Template(::CppSharp::CppParser::AST::Template* native);
                Template(::CppSharp::CppParser::AST::Template* native, bool ownNativeInstance);
                static Template^ __CreateInstance(::System::IntPtr native);
                static Template^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                Template(CppSharp::Parser::AST::DeclarationKind kind);

                Template();

                Template(CppSharp::Parser::AST::Template^ _0);

                ~Template();

                property CppSharp::Parser::AST::Declaration^ TemplatedDecl
                {
                    CppSharp::Parser::AST::Declaration^ get();
                    void set(CppSharp::Parser::AST::Declaration^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ Parameters
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^);
                }

                property unsigned int ParametersCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::Declaration^ GetParameters(unsigned int i);

                void AddParameters(CppSharp::Parser::AST::Declaration^ s);

                void ClearParameters();

                static operator CppSharp::Parser::AST::Template^(CppSharp::Parser::AST::DeclarationKind kind);
            };

            public ref class TypeAliasTemplate : CppSharp::Parser::AST::Template
            {
            public:

                TypeAliasTemplate(::CppSharp::CppParser::AST::TypeAliasTemplate* native);
                TypeAliasTemplate(::CppSharp::CppParser::AST::TypeAliasTemplate* native, bool ownNativeInstance);
                static TypeAliasTemplate^ __CreateInstance(::System::IntPtr native);
                static TypeAliasTemplate^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                TypeAliasTemplate();

                TypeAliasTemplate(CppSharp::Parser::AST::TypeAliasTemplate^ _0);

                ~TypeAliasTemplate();
            };

            public ref class TemplateParameter : CppSharp::Parser::AST::Declaration
            {
            public:

                TemplateParameter(::CppSharp::CppParser::AST::TemplateParameter* native);
                TemplateParameter(::CppSharp::CppParser::AST::TemplateParameter* native, bool ownNativeInstance);
                static TemplateParameter^ __CreateInstance(::System::IntPtr native);
                static TemplateParameter^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                TemplateParameter(CppSharp::Parser::AST::DeclarationKind kind);

                TemplateParameter(CppSharp::Parser::AST::TemplateParameter^ _0);

                ~TemplateParameter();

                property unsigned int Depth
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property unsigned int Index
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property bool IsParameterPack
                {
                    bool get();
                    void set(bool);
                }

                static operator CppSharp::Parser::AST::TemplateParameter^(CppSharp::Parser::AST::DeclarationKind kind);
            };

            public ref class TemplateTemplateParameter : CppSharp::Parser::AST::Template
            {
            public:

                TemplateTemplateParameter(::CppSharp::CppParser::AST::TemplateTemplateParameter* native);
                TemplateTemplateParameter(::CppSharp::CppParser::AST::TemplateTemplateParameter* native, bool ownNativeInstance);
                static TemplateTemplateParameter^ __CreateInstance(::System::IntPtr native);
                static TemplateTemplateParameter^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                TemplateTemplateParameter();

                TemplateTemplateParameter(CppSharp::Parser::AST::TemplateTemplateParameter^ _0);

                ~TemplateTemplateParameter();

                property bool IsParameterPack
                {
                    bool get();
                    void set(bool);
                }

                property bool IsPackExpansion
                {
                    bool get();
                    void set(bool);
                }

                property bool IsExpandedParameterPack
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class TypeTemplateParameter : CppSharp::Parser::AST::TemplateParameter
            {
            public:

                TypeTemplateParameter(::CppSharp::CppParser::AST::TypeTemplateParameter* native);
                TypeTemplateParameter(::CppSharp::CppParser::AST::TypeTemplateParameter* native, bool ownNativeInstance);
                static TypeTemplateParameter^ __CreateInstance(::System::IntPtr native);
                static TypeTemplateParameter^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                TypeTemplateParameter();

                TypeTemplateParameter(CppSharp::Parser::AST::TypeTemplateParameter^ _0);

                ~TypeTemplateParameter();

                property CppSharp::Parser::AST::QualifiedType^ DefaultArgument
                {
                    CppSharp::Parser::AST::QualifiedType^ get();
                    void set(CppSharp::Parser::AST::QualifiedType^);
                }
            };

            public ref class NonTypeTemplateParameter : CppSharp::Parser::AST::TemplateParameter
            {
            public:

                NonTypeTemplateParameter(::CppSharp::CppParser::AST::NonTypeTemplateParameter* native);
                NonTypeTemplateParameter(::CppSharp::CppParser::AST::NonTypeTemplateParameter* native, bool ownNativeInstance);
                static NonTypeTemplateParameter^ __CreateInstance(::System::IntPtr native);
                static NonTypeTemplateParameter^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                NonTypeTemplateParameter();

                NonTypeTemplateParameter(CppSharp::Parser::AST::NonTypeTemplateParameter^ _0);

                ~NonTypeTemplateParameter();

                property CppSharp::Parser::AST::ExpressionObsolete^ DefaultArgument
                {
                    CppSharp::Parser::AST::ExpressionObsolete^ get();
                    void set(CppSharp::Parser::AST::ExpressionObsolete^);
                }

                property CppSharp::Parser::AST::Expr^ DefaultArgumentNew
                {
                    CppSharp::Parser::AST::Expr^ get();
                    void set(CppSharp::Parser::AST::Expr^);
                }

                property unsigned int Position
                {
                    unsigned int get();
                    void set(unsigned int);
                }

                property bool IsPackExpansion
                {
                    bool get();
                    void set(bool);
                }

                property bool IsExpandedParameterPack
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class ClassTemplate : CppSharp::Parser::AST::Template
            {
            public:

                ClassTemplate(::CppSharp::CppParser::AST::ClassTemplate* native);
                ClassTemplate(::CppSharp::CppParser::AST::ClassTemplate* native, bool ownNativeInstance);
                static ClassTemplate^ __CreateInstance(::System::IntPtr native);
                static ClassTemplate^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                ClassTemplate();

                ClassTemplate(CppSharp::Parser::AST::ClassTemplate^ _0);

                ~ClassTemplate();

                property System::Collections::Generic::List<CppSharp::Parser::AST::ClassTemplateSpecialization^>^ Specializations
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::ClassTemplateSpecialization^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::ClassTemplateSpecialization^>^);
                }

                property unsigned int SpecializationsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::ClassTemplateSpecialization^ GetSpecializations(unsigned int i);

                void AddSpecializations(CppSharp::Parser::AST::ClassTemplateSpecialization^ s);

                void ClearSpecializations();

                CppSharp::Parser::AST::ClassTemplateSpecialization^ FindSpecialization(System::String^ usr);

                CppSharp::Parser::AST::ClassTemplatePartialSpecialization^ FindPartialSpecialization(System::String^ usr);
            };

            public ref class ClassTemplateSpecialization : CppSharp::Parser::AST::Class
            {
            public:

                ClassTemplateSpecialization(::CppSharp::CppParser::AST::ClassTemplateSpecialization* native);
                ClassTemplateSpecialization(::CppSharp::CppParser::AST::ClassTemplateSpecialization* native, bool ownNativeInstance);
                static ClassTemplateSpecialization^ __CreateInstance(::System::IntPtr native);
                static ClassTemplateSpecialization^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                ClassTemplateSpecialization();

                ClassTemplateSpecialization(CppSharp::Parser::AST::ClassTemplateSpecialization^ _0);

                ~ClassTemplateSpecialization();

                property CppSharp::Parser::AST::ClassTemplate^ TemplatedDecl
                {
                    CppSharp::Parser::AST::ClassTemplate^ get();
                    void set(CppSharp::Parser::AST::ClassTemplate^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^);
                }

                property CppSharp::Parser::AST::TemplateSpecializationKind SpecializationKind
                {
                    CppSharp::Parser::AST::TemplateSpecializationKind get();
                    void set(CppSharp::Parser::AST::TemplateSpecializationKind);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::TemplateArgument^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::TemplateArgument^ s);

                void ClearArguments();
            };

            public ref class ClassTemplatePartialSpecialization : CppSharp::Parser::AST::ClassTemplateSpecialization
            {
            public:

                ClassTemplatePartialSpecialization(::CppSharp::CppParser::AST::ClassTemplatePartialSpecialization* native);
                ClassTemplatePartialSpecialization(::CppSharp::CppParser::AST::ClassTemplatePartialSpecialization* native, bool ownNativeInstance);
                static ClassTemplatePartialSpecialization^ __CreateInstance(::System::IntPtr native);
                static ClassTemplatePartialSpecialization^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                ClassTemplatePartialSpecialization();

                ClassTemplatePartialSpecialization(CppSharp::Parser::AST::ClassTemplatePartialSpecialization^ _0);

                ~ClassTemplatePartialSpecialization();
            };

            public ref class FunctionTemplate : CppSharp::Parser::AST::Template
            {
            public:

                FunctionTemplate(::CppSharp::CppParser::AST::FunctionTemplate* native);
                FunctionTemplate(::CppSharp::CppParser::AST::FunctionTemplate* native, bool ownNativeInstance);
                static FunctionTemplate^ __CreateInstance(::System::IntPtr native);
                static FunctionTemplate^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                FunctionTemplate();

                FunctionTemplate(CppSharp::Parser::AST::FunctionTemplate^ _0);

                ~FunctionTemplate();

                property System::Collections::Generic::List<CppSharp::Parser::AST::FunctionTemplateSpecialization^>^ Specializations
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::FunctionTemplateSpecialization^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::FunctionTemplateSpecialization^>^);
                }

                property unsigned int SpecializationsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::FunctionTemplateSpecialization^ GetSpecializations(unsigned int i);

                void AddSpecializations(CppSharp::Parser::AST::FunctionTemplateSpecialization^ s);

                void ClearSpecializations();

                CppSharp::Parser::AST::FunctionTemplateSpecialization^ FindSpecialization(System::String^ usr);
            };

            public ref class FunctionTemplateSpecialization : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::FunctionTemplateSpecialization* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                FunctionTemplateSpecialization(::CppSharp::CppParser::AST::FunctionTemplateSpecialization* native);
                FunctionTemplateSpecialization(::CppSharp::CppParser::AST::FunctionTemplateSpecialization* native, bool ownNativeInstance);
                static FunctionTemplateSpecialization^ __CreateInstance(::System::IntPtr native);
                static FunctionTemplateSpecialization^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                FunctionTemplateSpecialization();

                FunctionTemplateSpecialization(CppSharp::Parser::AST::FunctionTemplateSpecialization^ _0);

                ~FunctionTemplateSpecialization();

                property CppSharp::Parser::AST::FunctionTemplate^ Template
                {
                    CppSharp::Parser::AST::FunctionTemplate^ get();
                    void set(CppSharp::Parser::AST::FunctionTemplate^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^);
                }

                property CppSharp::Parser::AST::Function^ SpecializedFunction
                {
                    CppSharp::Parser::AST::Function^ get();
                    void set(CppSharp::Parser::AST::Function^);
                }

                property CppSharp::Parser::AST::TemplateSpecializationKind SpecializationKind
                {
                    CppSharp::Parser::AST::TemplateSpecializationKind get();
                    void set(CppSharp::Parser::AST::TemplateSpecializationKind);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::TemplateArgument^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::TemplateArgument^ s);

                void ClearArguments();

            protected:
                bool __ownsNativeInstance;
            };

            public ref class VarTemplate : CppSharp::Parser::AST::Template
            {
            public:

                VarTemplate(::CppSharp::CppParser::AST::VarTemplate* native);
                VarTemplate(::CppSharp::CppParser::AST::VarTemplate* native, bool ownNativeInstance);
                static VarTemplate^ __CreateInstance(::System::IntPtr native);
                static VarTemplate^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                VarTemplate();

                VarTemplate(CppSharp::Parser::AST::VarTemplate^ _0);

                ~VarTemplate();

                property System::Collections::Generic::List<CppSharp::Parser::AST::VarTemplateSpecialization^>^ Specializations
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::VarTemplateSpecialization^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::VarTemplateSpecialization^>^);
                }

                property unsigned int SpecializationsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::VarTemplateSpecialization^ GetSpecializations(unsigned int i);

                void AddSpecializations(CppSharp::Parser::AST::VarTemplateSpecialization^ s);

                void ClearSpecializations();

                CppSharp::Parser::AST::VarTemplateSpecialization^ FindSpecialization(System::String^ usr);

                CppSharp::Parser::AST::VarTemplatePartialSpecialization^ FindPartialSpecialization(System::String^ usr);
            };

            public ref class VarTemplateSpecialization : CppSharp::Parser::AST::Variable
            {
            public:

                VarTemplateSpecialization(::CppSharp::CppParser::AST::VarTemplateSpecialization* native);
                VarTemplateSpecialization(::CppSharp::CppParser::AST::VarTemplateSpecialization* native, bool ownNativeInstance);
                static VarTemplateSpecialization^ __CreateInstance(::System::IntPtr native);
                static VarTemplateSpecialization^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                VarTemplateSpecialization();

                VarTemplateSpecialization(CppSharp::Parser::AST::VarTemplateSpecialization^ _0);

                ~VarTemplateSpecialization();

                property CppSharp::Parser::AST::VarTemplate^ TemplatedDecl
                {
                    CppSharp::Parser::AST::VarTemplate^ get();
                    void set(CppSharp::Parser::AST::VarTemplate^);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ Arguments
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TemplateArgument^>^);
                }

                property CppSharp::Parser::AST::TemplateSpecializationKind SpecializationKind
                {
                    CppSharp::Parser::AST::TemplateSpecializationKind get();
                    void set(CppSharp::Parser::AST::TemplateSpecializationKind);
                }

                property unsigned int ArgumentsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::TemplateArgument^ GetArguments(unsigned int i);

                void AddArguments(CppSharp::Parser::AST::TemplateArgument^ s);

                void ClearArguments();
            };

            public ref class VarTemplatePartialSpecialization : CppSharp::Parser::AST::VarTemplateSpecialization
            {
            public:

                VarTemplatePartialSpecialization(::CppSharp::CppParser::AST::VarTemplatePartialSpecialization* native);
                VarTemplatePartialSpecialization(::CppSharp::CppParser::AST::VarTemplatePartialSpecialization* native, bool ownNativeInstance);
                static VarTemplatePartialSpecialization^ __CreateInstance(::System::IntPtr native);
                static VarTemplatePartialSpecialization^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                VarTemplatePartialSpecialization();

                VarTemplatePartialSpecialization(CppSharp::Parser::AST::VarTemplatePartialSpecialization^ _0);

                ~VarTemplatePartialSpecialization();
            };

            public ref class UnresolvedUsingTypename : CppSharp::Parser::AST::Declaration
            {
            public:

                UnresolvedUsingTypename(::CppSharp::CppParser::AST::UnresolvedUsingTypename* native);
                UnresolvedUsingTypename(::CppSharp::CppParser::AST::UnresolvedUsingTypename* native, bool ownNativeInstance);
                static UnresolvedUsingTypename^ __CreateInstance(::System::IntPtr native);
                static UnresolvedUsingTypename^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                UnresolvedUsingTypename();

                UnresolvedUsingTypename(CppSharp::Parser::AST::UnresolvedUsingTypename^ _0);

                ~UnresolvedUsingTypename();
            };

            public ref class Namespace : CppSharp::Parser::AST::DeclarationContext
            {
            public:

                Namespace(::CppSharp::CppParser::AST::Namespace* native);
                Namespace(::CppSharp::CppParser::AST::Namespace* native, bool ownNativeInstance);
                static Namespace^ __CreateInstance(::System::IntPtr native);
                static Namespace^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                Namespace();

                Namespace(CppSharp::Parser::AST::Namespace^ _0);

                ~Namespace();

                property bool IsInline
                {
                    bool get();
                    void set(bool);
                }
            };

            public ref class PreprocessedEntity : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::PreprocessedEntity* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                PreprocessedEntity(::CppSharp::CppParser::AST::PreprocessedEntity* native);
                PreprocessedEntity(::CppSharp::CppParser::AST::PreprocessedEntity* native, bool ownNativeInstance);
                static PreprocessedEntity^ __CreateInstance(::System::IntPtr native);
                static PreprocessedEntity^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                PreprocessedEntity();

                PreprocessedEntity(CppSharp::Parser::AST::PreprocessedEntity^ _0);

                ~PreprocessedEntity();

                property CppSharp::Parser::AST::MacroLocation MacroLocation
                {
                    CppSharp::Parser::AST::MacroLocation get();
                    void set(CppSharp::Parser::AST::MacroLocation);
                }

                property ::System::IntPtr OriginalPtr
                {
                    ::System::IntPtr get();
                    void set(::System::IntPtr);
                }

                property CppSharp::Parser::AST::DeclarationKind Kind
                {
                    CppSharp::Parser::AST::DeclarationKind get();
                    void set(CppSharp::Parser::AST::DeclarationKind);
                }

            protected:
                bool __ownsNativeInstance;
            };

            public ref class MacroDefinition : CppSharp::Parser::AST::PreprocessedEntity
            {
            public:

                MacroDefinition(::CppSharp::CppParser::AST::MacroDefinition* native);
                MacroDefinition(::CppSharp::CppParser::AST::MacroDefinition* native, bool ownNativeInstance);
                static MacroDefinition^ __CreateInstance(::System::IntPtr native);
                static MacroDefinition^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                MacroDefinition();

                MacroDefinition(CppSharp::Parser::AST::MacroDefinition^ _0);

                ~MacroDefinition();

                property System::String^ Name
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ Expression
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property int LineNumberStart
                {
                    int get();
                    void set(int);
                }

                property int LineNumberEnd
                {
                    int get();
                    void set(int);
                }
            };

            public ref class MacroExpansion : CppSharp::Parser::AST::PreprocessedEntity
            {
            public:

                MacroExpansion(::CppSharp::CppParser::AST::MacroExpansion* native);
                MacroExpansion(::CppSharp::CppParser::AST::MacroExpansion* native, bool ownNativeInstance);
                static MacroExpansion^ __CreateInstance(::System::IntPtr native);
                static MacroExpansion^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                MacroExpansion();

                MacroExpansion(CppSharp::Parser::AST::MacroExpansion^ _0);

                ~MacroExpansion();

                property System::String^ Name
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property System::String^ Text
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property CppSharp::Parser::AST::MacroDefinition^ Definition
                {
                    CppSharp::Parser::AST::MacroDefinition^ get();
                    void set(CppSharp::Parser::AST::MacroDefinition^);
                }
            };

            public ref class TranslationUnit : CppSharp::Parser::AST::Namespace
            {
            public:

                TranslationUnit(::CppSharp::CppParser::AST::TranslationUnit* native);
                TranslationUnit(::CppSharp::CppParser::AST::TranslationUnit* native, bool ownNativeInstance);
                static TranslationUnit^ __CreateInstance(::System::IntPtr native);
                static TranslationUnit^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                TranslationUnit();

                TranslationUnit(CppSharp::Parser::AST::TranslationUnit^ _0);

                ~TranslationUnit();

                property System::String^ FileName
                {
                    System::String^ get();
                    void set(System::String^);
                }

                property bool IsSystemHeader
                {
                    bool get();
                    void set(bool);
                }

                property System::Collections::Generic::List<CppSharp::Parser::AST::MacroDefinition^>^ Macros
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::MacroDefinition^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::MacroDefinition^>^);
                }

                property unsigned int MacrosCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::MacroDefinition^ GetMacros(unsigned int i);

                void AddMacros(CppSharp::Parser::AST::MacroDefinition^ s);

                void ClearMacros();
            };

            public ref class ASTContext : ICppInstance
            {
            public:

                property ::CppSharp::CppParser::AST::ASTContext* NativePtr;
                property System::IntPtr __Instance
                {
                    virtual System::IntPtr get();
                    virtual void set(System::IntPtr instance);
                }

                ASTContext(::CppSharp::CppParser::AST::ASTContext* native);
                ASTContext(::CppSharp::CppParser::AST::ASTContext* native, bool ownNativeInstance);
                static ASTContext^ __CreateInstance(::System::IntPtr native);
                static ASTContext^ __CreateInstance(::System::IntPtr native, bool __ownsNativeInstance);
                ASTContext();

                ASTContext(CppSharp::Parser::AST::ASTContext^ _0);

                ~ASTContext();

                property System::Collections::Generic::List<CppSharp::Parser::AST::TranslationUnit^>^ TranslationUnits
                {
                    System::Collections::Generic::List<CppSharp::Parser::AST::TranslationUnit^>^ get();
                    void set(System::Collections::Generic::List<CppSharp::Parser::AST::TranslationUnit^>^);
                }

                property unsigned int TranslationUnitsCount
                {
                    unsigned int get();
                }

                CppSharp::Parser::AST::TranslationUnit^ FindOrCreateModule(System::String^ File);

                CppSharp::Parser::AST::TranslationUnit^ GetTranslationUnits(unsigned int i);

                void AddTranslationUnits(CppSharp::Parser::AST::TranslationUnit^ s);

                void ClearTranslationUnits();

            protected:
                bool __ownsNativeInstance;
            };
        }
    }
}
