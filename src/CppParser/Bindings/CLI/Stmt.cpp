// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "Stmt.h"
#include "Decl.h"
#include "Expr.h"
#include "Sources.h"
#include "Types.h"

using namespace System;
using namespace System::Runtime::InteropServices;

CppSharp::Parser::AST::Stmt::Stmt(class ::CppSharp::CppParser::AST::Stmt* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::Stmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*) native.ToPointer());
}

CppSharp::Parser::AST::Stmt::Stmt(class ::CppSharp::CppParser::AST::Stmt* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::Stmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::Stmt::~Stmt()
{
    delete NativePtr;
}

CppSharp::Parser::AST::Stmt::Stmt()
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::Stmt();
}

CppSharp::Parser::AST::Stmt::Stmt(CppSharp::Parser::AST::StmtClass klass)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::Stmt(__arg0);
}

CppSharp::Parser::AST::Stmt::Stmt(CppSharp::Parser::AST::Stmt^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::Stmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::Stmt(__arg0);
}

CppSharp::Parser::AST::Stmt::operator CppSharp::Parser::AST::Stmt^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::Stmt) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::Stmt(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)_____ret, true);
}

::System::IntPtr CppSharp::Parser::AST::Stmt::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::Stmt::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::CppSharp::CppParser::AST::Stmt*)object.ToPointer();
}

CppSharp::Parser::AST::StmtClass CppSharp::Parser::AST::Stmt::StmtClass::get()
{
    return (CppSharp::Parser::AST::StmtClass)NativePtr->stmtClass;
}

void CppSharp::Parser::AST::Stmt::StmtClass::set(CppSharp::Parser::AST::StmtClass value)
{
    ((class ::CppSharp::CppParser::AST::Stmt*)NativePtr)->stmtClass = (enum ::CppSharp::CppParser::AST::StmtClass)value;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::Stmt::SourceRange::get()
{
    return (&NativePtr->sourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&NativePtr->sourceRange);
}

void CppSharp::Parser::AST::Stmt::SourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::Stmt*)NativePtr)->sourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::Stmt::BeginLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&NativePtr->beginLoc);
}

void CppSharp::Parser::AST::Stmt::BeginLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::Stmt*)NativePtr)->beginLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::Stmt::EndLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&NativePtr->endLoc);
}

void CppSharp::Parser::AST::Stmt::EndLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::Stmt*)NativePtr)->endLoc = _marshal0;
}

CppSharp::Parser::AST::DeclStmt::DeclStmt(class ::CppSharp::CppParser::AST::DeclStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::DeclStmt^ CppSharp::Parser::AST::DeclStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::DeclStmt((class ::CppSharp::CppParser::AST::DeclStmt*) native.ToPointer());
}

CppSharp::Parser::AST::DeclStmt::DeclStmt(class ::CppSharp::CppParser::AST::DeclStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::DeclStmt^ CppSharp::Parser::AST::DeclStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::DeclStmt((class ::CppSharp::CppParser::AST::DeclStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::DeclStmt::~DeclStmt()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::DeclStmt*) __nativePtr;
    }
}

CppSharp::Parser::AST::DeclStmt::DeclStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::DeclStmt();
}

CppSharp::Parser::AST::Declaration^ CppSharp::Parser::AST::DeclStmt::Getdecls(unsigned int i)
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::DeclStmt*)NativePtr)->getdecls(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Declaration((class ::CppSharp::CppParser::AST::Declaration*)___ret);
}

void CppSharp::Parser::AST::DeclStmt::Adddecls(CppSharp::Parser::AST::Declaration^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::Declaration*)s->NativePtr;
    ((class ::CppSharp::CppParser::AST::DeclStmt*)NativePtr)->adddecls(__arg0);
}

void CppSharp::Parser::AST::DeclStmt::Cleardecls()
{
    ((class ::CppSharp::CppParser::AST::DeclStmt*)NativePtr)->cleardecls();
}

CppSharp::Parser::AST::DeclStmt::DeclStmt(CppSharp::Parser::AST::DeclStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::DeclStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::DeclStmt(__arg0);
}

::System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ CppSharp::Parser::AST::DeclStmt::Decls::get()
{
    auto _tmp__decls = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>();
    auto __list0 = ((class ::CppSharp::CppParser::AST::DeclStmt*)NativePtr)->decls;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Declaration((class ::CppSharp::CppParser::AST::Declaration*)_element);
        _tmp__decls->Add(_marshalElement);
    }
    return _tmp__decls;
}

void CppSharp::Parser::AST::DeclStmt::Decls::set(::System::Collections::Generic::List<CppSharp::Parser::AST::Declaration^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::Declaration*>();
    for each(CppSharp::Parser::AST::Declaration^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::Declaration*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((class ::CppSharp::CppParser::AST::DeclStmt*)NativePtr)->decls = _tmpvalue;
}

bool CppSharp::Parser::AST::DeclStmt::IsSingleDecl::get()
{
    return ((class ::CppSharp::CppParser::AST::DeclStmt*)NativePtr)->isSingleDecl;
}

void CppSharp::Parser::AST::DeclStmt::IsSingleDecl::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DeclStmt*)NativePtr)->isSingleDecl = value;
}

unsigned int CppSharp::Parser::AST::DeclStmt::GetdeclsCount::get()
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::DeclStmt*)NativePtr)->getdeclsCount();
    return ___ret;
}

CppSharp::Parser::AST::NullStmt::NullStmt(class ::CppSharp::CppParser::AST::NullStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::NullStmt^ CppSharp::Parser::AST::NullStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::NullStmt((class ::CppSharp::CppParser::AST::NullStmt*) native.ToPointer());
}

CppSharp::Parser::AST::NullStmt::NullStmt(class ::CppSharp::CppParser::AST::NullStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::NullStmt^ CppSharp::Parser::AST::NullStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::NullStmt((class ::CppSharp::CppParser::AST::NullStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::NullStmt::~NullStmt()
{
}

CppSharp::Parser::AST::NullStmt::NullStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::NullStmt();
}

CppSharp::Parser::AST::NullStmt::NullStmt(CppSharp::Parser::AST::NullStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::NullStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::NullStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::NullStmt::SemiLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::NullStmt*)NativePtr)->semiLoc);
}

void CppSharp::Parser::AST::NullStmt::SemiLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::NullStmt*)NativePtr)->semiLoc = _marshal0;
}

bool CppSharp::Parser::AST::NullStmt::HasLeadingEmptyMacro::get()
{
    return ((class ::CppSharp::CppParser::AST::NullStmt*)NativePtr)->hasLeadingEmptyMacro;
}

void CppSharp::Parser::AST::NullStmt::HasLeadingEmptyMacro::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::NullStmt*)NativePtr)->hasLeadingEmptyMacro = value;
}

CppSharp::Parser::AST::CompoundStmt::CompoundStmt(class ::CppSharp::CppParser::AST::CompoundStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::CompoundStmt^ CppSharp::Parser::AST::CompoundStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CompoundStmt((class ::CppSharp::CppParser::AST::CompoundStmt*) native.ToPointer());
}

CppSharp::Parser::AST::CompoundStmt::CompoundStmt(class ::CppSharp::CppParser::AST::CompoundStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CompoundStmt^ CppSharp::Parser::AST::CompoundStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CompoundStmt((class ::CppSharp::CppParser::AST::CompoundStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CompoundStmt::~CompoundStmt()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CompoundStmt*) __nativePtr;
    }
}

CppSharp::Parser::AST::CompoundStmt::CompoundStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CompoundStmt();
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CompoundStmt::Getbody(unsigned int i)
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->getbody(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)___ret);
}

void CppSharp::Parser::AST::CompoundStmt::Addbody(CppSharp::Parser::AST::Stmt^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::Stmt*)s->NativePtr;
    ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->addbody(__arg0);
}

void CppSharp::Parser::AST::CompoundStmt::Clearbody()
{
    ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->clearbody();
}

CppSharp::Parser::AST::CompoundStmt::CompoundStmt(CppSharp::Parser::AST::CompoundStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CompoundStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CompoundStmt(__arg0);
}

::System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^ CppSharp::Parser::AST::CompoundStmt::Body::get()
{
    auto _tmp__body = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>();
    auto __list0 = ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->body;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)_element);
        _tmp__body->Add(_marshalElement);
    }
    return _tmp__body;
}

void CppSharp::Parser::AST::CompoundStmt::Body::set(::System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::Stmt*>();
    for each(CppSharp::Parser::AST::Stmt^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::Stmt*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->body = _tmpvalue;
}

bool CppSharp::Parser::AST::CompoundStmt::BodyEmpty::get()
{
    return ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->body_empty;
}

void CppSharp::Parser::AST::CompoundStmt::BodyEmpty::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->body_empty = value;
}

unsigned int CppSharp::Parser::AST::CompoundStmt::Size::get()
{
    return ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->size;
}

void CppSharp::Parser::AST::CompoundStmt::Size::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->size = value;
}

bool CppSharp::Parser::AST::CompoundStmt::HasStoredFPFeatures::get()
{
    return ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->hasStoredFPFeatures;
}

void CppSharp::Parser::AST::CompoundStmt::HasStoredFPFeatures::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->hasStoredFPFeatures = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CompoundStmt::LBracLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->lBracLoc);
}

void CppSharp::Parser::AST::CompoundStmt::LBracLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->lBracLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CompoundStmt::RBracLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->rBracLoc);
}

void CppSharp::Parser::AST::CompoundStmt::RBracLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->rBracLoc = _marshal0;
}

unsigned int CppSharp::Parser::AST::CompoundStmt::GetbodyCount::get()
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CompoundStmt*)NativePtr)->getbodyCount();
    return ___ret;
}

CppSharp::Parser::AST::SwitchCase::SwitchCase(class ::CppSharp::CppParser::AST::SwitchCase* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::SwitchCase^ CppSharp::Parser::AST::SwitchCase::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::SwitchCase((class ::CppSharp::CppParser::AST::SwitchCase*) native.ToPointer());
}

CppSharp::Parser::AST::SwitchCase::SwitchCase(class ::CppSharp::CppParser::AST::SwitchCase* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::SwitchCase^ CppSharp::Parser::AST::SwitchCase::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::SwitchCase((class ::CppSharp::CppParser::AST::SwitchCase*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::SwitchCase::~SwitchCase()
{
}

CppSharp::Parser::AST::SwitchCase::SwitchCase()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::SwitchCase();
}

CppSharp::Parser::AST::SwitchCase::SwitchCase(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::SwitchCase(__arg0);
}

CppSharp::Parser::AST::SwitchCase::SwitchCase(CppSharp::Parser::AST::SwitchCase^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::SwitchCase*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::SwitchCase(__arg0);
}

CppSharp::Parser::AST::SwitchCase::operator CppSharp::Parser::AST::SwitchCase^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::SwitchCase) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::SwitchCase(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::SwitchCase((class ::CppSharp::CppParser::AST::SwitchCase*)_____ret, true);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SwitchCase::KeywordLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SwitchCase*)NativePtr)->keywordLoc);
}

void CppSharp::Parser::AST::SwitchCase::KeywordLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SwitchCase*)NativePtr)->keywordLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SwitchCase::ColonLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SwitchCase*)NativePtr)->colonLoc);
}

void CppSharp::Parser::AST::SwitchCase::ColonLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SwitchCase*)NativePtr)->colonLoc = _marshal0;
}

CppSharp::Parser::AST::CaseStmt::CaseStmt(class ::CppSharp::CppParser::AST::CaseStmt* native)
    : CppSharp::Parser::AST::SwitchCase((::CppSharp::CppParser::AST::SwitchCase*)native)
{
}

CppSharp::Parser::AST::CaseStmt^ CppSharp::Parser::AST::CaseStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CaseStmt((class ::CppSharp::CppParser::AST::CaseStmt*) native.ToPointer());
}

CppSharp::Parser::AST::CaseStmt::CaseStmt(class ::CppSharp::CppParser::AST::CaseStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::SwitchCase((::CppSharp::CppParser::AST::SwitchCase*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CaseStmt^ CppSharp::Parser::AST::CaseStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CaseStmt((class ::CppSharp::CppParser::AST::CaseStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CaseStmt::~CaseStmt()
{
}

CppSharp::Parser::AST::CaseStmt::CaseStmt()
    : CppSharp::Parser::AST::SwitchCase((::CppSharp::CppParser::AST::SwitchCase*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CaseStmt();
}

CppSharp::Parser::AST::CaseStmt::CaseStmt(CppSharp::Parser::AST::CaseStmt^ _0)
    : CppSharp::Parser::AST::SwitchCase((::CppSharp::CppParser::AST::SwitchCase*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CaseStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CaseStmt(__arg0);
}

bool CppSharp::Parser::AST::CaseStmt::CaseStmtIsGNURange::get()
{
    return ((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->caseStmtIsGNURange;
}

void CppSharp::Parser::AST::CaseStmt::CaseStmtIsGNURange::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->caseStmtIsGNURange = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CaseStmt::CaseLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->caseLoc);
}

void CppSharp::Parser::AST::CaseStmt::CaseLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->caseLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CaseStmt::EllipsisLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->ellipsisLoc);
}

void CppSharp::Parser::AST::CaseStmt::EllipsisLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->ellipsisLoc = _marshal0;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CaseStmt::LHS::get()
{
    return (((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->lHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->lHS);
}

void CppSharp::Parser::AST::CaseStmt::LHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->lHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CaseStmt::RHS::get()
{
    return (((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->rHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->rHS);
}

void CppSharp::Parser::AST::CaseStmt::RHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->rHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CaseStmt::SubStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->subStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->subStmt);
}

void CppSharp::Parser::AST::CaseStmt::SubStmt::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CaseStmt*)NativePtr)->subStmt = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::DefaultStmt::DefaultStmt(class ::CppSharp::CppParser::AST::DefaultStmt* native)
    : CppSharp::Parser::AST::SwitchCase((::CppSharp::CppParser::AST::SwitchCase*)native)
{
}

CppSharp::Parser::AST::DefaultStmt^ CppSharp::Parser::AST::DefaultStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::DefaultStmt((class ::CppSharp::CppParser::AST::DefaultStmt*) native.ToPointer());
}

CppSharp::Parser::AST::DefaultStmt::DefaultStmt(class ::CppSharp::CppParser::AST::DefaultStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::SwitchCase((::CppSharp::CppParser::AST::SwitchCase*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::DefaultStmt^ CppSharp::Parser::AST::DefaultStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::DefaultStmt((class ::CppSharp::CppParser::AST::DefaultStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::DefaultStmt::~DefaultStmt()
{
}

CppSharp::Parser::AST::DefaultStmt::DefaultStmt()
    : CppSharp::Parser::AST::SwitchCase((::CppSharp::CppParser::AST::SwitchCase*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::DefaultStmt();
}

CppSharp::Parser::AST::DefaultStmt::DefaultStmt(CppSharp::Parser::AST::DefaultStmt^ _0)
    : CppSharp::Parser::AST::SwitchCase((::CppSharp::CppParser::AST::SwitchCase*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::DefaultStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::DefaultStmt(__arg0);
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::DefaultStmt::SubStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::DefaultStmt*)NativePtr)->subStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::DefaultStmt*)NativePtr)->subStmt);
}

void CppSharp::Parser::AST::DefaultStmt::SubStmt::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::DefaultStmt*)NativePtr)->subStmt = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DefaultStmt::DefaultLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DefaultStmt*)NativePtr)->defaultLoc);
}

void CppSharp::Parser::AST::DefaultStmt::DefaultLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DefaultStmt*)NativePtr)->defaultLoc = _marshal0;
}

CppSharp::Parser::AST::ValueStmt::ValueStmt(class ::CppSharp::CppParser::AST::ValueStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::ValueStmt^ CppSharp::Parser::AST::ValueStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ValueStmt((class ::CppSharp::CppParser::AST::ValueStmt*) native.ToPointer());
}

CppSharp::Parser::AST::ValueStmt::ValueStmt(class ::CppSharp::CppParser::AST::ValueStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ValueStmt^ CppSharp::Parser::AST::ValueStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ValueStmt((class ::CppSharp::CppParser::AST::ValueStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ValueStmt::~ValueStmt()
{
}

CppSharp::Parser::AST::ValueStmt::ValueStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ValueStmt();
}

CppSharp::Parser::AST::ValueStmt::ValueStmt(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::ValueStmt(__arg0);
}

CppSharp::Parser::AST::ValueStmt::ValueStmt(CppSharp::Parser::AST::ValueStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ValueStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ValueStmt(__arg0);
}

CppSharp::Parser::AST::ValueStmt::operator CppSharp::Parser::AST::ValueStmt^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::ValueStmt) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::ValueStmt(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::ValueStmt((class ::CppSharp::CppParser::AST::ValueStmt*)_____ret, true);
}

CppSharp::Parser::AST::LabelStmt::LabelStmt(class ::CppSharp::CppParser::AST::LabelStmt* native)
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)native)
{
}

CppSharp::Parser::AST::LabelStmt^ CppSharp::Parser::AST::LabelStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::LabelStmt((class ::CppSharp::CppParser::AST::LabelStmt*) native.ToPointer());
}

CppSharp::Parser::AST::LabelStmt::LabelStmt(class ::CppSharp::CppParser::AST::LabelStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::LabelStmt^ CppSharp::Parser::AST::LabelStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::LabelStmt((class ::CppSharp::CppParser::AST::LabelStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::LabelStmt::~LabelStmt()
{
}

CppSharp::Parser::AST::LabelStmt::LabelStmt()
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::LabelStmt();
}

CppSharp::Parser::AST::LabelStmt::LabelStmt(CppSharp::Parser::AST::LabelStmt^ _0)
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::LabelStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::LabelStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::LabelStmt::IdentLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::LabelStmt*)NativePtr)->identLoc);
}

void CppSharp::Parser::AST::LabelStmt::IdentLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::LabelStmt*)NativePtr)->identLoc = _marshal0;
}

::System::String^ CppSharp::Parser::AST::LabelStmt::Name::get()
{
    return (((class ::CppSharp::CppParser::AST::LabelStmt*)NativePtr)->name == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((class ::CppSharp::CppParser::AST::LabelStmt*)NativePtr)->name));
}

void CppSharp::Parser::AST::LabelStmt::Name::set(::System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((class ::CppSharp::CppParser::AST::LabelStmt*)NativePtr)->name = _value.c_str();
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::LabelStmt::SubStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::LabelStmt*)NativePtr)->subStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::LabelStmt*)NativePtr)->subStmt);
}

void CppSharp::Parser::AST::LabelStmt::SubStmt::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::LabelStmt*)NativePtr)->subStmt = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

bool CppSharp::Parser::AST::LabelStmt::SideEntry::get()
{
    return ((class ::CppSharp::CppParser::AST::LabelStmt*)NativePtr)->sideEntry;
}

void CppSharp::Parser::AST::LabelStmt::SideEntry::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::LabelStmt*)NativePtr)->sideEntry = value;
}

CppSharp::Parser::AST::AttributedStmt::AttributedStmt(class ::CppSharp::CppParser::AST::AttributedStmt* native)
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)native)
{
}

CppSharp::Parser::AST::AttributedStmt^ CppSharp::Parser::AST::AttributedStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::AttributedStmt((class ::CppSharp::CppParser::AST::AttributedStmt*) native.ToPointer());
}

CppSharp::Parser::AST::AttributedStmt::AttributedStmt(class ::CppSharp::CppParser::AST::AttributedStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::AttributedStmt^ CppSharp::Parser::AST::AttributedStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::AttributedStmt((class ::CppSharp::CppParser::AST::AttributedStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::AttributedStmt::~AttributedStmt()
{
}

CppSharp::Parser::AST::AttributedStmt::AttributedStmt()
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::AttributedStmt();
}

CppSharp::Parser::AST::AttributedStmt::AttributedStmt(CppSharp::Parser::AST::AttributedStmt^ _0)
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::AttributedStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::AttributedStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::AttributedStmt::AttrLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::AttributedStmt*)NativePtr)->attrLoc);
}

void CppSharp::Parser::AST::AttributedStmt::AttrLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::AttributedStmt*)NativePtr)->attrLoc = _marshal0;
}

CppSharp::Parser::AST::IfStmt::IfStmt(class ::CppSharp::CppParser::AST::IfStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::IfStmt^ CppSharp::Parser::AST::IfStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::IfStmt((class ::CppSharp::CppParser::AST::IfStmt*) native.ToPointer());
}

CppSharp::Parser::AST::IfStmt::IfStmt(class ::CppSharp::CppParser::AST::IfStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::IfStmt^ CppSharp::Parser::AST::IfStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::IfStmt((class ::CppSharp::CppParser::AST::IfStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::IfStmt::~IfStmt()
{
}

CppSharp::Parser::AST::IfStmt::IfStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::IfStmt();
}

CppSharp::Parser::AST::IfStmt::IfStmt(CppSharp::Parser::AST::IfStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::IfStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::IfStmt(__arg0);
}

bool CppSharp::Parser::AST::IfStmt::HasInitStorage::get()
{
    return ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->hasInitStorage;
}

void CppSharp::Parser::AST::IfStmt::HasInitStorage::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->hasInitStorage = value;
}

bool CppSharp::Parser::AST::IfStmt::HasVarStorage::get()
{
    return ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->hasVarStorage;
}

void CppSharp::Parser::AST::IfStmt::HasVarStorage::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->hasVarStorage = value;
}

bool CppSharp::Parser::AST::IfStmt::HasElseStorage::get()
{
    return ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->hasElseStorage;
}

void CppSharp::Parser::AST::IfStmt::HasElseStorage::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->hasElseStorage = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::IfStmt::Cond::get()
{
    return (((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->cond == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->cond);
}

void CppSharp::Parser::AST::IfStmt::Cond::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->cond = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::IfStmt::Then::get()
{
    return (((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->then == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->then);
}

void CppSharp::Parser::AST::IfStmt::Then::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->then = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::IfStmt::Else::get()
{
    return (((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->_else == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->_else);
}

void CppSharp::Parser::AST::IfStmt::Else::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->_else = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::DeclStmt^ CppSharp::Parser::AST::IfStmt::ConditionVariableDeclStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->conditionVariableDeclStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::DeclStmt((class ::CppSharp::CppParser::AST::DeclStmt*)((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->conditionVariableDeclStmt);
}

void CppSharp::Parser::AST::IfStmt::ConditionVariableDeclStmt::set(CppSharp::Parser::AST::DeclStmt^ value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->conditionVariableDeclStmt = (class ::CppSharp::CppParser::AST::DeclStmt*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::IfStmt::Init::get()
{
    return (((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->init == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->init);
}

void CppSharp::Parser::AST::IfStmt::Init::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->init = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::IfStmt::IfLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->ifLoc);
}

void CppSharp::Parser::AST::IfStmt::IfLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->ifLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::IfStmt::ElseLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->elseLoc);
}

void CppSharp::Parser::AST::IfStmt::ElseLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->elseLoc = _marshal0;
}

bool CppSharp::Parser::AST::IfStmt::IsConsteval::get()
{
    return ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->isConsteval;
}

void CppSharp::Parser::AST::IfStmt::IsConsteval::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->isConsteval = value;
}

bool CppSharp::Parser::AST::IfStmt::IsNonNegatedConsteval::get()
{
    return ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->isNonNegatedConsteval;
}

void CppSharp::Parser::AST::IfStmt::IsNonNegatedConsteval::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->isNonNegatedConsteval = value;
}

bool CppSharp::Parser::AST::IfStmt::IsNegatedConsteval::get()
{
    return ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->isNegatedConsteval;
}

void CppSharp::Parser::AST::IfStmt::IsNegatedConsteval::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->isNegatedConsteval = value;
}

bool CppSharp::Parser::AST::IfStmt::IsConstexpr::get()
{
    return ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->isConstexpr;
}

void CppSharp::Parser::AST::IfStmt::IsConstexpr::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->isConstexpr = value;
}

CppSharp::Parser::AST::IfStatementKind CppSharp::Parser::AST::IfStmt::StatementKind::get()
{
    return (CppSharp::Parser::AST::IfStatementKind)((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->statementKind;
}

void CppSharp::Parser::AST::IfStmt::StatementKind::set(CppSharp::Parser::AST::IfStatementKind value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->statementKind = (enum ::CppSharp::CppParser::AST::IfStatementKind)value;
}

bool CppSharp::Parser::AST::IfStmt::IsObjCAvailabilityCheck::get()
{
    return ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->isObjCAvailabilityCheck;
}

void CppSharp::Parser::AST::IfStmt::IsObjCAvailabilityCheck::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->isObjCAvailabilityCheck = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::IfStmt::LParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->lParenLoc);
}

void CppSharp::Parser::AST::IfStmt::LParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->lParenLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::IfStmt::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::IfStmt::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::IfStmt*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::SwitchStmt::SwitchStmt(class ::CppSharp::CppParser::AST::SwitchStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::SwitchStmt^ CppSharp::Parser::AST::SwitchStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::SwitchStmt((class ::CppSharp::CppParser::AST::SwitchStmt*) native.ToPointer());
}

CppSharp::Parser::AST::SwitchStmt::SwitchStmt(class ::CppSharp::CppParser::AST::SwitchStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::SwitchStmt^ CppSharp::Parser::AST::SwitchStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::SwitchStmt((class ::CppSharp::CppParser::AST::SwitchStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::SwitchStmt::~SwitchStmt()
{
}

CppSharp::Parser::AST::SwitchStmt::SwitchStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::SwitchStmt();
}

CppSharp::Parser::AST::SwitchStmt::SwitchStmt(CppSharp::Parser::AST::SwitchStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::SwitchStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::SwitchStmt(__arg0);
}

bool CppSharp::Parser::AST::SwitchStmt::HasInitStorage::get()
{
    return ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->hasInitStorage;
}

void CppSharp::Parser::AST::SwitchStmt::HasInitStorage::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->hasInitStorage = value;
}

bool CppSharp::Parser::AST::SwitchStmt::HasVarStorage::get()
{
    return ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->hasVarStorage;
}

void CppSharp::Parser::AST::SwitchStmt::HasVarStorage::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->hasVarStorage = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::SwitchStmt::Cond::get()
{
    return (((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->cond == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->cond);
}

void CppSharp::Parser::AST::SwitchStmt::Cond::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->cond = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::SwitchStmt::Body::get()
{
    return (((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->body == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->body);
}

void CppSharp::Parser::AST::SwitchStmt::Body::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->body = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::SwitchStmt::Init::get()
{
    return (((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->init == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->init);
}

void CppSharp::Parser::AST::SwitchStmt::Init::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->init = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::DeclStmt^ CppSharp::Parser::AST::SwitchStmt::ConditionVariableDeclStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->conditionVariableDeclStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::DeclStmt((class ::CppSharp::CppParser::AST::DeclStmt*)((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->conditionVariableDeclStmt);
}

void CppSharp::Parser::AST::SwitchStmt::ConditionVariableDeclStmt::set(CppSharp::Parser::AST::DeclStmt^ value)
{
    ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->conditionVariableDeclStmt = (class ::CppSharp::CppParser::AST::DeclStmt*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SwitchStmt::SwitchLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->switchLoc);
}

void CppSharp::Parser::AST::SwitchStmt::SwitchLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->switchLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SwitchStmt::LParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->lParenLoc);
}

void CppSharp::Parser::AST::SwitchStmt::LParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->lParenLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SwitchStmt::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::SwitchStmt::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->rParenLoc = _marshal0;
}

bool CppSharp::Parser::AST::SwitchStmt::IsAllEnumCasesCovered::get()
{
    return ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->isAllEnumCasesCovered;
}

void CppSharp::Parser::AST::SwitchStmt::IsAllEnumCasesCovered::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::SwitchStmt*)NativePtr)->isAllEnumCasesCovered = value;
}

CppSharp::Parser::AST::WhileStmt::WhileStmt(class ::CppSharp::CppParser::AST::WhileStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::WhileStmt^ CppSharp::Parser::AST::WhileStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::WhileStmt((class ::CppSharp::CppParser::AST::WhileStmt*) native.ToPointer());
}

CppSharp::Parser::AST::WhileStmt::WhileStmt(class ::CppSharp::CppParser::AST::WhileStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::WhileStmt^ CppSharp::Parser::AST::WhileStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::WhileStmt((class ::CppSharp::CppParser::AST::WhileStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::WhileStmt::~WhileStmt()
{
}

CppSharp::Parser::AST::WhileStmt::WhileStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::WhileStmt();
}

CppSharp::Parser::AST::WhileStmt::WhileStmt(CppSharp::Parser::AST::WhileStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::WhileStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::WhileStmt(__arg0);
}

bool CppSharp::Parser::AST::WhileStmt::HasVarStorage::get()
{
    return ((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->hasVarStorage;
}

void CppSharp::Parser::AST::WhileStmt::HasVarStorage::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->hasVarStorage = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::WhileStmt::Cond::get()
{
    return (((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->cond == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->cond);
}

void CppSharp::Parser::AST::WhileStmt::Cond::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->cond = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::WhileStmt::Body::get()
{
    return (((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->body == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->body);
}

void CppSharp::Parser::AST::WhileStmt::Body::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->body = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::DeclStmt^ CppSharp::Parser::AST::WhileStmt::ConditionVariableDeclStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->conditionVariableDeclStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::DeclStmt((class ::CppSharp::CppParser::AST::DeclStmt*)((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->conditionVariableDeclStmt);
}

void CppSharp::Parser::AST::WhileStmt::ConditionVariableDeclStmt::set(CppSharp::Parser::AST::DeclStmt^ value)
{
    ((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->conditionVariableDeclStmt = (class ::CppSharp::CppParser::AST::DeclStmt*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::WhileStmt::WhileLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->whileLoc);
}

void CppSharp::Parser::AST::WhileStmt::WhileLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->whileLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::WhileStmt::LParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->lParenLoc);
}

void CppSharp::Parser::AST::WhileStmt::LParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->lParenLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::WhileStmt::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::WhileStmt::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::WhileStmt*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::DoStmt::DoStmt(class ::CppSharp::CppParser::AST::DoStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::DoStmt^ CppSharp::Parser::AST::DoStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::DoStmt((class ::CppSharp::CppParser::AST::DoStmt*) native.ToPointer());
}

CppSharp::Parser::AST::DoStmt::DoStmt(class ::CppSharp::CppParser::AST::DoStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::DoStmt^ CppSharp::Parser::AST::DoStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::DoStmt((class ::CppSharp::CppParser::AST::DoStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::DoStmt::~DoStmt()
{
}

CppSharp::Parser::AST::DoStmt::DoStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::DoStmt();
}

CppSharp::Parser::AST::DoStmt::DoStmt(CppSharp::Parser::AST::DoStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::DoStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::DoStmt(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::DoStmt::Cond::get()
{
    return (((class ::CppSharp::CppParser::AST::DoStmt*)NativePtr)->cond == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::DoStmt*)NativePtr)->cond);
}

void CppSharp::Parser::AST::DoStmt::Cond::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::DoStmt*)NativePtr)->cond = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::DoStmt::Body::get()
{
    return (((class ::CppSharp::CppParser::AST::DoStmt*)NativePtr)->body == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::DoStmt*)NativePtr)->body);
}

void CppSharp::Parser::AST::DoStmt::Body::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::DoStmt*)NativePtr)->body = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DoStmt::DoLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DoStmt*)NativePtr)->doLoc);
}

void CppSharp::Parser::AST::DoStmt::DoLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DoStmt*)NativePtr)->doLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DoStmt::WhileLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DoStmt*)NativePtr)->whileLoc);
}

void CppSharp::Parser::AST::DoStmt::WhileLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DoStmt*)NativePtr)->whileLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DoStmt::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DoStmt*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::DoStmt::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DoStmt*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::ForStmt::ForStmt(class ::CppSharp::CppParser::AST::ForStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::ForStmt^ CppSharp::Parser::AST::ForStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ForStmt((class ::CppSharp::CppParser::AST::ForStmt*) native.ToPointer());
}

CppSharp::Parser::AST::ForStmt::ForStmt(class ::CppSharp::CppParser::AST::ForStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ForStmt^ CppSharp::Parser::AST::ForStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ForStmt((class ::CppSharp::CppParser::AST::ForStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ForStmt::~ForStmt()
{
}

CppSharp::Parser::AST::ForStmt::ForStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ForStmt();
}

CppSharp::Parser::AST::ForStmt::ForStmt(CppSharp::Parser::AST::ForStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ForStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ForStmt(__arg0);
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::ForStmt::Init::get()
{
    return (((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->init == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->init);
}

void CppSharp::Parser::AST::ForStmt::Init::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->init = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::DeclStmt^ CppSharp::Parser::AST::ForStmt::ConditionVariableDeclStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->conditionVariableDeclStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::DeclStmt((class ::CppSharp::CppParser::AST::DeclStmt*)((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->conditionVariableDeclStmt);
}

void CppSharp::Parser::AST::ForStmt::ConditionVariableDeclStmt::set(CppSharp::Parser::AST::DeclStmt^ value)
{
    ((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->conditionVariableDeclStmt = (class ::CppSharp::CppParser::AST::DeclStmt*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ForStmt::Cond::get()
{
    return (((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->cond == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->cond);
}

void CppSharp::Parser::AST::ForStmt::Cond::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->cond = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ForStmt::Inc::get()
{
    return (((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->inc == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->inc);
}

void CppSharp::Parser::AST::ForStmt::Inc::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->inc = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::ForStmt::Body::get()
{
    return (((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->body == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->body);
}

void CppSharp::Parser::AST::ForStmt::Body::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->body = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ForStmt::ForLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->forLoc);
}

void CppSharp::Parser::AST::ForStmt::ForLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->forLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ForStmt::LParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->lParenLoc);
}

void CppSharp::Parser::AST::ForStmt::LParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->lParenLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ForStmt::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::ForStmt::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ForStmt*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::GotoStmt::GotoStmt(class ::CppSharp::CppParser::AST::GotoStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::GotoStmt^ CppSharp::Parser::AST::GotoStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::GotoStmt((class ::CppSharp::CppParser::AST::GotoStmt*) native.ToPointer());
}

CppSharp::Parser::AST::GotoStmt::GotoStmt(class ::CppSharp::CppParser::AST::GotoStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::GotoStmt^ CppSharp::Parser::AST::GotoStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::GotoStmt((class ::CppSharp::CppParser::AST::GotoStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::GotoStmt::~GotoStmt()
{
}

CppSharp::Parser::AST::GotoStmt::GotoStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::GotoStmt();
}

CppSharp::Parser::AST::GotoStmt::GotoStmt(CppSharp::Parser::AST::GotoStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::GotoStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::GotoStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::GotoStmt::GotoLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::GotoStmt*)NativePtr)->gotoLoc);
}

void CppSharp::Parser::AST::GotoStmt::GotoLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::GotoStmt*)NativePtr)->gotoLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::GotoStmt::LabelLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::GotoStmt*)NativePtr)->labelLoc);
}

void CppSharp::Parser::AST::GotoStmt::LabelLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::GotoStmt*)NativePtr)->labelLoc = _marshal0;
}

CppSharp::Parser::AST::IndirectGotoStmt::IndirectGotoStmt(class ::CppSharp::CppParser::AST::IndirectGotoStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::IndirectGotoStmt^ CppSharp::Parser::AST::IndirectGotoStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::IndirectGotoStmt((class ::CppSharp::CppParser::AST::IndirectGotoStmt*) native.ToPointer());
}

CppSharp::Parser::AST::IndirectGotoStmt::IndirectGotoStmt(class ::CppSharp::CppParser::AST::IndirectGotoStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::IndirectGotoStmt^ CppSharp::Parser::AST::IndirectGotoStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::IndirectGotoStmt((class ::CppSharp::CppParser::AST::IndirectGotoStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::IndirectGotoStmt::~IndirectGotoStmt()
{
}

CppSharp::Parser::AST::IndirectGotoStmt::IndirectGotoStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::IndirectGotoStmt();
}

CppSharp::Parser::AST::IndirectGotoStmt::IndirectGotoStmt(CppSharp::Parser::AST::IndirectGotoStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::IndirectGotoStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::IndirectGotoStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::IndirectGotoStmt::GotoLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::IndirectGotoStmt*)NativePtr)->gotoLoc);
}

void CppSharp::Parser::AST::IndirectGotoStmt::GotoLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::IndirectGotoStmt*)NativePtr)->gotoLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::IndirectGotoStmt::StarLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::IndirectGotoStmt*)NativePtr)->starLoc);
}

void CppSharp::Parser::AST::IndirectGotoStmt::StarLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::IndirectGotoStmt*)NativePtr)->starLoc = _marshal0;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::IndirectGotoStmt::Target::get()
{
    return (((class ::CppSharp::CppParser::AST::IndirectGotoStmt*)NativePtr)->target == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::IndirectGotoStmt*)NativePtr)->target);
}

void CppSharp::Parser::AST::IndirectGotoStmt::Target::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::IndirectGotoStmt*)NativePtr)->target = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::ContinueStmt::ContinueStmt(class ::CppSharp::CppParser::AST::ContinueStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::ContinueStmt^ CppSharp::Parser::AST::ContinueStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ContinueStmt((class ::CppSharp::CppParser::AST::ContinueStmt*) native.ToPointer());
}

CppSharp::Parser::AST::ContinueStmt::ContinueStmt(class ::CppSharp::CppParser::AST::ContinueStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ContinueStmt^ CppSharp::Parser::AST::ContinueStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ContinueStmt((class ::CppSharp::CppParser::AST::ContinueStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ContinueStmt::~ContinueStmt()
{
}

CppSharp::Parser::AST::ContinueStmt::ContinueStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ContinueStmt();
}

CppSharp::Parser::AST::ContinueStmt::ContinueStmt(CppSharp::Parser::AST::ContinueStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ContinueStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ContinueStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ContinueStmt::ContinueLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ContinueStmt*)NativePtr)->continueLoc);
}

void CppSharp::Parser::AST::ContinueStmt::ContinueLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ContinueStmt*)NativePtr)->continueLoc = _marshal0;
}

CppSharp::Parser::AST::BreakStmt::BreakStmt(class ::CppSharp::CppParser::AST::BreakStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::BreakStmt^ CppSharp::Parser::AST::BreakStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::BreakStmt((class ::CppSharp::CppParser::AST::BreakStmt*) native.ToPointer());
}

CppSharp::Parser::AST::BreakStmt::BreakStmt(class ::CppSharp::CppParser::AST::BreakStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::BreakStmt^ CppSharp::Parser::AST::BreakStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::BreakStmt((class ::CppSharp::CppParser::AST::BreakStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::BreakStmt::~BreakStmt()
{
}

CppSharp::Parser::AST::BreakStmt::BreakStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::BreakStmt();
}

CppSharp::Parser::AST::BreakStmt::BreakStmt(CppSharp::Parser::AST::BreakStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::BreakStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::BreakStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::BreakStmt::BreakLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::BreakStmt*)NativePtr)->breakLoc);
}

void CppSharp::Parser::AST::BreakStmt::BreakLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::BreakStmt*)NativePtr)->breakLoc = _marshal0;
}

CppSharp::Parser::AST::ReturnStmt::ReturnStmt(class ::CppSharp::CppParser::AST::ReturnStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::ReturnStmt^ CppSharp::Parser::AST::ReturnStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ReturnStmt((class ::CppSharp::CppParser::AST::ReturnStmt*) native.ToPointer());
}

CppSharp::Parser::AST::ReturnStmt::ReturnStmt(class ::CppSharp::CppParser::AST::ReturnStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ReturnStmt^ CppSharp::Parser::AST::ReturnStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ReturnStmt((class ::CppSharp::CppParser::AST::ReturnStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ReturnStmt::~ReturnStmt()
{
}

CppSharp::Parser::AST::ReturnStmt::ReturnStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ReturnStmt();
}

CppSharp::Parser::AST::ReturnStmt::ReturnStmt(CppSharp::Parser::AST::ReturnStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ReturnStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ReturnStmt(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ReturnStmt::RetValue::get()
{
    return (((class ::CppSharp::CppParser::AST::ReturnStmt*)NativePtr)->retValue == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ReturnStmt*)NativePtr)->retValue);
}

void CppSharp::Parser::AST::ReturnStmt::RetValue::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ReturnStmt*)NativePtr)->retValue = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ReturnStmt::ReturnLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ReturnStmt*)NativePtr)->returnLoc);
}

void CppSharp::Parser::AST::ReturnStmt::ReturnLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ReturnStmt*)NativePtr)->returnLoc = _marshal0;
}

CppSharp::Parser::AST::AsmStmt::AsmStmt(class ::CppSharp::CppParser::AST::AsmStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::AsmStmt^ CppSharp::Parser::AST::AsmStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::AsmStmt((class ::CppSharp::CppParser::AST::AsmStmt*) native.ToPointer());
}

CppSharp::Parser::AST::AsmStmt::AsmStmt(class ::CppSharp::CppParser::AST::AsmStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::AsmStmt^ CppSharp::Parser::AST::AsmStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::AsmStmt((class ::CppSharp::CppParser::AST::AsmStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::AsmStmt::~AsmStmt()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::AsmStmt*) __nativePtr;
    }
}

CppSharp::Parser::AST::AsmStmt::AsmStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::AsmStmt();
}

CppSharp::Parser::AST::AsmStmt::AsmStmt(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::AsmStmt(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AsmStmt::Getinputs(unsigned int i)
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->getinputs(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)___ret);
}

void CppSharp::Parser::AST::AsmStmt::Addinputs(CppSharp::Parser::AST::Expr^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::Expr*)s->NativePtr;
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->addinputs(__arg0);
}

void CppSharp::Parser::AST::AsmStmt::Clearinputs()
{
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->clearinputs();
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AsmStmt::Getoutputs(unsigned int i)
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->getoutputs(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)___ret);
}

void CppSharp::Parser::AST::AsmStmt::Addoutputs(CppSharp::Parser::AST::Expr^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::Expr*)s->NativePtr;
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->addoutputs(__arg0);
}

void CppSharp::Parser::AST::AsmStmt::Clearoutputs()
{
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->clearoutputs();
}

CppSharp::Parser::AST::AsmStmt::AsmStmt(CppSharp::Parser::AST::AsmStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::AsmStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::AsmStmt(__arg0);
}

CppSharp::Parser::AST::AsmStmt::operator CppSharp::Parser::AST::AsmStmt^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::AsmStmt) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::AsmStmt(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::AsmStmt((class ::CppSharp::CppParser::AST::AsmStmt*)_____ret, true);
}

::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ CppSharp::Parser::AST::AsmStmt::Inputs::get()
{
    auto _tmp__inputs = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>();
    auto __list0 = ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->inputs;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)_element);
        _tmp__inputs->Add(_marshalElement);
    }
    return _tmp__inputs;
}

void CppSharp::Parser::AST::AsmStmt::Inputs::set(::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::Expr*>();
    for each(CppSharp::Parser::AST::Expr^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::Expr*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->inputs = _tmpvalue;
}

::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ CppSharp::Parser::AST::AsmStmt::Outputs::get()
{
    auto _tmp__outputs = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>();
    auto __list0 = ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->outputs;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)_element);
        _tmp__outputs->Add(_marshalElement);
    }
    return _tmp__outputs;
}

void CppSharp::Parser::AST::AsmStmt::Outputs::set(::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::Expr*>();
    for each(CppSharp::Parser::AST::Expr^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::Expr*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->outputs = _tmpvalue;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::AsmStmt::AsmLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->asmLoc);
}

void CppSharp::Parser::AST::AsmStmt::AsmLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->asmLoc = _marshal0;
}

bool CppSharp::Parser::AST::AsmStmt::Simple::get()
{
    return ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->simple;
}

void CppSharp::Parser::AST::AsmStmt::Simple::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->simple = value;
}

bool CppSharp::Parser::AST::AsmStmt::Volatile::get()
{
    return ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->_volatile;
}

void CppSharp::Parser::AST::AsmStmt::Volatile::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->_volatile = value;
}

unsigned int CppSharp::Parser::AST::AsmStmt::NumOutputs::get()
{
    return ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->numOutputs;
}

void CppSharp::Parser::AST::AsmStmt::NumOutputs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->numOutputs = value;
}

unsigned int CppSharp::Parser::AST::AsmStmt::NumPlusOperands::get()
{
    return ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->numPlusOperands;
}

void CppSharp::Parser::AST::AsmStmt::NumPlusOperands::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->numPlusOperands = value;
}

unsigned int CppSharp::Parser::AST::AsmStmt::NumInputs::get()
{
    return ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->numInputs;
}

void CppSharp::Parser::AST::AsmStmt::NumInputs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->numInputs = value;
}

unsigned int CppSharp::Parser::AST::AsmStmt::NumClobbers::get()
{
    return ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->numClobbers;
}

void CppSharp::Parser::AST::AsmStmt::NumClobbers::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->numClobbers = value;
}

unsigned int CppSharp::Parser::AST::AsmStmt::GetinputsCount::get()
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->getinputsCount();
    return ___ret;
}

unsigned int CppSharp::Parser::AST::AsmStmt::GetoutputsCount::get()
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::AsmStmt*)NativePtr)->getoutputsCount();
    return ___ret;
}

CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::AsmStringPiece(class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece^ CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece((class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece*) native.ToPointer());
}

CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::AsmStringPiece(class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece^ CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece((class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::~AsmStringPiece()
{
    delete NativePtr;
}

CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::AsmStringPiece()
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece();
}

CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::AsmStringPiece(CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece(__arg0);
}

::System::IntPtr CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece*)object.ToPointer();
}

bool CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::IsString::get()
{
    return NativePtr->isString;
}

void CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::IsString::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece*)NativePtr)->isString = value;
}

bool CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::IsOperand::get()
{
    return NativePtr->isOperand;
}

void CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::IsOperand::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece*)NativePtr)->isOperand = value;
}

::System::String^ CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::String::get()
{
    return clix::marshalString<clix::E_UTF8>(NativePtr->string);
}

void CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::String::set(::System::String^ value)
{
    ((class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece*)NativePtr)->string = clix::marshalString<clix::E_UTF8>(value);
}

unsigned int CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::OperandNo::get()
{
    return NativePtr->operandNo;
}

void CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::OperandNo::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece*)NativePtr)->operandNo = value;
}

char CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::Modifier::get()
{
    return NativePtr->modifier;
}

void CppSharp::Parser::AST::GCCAsmStmt::AsmStringPiece::Modifier::set(char value)
{
    ((class ::CppSharp::CppParser::AST::GCCAsmStmt::AsmStringPiece*)NativePtr)->modifier = value;
}

CppSharp::Parser::AST::GCCAsmStmt::GCCAsmStmt(class ::CppSharp::CppParser::AST::GCCAsmStmt* native)
    : CppSharp::Parser::AST::AsmStmt((::CppSharp::CppParser::AST::AsmStmt*)native)
{
}

CppSharp::Parser::AST::GCCAsmStmt^ CppSharp::Parser::AST::GCCAsmStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::GCCAsmStmt((class ::CppSharp::CppParser::AST::GCCAsmStmt*) native.ToPointer());
}

CppSharp::Parser::AST::GCCAsmStmt::GCCAsmStmt(class ::CppSharp::CppParser::AST::GCCAsmStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::AsmStmt((::CppSharp::CppParser::AST::AsmStmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::GCCAsmStmt^ CppSharp::Parser::AST::GCCAsmStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::GCCAsmStmt((class ::CppSharp::CppParser::AST::GCCAsmStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::GCCAsmStmt::~GCCAsmStmt()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::GCCAsmStmt*) __nativePtr;
    }
}

CppSharp::Parser::AST::GCCAsmStmt::GCCAsmStmt()
    : CppSharp::Parser::AST::AsmStmt((::CppSharp::CppParser::AST::AsmStmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::GCCAsmStmt();
}

CppSharp::Parser::AST::AddrLabelExpr^ CppSharp::Parser::AST::GCCAsmStmt::Getlabels(unsigned int i)
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::GCCAsmStmt*)NativePtr)->getlabels(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::AddrLabelExpr((class ::CppSharp::CppParser::AST::AddrLabelExpr*)___ret);
}

void CppSharp::Parser::AST::GCCAsmStmt::Addlabels(CppSharp::Parser::AST::AddrLabelExpr^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::AddrLabelExpr*)s->NativePtr;
    ((class ::CppSharp::CppParser::AST::GCCAsmStmt*)NativePtr)->addlabels(__arg0);
}

void CppSharp::Parser::AST::GCCAsmStmt::Clearlabels()
{
    ((class ::CppSharp::CppParser::AST::GCCAsmStmt*)NativePtr)->clearlabels();
}

CppSharp::Parser::AST::GCCAsmStmt::GCCAsmStmt(CppSharp::Parser::AST::GCCAsmStmt^ _0)
    : CppSharp::Parser::AST::AsmStmt((::CppSharp::CppParser::AST::AsmStmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::GCCAsmStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::GCCAsmStmt(__arg0);
}

::System::Collections::Generic::List<CppSharp::Parser::AST::AddrLabelExpr^>^ CppSharp::Parser::AST::GCCAsmStmt::Labels::get()
{
    auto _tmp__labels = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::AddrLabelExpr^>();
    auto __list0 = ((class ::CppSharp::CppParser::AST::GCCAsmStmt*)NativePtr)->labels;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::AddrLabelExpr((class ::CppSharp::CppParser::AST::AddrLabelExpr*)_element);
        _tmp__labels->Add(_marshalElement);
    }
    return _tmp__labels;
}

void CppSharp::Parser::AST::GCCAsmStmt::Labels::set(::System::Collections::Generic::List<CppSharp::Parser::AST::AddrLabelExpr^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::AddrLabelExpr*>();
    for each(CppSharp::Parser::AST::AddrLabelExpr^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::AddrLabelExpr*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((class ::CppSharp::CppParser::AST::GCCAsmStmt*)NativePtr)->labels = _tmpvalue;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::GCCAsmStmt::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::GCCAsmStmt*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::GCCAsmStmt::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::GCCAsmStmt*)NativePtr)->rParenLoc = _marshal0;
}

bool CppSharp::Parser::AST::GCCAsmStmt::IsAsmGoto::get()
{
    return ((class ::CppSharp::CppParser::AST::GCCAsmStmt*)NativePtr)->isAsmGoto;
}

void CppSharp::Parser::AST::GCCAsmStmt::IsAsmGoto::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::GCCAsmStmt*)NativePtr)->isAsmGoto = value;
}

unsigned int CppSharp::Parser::AST::GCCAsmStmt::NumLabels::get()
{
    return ((class ::CppSharp::CppParser::AST::GCCAsmStmt*)NativePtr)->numLabels;
}

void CppSharp::Parser::AST::GCCAsmStmt::NumLabels::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::GCCAsmStmt*)NativePtr)->numLabels = value;
}

unsigned int CppSharp::Parser::AST::GCCAsmStmt::GetlabelsCount::get()
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::GCCAsmStmt*)NativePtr)->getlabelsCount();
    return ___ret;
}

CppSharp::Parser::AST::MSAsmStmt::MSAsmStmt(class ::CppSharp::CppParser::AST::MSAsmStmt* native)
    : CppSharp::Parser::AST::AsmStmt((::CppSharp::CppParser::AST::AsmStmt*)native)
{
}

CppSharp::Parser::AST::MSAsmStmt^ CppSharp::Parser::AST::MSAsmStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::MSAsmStmt((class ::CppSharp::CppParser::AST::MSAsmStmt*) native.ToPointer());
}

CppSharp::Parser::AST::MSAsmStmt::MSAsmStmt(class ::CppSharp::CppParser::AST::MSAsmStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::AsmStmt((::CppSharp::CppParser::AST::AsmStmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::MSAsmStmt^ CppSharp::Parser::AST::MSAsmStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::MSAsmStmt((class ::CppSharp::CppParser::AST::MSAsmStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::MSAsmStmt::~MSAsmStmt()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::MSAsmStmt*) __nativePtr;
    }
}

CppSharp::Parser::AST::MSAsmStmt::MSAsmStmt()
    : CppSharp::Parser::AST::AsmStmt((::CppSharp::CppParser::AST::AsmStmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::MSAsmStmt();
}

CppSharp::Parser::AST::MSAsmStmt::MSAsmStmt(CppSharp::Parser::AST::MSAsmStmt^ _0)
    : CppSharp::Parser::AST::AsmStmt((::CppSharp::CppParser::AST::AsmStmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::MSAsmStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::MSAsmStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MSAsmStmt::LBraceLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MSAsmStmt*)NativePtr)->lBraceLoc);
}

void CppSharp::Parser::AST::MSAsmStmt::LBraceLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MSAsmStmt*)NativePtr)->lBraceLoc = _marshal0;
}

bool CppSharp::Parser::AST::MSAsmStmt::HasBraces::get()
{
    return ((class ::CppSharp::CppParser::AST::MSAsmStmt*)NativePtr)->hasBraces;
}

void CppSharp::Parser::AST::MSAsmStmt::HasBraces::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MSAsmStmt*)NativePtr)->hasBraces = value;
}

unsigned int CppSharp::Parser::AST::MSAsmStmt::NumAsmToks::get()
{
    return ((class ::CppSharp::CppParser::AST::MSAsmStmt*)NativePtr)->numAsmToks;
}

void CppSharp::Parser::AST::MSAsmStmt::NumAsmToks::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::MSAsmStmt*)NativePtr)->numAsmToks = value;
}

::System::String^ CppSharp::Parser::AST::MSAsmStmt::AsmString::get()
{
    return clix::marshalString<clix::E_UTF8>(((class ::CppSharp::CppParser::AST::MSAsmStmt*)NativePtr)->asmString);
}

void CppSharp::Parser::AST::MSAsmStmt::AsmString::set(::System::String^ value)
{
    ((class ::CppSharp::CppParser::AST::MSAsmStmt*)NativePtr)->asmString = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::AST::SEHExceptStmt::SEHExceptStmt(class ::CppSharp::CppParser::AST::SEHExceptStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::SEHExceptStmt^ CppSharp::Parser::AST::SEHExceptStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::SEHExceptStmt((class ::CppSharp::CppParser::AST::SEHExceptStmt*) native.ToPointer());
}

CppSharp::Parser::AST::SEHExceptStmt::SEHExceptStmt(class ::CppSharp::CppParser::AST::SEHExceptStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::SEHExceptStmt^ CppSharp::Parser::AST::SEHExceptStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::SEHExceptStmt((class ::CppSharp::CppParser::AST::SEHExceptStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::SEHExceptStmt::~SEHExceptStmt()
{
}

CppSharp::Parser::AST::SEHExceptStmt::SEHExceptStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::SEHExceptStmt();
}

CppSharp::Parser::AST::SEHExceptStmt::SEHExceptStmt(CppSharp::Parser::AST::SEHExceptStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::SEHExceptStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::SEHExceptStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SEHExceptStmt::ExceptLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SEHExceptStmt*)NativePtr)->exceptLoc);
}

void CppSharp::Parser::AST::SEHExceptStmt::ExceptLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SEHExceptStmt*)NativePtr)->exceptLoc = _marshal0;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::SEHExceptStmt::FilterExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::SEHExceptStmt*)NativePtr)->filterExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::SEHExceptStmt*)NativePtr)->filterExpr);
}

void CppSharp::Parser::AST::SEHExceptStmt::FilterExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::SEHExceptStmt*)NativePtr)->filterExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::CompoundStmt^ CppSharp::Parser::AST::SEHExceptStmt::Block::get()
{
    return (((class ::CppSharp::CppParser::AST::SEHExceptStmt*)NativePtr)->block == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::CompoundStmt((class ::CppSharp::CppParser::AST::CompoundStmt*)((class ::CppSharp::CppParser::AST::SEHExceptStmt*)NativePtr)->block);
}

void CppSharp::Parser::AST::SEHExceptStmt::Block::set(CppSharp::Parser::AST::CompoundStmt^ value)
{
    ((class ::CppSharp::CppParser::AST::SEHExceptStmt*)NativePtr)->block = (class ::CppSharp::CppParser::AST::CompoundStmt*)value->NativePtr;
}

CppSharp::Parser::AST::SEHFinallyStmt::SEHFinallyStmt(class ::CppSharp::CppParser::AST::SEHFinallyStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::SEHFinallyStmt^ CppSharp::Parser::AST::SEHFinallyStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::SEHFinallyStmt((class ::CppSharp::CppParser::AST::SEHFinallyStmt*) native.ToPointer());
}

CppSharp::Parser::AST::SEHFinallyStmt::SEHFinallyStmt(class ::CppSharp::CppParser::AST::SEHFinallyStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::SEHFinallyStmt^ CppSharp::Parser::AST::SEHFinallyStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::SEHFinallyStmt((class ::CppSharp::CppParser::AST::SEHFinallyStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::SEHFinallyStmt::~SEHFinallyStmt()
{
}

CppSharp::Parser::AST::SEHFinallyStmt::SEHFinallyStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::SEHFinallyStmt();
}

CppSharp::Parser::AST::SEHFinallyStmt::SEHFinallyStmt(CppSharp::Parser::AST::SEHFinallyStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::SEHFinallyStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::SEHFinallyStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SEHFinallyStmt::FinallyLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SEHFinallyStmt*)NativePtr)->finallyLoc);
}

void CppSharp::Parser::AST::SEHFinallyStmt::FinallyLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SEHFinallyStmt*)NativePtr)->finallyLoc = _marshal0;
}

CppSharp::Parser::AST::CompoundStmt^ CppSharp::Parser::AST::SEHFinallyStmt::Block::get()
{
    return (((class ::CppSharp::CppParser::AST::SEHFinallyStmt*)NativePtr)->block == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::CompoundStmt((class ::CppSharp::CppParser::AST::CompoundStmt*)((class ::CppSharp::CppParser::AST::SEHFinallyStmt*)NativePtr)->block);
}

void CppSharp::Parser::AST::SEHFinallyStmt::Block::set(CppSharp::Parser::AST::CompoundStmt^ value)
{
    ((class ::CppSharp::CppParser::AST::SEHFinallyStmt*)NativePtr)->block = (class ::CppSharp::CppParser::AST::CompoundStmt*)value->NativePtr;
}

CppSharp::Parser::AST::SEHTryStmt::SEHTryStmt(class ::CppSharp::CppParser::AST::SEHTryStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::SEHTryStmt^ CppSharp::Parser::AST::SEHTryStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::SEHTryStmt((class ::CppSharp::CppParser::AST::SEHTryStmt*) native.ToPointer());
}

CppSharp::Parser::AST::SEHTryStmt::SEHTryStmt(class ::CppSharp::CppParser::AST::SEHTryStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::SEHTryStmt^ CppSharp::Parser::AST::SEHTryStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::SEHTryStmt((class ::CppSharp::CppParser::AST::SEHTryStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::SEHTryStmt::~SEHTryStmt()
{
}

CppSharp::Parser::AST::SEHTryStmt::SEHTryStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::SEHTryStmt();
}

CppSharp::Parser::AST::SEHTryStmt::SEHTryStmt(CppSharp::Parser::AST::SEHTryStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::SEHTryStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::SEHTryStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SEHTryStmt::TryLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->tryLoc);
}

void CppSharp::Parser::AST::SEHTryStmt::TryLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->tryLoc = _marshal0;
}

bool CppSharp::Parser::AST::SEHTryStmt::IsCXXTry::get()
{
    return ((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->isCXXTry;
}

void CppSharp::Parser::AST::SEHTryStmt::IsCXXTry::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->isCXXTry = value;
}

CppSharp::Parser::AST::CompoundStmt^ CppSharp::Parser::AST::SEHTryStmt::TryBlock::get()
{
    return (((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->tryBlock == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::CompoundStmt((class ::CppSharp::CppParser::AST::CompoundStmt*)((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->tryBlock);
}

void CppSharp::Parser::AST::SEHTryStmt::TryBlock::set(CppSharp::Parser::AST::CompoundStmt^ value)
{
    ((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->tryBlock = (class ::CppSharp::CppParser::AST::CompoundStmt*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::SEHTryStmt::Handler::get()
{
    return (((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->handler == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->handler);
}

void CppSharp::Parser::AST::SEHTryStmt::Handler::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->handler = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::SEHExceptStmt^ CppSharp::Parser::AST::SEHTryStmt::ExceptHandler::get()
{
    return (((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->exceptHandler == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::SEHExceptStmt((class ::CppSharp::CppParser::AST::SEHExceptStmt*)((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->exceptHandler);
}

void CppSharp::Parser::AST::SEHTryStmt::ExceptHandler::set(CppSharp::Parser::AST::SEHExceptStmt^ value)
{
    ((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->exceptHandler = (class ::CppSharp::CppParser::AST::SEHExceptStmt*)value->NativePtr;
}

CppSharp::Parser::AST::SEHFinallyStmt^ CppSharp::Parser::AST::SEHTryStmt::FinallyHandler::get()
{
    return (((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->finallyHandler == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::SEHFinallyStmt((class ::CppSharp::CppParser::AST::SEHFinallyStmt*)((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->finallyHandler);
}

void CppSharp::Parser::AST::SEHTryStmt::FinallyHandler::set(CppSharp::Parser::AST::SEHFinallyStmt^ value)
{
    ((class ::CppSharp::CppParser::AST::SEHTryStmt*)NativePtr)->finallyHandler = (class ::CppSharp::CppParser::AST::SEHFinallyStmt*)value->NativePtr;
}

CppSharp::Parser::AST::SEHLeaveStmt::SEHLeaveStmt(class ::CppSharp::CppParser::AST::SEHLeaveStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::SEHLeaveStmt^ CppSharp::Parser::AST::SEHLeaveStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::SEHLeaveStmt((class ::CppSharp::CppParser::AST::SEHLeaveStmt*) native.ToPointer());
}

CppSharp::Parser::AST::SEHLeaveStmt::SEHLeaveStmt(class ::CppSharp::CppParser::AST::SEHLeaveStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::SEHLeaveStmt^ CppSharp::Parser::AST::SEHLeaveStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::SEHLeaveStmt((class ::CppSharp::CppParser::AST::SEHLeaveStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::SEHLeaveStmt::~SEHLeaveStmt()
{
}

CppSharp::Parser::AST::SEHLeaveStmt::SEHLeaveStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::SEHLeaveStmt();
}

CppSharp::Parser::AST::SEHLeaveStmt::SEHLeaveStmt(CppSharp::Parser::AST::SEHLeaveStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::SEHLeaveStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::SEHLeaveStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SEHLeaveStmt::LeaveLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SEHLeaveStmt*)NativePtr)->leaveLoc);
}

void CppSharp::Parser::AST::SEHLeaveStmt::LeaveLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SEHLeaveStmt*)NativePtr)->leaveLoc = _marshal0;
}

CppSharp::Parser::AST::CapturedStmt::Capture::Capture(class ::CppSharp::CppParser::AST::CapturedStmt::Capture* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::CapturedStmt::Capture^ CppSharp::Parser::AST::CapturedStmt::Capture::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CapturedStmt::Capture((class ::CppSharp::CppParser::AST::CapturedStmt::Capture*) native.ToPointer());
}

CppSharp::Parser::AST::CapturedStmt::Capture::Capture(class ::CppSharp::CppParser::AST::CapturedStmt::Capture* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::AST::CapturedStmt::Capture^ CppSharp::Parser::AST::CapturedStmt::Capture::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CapturedStmt::Capture((class ::CppSharp::CppParser::AST::CapturedStmt::Capture*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CapturedStmt::Capture::~Capture()
{
    delete NativePtr;
}

CppSharp::Parser::AST::CapturedStmt::Capture::Capture()
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CapturedStmt::Capture();
}

CppSharp::Parser::AST::CapturedStmt::Capture::Capture(CppSharp::Parser::AST::CapturedStmt::Capture^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CapturedStmt::Capture*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CapturedStmt::Capture(__arg0);
}

::System::IntPtr CppSharp::Parser::AST::CapturedStmt::Capture::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::CapturedStmt::Capture::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::CppSharp::CppParser::AST::CapturedStmt::Capture*)object.ToPointer();
}

CppSharp::Parser::AST::CapturedStmt::VariableCaptureKind CppSharp::Parser::AST::CapturedStmt::Capture::CaptureKind::get()
{
    return (CppSharp::Parser::AST::CapturedStmt::VariableCaptureKind)NativePtr->captureKind;
}

void CppSharp::Parser::AST::CapturedStmt::Capture::CaptureKind::set(CppSharp::Parser::AST::CapturedStmt::VariableCaptureKind value)
{
    ((class ::CppSharp::CppParser::AST::CapturedStmt::Capture*)NativePtr)->captureKind = (enum ::CppSharp::CppParser::AST::CapturedStmt::VariableCaptureKind)value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CapturedStmt::Capture::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&NativePtr->location);
}

void CppSharp::Parser::AST::CapturedStmt::Capture::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CapturedStmt::Capture*)NativePtr)->location = _marshal0;
}

bool CppSharp::Parser::AST::CapturedStmt::Capture::CapturesThis::get()
{
    return NativePtr->capturesThis;
}

void CppSharp::Parser::AST::CapturedStmt::Capture::CapturesThis::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CapturedStmt::Capture*)NativePtr)->capturesThis = value;
}

bool CppSharp::Parser::AST::CapturedStmt::Capture::CapturesVariable::get()
{
    return NativePtr->capturesVariable;
}

void CppSharp::Parser::AST::CapturedStmt::Capture::CapturesVariable::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CapturedStmt::Capture*)NativePtr)->capturesVariable = value;
}

bool CppSharp::Parser::AST::CapturedStmt::Capture::CapturesVariableByCopy::get()
{
    return NativePtr->capturesVariableByCopy;
}

void CppSharp::Parser::AST::CapturedStmt::Capture::CapturesVariableByCopy::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CapturedStmt::Capture*)NativePtr)->capturesVariableByCopy = value;
}

bool CppSharp::Parser::AST::CapturedStmt::Capture::CapturesVariableArrayType::get()
{
    return NativePtr->capturesVariableArrayType;
}

void CppSharp::Parser::AST::CapturedStmt::Capture::CapturesVariableArrayType::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CapturedStmt::Capture*)NativePtr)->capturesVariableArrayType = value;
}

CppSharp::Parser::AST::CapturedStmt::CapturedStmt(class ::CppSharp::CppParser::AST::CapturedStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::CapturedStmt^ CppSharp::Parser::AST::CapturedStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CapturedStmt((class ::CppSharp::CppParser::AST::CapturedStmt*) native.ToPointer());
}

CppSharp::Parser::AST::CapturedStmt::CapturedStmt(class ::CppSharp::CppParser::AST::CapturedStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CapturedStmt^ CppSharp::Parser::AST::CapturedStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CapturedStmt((class ::CppSharp::CppParser::AST::CapturedStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CapturedStmt::~CapturedStmt()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CapturedStmt*) __nativePtr;
    }
}

CppSharp::Parser::AST::CapturedStmt::CapturedStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CapturedStmt();
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CapturedStmt::GetcaptureInits(unsigned int i)
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CapturedStmt*)NativePtr)->getcapture_inits(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)___ret);
}

void CppSharp::Parser::AST::CapturedStmt::AddcaptureInits(CppSharp::Parser::AST::Expr^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::Expr*)s->NativePtr;
    ((class ::CppSharp::CppParser::AST::CapturedStmt*)NativePtr)->addcapture_inits(__arg0);
}

void CppSharp::Parser::AST::CapturedStmt::ClearcaptureInits()
{
    ((class ::CppSharp::CppParser::AST::CapturedStmt*)NativePtr)->clearcapture_inits();
}

CppSharp::Parser::AST::CapturedStmt::CapturedStmt(CppSharp::Parser::AST::CapturedStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CapturedStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CapturedStmt(__arg0);
}

::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ CppSharp::Parser::AST::CapturedStmt::CaptureInits::get()
{
    auto _tmp__capture_inits = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>();
    auto __list0 = ((class ::CppSharp::CppParser::AST::CapturedStmt*)NativePtr)->capture_inits;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)_element);
        _tmp__capture_inits->Add(_marshalElement);
    }
    return _tmp__capture_inits;
}

void CppSharp::Parser::AST::CapturedStmt::CaptureInits::set(::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::Expr*>();
    for each(CppSharp::Parser::AST::Expr^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::Expr*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((class ::CppSharp::CppParser::AST::CapturedStmt*)NativePtr)->capture_inits = _tmpvalue;
}

unsigned int CppSharp::Parser::AST::CapturedStmt::CaptureSize::get()
{
    return ((class ::CppSharp::CppParser::AST::CapturedStmt*)NativePtr)->capture_size;
}

void CppSharp::Parser::AST::CapturedStmt::CaptureSize::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::CapturedStmt*)NativePtr)->capture_size = value;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CapturedStmt::SourceRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::CapturedStmt*)NativePtr)->sourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CapturedStmt*)NativePtr)->sourceRange);
}

void CppSharp::Parser::AST::CapturedStmt::SourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CapturedStmt*)NativePtr)->sourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

unsigned int CppSharp::Parser::AST::CapturedStmt::GetcaptureInitsCount::get()
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CapturedStmt*)NativePtr)->getcapture_initsCount();
    return ___ret;
}

CppSharp::Parser::AST::CXXCatchStmt::CXXCatchStmt(class ::CppSharp::CppParser::AST::CXXCatchStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::CXXCatchStmt^ CppSharp::Parser::AST::CXXCatchStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXCatchStmt((class ::CppSharp::CppParser::AST::CXXCatchStmt*) native.ToPointer());
}

CppSharp::Parser::AST::CXXCatchStmt::CXXCatchStmt(class ::CppSharp::CppParser::AST::CXXCatchStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXCatchStmt^ CppSharp::Parser::AST::CXXCatchStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXCatchStmt((class ::CppSharp::CppParser::AST::CXXCatchStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXCatchStmt::~CXXCatchStmt()
{
}

CppSharp::Parser::AST::CXXCatchStmt::CXXCatchStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXCatchStmt();
}

CppSharp::Parser::AST::CXXCatchStmt::CXXCatchStmt(CppSharp::Parser::AST::CXXCatchStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXCatchStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXCatchStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXCatchStmt::CatchLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXCatchStmt*)NativePtr)->catchLoc);
}

void CppSharp::Parser::AST::CXXCatchStmt::CatchLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXCatchStmt*)NativePtr)->catchLoc = _marshal0;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::CXXCatchStmt::CaughtType::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXCatchStmt*)NativePtr)->caughtType == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::CXXCatchStmt*)NativePtr)->caughtType);
}

void CppSharp::Parser::AST::CXXCatchStmt::CaughtType::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXCatchStmt*)NativePtr)->caughtType = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CXXCatchStmt::HandlerBlock::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXCatchStmt*)NativePtr)->handlerBlock == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::CXXCatchStmt*)NativePtr)->handlerBlock);
}

void CppSharp::Parser::AST::CXXCatchStmt::HandlerBlock::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXCatchStmt*)NativePtr)->handlerBlock = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::CXXTryStmt::CXXTryStmt(class ::CppSharp::CppParser::AST::CXXTryStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::CXXTryStmt^ CppSharp::Parser::AST::CXXTryStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXTryStmt((class ::CppSharp::CppParser::AST::CXXTryStmt*) native.ToPointer());
}

CppSharp::Parser::AST::CXXTryStmt::CXXTryStmt(class ::CppSharp::CppParser::AST::CXXTryStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXTryStmt^ CppSharp::Parser::AST::CXXTryStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXTryStmt((class ::CppSharp::CppParser::AST::CXXTryStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXTryStmt::~CXXTryStmt()
{
}

CppSharp::Parser::AST::CXXTryStmt::CXXTryStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXTryStmt();
}

CppSharp::Parser::AST::CXXTryStmt::CXXTryStmt(CppSharp::Parser::AST::CXXTryStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXTryStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXTryStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXTryStmt::TryLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXTryStmt*)NativePtr)->tryLoc);
}

void CppSharp::Parser::AST::CXXTryStmt::TryLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXTryStmt*)NativePtr)->tryLoc = _marshal0;
}

unsigned int CppSharp::Parser::AST::CXXTryStmt::NumHandlers::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXTryStmt*)NativePtr)->numHandlers;
}

void CppSharp::Parser::AST::CXXTryStmt::NumHandlers::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::CXXTryStmt*)NativePtr)->numHandlers = value;
}

CppSharp::Parser::AST::CXXForRangeStmt::CXXForRangeStmt(class ::CppSharp::CppParser::AST::CXXForRangeStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::CXXForRangeStmt^ CppSharp::Parser::AST::CXXForRangeStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXForRangeStmt((class ::CppSharp::CppParser::AST::CXXForRangeStmt*) native.ToPointer());
}

CppSharp::Parser::AST::CXXForRangeStmt::CXXForRangeStmt(class ::CppSharp::CppParser::AST::CXXForRangeStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXForRangeStmt^ CppSharp::Parser::AST::CXXForRangeStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXForRangeStmt((class ::CppSharp::CppParser::AST::CXXForRangeStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXForRangeStmt::~CXXForRangeStmt()
{
}

CppSharp::Parser::AST::CXXForRangeStmt::CXXForRangeStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXForRangeStmt();
}

CppSharp::Parser::AST::CXXForRangeStmt::CXXForRangeStmt(CppSharp::Parser::AST::CXXForRangeStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXForRangeStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXForRangeStmt(__arg0);
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CXXForRangeStmt::Init::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->init == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->init);
}

void CppSharp::Parser::AST::CXXForRangeStmt::Init::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->init = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXForRangeStmt::RangeInit::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->rangeInit == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->rangeInit);
}

void CppSharp::Parser::AST::CXXForRangeStmt::RangeInit::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->rangeInit = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXForRangeStmt::Cond::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->cond == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->cond);
}

void CppSharp::Parser::AST::CXXForRangeStmt::Cond::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->cond = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXForRangeStmt::Inc::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->inc == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->inc);
}

void CppSharp::Parser::AST::CXXForRangeStmt::Inc::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->inc = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CXXForRangeStmt::Body::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->body == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->body);
}

void CppSharp::Parser::AST::CXXForRangeStmt::Body::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->body = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXForRangeStmt::ForLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->forLoc);
}

void CppSharp::Parser::AST::CXXForRangeStmt::ForLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->forLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXForRangeStmt::CoawaitLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->coawaitLoc);
}

void CppSharp::Parser::AST::CXXForRangeStmt::CoawaitLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->coawaitLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXForRangeStmt::ColonLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->colonLoc);
}

void CppSharp::Parser::AST::CXXForRangeStmt::ColonLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->colonLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXForRangeStmt::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::CXXForRangeStmt::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXForRangeStmt*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::MSDependentExistsStmt::MSDependentExistsStmt(class ::CppSharp::CppParser::AST::MSDependentExistsStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::MSDependentExistsStmt^ CppSharp::Parser::AST::MSDependentExistsStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::MSDependentExistsStmt((class ::CppSharp::CppParser::AST::MSDependentExistsStmt*) native.ToPointer());
}

CppSharp::Parser::AST::MSDependentExistsStmt::MSDependentExistsStmt(class ::CppSharp::CppParser::AST::MSDependentExistsStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::MSDependentExistsStmt^ CppSharp::Parser::AST::MSDependentExistsStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::MSDependentExistsStmt((class ::CppSharp::CppParser::AST::MSDependentExistsStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::MSDependentExistsStmt::~MSDependentExistsStmt()
{
}

CppSharp::Parser::AST::MSDependentExistsStmt::MSDependentExistsStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::MSDependentExistsStmt();
}

CppSharp::Parser::AST::MSDependentExistsStmt::MSDependentExistsStmt(CppSharp::Parser::AST::MSDependentExistsStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::MSDependentExistsStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::MSDependentExistsStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MSDependentExistsStmt::KeywordLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MSDependentExistsStmt*)NativePtr)->keywordLoc);
}

void CppSharp::Parser::AST::MSDependentExistsStmt::KeywordLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MSDependentExistsStmt*)NativePtr)->keywordLoc = _marshal0;
}

bool CppSharp::Parser::AST::MSDependentExistsStmt::IsIfExists::get()
{
    return ((class ::CppSharp::CppParser::AST::MSDependentExistsStmt*)NativePtr)->isIfExists;
}

void CppSharp::Parser::AST::MSDependentExistsStmt::IsIfExists::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MSDependentExistsStmt*)NativePtr)->isIfExists = value;
}

bool CppSharp::Parser::AST::MSDependentExistsStmt::IsIfNotExists::get()
{
    return ((class ::CppSharp::CppParser::AST::MSDependentExistsStmt*)NativePtr)->isIfNotExists;
}

void CppSharp::Parser::AST::MSDependentExistsStmt::IsIfNotExists::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MSDependentExistsStmt*)NativePtr)->isIfNotExists = value;
}

CppSharp::Parser::AST::CompoundStmt^ CppSharp::Parser::AST::MSDependentExistsStmt::SubStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::MSDependentExistsStmt*)NativePtr)->subStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::CompoundStmt((class ::CppSharp::CppParser::AST::CompoundStmt*)((class ::CppSharp::CppParser::AST::MSDependentExistsStmt*)NativePtr)->subStmt);
}

void CppSharp::Parser::AST::MSDependentExistsStmt::SubStmt::set(CppSharp::Parser::AST::CompoundStmt^ value)
{
    ((class ::CppSharp::CppParser::AST::MSDependentExistsStmt*)NativePtr)->subStmt = (class ::CppSharp::CppParser::AST::CompoundStmt*)value->NativePtr;
}

CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs::CtorArgs(class ::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs^ CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs((class ::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs*) native.ToPointer());
}

CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs::CtorArgs(class ::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs^ CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs((class ::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs::~CtorArgs()
{
    delete NativePtr;
}

CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs::CtorArgs()
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs();
}

CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs::CtorArgs(CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs(__arg0);
}

::System::IntPtr CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::CtorArgs::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::CppSharp::CppParser::AST::CoroutineBodyStmt::CtorArgs*)object.ToPointer();
}
CppSharp::Parser::AST::CoroutineBodyStmt::CoroutineBodyStmt(class ::CppSharp::CppParser::AST::CoroutineBodyStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::CoroutineBodyStmt^ CppSharp::Parser::AST::CoroutineBodyStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CoroutineBodyStmt((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*) native.ToPointer());
}

CppSharp::Parser::AST::CoroutineBodyStmt::CoroutineBodyStmt(class ::CppSharp::CppParser::AST::CoroutineBodyStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CoroutineBodyStmt^ CppSharp::Parser::AST::CoroutineBodyStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CoroutineBodyStmt((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CoroutineBodyStmt::~CoroutineBodyStmt()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CoroutineBodyStmt*) __nativePtr;
    }
}

CppSharp::Parser::AST::CoroutineBodyStmt::CoroutineBodyStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CoroutineBodyStmt();
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CoroutineBodyStmt::GetchildrenExclBody(unsigned int i)
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->getchildrenExclBody(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)___ret);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::AddchildrenExclBody(CppSharp::Parser::AST::Stmt^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::Stmt*)s->NativePtr;
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->addchildrenExclBody(__arg0);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::ClearchildrenExclBody()
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->clearchildrenExclBody();
}

CppSharp::Parser::AST::CoroutineBodyStmt::CoroutineBodyStmt(CppSharp::Parser::AST::CoroutineBodyStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CoroutineBodyStmt(__arg0);
}

::System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^ CppSharp::Parser::AST::CoroutineBodyStmt::ChildrenExclBody::get()
{
    auto _tmp__childrenExclBody = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>();
    auto __list0 = ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->childrenExclBody;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)_element);
        _tmp__childrenExclBody->Add(_marshalElement);
    }
    return _tmp__childrenExclBody;
}

void CppSharp::Parser::AST::CoroutineBodyStmt::ChildrenExclBody::set(::System::Collections::Generic::List<CppSharp::Parser::AST::Stmt^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::Stmt*>();
    for each(CppSharp::Parser::AST::Stmt^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::Stmt*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->childrenExclBody = _tmpvalue;
}

bool CppSharp::Parser::AST::CoroutineBodyStmt::HasDependentPromiseType::get()
{
    return ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->hasDependentPromiseType;
}

void CppSharp::Parser::AST::CoroutineBodyStmt::HasDependentPromiseType::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->hasDependentPromiseType = value;
}

CppSharp::Parser::AST::CompoundStmt^ CppSharp::Parser::AST::CoroutineBodyStmt::Body::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->body == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::CompoundStmt((class ::CppSharp::CppParser::AST::CompoundStmt*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->body);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::Body::set(CppSharp::Parser::AST::CompoundStmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->body = (class ::CppSharp::CppParser::AST::CompoundStmt*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CoroutineBodyStmt::PromiseDeclStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->promiseDeclStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->promiseDeclStmt);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::PromiseDeclStmt::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->promiseDeclStmt = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CoroutineBodyStmt::InitSuspendStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->initSuspendStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->initSuspendStmt);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::InitSuspendStmt::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->initSuspendStmt = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CoroutineBodyStmt::FinalSuspendStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->finalSuspendStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->finalSuspendStmt);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::FinalSuspendStmt::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->finalSuspendStmt = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CoroutineBodyStmt::ExceptionHandler::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->exceptionHandler == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->exceptionHandler);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::ExceptionHandler::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->exceptionHandler = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CoroutineBodyStmt::FallthroughHandler::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->fallthroughHandler == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->fallthroughHandler);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::FallthroughHandler::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->fallthroughHandler = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CoroutineBodyStmt::Allocate::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->allocate == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->allocate);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::Allocate::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->allocate = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CoroutineBodyStmt::Deallocate::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->deallocate == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->deallocate);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::Deallocate::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->deallocate = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CoroutineBodyStmt::ResultDecl::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->resultDecl == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->resultDecl);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::ResultDecl::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->resultDecl = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CoroutineBodyStmt::ReturnValueInit::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->returnValueInit == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->returnValueInit);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::ReturnValueInit::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->returnValueInit = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CoroutineBodyStmt::ReturnValue::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->returnValue == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->returnValue);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::ReturnValue::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->returnValue = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CoroutineBodyStmt::ReturnStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->returnStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->returnStmt);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::ReturnStmt::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->returnStmt = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::CoroutineBodyStmt::ReturnStmtOnAllocFailure::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->returnStmtOnAllocFailure == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->returnStmtOnAllocFailure);
}

void CppSharp::Parser::AST::CoroutineBodyStmt::ReturnStmtOnAllocFailure::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->returnStmtOnAllocFailure = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

unsigned int CppSharp::Parser::AST::CoroutineBodyStmt::GetchildrenExclBodyCount::get()
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CoroutineBodyStmt*)NativePtr)->getchildrenExclBodyCount();
    return ___ret;
}

CppSharp::Parser::AST::CoreturnStmt::CoreturnStmt(class ::CppSharp::CppParser::AST::CoreturnStmt* native)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native)
{
}

CppSharp::Parser::AST::CoreturnStmt^ CppSharp::Parser::AST::CoreturnStmt::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CoreturnStmt((class ::CppSharp::CppParser::AST::CoreturnStmt*) native.ToPointer());
}

CppSharp::Parser::AST::CoreturnStmt::CoreturnStmt(class ::CppSharp::CppParser::AST::CoreturnStmt* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CoreturnStmt^ CppSharp::Parser::AST::CoreturnStmt::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CoreturnStmt((class ::CppSharp::CppParser::AST::CoreturnStmt*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CoreturnStmt::~CoreturnStmt()
{
}

CppSharp::Parser::AST::CoreturnStmt::CoreturnStmt()
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CoreturnStmt();
}

CppSharp::Parser::AST::CoreturnStmt::CoreturnStmt(CppSharp::Parser::AST::CoreturnStmt^ _0)
    : CppSharp::Parser::AST::Stmt((::CppSharp::CppParser::AST::Stmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CoreturnStmt*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CoreturnStmt(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CoreturnStmt::KeywordLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CoreturnStmt*)NativePtr)->keywordLoc);
}

void CppSharp::Parser::AST::CoreturnStmt::KeywordLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CoreturnStmt*)NativePtr)->keywordLoc = _marshal0;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CoreturnStmt::Operand::get()
{
    return (((class ::CppSharp::CppParser::AST::CoreturnStmt*)NativePtr)->operand == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CoreturnStmt*)NativePtr)->operand);
}

void CppSharp::Parser::AST::CoreturnStmt::Operand::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CoreturnStmt*)NativePtr)->operand = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CoreturnStmt::PromiseCall::get()
{
    return (((class ::CppSharp::CppParser::AST::CoreturnStmt*)NativePtr)->promiseCall == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CoreturnStmt*)NativePtr)->promiseCall);
}

void CppSharp::Parser::AST::CoreturnStmt::PromiseCall::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CoreturnStmt*)NativePtr)->promiseCall = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

bool CppSharp::Parser::AST::CoreturnStmt::IsImplicit::get()
{
    return ((class ::CppSharp::CppParser::AST::CoreturnStmt*)NativePtr)->isImplicit;
}

void CppSharp::Parser::AST::CoreturnStmt::IsImplicit::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CoreturnStmt*)NativePtr)->isImplicit = value;
}

