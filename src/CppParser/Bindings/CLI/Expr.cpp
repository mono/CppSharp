// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "Expr.h"
#include "Decl.h"
#include "Sources.h"
#include "Stmt.h"
#include "Types.h"

using namespace System;
using namespace System::Runtime::InteropServices;

CppSharp::Parser::AST::Expr::Classification::Classification(class ::CppSharp::CppParser::AST::Expr::Classification* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::Expr::Classification^ CppSharp::Parser::AST::Expr::Classification::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::Expr::Classification((class ::CppSharp::CppParser::AST::Expr::Classification*) native.ToPointer());
}

CppSharp::Parser::AST::Expr::Classification::Classification(class ::CppSharp::CppParser::AST::Expr::Classification* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::AST::Expr::Classification^ CppSharp::Parser::AST::Expr::Classification::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::Expr::Classification((class ::CppSharp::CppParser::AST::Expr::Classification*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::Expr::Classification::~Classification()
{
    delete NativePtr;
}

CppSharp::Parser::AST::Expr::Classification::Classification()
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::Expr::Classification();
}

CppSharp::Parser::AST::Expr::Classification::Classification(CppSharp::Parser::AST::Expr::Classification^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::Expr::Classification*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::Expr::Classification(__arg0);
}

::System::IntPtr CppSharp::Parser::AST::Expr::Classification::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::Expr::Classification::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::CppSharp::CppParser::AST::Expr::Classification*)object.ToPointer();
}

CppSharp::Parser::AST::Expr::Classification::Kinds CppSharp::Parser::AST::Expr::Classification::Kind::get()
{
    return (CppSharp::Parser::AST::Expr::Classification::Kinds)NativePtr->kind;
}

void CppSharp::Parser::AST::Expr::Classification::Kind::set(CppSharp::Parser::AST::Expr::Classification::Kinds value)
{
    ((class ::CppSharp::CppParser::AST::Expr::Classification*)NativePtr)->kind = (enum ::CppSharp::CppParser::AST::Expr::Classification::Kinds)value;
}

CppSharp::Parser::AST::Expr::Classification::ModifiableType CppSharp::Parser::AST::Expr::Classification::Modifiable::get()
{
    return (CppSharp::Parser::AST::Expr::Classification::ModifiableType)NativePtr->modifiable;
}

void CppSharp::Parser::AST::Expr::Classification::Modifiable::set(CppSharp::Parser::AST::Expr::Classification::ModifiableType value)
{
    ((class ::CppSharp::CppParser::AST::Expr::Classification*)NativePtr)->modifiable = (enum ::CppSharp::CppParser::AST::Expr::Classification::ModifiableType)value;
}

bool CppSharp::Parser::AST::Expr::Classification::IsLValue::get()
{
    return NativePtr->isLValue;
}

void CppSharp::Parser::AST::Expr::Classification::IsLValue::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr::Classification*)NativePtr)->isLValue = value;
}

bool CppSharp::Parser::AST::Expr::Classification::IsXValue::get()
{
    return NativePtr->isXValue;
}

void CppSharp::Parser::AST::Expr::Classification::IsXValue::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr::Classification*)NativePtr)->isXValue = value;
}

bool CppSharp::Parser::AST::Expr::Classification::IsGLValue::get()
{
    return NativePtr->isGLValue;
}

void CppSharp::Parser::AST::Expr::Classification::IsGLValue::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr::Classification*)NativePtr)->isGLValue = value;
}

bool CppSharp::Parser::AST::Expr::Classification::IsPRValue::get()
{
    return NativePtr->isPRValue;
}

void CppSharp::Parser::AST::Expr::Classification::IsPRValue::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr::Classification*)NativePtr)->isPRValue = value;
}

bool CppSharp::Parser::AST::Expr::Classification::IsRValue::get()
{
    return NativePtr->isRValue;
}

void CppSharp::Parser::AST::Expr::Classification::IsRValue::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr::Classification*)NativePtr)->isRValue = value;
}

bool CppSharp::Parser::AST::Expr::Classification::IsModifiable::get()
{
    return NativePtr->isModifiable;
}

void CppSharp::Parser::AST::Expr::Classification::IsModifiable::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr::Classification*)NativePtr)->isModifiable = value;
}

CppSharp::Parser::AST::Expr::Expr(class ::CppSharp::CppParser::AST::Expr* native)
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)native)
{
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::Expr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*) native.ToPointer());
}

CppSharp::Parser::AST::Expr::Expr(class ::CppSharp::CppParser::AST::Expr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::Expr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::Expr::~Expr()
{
}

CppSharp::Parser::AST::Expr::Expr()
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::Expr();
}

CppSharp::Parser::AST::Expr::Expr(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::Expr(__arg0);
}

CppSharp::Parser::AST::Expr::Expr(CppSharp::Parser::AST::Expr^ _0)
    : CppSharp::Parser::AST::ValueStmt((::CppSharp::CppParser::AST::ValueStmt*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::Expr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::Expr(__arg0);
}

CppSharp::Parser::AST::Expr::operator CppSharp::Parser::AST::Expr^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::Expr) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::Expr(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)_____ret, true);
}

CppSharp::Parser::AST::ExprDependence CppSharp::Parser::AST::Expr::Dependence::get()
{
    return (CppSharp::Parser::AST::ExprDependence)((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->dependence;
}

void CppSharp::Parser::AST::Expr::Dependence::set(CppSharp::Parser::AST::ExprDependence value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->dependence = (enum ::CppSharp::CppParser::AST::ExprDependence)value;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::Expr::Type::get()
{
    return (&((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->type == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->type);
}

void CppSharp::Parser::AST::Expr::Type::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->type = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

bool CppSharp::Parser::AST::Expr::IsValueDependent::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isValueDependent;
}

void CppSharp::Parser::AST::Expr::IsValueDependent::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isValueDependent = value;
}

bool CppSharp::Parser::AST::Expr::IsTypeDependent::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isTypeDependent;
}

void CppSharp::Parser::AST::Expr::IsTypeDependent::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isTypeDependent = value;
}

bool CppSharp::Parser::AST::Expr::IsInstantiationDependent::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isInstantiationDependent;
}

void CppSharp::Parser::AST::Expr::IsInstantiationDependent::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isInstantiationDependent = value;
}

bool CppSharp::Parser::AST::Expr::ContainsUnexpandedParameterPack::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->containsUnexpandedParameterPack;
}

void CppSharp::Parser::AST::Expr::ContainsUnexpandedParameterPack::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->containsUnexpandedParameterPack = value;
}

bool CppSharp::Parser::AST::Expr::ContainsErrors::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->containsErrors;
}

void CppSharp::Parser::AST::Expr::ContainsErrors::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->containsErrors = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::Expr::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::Expr::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->exprLoc = _marshal0;
}

bool CppSharp::Parser::AST::Expr::IsReadIfDiscardedInCPlusPlus11::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isReadIfDiscardedInCPlusPlus11;
}

void CppSharp::Parser::AST::Expr::IsReadIfDiscardedInCPlusPlus11::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isReadIfDiscardedInCPlusPlus11 = value;
}

bool CppSharp::Parser::AST::Expr::IsLValue::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isLValue;
}

void CppSharp::Parser::AST::Expr::IsLValue::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isLValue = value;
}

bool CppSharp::Parser::AST::Expr::IsPRValue::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isPRValue;
}

void CppSharp::Parser::AST::Expr::IsPRValue::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isPRValue = value;
}

bool CppSharp::Parser::AST::Expr::IsXValue::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isXValue;
}

void CppSharp::Parser::AST::Expr::IsXValue::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isXValue = value;
}

bool CppSharp::Parser::AST::Expr::IsGLValue::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isGLValue;
}

void CppSharp::Parser::AST::Expr::IsGLValue::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isGLValue = value;
}

bool CppSharp::Parser::AST::Expr::IsOrdinaryOrBitFieldObject::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isOrdinaryOrBitFieldObject;
}

void CppSharp::Parser::AST::Expr::IsOrdinaryOrBitFieldObject::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->isOrdinaryOrBitFieldObject = value;
}

bool CppSharp::Parser::AST::Expr::RefersToMatrixElement::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->refersToMatrixElement;
}

void CppSharp::Parser::AST::Expr::RefersToMatrixElement::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->refersToMatrixElement = value;
}

bool CppSharp::Parser::AST::Expr::HasPlaceholderType::get()
{
    return ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->hasPlaceholderType;
}

void CppSharp::Parser::AST::Expr::HasPlaceholderType::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::Expr*)NativePtr)->hasPlaceholderType = value;
}

CppSharp::Parser::AST::FullExpr::FullExpr(class ::CppSharp::CppParser::AST::FullExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::FullExpr^ CppSharp::Parser::AST::FullExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::FullExpr((class ::CppSharp::CppParser::AST::FullExpr*) native.ToPointer());
}

CppSharp::Parser::AST::FullExpr::FullExpr(class ::CppSharp::CppParser::AST::FullExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::FullExpr^ CppSharp::Parser::AST::FullExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::FullExpr((class ::CppSharp::CppParser::AST::FullExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::FullExpr::~FullExpr()
{
}

CppSharp::Parser::AST::FullExpr::FullExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::FullExpr();
}

CppSharp::Parser::AST::FullExpr::FullExpr(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::FullExpr(__arg0);
}

CppSharp::Parser::AST::FullExpr::FullExpr(CppSharp::Parser::AST::FullExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::FullExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::FullExpr(__arg0);
}

CppSharp::Parser::AST::FullExpr::operator CppSharp::Parser::AST::FullExpr^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::FullExpr) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::FullExpr(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::FullExpr((class ::CppSharp::CppParser::AST::FullExpr*)_____ret, true);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::FullExpr::SubExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::FullExpr*)NativePtr)->subExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::FullExpr*)NativePtr)->subExpr);
}

void CppSharp::Parser::AST::FullExpr::SubExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::FullExpr*)NativePtr)->subExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::ConstantExpr::ConstantExpr(class ::CppSharp::CppParser::AST::ConstantExpr* native)
    : CppSharp::Parser::AST::FullExpr((::CppSharp::CppParser::AST::FullExpr*)native)
{
}

CppSharp::Parser::AST::ConstantExpr^ CppSharp::Parser::AST::ConstantExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ConstantExpr((class ::CppSharp::CppParser::AST::ConstantExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ConstantExpr::ConstantExpr(class ::CppSharp::CppParser::AST::ConstantExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::FullExpr((::CppSharp::CppParser::AST::FullExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ConstantExpr^ CppSharp::Parser::AST::ConstantExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ConstantExpr((class ::CppSharp::CppParser::AST::ConstantExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ConstantExpr::~ConstantExpr()
{
}

CppSharp::Parser::AST::ConstantExpr::ConstantExpr()
    : CppSharp::Parser::AST::FullExpr((::CppSharp::CppParser::AST::FullExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ConstantExpr();
}

CppSharp::Parser::AST::ConstantExpr::ConstantExpr(CppSharp::Parser::AST::ConstantExpr^ _0)
    : CppSharp::Parser::AST::FullExpr((::CppSharp::CppParser::AST::FullExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ConstantExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ConstantExpr(__arg0);
}

CppSharp::Parser::AST::ConstantExpr::ResultStorageKind CppSharp::Parser::AST::ConstantExpr::resultStorageKind::get()
{
    return (CppSharp::Parser::AST::ConstantExpr::ResultStorageKind)((class ::CppSharp::CppParser::AST::ConstantExpr*)NativePtr)->resultStorageKind;
}

void CppSharp::Parser::AST::ConstantExpr::resultStorageKind::set(CppSharp::Parser::AST::ConstantExpr::ResultStorageKind value)
{
    ((class ::CppSharp::CppParser::AST::ConstantExpr*)NativePtr)->resultStorageKind = (enum ::CppSharp::CppParser::AST::ConstantExpr::ResultStorageKind)value;
}

bool CppSharp::Parser::AST::ConstantExpr::IsImmediateInvocation::get()
{
    return ((class ::CppSharp::CppParser::AST::ConstantExpr*)NativePtr)->isImmediateInvocation;
}

void CppSharp::Parser::AST::ConstantExpr::IsImmediateInvocation::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::ConstantExpr*)NativePtr)->isImmediateInvocation = value;
}

bool CppSharp::Parser::AST::ConstantExpr::HasAPValueResult::get()
{
    return ((class ::CppSharp::CppParser::AST::ConstantExpr*)NativePtr)->hasAPValueResult;
}

void CppSharp::Parser::AST::ConstantExpr::HasAPValueResult::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::ConstantExpr*)NativePtr)->hasAPValueResult = value;
}

CppSharp::Parser::AST::OpaqueValueExpr::OpaqueValueExpr(class ::CppSharp::CppParser::AST::OpaqueValueExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::OpaqueValueExpr^ CppSharp::Parser::AST::OpaqueValueExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::OpaqueValueExpr((class ::CppSharp::CppParser::AST::OpaqueValueExpr*) native.ToPointer());
}

CppSharp::Parser::AST::OpaqueValueExpr::OpaqueValueExpr(class ::CppSharp::CppParser::AST::OpaqueValueExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::OpaqueValueExpr^ CppSharp::Parser::AST::OpaqueValueExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::OpaqueValueExpr((class ::CppSharp::CppParser::AST::OpaqueValueExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::OpaqueValueExpr::~OpaqueValueExpr()
{
}

CppSharp::Parser::AST::OpaqueValueExpr::OpaqueValueExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::OpaqueValueExpr();
}

CppSharp::Parser::AST::OpaqueValueExpr::OpaqueValueExpr(CppSharp::Parser::AST::OpaqueValueExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::OpaqueValueExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::OpaqueValueExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::OpaqueValueExpr::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::OpaqueValueExpr*)NativePtr)->location);
}

void CppSharp::Parser::AST::OpaqueValueExpr::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::OpaqueValueExpr*)NativePtr)->location = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::OpaqueValueExpr::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::OpaqueValueExpr*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::OpaqueValueExpr::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::OpaqueValueExpr*)NativePtr)->exprLoc = _marshal0;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::OpaqueValueExpr::SourceExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::OpaqueValueExpr*)NativePtr)->sourceExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::OpaqueValueExpr*)NativePtr)->sourceExpr);
}

void CppSharp::Parser::AST::OpaqueValueExpr::SourceExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::OpaqueValueExpr*)NativePtr)->sourceExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

bool CppSharp::Parser::AST::OpaqueValueExpr::IsUnique::get()
{
    return ((class ::CppSharp::CppParser::AST::OpaqueValueExpr*)NativePtr)->isUnique;
}

void CppSharp::Parser::AST::OpaqueValueExpr::IsUnique::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::OpaqueValueExpr*)NativePtr)->isUnique = value;
}

CppSharp::Parser::AST::DeclRefExpr::DeclRefExpr(class ::CppSharp::CppParser::AST::DeclRefExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::DeclRefExpr^ CppSharp::Parser::AST::DeclRefExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::DeclRefExpr((class ::CppSharp::CppParser::AST::DeclRefExpr*) native.ToPointer());
}

CppSharp::Parser::AST::DeclRefExpr::DeclRefExpr(class ::CppSharp::CppParser::AST::DeclRefExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::DeclRefExpr^ CppSharp::Parser::AST::DeclRefExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::DeclRefExpr((class ::CppSharp::CppParser::AST::DeclRefExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::DeclRefExpr::~DeclRefExpr()
{
}

CppSharp::Parser::AST::DeclRefExpr::DeclRefExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::DeclRefExpr();
}

CppSharp::Parser::AST::DeclRefExpr::DeclRefExpr(CppSharp::Parser::AST::DeclRefExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::DeclRefExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::DeclRefExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DeclRefExpr::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->location);
}

void CppSharp::Parser::AST::DeclRefExpr::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->location = _marshal0;
}

bool CppSharp::Parser::AST::DeclRefExpr::HasQualifier::get()
{
    return ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->hasQualifier;
}

void CppSharp::Parser::AST::DeclRefExpr::HasQualifier::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->hasQualifier = value;
}

bool CppSharp::Parser::AST::DeclRefExpr::HasTemplateKWAndArgsInfo::get()
{
    return ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->hasTemplateKWAndArgsInfo;
}

void CppSharp::Parser::AST::DeclRefExpr::HasTemplateKWAndArgsInfo::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->hasTemplateKWAndArgsInfo = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DeclRefExpr::TemplateKeywordLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->templateKeywordLoc);
}

void CppSharp::Parser::AST::DeclRefExpr::TemplateKeywordLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->templateKeywordLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DeclRefExpr::LAngleLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->lAngleLoc);
}

void CppSharp::Parser::AST::DeclRefExpr::LAngleLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->lAngleLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DeclRefExpr::RAngleLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->rAngleLoc);
}

void CppSharp::Parser::AST::DeclRefExpr::RAngleLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->rAngleLoc = _marshal0;
}

bool CppSharp::Parser::AST::DeclRefExpr::HasTemplateKeyword::get()
{
    return ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->hasTemplateKeyword;
}

void CppSharp::Parser::AST::DeclRefExpr::HasTemplateKeyword::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->hasTemplateKeyword = value;
}

bool CppSharp::Parser::AST::DeclRefExpr::HasExplicitTemplateArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->hasExplicitTemplateArgs;
}

void CppSharp::Parser::AST::DeclRefExpr::HasExplicitTemplateArgs::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->hasExplicitTemplateArgs = value;
}

unsigned int CppSharp::Parser::AST::DeclRefExpr::NumTemplateArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->numTemplateArgs;
}

void CppSharp::Parser::AST::DeclRefExpr::NumTemplateArgs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->numTemplateArgs = value;
}

bool CppSharp::Parser::AST::DeclRefExpr::HadMultipleCandidates::get()
{
    return ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->hadMultipleCandidates;
}

void CppSharp::Parser::AST::DeclRefExpr::HadMultipleCandidates::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->hadMultipleCandidates = value;
}

CppSharp::Parser::AST::NonOdrUseReason CppSharp::Parser::AST::DeclRefExpr::IsNonOdrUse::get()
{
    return (CppSharp::Parser::AST::NonOdrUseReason)((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->isNonOdrUse;
}

void CppSharp::Parser::AST::DeclRefExpr::IsNonOdrUse::set(CppSharp::Parser::AST::NonOdrUseReason value)
{
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->isNonOdrUse = (enum ::CppSharp::CppParser::AST::NonOdrUseReason)value;
}

bool CppSharp::Parser::AST::DeclRefExpr::RefersToEnclosingVariableOrCapture::get()
{
    return ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->refersToEnclosingVariableOrCapture;
}

void CppSharp::Parser::AST::DeclRefExpr::RefersToEnclosingVariableOrCapture::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->refersToEnclosingVariableOrCapture = value;
}

bool CppSharp::Parser::AST::DeclRefExpr::IsImmediateEscalating::get()
{
    return ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->isImmediateEscalating;
}

void CppSharp::Parser::AST::DeclRefExpr::IsImmediateEscalating::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DeclRefExpr*)NativePtr)->isImmediateEscalating = value;
}

CppSharp::Parser::AST::IntegerLiteral::IntegerLiteral(class ::CppSharp::CppParser::AST::IntegerLiteral* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::IntegerLiteral^ CppSharp::Parser::AST::IntegerLiteral::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::IntegerLiteral((class ::CppSharp::CppParser::AST::IntegerLiteral*) native.ToPointer());
}

CppSharp::Parser::AST::IntegerLiteral::IntegerLiteral(class ::CppSharp::CppParser::AST::IntegerLiteral* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::IntegerLiteral^ CppSharp::Parser::AST::IntegerLiteral::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::IntegerLiteral((class ::CppSharp::CppParser::AST::IntegerLiteral*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::IntegerLiteral::~IntegerLiteral()
{
}

CppSharp::Parser::AST::IntegerLiteral::IntegerLiteral()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::IntegerLiteral();
}

CppSharp::Parser::AST::IntegerLiteral::IntegerLiteral(CppSharp::Parser::AST::IntegerLiteral^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::IntegerLiteral*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::IntegerLiteral(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::IntegerLiteral::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::IntegerLiteral*)NativePtr)->location);
}

void CppSharp::Parser::AST::IntegerLiteral::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::IntegerLiteral*)NativePtr)->location = _marshal0;
}

unsigned long long CppSharp::Parser::AST::IntegerLiteral::Value::get()
{
    return ((class ::CppSharp::CppParser::AST::IntegerLiteral*)NativePtr)->value;
}

void CppSharp::Parser::AST::IntegerLiteral::Value::set(unsigned long long value)
{
    ((class ::CppSharp::CppParser::AST::IntegerLiteral*)NativePtr)->value = value;
}

CppSharp::Parser::AST::FixedPointLiteral::FixedPointLiteral(class ::CppSharp::CppParser::AST::FixedPointLiteral* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::FixedPointLiteral^ CppSharp::Parser::AST::FixedPointLiteral::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::FixedPointLiteral((class ::CppSharp::CppParser::AST::FixedPointLiteral*) native.ToPointer());
}

CppSharp::Parser::AST::FixedPointLiteral::FixedPointLiteral(class ::CppSharp::CppParser::AST::FixedPointLiteral* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::FixedPointLiteral^ CppSharp::Parser::AST::FixedPointLiteral::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::FixedPointLiteral((class ::CppSharp::CppParser::AST::FixedPointLiteral*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::FixedPointLiteral::~FixedPointLiteral()
{
}

CppSharp::Parser::AST::FixedPointLiteral::FixedPointLiteral()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::FixedPointLiteral();
}

CppSharp::Parser::AST::FixedPointLiteral::FixedPointLiteral(CppSharp::Parser::AST::FixedPointLiteral^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::FixedPointLiteral*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::FixedPointLiteral(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::FixedPointLiteral::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::FixedPointLiteral*)NativePtr)->location);
}

void CppSharp::Parser::AST::FixedPointLiteral::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::FixedPointLiteral*)NativePtr)->location = _marshal0;
}

unsigned int CppSharp::Parser::AST::FixedPointLiteral::Scale::get()
{
    return ((class ::CppSharp::CppParser::AST::FixedPointLiteral*)NativePtr)->scale;
}

void CppSharp::Parser::AST::FixedPointLiteral::Scale::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::FixedPointLiteral*)NativePtr)->scale = value;
}

unsigned long long CppSharp::Parser::AST::FixedPointLiteral::Value::get()
{
    return ((class ::CppSharp::CppParser::AST::FixedPointLiteral*)NativePtr)->value;
}

void CppSharp::Parser::AST::FixedPointLiteral::Value::set(unsigned long long value)
{
    ((class ::CppSharp::CppParser::AST::FixedPointLiteral*)NativePtr)->value = value;
}

CppSharp::Parser::AST::CharacterLiteral::CharacterLiteral(class ::CppSharp::CppParser::AST::CharacterLiteral* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CharacterLiteral^ CppSharp::Parser::AST::CharacterLiteral::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CharacterLiteral((class ::CppSharp::CppParser::AST::CharacterLiteral*) native.ToPointer());
}

CppSharp::Parser::AST::CharacterLiteral::CharacterLiteral(class ::CppSharp::CppParser::AST::CharacterLiteral* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CharacterLiteral^ CppSharp::Parser::AST::CharacterLiteral::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CharacterLiteral((class ::CppSharp::CppParser::AST::CharacterLiteral*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CharacterLiteral::~CharacterLiteral()
{
}

CppSharp::Parser::AST::CharacterLiteral::CharacterLiteral()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CharacterLiteral();
}

CppSharp::Parser::AST::CharacterLiteral::CharacterLiteral(CppSharp::Parser::AST::CharacterLiteral^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CharacterLiteral*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CharacterLiteral(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CharacterLiteral::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CharacterLiteral*)NativePtr)->location);
}

void CppSharp::Parser::AST::CharacterLiteral::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CharacterLiteral*)NativePtr)->location = _marshal0;
}

CppSharp::Parser::AST::CharacterLiteral::CharacterKind CppSharp::Parser::AST::CharacterLiteral::Kind::get()
{
    return (CppSharp::Parser::AST::CharacterLiteral::CharacterKind)((class ::CppSharp::CppParser::AST::CharacterLiteral*)NativePtr)->kind;
}

void CppSharp::Parser::AST::CharacterLiteral::Kind::set(CppSharp::Parser::AST::CharacterLiteral::CharacterKind value)
{
    ((class ::CppSharp::CppParser::AST::CharacterLiteral*)NativePtr)->kind = (enum ::CppSharp::CppParser::AST::CharacterLiteral::CharacterKind)value;
}

unsigned int CppSharp::Parser::AST::CharacterLiteral::Value::get()
{
    return ((class ::CppSharp::CppParser::AST::CharacterLiteral*)NativePtr)->value;
}

void CppSharp::Parser::AST::CharacterLiteral::Value::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::CharacterLiteral*)NativePtr)->value = value;
}

CppSharp::Parser::AST::FloatingLiteral::FloatingLiteral(class ::CppSharp::CppParser::AST::FloatingLiteral* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::FloatingLiteral^ CppSharp::Parser::AST::FloatingLiteral::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::FloatingLiteral((class ::CppSharp::CppParser::AST::FloatingLiteral*) native.ToPointer());
}

CppSharp::Parser::AST::FloatingLiteral::FloatingLiteral(class ::CppSharp::CppParser::AST::FloatingLiteral* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::FloatingLiteral^ CppSharp::Parser::AST::FloatingLiteral::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::FloatingLiteral((class ::CppSharp::CppParser::AST::FloatingLiteral*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::FloatingLiteral::~FloatingLiteral()
{
}

CppSharp::Parser::AST::FloatingLiteral::FloatingLiteral()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::FloatingLiteral();
}

CppSharp::Parser::AST::FloatingLiteral::FloatingLiteral(CppSharp::Parser::AST::FloatingLiteral^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::FloatingLiteral*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::FloatingLiteral(__arg0);
}

CppSharp::Parser::AST::FloatSemantics CppSharp::Parser::AST::FloatingLiteral::RawSemantics::get()
{
    return (CppSharp::Parser::AST::FloatSemantics)((class ::CppSharp::CppParser::AST::FloatingLiteral*)NativePtr)->rawSemantics;
}

void CppSharp::Parser::AST::FloatingLiteral::RawSemantics::set(CppSharp::Parser::AST::FloatSemantics value)
{
    ((class ::CppSharp::CppParser::AST::FloatingLiteral*)NativePtr)->rawSemantics = (enum ::CppSharp::CppParser::AST::FloatSemantics)value;
}

bool CppSharp::Parser::AST::FloatingLiteral::Exact::get()
{
    return ((class ::CppSharp::CppParser::AST::FloatingLiteral*)NativePtr)->exact;
}

void CppSharp::Parser::AST::FloatingLiteral::Exact::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::FloatingLiteral*)NativePtr)->exact = value;
}

double CppSharp::Parser::AST::FloatingLiteral::ValueAsApproximateDouble::get()
{
    return ((class ::CppSharp::CppParser::AST::FloatingLiteral*)NativePtr)->valueAsApproximateDouble;
}

void CppSharp::Parser::AST::FloatingLiteral::ValueAsApproximateDouble::set(double value)
{
    ((class ::CppSharp::CppParser::AST::FloatingLiteral*)NativePtr)->valueAsApproximateDouble = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::FloatingLiteral::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::FloatingLiteral*)NativePtr)->location);
}

void CppSharp::Parser::AST::FloatingLiteral::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::FloatingLiteral*)NativePtr)->location = _marshal0;
}

CppSharp::Parser::AST::ImaginaryLiteral::ImaginaryLiteral(class ::CppSharp::CppParser::AST::ImaginaryLiteral* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ImaginaryLiteral^ CppSharp::Parser::AST::ImaginaryLiteral::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ImaginaryLiteral((class ::CppSharp::CppParser::AST::ImaginaryLiteral*) native.ToPointer());
}

CppSharp::Parser::AST::ImaginaryLiteral::ImaginaryLiteral(class ::CppSharp::CppParser::AST::ImaginaryLiteral* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ImaginaryLiteral^ CppSharp::Parser::AST::ImaginaryLiteral::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ImaginaryLiteral((class ::CppSharp::CppParser::AST::ImaginaryLiteral*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ImaginaryLiteral::~ImaginaryLiteral()
{
}

CppSharp::Parser::AST::ImaginaryLiteral::ImaginaryLiteral()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ImaginaryLiteral();
}

CppSharp::Parser::AST::ImaginaryLiteral::ImaginaryLiteral(CppSharp::Parser::AST::ImaginaryLiteral^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ImaginaryLiteral*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ImaginaryLiteral(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ImaginaryLiteral::SubExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::ImaginaryLiteral*)NativePtr)->subExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ImaginaryLiteral*)NativePtr)->subExpr);
}

void CppSharp::Parser::AST::ImaginaryLiteral::SubExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ImaginaryLiteral*)NativePtr)->subExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::StringLiteral::StringLiteral(class ::CppSharp::CppParser::AST::StringLiteral* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::StringLiteral^ CppSharp::Parser::AST::StringLiteral::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::StringLiteral((class ::CppSharp::CppParser::AST::StringLiteral*) native.ToPointer());
}

CppSharp::Parser::AST::StringLiteral::StringLiteral(class ::CppSharp::CppParser::AST::StringLiteral* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::StringLiteral^ CppSharp::Parser::AST::StringLiteral::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::StringLiteral((class ::CppSharp::CppParser::AST::StringLiteral*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::StringLiteral::~StringLiteral()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::StringLiteral*) __nativePtr;
    }
}

CppSharp::Parser::AST::StringLiteral::StringLiteral()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::StringLiteral();
}

CppSharp::Parser::AST::StringLiteral::StringLiteral(CppSharp::Parser::AST::StringLiteral^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::StringLiteral*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::StringLiteral(__arg0);
}

::System::String^ CppSharp::Parser::AST::StringLiteral::String::get()
{
    return clix::marshalString<clix::E_UTF8>(((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->string);
}

void CppSharp::Parser::AST::StringLiteral::String::set(::System::String^ value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->string = clix::marshalString<clix::E_UTF8>(value);
}

::System::String^ CppSharp::Parser::AST::StringLiteral::Bytes::get()
{
    return clix::marshalString<clix::E_UTF8>(((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->bytes);
}

void CppSharp::Parser::AST::StringLiteral::Bytes::set(::System::String^ value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->bytes = clix::marshalString<clix::E_UTF8>(value);
}

unsigned int CppSharp::Parser::AST::StringLiteral::ByteLength::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->byteLength;
}

void CppSharp::Parser::AST::StringLiteral::ByteLength::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->byteLength = value;
}

unsigned int CppSharp::Parser::AST::StringLiteral::Length::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->length;
}

void CppSharp::Parser::AST::StringLiteral::Length::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->length = value;
}

unsigned int CppSharp::Parser::AST::StringLiteral::CharByteWidth::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->charByteWidth;
}

void CppSharp::Parser::AST::StringLiteral::CharByteWidth::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->charByteWidth = value;
}

CppSharp::Parser::AST::StringLiteral::StringKind CppSharp::Parser::AST::StringLiteral::Kind::get()
{
    return (CppSharp::Parser::AST::StringLiteral::StringKind)((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->kind;
}

void CppSharp::Parser::AST::StringLiteral::Kind::set(CppSharp::Parser::AST::StringLiteral::StringKind value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->kind = (enum ::CppSharp::CppParser::AST::StringLiteral::StringKind)value;
}

bool CppSharp::Parser::AST::StringLiteral::IsOrdinary::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isOrdinary;
}

void CppSharp::Parser::AST::StringLiteral::IsOrdinary::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isOrdinary = value;
}

bool CppSharp::Parser::AST::StringLiteral::IsWide::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isWide;
}

void CppSharp::Parser::AST::StringLiteral::IsWide::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isWide = value;
}

bool CppSharp::Parser::AST::StringLiteral::IsUTF8::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isUTF8;
}

void CppSharp::Parser::AST::StringLiteral::IsUTF8::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isUTF8 = value;
}

bool CppSharp::Parser::AST::StringLiteral::IsUTF16::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isUTF16;
}

void CppSharp::Parser::AST::StringLiteral::IsUTF16::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isUTF16 = value;
}

bool CppSharp::Parser::AST::StringLiteral::IsUTF32::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isUTF32;
}

void CppSharp::Parser::AST::StringLiteral::IsUTF32::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isUTF32 = value;
}

bool CppSharp::Parser::AST::StringLiteral::IsUnevaluated::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isUnevaluated;
}

void CppSharp::Parser::AST::StringLiteral::IsUnevaluated::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isUnevaluated = value;
}

bool CppSharp::Parser::AST::StringLiteral::IsPascal::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isPascal;
}

void CppSharp::Parser::AST::StringLiteral::IsPascal::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->isPascal = value;
}

bool CppSharp::Parser::AST::StringLiteral::ContainsNonAscii::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->containsNonAscii;
}

void CppSharp::Parser::AST::StringLiteral::ContainsNonAscii::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->containsNonAscii = value;
}

bool CppSharp::Parser::AST::StringLiteral::ContainsNonAsciiOrNull::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->containsNonAsciiOrNull;
}

void CppSharp::Parser::AST::StringLiteral::ContainsNonAsciiOrNull::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->containsNonAsciiOrNull = value;
}

unsigned int CppSharp::Parser::AST::StringLiteral::NumConcatenated::get()
{
    return ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->numConcatenated;
}

void CppSharp::Parser::AST::StringLiteral::NumConcatenated::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::StringLiteral*)NativePtr)->numConcatenated = value;
}

CppSharp::Parser::AST::PredefinedExpr::PredefinedExpr(class ::CppSharp::CppParser::AST::PredefinedExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::PredefinedExpr^ CppSharp::Parser::AST::PredefinedExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::PredefinedExpr((class ::CppSharp::CppParser::AST::PredefinedExpr*) native.ToPointer());
}

CppSharp::Parser::AST::PredefinedExpr::PredefinedExpr(class ::CppSharp::CppParser::AST::PredefinedExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::PredefinedExpr^ CppSharp::Parser::AST::PredefinedExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::PredefinedExpr((class ::CppSharp::CppParser::AST::PredefinedExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::PredefinedExpr::~PredefinedExpr()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::PredefinedExpr*) __nativePtr;
    }
}

CppSharp::Parser::AST::PredefinedExpr::PredefinedExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::PredefinedExpr();
}

CppSharp::Parser::AST::PredefinedExpr::PredefinedExpr(CppSharp::Parser::AST::PredefinedExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::PredefinedExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::PredefinedExpr(__arg0);
}

CppSharp::Parser::AST::PredefinedExpr::IdentKind CppSharp::Parser::AST::PredefinedExpr::identKind::get()
{
    return (CppSharp::Parser::AST::PredefinedExpr::IdentKind)((class ::CppSharp::CppParser::AST::PredefinedExpr*)NativePtr)->identKind;
}

void CppSharp::Parser::AST::PredefinedExpr::identKind::set(CppSharp::Parser::AST::PredefinedExpr::IdentKind value)
{
    ((class ::CppSharp::CppParser::AST::PredefinedExpr*)NativePtr)->identKind = (enum ::CppSharp::CppParser::AST::PredefinedExpr::IdentKind)value;
}

bool CppSharp::Parser::AST::PredefinedExpr::IsTransparent::get()
{
    return ((class ::CppSharp::CppParser::AST::PredefinedExpr*)NativePtr)->isTransparent;
}

void CppSharp::Parser::AST::PredefinedExpr::IsTransparent::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::PredefinedExpr*)NativePtr)->isTransparent = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::PredefinedExpr::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::PredefinedExpr*)NativePtr)->location);
}

void CppSharp::Parser::AST::PredefinedExpr::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::PredefinedExpr*)NativePtr)->location = _marshal0;
}

::System::String^ CppSharp::Parser::AST::PredefinedExpr::IdentKindName::get()
{
    return clix::marshalString<clix::E_UTF8>(((class ::CppSharp::CppParser::AST::PredefinedExpr*)NativePtr)->identKindName);
}

void CppSharp::Parser::AST::PredefinedExpr::IdentKindName::set(::System::String^ value)
{
    ((class ::CppSharp::CppParser::AST::PredefinedExpr*)NativePtr)->identKindName = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::AST::SYCLUniqueStableNameExpr::SYCLUniqueStableNameExpr(class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::SYCLUniqueStableNameExpr^ CppSharp::Parser::AST::SYCLUniqueStableNameExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::SYCLUniqueStableNameExpr((class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr*) native.ToPointer());
}

CppSharp::Parser::AST::SYCLUniqueStableNameExpr::SYCLUniqueStableNameExpr(class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::SYCLUniqueStableNameExpr^ CppSharp::Parser::AST::SYCLUniqueStableNameExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::SYCLUniqueStableNameExpr((class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::SYCLUniqueStableNameExpr::~SYCLUniqueStableNameExpr()
{
}

CppSharp::Parser::AST::SYCLUniqueStableNameExpr::SYCLUniqueStableNameExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr();
}

CppSharp::Parser::AST::SYCLUniqueStableNameExpr::SYCLUniqueStableNameExpr(CppSharp::Parser::AST::SYCLUniqueStableNameExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SYCLUniqueStableNameExpr::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr*)NativePtr)->location);
}

void CppSharp::Parser::AST::SYCLUniqueStableNameExpr::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr*)NativePtr)->location = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SYCLUniqueStableNameExpr::LParenLocation::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr*)NativePtr)->lParenLocation);
}

void CppSharp::Parser::AST::SYCLUniqueStableNameExpr::LParenLocation::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr*)NativePtr)->lParenLocation = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SYCLUniqueStableNameExpr::RParenLocation::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr*)NativePtr)->rParenLocation);
}

void CppSharp::Parser::AST::SYCLUniqueStableNameExpr::RParenLocation::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SYCLUniqueStableNameExpr*)NativePtr)->rParenLocation = _marshal0;
}

CppSharp::Parser::AST::ParenExpr::ParenExpr(class ::CppSharp::CppParser::AST::ParenExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ParenExpr^ CppSharp::Parser::AST::ParenExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ParenExpr((class ::CppSharp::CppParser::AST::ParenExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ParenExpr::ParenExpr(class ::CppSharp::CppParser::AST::ParenExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ParenExpr^ CppSharp::Parser::AST::ParenExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ParenExpr((class ::CppSharp::CppParser::AST::ParenExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ParenExpr::~ParenExpr()
{
}

CppSharp::Parser::AST::ParenExpr::ParenExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ParenExpr();
}

CppSharp::Parser::AST::ParenExpr::ParenExpr(CppSharp::Parser::AST::ParenExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ParenExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ParenExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ParenExpr::SubExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::ParenExpr*)NativePtr)->subExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ParenExpr*)NativePtr)->subExpr);
}

void CppSharp::Parser::AST::ParenExpr::SubExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ParenExpr*)NativePtr)->subExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ParenExpr::LParen::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ParenExpr*)NativePtr)->lParen);
}

void CppSharp::Parser::AST::ParenExpr::LParen::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ParenExpr*)NativePtr)->lParen = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ParenExpr::RParen::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ParenExpr*)NativePtr)->rParen);
}

void CppSharp::Parser::AST::ParenExpr::RParen::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ParenExpr*)NativePtr)->rParen = _marshal0;
}

CppSharp::Parser::AST::UnaryOperator::UnaryOperator(class ::CppSharp::CppParser::AST::UnaryOperator* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::UnaryOperator^ CppSharp::Parser::AST::UnaryOperator::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::UnaryOperator((class ::CppSharp::CppParser::AST::UnaryOperator*) native.ToPointer());
}

CppSharp::Parser::AST::UnaryOperator::UnaryOperator(class ::CppSharp::CppParser::AST::UnaryOperator* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::UnaryOperator^ CppSharp::Parser::AST::UnaryOperator::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::UnaryOperator((class ::CppSharp::CppParser::AST::UnaryOperator*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::UnaryOperator::~UnaryOperator()
{
}

CppSharp::Parser::AST::UnaryOperator::UnaryOperator()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::UnaryOperator();
}

CppSharp::Parser::AST::UnaryOperator::UnaryOperator(CppSharp::Parser::AST::UnaryOperator^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::UnaryOperator*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::UnaryOperator(__arg0);
}

CppSharp::Parser::AST::UnaryOperatorKind CppSharp::Parser::AST::UnaryOperator::Opcode::get()
{
    return (CppSharp::Parser::AST::UnaryOperatorKind)((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->opcode;
}

void CppSharp::Parser::AST::UnaryOperator::Opcode::set(CppSharp::Parser::AST::UnaryOperatorKind value)
{
    ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->opcode = (enum ::CppSharp::CppParser::AST::UnaryOperatorKind)value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::UnaryOperator::SubExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->subExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->subExpr);
}

void CppSharp::Parser::AST::UnaryOperator::SubExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->subExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::UnaryOperator::OperatorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->operatorLoc);
}

void CppSharp::Parser::AST::UnaryOperator::OperatorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->operatorLoc = _marshal0;
}

bool CppSharp::Parser::AST::UnaryOperator::CanOverflow::get()
{
    return ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->canOverflow;
}

void CppSharp::Parser::AST::UnaryOperator::CanOverflow::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->canOverflow = value;
}

bool CppSharp::Parser::AST::UnaryOperator::IsPrefix::get()
{
    return ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->isPrefix;
}

void CppSharp::Parser::AST::UnaryOperator::IsPrefix::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->isPrefix = value;
}

bool CppSharp::Parser::AST::UnaryOperator::IsPostfix::get()
{
    return ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->isPostfix;
}

void CppSharp::Parser::AST::UnaryOperator::IsPostfix::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->isPostfix = value;
}

bool CppSharp::Parser::AST::UnaryOperator::IsIncrementOp::get()
{
    return ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->isIncrementOp;
}

void CppSharp::Parser::AST::UnaryOperator::IsIncrementOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->isIncrementOp = value;
}

bool CppSharp::Parser::AST::UnaryOperator::IsDecrementOp::get()
{
    return ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->isDecrementOp;
}

void CppSharp::Parser::AST::UnaryOperator::IsDecrementOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->isDecrementOp = value;
}

bool CppSharp::Parser::AST::UnaryOperator::IsIncrementDecrementOp::get()
{
    return ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->isIncrementDecrementOp;
}

void CppSharp::Parser::AST::UnaryOperator::IsIncrementDecrementOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->isIncrementDecrementOp = value;
}

bool CppSharp::Parser::AST::UnaryOperator::IsArithmeticOp::get()
{
    return ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->isArithmeticOp;
}

void CppSharp::Parser::AST::UnaryOperator::IsArithmeticOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->isArithmeticOp = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::UnaryOperator::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::UnaryOperator::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->exprLoc = _marshal0;
}

bool CppSharp::Parser::AST::UnaryOperator::HasStoredFPFeatures::get()
{
    return ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->hasStoredFPFeatures;
}

void CppSharp::Parser::AST::UnaryOperator::HasStoredFPFeatures::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnaryOperator*)NativePtr)->hasStoredFPFeatures = value;
}

CppSharp::Parser::AST::OffsetOfExpr::OffsetOfExpr(class ::CppSharp::CppParser::AST::OffsetOfExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::OffsetOfExpr^ CppSharp::Parser::AST::OffsetOfExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::OffsetOfExpr((class ::CppSharp::CppParser::AST::OffsetOfExpr*) native.ToPointer());
}

CppSharp::Parser::AST::OffsetOfExpr::OffsetOfExpr(class ::CppSharp::CppParser::AST::OffsetOfExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::OffsetOfExpr^ CppSharp::Parser::AST::OffsetOfExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::OffsetOfExpr((class ::CppSharp::CppParser::AST::OffsetOfExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::OffsetOfExpr::~OffsetOfExpr()
{
}

CppSharp::Parser::AST::OffsetOfExpr::OffsetOfExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::OffsetOfExpr();
}

CppSharp::Parser::AST::OffsetOfExpr::OffsetOfExpr(CppSharp::Parser::AST::OffsetOfExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::OffsetOfExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::OffsetOfExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::OffsetOfExpr::OperatorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::OffsetOfExpr*)NativePtr)->operatorLoc);
}

void CppSharp::Parser::AST::OffsetOfExpr::OperatorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::OffsetOfExpr*)NativePtr)->operatorLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::OffsetOfExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::OffsetOfExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::OffsetOfExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::OffsetOfExpr*)NativePtr)->rParenLoc = _marshal0;
}

unsigned int CppSharp::Parser::AST::OffsetOfExpr::NumComponents::get()
{
    return ((class ::CppSharp::CppParser::AST::OffsetOfExpr*)NativePtr)->numComponents;
}

void CppSharp::Parser::AST::OffsetOfExpr::NumComponents::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::OffsetOfExpr*)NativePtr)->numComponents = value;
}

unsigned int CppSharp::Parser::AST::OffsetOfExpr::NumExpressions::get()
{
    return ((class ::CppSharp::CppParser::AST::OffsetOfExpr*)NativePtr)->numExpressions;
}

void CppSharp::Parser::AST::OffsetOfExpr::NumExpressions::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::OffsetOfExpr*)NativePtr)->numExpressions = value;
}

CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::UnaryExprOrTypeTraitExpr(class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr^ CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::UnaryExprOrTypeTraitExpr(class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr^ CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::~UnaryExprOrTypeTraitExpr()
{
}

CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::UnaryExprOrTypeTraitExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr();
}

CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::UnaryExprOrTypeTraitExpr(CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr(__arg0);
}

CppSharp::Parser::AST::UnaryExprOrTypeTrait CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::Kind::get()
{
    return (CppSharp::Parser::AST::UnaryExprOrTypeTrait)((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->kind;
}

void CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::Kind::set(CppSharp::Parser::AST::UnaryExprOrTypeTrait value)
{
    ((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->kind = (enum ::CppSharp::CppParser::AST::UnaryExprOrTypeTrait)value;
}

bool CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::IsArgumentType::get()
{
    return ((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->isArgumentType;
}

void CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::IsArgumentType::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->isArgumentType = value;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::ArgumentType::get()
{
    return (&((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->argumentType == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->argumentType);
}

void CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::ArgumentType::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->argumentType = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::TypeOfArgument::get()
{
    return (&((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->typeOfArgument == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->typeOfArgument);
}

void CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::TypeOfArgument::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->typeOfArgument = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::OperatorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->operatorLoc);
}

void CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::OperatorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->operatorLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::UnaryExprOrTypeTraitExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::UnaryExprOrTypeTraitExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::ArraySubscriptExpr::ArraySubscriptExpr(class ::CppSharp::CppParser::AST::ArraySubscriptExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ArraySubscriptExpr^ CppSharp::Parser::AST::ArraySubscriptExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ArraySubscriptExpr((class ::CppSharp::CppParser::AST::ArraySubscriptExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ArraySubscriptExpr::ArraySubscriptExpr(class ::CppSharp::CppParser::AST::ArraySubscriptExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ArraySubscriptExpr^ CppSharp::Parser::AST::ArraySubscriptExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ArraySubscriptExpr((class ::CppSharp::CppParser::AST::ArraySubscriptExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ArraySubscriptExpr::~ArraySubscriptExpr()
{
}

CppSharp::Parser::AST::ArraySubscriptExpr::ArraySubscriptExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ArraySubscriptExpr();
}

CppSharp::Parser::AST::ArraySubscriptExpr::ArraySubscriptExpr(CppSharp::Parser::AST::ArraySubscriptExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ArraySubscriptExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ArraySubscriptExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ArraySubscriptExpr::LHS::get()
{
    return (((class ::CppSharp::CppParser::AST::ArraySubscriptExpr*)NativePtr)->lHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ArraySubscriptExpr*)NativePtr)->lHS);
}

void CppSharp::Parser::AST::ArraySubscriptExpr::LHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ArraySubscriptExpr*)NativePtr)->lHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ArraySubscriptExpr::RHS::get()
{
    return (((class ::CppSharp::CppParser::AST::ArraySubscriptExpr*)NativePtr)->rHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ArraySubscriptExpr*)NativePtr)->rHS);
}

void CppSharp::Parser::AST::ArraySubscriptExpr::RHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ArraySubscriptExpr*)NativePtr)->rHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ArraySubscriptExpr::RBracketLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ArraySubscriptExpr*)NativePtr)->rBracketLoc);
}

void CppSharp::Parser::AST::ArraySubscriptExpr::RBracketLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ArraySubscriptExpr*)NativePtr)->rBracketLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ArraySubscriptExpr::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ArraySubscriptExpr*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::ArraySubscriptExpr::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ArraySubscriptExpr*)NativePtr)->exprLoc = _marshal0;
}

CppSharp::Parser::AST::MatrixSubscriptExpr::MatrixSubscriptExpr(class ::CppSharp::CppParser::AST::MatrixSubscriptExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::MatrixSubscriptExpr^ CppSharp::Parser::AST::MatrixSubscriptExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::MatrixSubscriptExpr((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*) native.ToPointer());
}

CppSharp::Parser::AST::MatrixSubscriptExpr::MatrixSubscriptExpr(class ::CppSharp::CppParser::AST::MatrixSubscriptExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::MatrixSubscriptExpr^ CppSharp::Parser::AST::MatrixSubscriptExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::MatrixSubscriptExpr((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::MatrixSubscriptExpr::~MatrixSubscriptExpr()
{
}

CppSharp::Parser::AST::MatrixSubscriptExpr::MatrixSubscriptExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::MatrixSubscriptExpr();
}

CppSharp::Parser::AST::MatrixSubscriptExpr::MatrixSubscriptExpr(CppSharp::Parser::AST::MatrixSubscriptExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::MatrixSubscriptExpr(__arg0);
}

bool CppSharp::Parser::AST::MatrixSubscriptExpr::IsIncomplete::get()
{
    return ((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->isIncomplete;
}

void CppSharp::Parser::AST::MatrixSubscriptExpr::IsIncomplete::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->isIncomplete = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::MatrixSubscriptExpr::Base::get()
{
    return (((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->base == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->base);
}

void CppSharp::Parser::AST::MatrixSubscriptExpr::Base::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->base = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::MatrixSubscriptExpr::RowIdx::get()
{
    return (((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->rowIdx == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->rowIdx);
}

void CppSharp::Parser::AST::MatrixSubscriptExpr::RowIdx::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->rowIdx = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::MatrixSubscriptExpr::ColumnIdx::get()
{
    return (((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->columnIdx == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->columnIdx);
}

void CppSharp::Parser::AST::MatrixSubscriptExpr::ColumnIdx::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->columnIdx = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MatrixSubscriptExpr::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::MatrixSubscriptExpr::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->exprLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MatrixSubscriptExpr::RBracketLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->rBracketLoc);
}

void CppSharp::Parser::AST::MatrixSubscriptExpr::RBracketLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MatrixSubscriptExpr*)NativePtr)->rBracketLoc = _marshal0;
}

CppSharp::Parser::AST::CallExpr::CallExpr(class ::CppSharp::CppParser::AST::CallExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CallExpr^ CppSharp::Parser::AST::CallExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CallExpr((class ::CppSharp::CppParser::AST::CallExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CallExpr::CallExpr(class ::CppSharp::CppParser::AST::CallExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CallExpr^ CppSharp::Parser::AST::CallExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CallExpr((class ::CppSharp::CppParser::AST::CallExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CallExpr::~CallExpr()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CallExpr*) __nativePtr;
    }
}

CppSharp::Parser::AST::CallExpr::CallExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CallExpr();
}

CppSharp::Parser::AST::CallExpr::CallExpr(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::CallExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CallExpr::Getarguments(unsigned int i)
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->getarguments(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)___ret);
}

void CppSharp::Parser::AST::CallExpr::Addarguments(CppSharp::Parser::AST::Expr^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::Expr*)s->NativePtr;
    ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->addarguments(__arg0);
}

void CppSharp::Parser::AST::CallExpr::Cleararguments()
{
    ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->cleararguments();
}

CppSharp::Parser::AST::CallExpr::CallExpr(CppSharp::Parser::AST::CallExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CallExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CallExpr(__arg0);
}

CppSharp::Parser::AST::CallExpr::operator CppSharp::Parser::AST::CallExpr^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::CallExpr) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::CallExpr(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::CallExpr((class ::CppSharp::CppParser::AST::CallExpr*)_____ret, true);
}

::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ CppSharp::Parser::AST::CallExpr::Arguments::get()
{
    auto _tmp__arguments = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>();
    auto __list0 = ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->arguments;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)_element);
        _tmp__arguments->Add(_marshalElement);
    }
    return _tmp__arguments;
}

void CppSharp::Parser::AST::CallExpr::Arguments::set(::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::Expr*>();
    for each(CppSharp::Parser::AST::Expr^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::Expr*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->arguments = _tmpvalue;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CallExpr::Callee::get()
{
    return (((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->callee == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->callee);
}

void CppSharp::Parser::AST::CallExpr::Callee::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->callee = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::CallExpr::ADLCallKind CppSharp::Parser::AST::CallExpr::aDLCallKind::get()
{
    return (CppSharp::Parser::AST::CallExpr::ADLCallKind)((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->aDLCallKind;
}

void CppSharp::Parser::AST::CallExpr::aDLCallKind::set(CppSharp::Parser::AST::CallExpr::ADLCallKind value)
{
    ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->aDLCallKind = (enum ::CppSharp::CppParser::AST::CallExpr::ADLCallKind)value;
}

bool CppSharp::Parser::AST::CallExpr::UsesADL::get()
{
    return ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->usesADL;
}

void CppSharp::Parser::AST::CallExpr::UsesADL::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->usesADL = value;
}

bool CppSharp::Parser::AST::CallExpr::HasStoredFPFeatures::get()
{
    return ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->hasStoredFPFeatures;
}

void CppSharp::Parser::AST::CallExpr::HasStoredFPFeatures::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->hasStoredFPFeatures = value;
}

unsigned int CppSharp::Parser::AST::CallExpr::NumArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->numArgs;
}

void CppSharp::Parser::AST::CallExpr::NumArgs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->numArgs = value;
}

unsigned int CppSharp::Parser::AST::CallExpr::BuiltinCallee::get()
{
    return ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->builtinCallee;
}

void CppSharp::Parser::AST::CallExpr::BuiltinCallee::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->builtinCallee = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CallExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::CallExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->rParenLoc = _marshal0;
}

bool CppSharp::Parser::AST::CallExpr::IsCallToStdMove::get()
{
    return ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->isCallToStdMove;
}

void CppSharp::Parser::AST::CallExpr::IsCallToStdMove::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->isCallToStdMove = value;
}

unsigned int CppSharp::Parser::AST::CallExpr::GetargumentsCount::get()
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CallExpr*)NativePtr)->getargumentsCount();
    return ___ret;
}

CppSharp::Parser::AST::MemberExpr::MemberExpr(class ::CppSharp::CppParser::AST::MemberExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::MemberExpr^ CppSharp::Parser::AST::MemberExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::MemberExpr((class ::CppSharp::CppParser::AST::MemberExpr*) native.ToPointer());
}

CppSharp::Parser::AST::MemberExpr::MemberExpr(class ::CppSharp::CppParser::AST::MemberExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::MemberExpr^ CppSharp::Parser::AST::MemberExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::MemberExpr((class ::CppSharp::CppParser::AST::MemberExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::MemberExpr::~MemberExpr()
{
}

CppSharp::Parser::AST::MemberExpr::MemberExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::MemberExpr();
}

CppSharp::Parser::AST::MemberExpr::MemberExpr(CppSharp::Parser::AST::MemberExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::MemberExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::MemberExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::MemberExpr::Base::get()
{
    return (((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->base == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->base);
}

void CppSharp::Parser::AST::MemberExpr::Base::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->base = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

bool CppSharp::Parser::AST::MemberExpr::HasQualifier::get()
{
    return ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->hasQualifier;
}

void CppSharp::Parser::AST::MemberExpr::HasQualifier::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->hasQualifier = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MemberExpr::TemplateKeywordLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->templateKeywordLoc);
}

void CppSharp::Parser::AST::MemberExpr::TemplateKeywordLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->templateKeywordLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MemberExpr::LAngleLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->lAngleLoc);
}

void CppSharp::Parser::AST::MemberExpr::LAngleLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->lAngleLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MemberExpr::RAngleLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->rAngleLoc);
}

void CppSharp::Parser::AST::MemberExpr::RAngleLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->rAngleLoc = _marshal0;
}

bool CppSharp::Parser::AST::MemberExpr::HasTemplateKeyword::get()
{
    return ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->hasTemplateKeyword;
}

void CppSharp::Parser::AST::MemberExpr::HasTemplateKeyword::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->hasTemplateKeyword = value;
}

bool CppSharp::Parser::AST::MemberExpr::HasExplicitTemplateArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->hasExplicitTemplateArgs;
}

void CppSharp::Parser::AST::MemberExpr::HasExplicitTemplateArgs::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->hasExplicitTemplateArgs = value;
}

unsigned int CppSharp::Parser::AST::MemberExpr::NumTemplateArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->numTemplateArgs;
}

void CppSharp::Parser::AST::MemberExpr::NumTemplateArgs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->numTemplateArgs = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MemberExpr::OperatorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->operatorLoc);
}

void CppSharp::Parser::AST::MemberExpr::OperatorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->operatorLoc = _marshal0;
}

bool CppSharp::Parser::AST::MemberExpr::Arrow::get()
{
    return ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->arrow;
}

void CppSharp::Parser::AST::MemberExpr::Arrow::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->arrow = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MemberExpr::MemberLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->memberLoc);
}

void CppSharp::Parser::AST::MemberExpr::MemberLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->memberLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MemberExpr::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::MemberExpr::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->exprLoc = _marshal0;
}

bool CppSharp::Parser::AST::MemberExpr::IsImplicitAccess::get()
{
    return ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->isImplicitAccess;
}

void CppSharp::Parser::AST::MemberExpr::IsImplicitAccess::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->isImplicitAccess = value;
}

bool CppSharp::Parser::AST::MemberExpr::HadMultipleCandidates::get()
{
    return ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->hadMultipleCandidates;
}

void CppSharp::Parser::AST::MemberExpr::HadMultipleCandidates::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->hadMultipleCandidates = value;
}

CppSharp::Parser::AST::NonOdrUseReason CppSharp::Parser::AST::MemberExpr::IsNonOdrUse::get()
{
    return (CppSharp::Parser::AST::NonOdrUseReason)((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->isNonOdrUse;
}

void CppSharp::Parser::AST::MemberExpr::IsNonOdrUse::set(CppSharp::Parser::AST::NonOdrUseReason value)
{
    ((class ::CppSharp::CppParser::AST::MemberExpr*)NativePtr)->isNonOdrUse = (enum ::CppSharp::CppParser::AST::NonOdrUseReason)value;
}

CppSharp::Parser::AST::CompoundLiteralExpr::CompoundLiteralExpr(class ::CppSharp::CppParser::AST::CompoundLiteralExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CompoundLiteralExpr^ CppSharp::Parser::AST::CompoundLiteralExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CompoundLiteralExpr((class ::CppSharp::CppParser::AST::CompoundLiteralExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CompoundLiteralExpr::CompoundLiteralExpr(class ::CppSharp::CppParser::AST::CompoundLiteralExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CompoundLiteralExpr^ CppSharp::Parser::AST::CompoundLiteralExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CompoundLiteralExpr((class ::CppSharp::CppParser::AST::CompoundLiteralExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CompoundLiteralExpr::~CompoundLiteralExpr()
{
}

CppSharp::Parser::AST::CompoundLiteralExpr::CompoundLiteralExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CompoundLiteralExpr();
}

CppSharp::Parser::AST::CompoundLiteralExpr::CompoundLiteralExpr(CppSharp::Parser::AST::CompoundLiteralExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CompoundLiteralExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CompoundLiteralExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CompoundLiteralExpr::Initializer::get()
{
    return (((class ::CppSharp::CppParser::AST::CompoundLiteralExpr*)NativePtr)->initializer == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CompoundLiteralExpr*)NativePtr)->initializer);
}

void CppSharp::Parser::AST::CompoundLiteralExpr::Initializer::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CompoundLiteralExpr*)NativePtr)->initializer = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

bool CppSharp::Parser::AST::CompoundLiteralExpr::FileScope::get()
{
    return ((class ::CppSharp::CppParser::AST::CompoundLiteralExpr*)NativePtr)->fileScope;
}

void CppSharp::Parser::AST::CompoundLiteralExpr::FileScope::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CompoundLiteralExpr*)NativePtr)->fileScope = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CompoundLiteralExpr::LParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CompoundLiteralExpr*)NativePtr)->lParenLoc);
}

void CppSharp::Parser::AST::CompoundLiteralExpr::LParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CompoundLiteralExpr*)NativePtr)->lParenLoc = _marshal0;
}

CppSharp::Parser::AST::CastExpr::CastExpr(class ::CppSharp::CppParser::AST::CastExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CastExpr^ CppSharp::Parser::AST::CastExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CastExpr((class ::CppSharp::CppParser::AST::CastExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CastExpr::CastExpr(class ::CppSharp::CppParser::AST::CastExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CastExpr^ CppSharp::Parser::AST::CastExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CastExpr((class ::CppSharp::CppParser::AST::CastExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CastExpr::~CastExpr()
{
}

CppSharp::Parser::AST::CastExpr::CastExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CastExpr();
}

CppSharp::Parser::AST::CastExpr::CastExpr(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::CastExpr(__arg0);
}

CppSharp::Parser::AST::CastExpr::CastExpr(CppSharp::Parser::AST::CastExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CastExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CastExpr(__arg0);
}

CppSharp::Parser::AST::CastExpr::operator CppSharp::Parser::AST::CastExpr^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::CastExpr) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::CastExpr(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::CastExpr((class ::CppSharp::CppParser::AST::CastExpr*)_____ret, true);
}

CppSharp::Parser::AST::CastKind CppSharp::Parser::AST::CastExpr::CastKind::get()
{
    return (CppSharp::Parser::AST::CastKind)((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->castKind;
}

void CppSharp::Parser::AST::CastExpr::CastKind::set(CppSharp::Parser::AST::CastKind value)
{
    ((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->castKind = (enum ::CppSharp::CppParser::AST::CastKind)value;
}

::System::String^ CppSharp::Parser::AST::CastExpr::CastKindName::get()
{
    return (((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->castKindName == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->castKindName));
}

void CppSharp::Parser::AST::CastExpr::CastKindName::set(::System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->castKindName = _value.c_str();
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CastExpr::SubExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->subExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->subExpr);
}

void CppSharp::Parser::AST::CastExpr::SubExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->subExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Declaration^ CppSharp::Parser::AST::CastExpr::ConversionFunction::get()
{
    return (((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->conversionFunction == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Declaration((class ::CppSharp::CppParser::AST::Declaration*)((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->conversionFunction);
}

void CppSharp::Parser::AST::CastExpr::ConversionFunction::set(CppSharp::Parser::AST::Declaration^ value)
{
    ((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->conversionFunction = (class ::CppSharp::CppParser::AST::Declaration*)value->NativePtr;
}

bool CppSharp::Parser::AST::CastExpr::PathEmpty::get()
{
    return ((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->path_empty;
}

void CppSharp::Parser::AST::CastExpr::PathEmpty::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->path_empty = value;
}

unsigned int CppSharp::Parser::AST::CastExpr::PathSize::get()
{
    return ((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->path_size;
}

void CppSharp::Parser::AST::CastExpr::PathSize::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->path_size = value;
}

bool CppSharp::Parser::AST::CastExpr::HasStoredFPFeatures::get()
{
    return ((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->hasStoredFPFeatures;
}

void CppSharp::Parser::AST::CastExpr::HasStoredFPFeatures::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CastExpr*)NativePtr)->hasStoredFPFeatures = value;
}

CppSharp::Parser::AST::ImplicitCastExpr::ImplicitCastExpr(class ::CppSharp::CppParser::AST::ImplicitCastExpr* native)
    : CppSharp::Parser::AST::CastExpr((::CppSharp::CppParser::AST::CastExpr*)native)
{
}

CppSharp::Parser::AST::ImplicitCastExpr^ CppSharp::Parser::AST::ImplicitCastExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ImplicitCastExpr((class ::CppSharp::CppParser::AST::ImplicitCastExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ImplicitCastExpr::ImplicitCastExpr(class ::CppSharp::CppParser::AST::ImplicitCastExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CastExpr((::CppSharp::CppParser::AST::CastExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ImplicitCastExpr^ CppSharp::Parser::AST::ImplicitCastExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ImplicitCastExpr((class ::CppSharp::CppParser::AST::ImplicitCastExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ImplicitCastExpr::~ImplicitCastExpr()
{
}

CppSharp::Parser::AST::ImplicitCastExpr::ImplicitCastExpr()
    : CppSharp::Parser::AST::CastExpr((::CppSharp::CppParser::AST::CastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ImplicitCastExpr();
}

CppSharp::Parser::AST::ImplicitCastExpr::ImplicitCastExpr(CppSharp::Parser::AST::ImplicitCastExpr^ _0)
    : CppSharp::Parser::AST::CastExpr((::CppSharp::CppParser::AST::CastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ImplicitCastExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ImplicitCastExpr(__arg0);
}

bool CppSharp::Parser::AST::ImplicitCastExpr::IsPartOfExplicitCast::get()
{
    return ((class ::CppSharp::CppParser::AST::ImplicitCastExpr*)NativePtr)->isPartOfExplicitCast;
}

void CppSharp::Parser::AST::ImplicitCastExpr::IsPartOfExplicitCast::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::ImplicitCastExpr*)NativePtr)->isPartOfExplicitCast = value;
}

CppSharp::Parser::AST::ExplicitCastExpr::ExplicitCastExpr(class ::CppSharp::CppParser::AST::ExplicitCastExpr* native)
    : CppSharp::Parser::AST::CastExpr((::CppSharp::CppParser::AST::CastExpr*)native)
{
}

CppSharp::Parser::AST::ExplicitCastExpr^ CppSharp::Parser::AST::ExplicitCastExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ExplicitCastExpr((class ::CppSharp::CppParser::AST::ExplicitCastExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ExplicitCastExpr::ExplicitCastExpr(class ::CppSharp::CppParser::AST::ExplicitCastExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CastExpr((::CppSharp::CppParser::AST::CastExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ExplicitCastExpr^ CppSharp::Parser::AST::ExplicitCastExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ExplicitCastExpr((class ::CppSharp::CppParser::AST::ExplicitCastExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ExplicitCastExpr::~ExplicitCastExpr()
{
}

CppSharp::Parser::AST::ExplicitCastExpr::ExplicitCastExpr()
    : CppSharp::Parser::AST::CastExpr((::CppSharp::CppParser::AST::CastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ExplicitCastExpr();
}

CppSharp::Parser::AST::ExplicitCastExpr::ExplicitCastExpr(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::CastExpr((::CppSharp::CppParser::AST::CastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::ExplicitCastExpr(__arg0);
}

CppSharp::Parser::AST::ExplicitCastExpr::ExplicitCastExpr(CppSharp::Parser::AST::ExplicitCastExpr^ _0)
    : CppSharp::Parser::AST::CastExpr((::CppSharp::CppParser::AST::CastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ExplicitCastExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ExplicitCastExpr(__arg0);
}

CppSharp::Parser::AST::ExplicitCastExpr::operator CppSharp::Parser::AST::ExplicitCastExpr^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::ExplicitCastExpr) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::ExplicitCastExpr(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::ExplicitCastExpr((class ::CppSharp::CppParser::AST::ExplicitCastExpr*)_____ret, true);
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::ExplicitCastExpr::TypeAsWritten::get()
{
    return (&((class ::CppSharp::CppParser::AST::ExplicitCastExpr*)NativePtr)->typeAsWritten == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::ExplicitCastExpr*)NativePtr)->typeAsWritten);
}

void CppSharp::Parser::AST::ExplicitCastExpr::TypeAsWritten::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::ExplicitCastExpr*)NativePtr)->typeAsWritten = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

CppSharp::Parser::AST::CStyleCastExpr::CStyleCastExpr(class ::CppSharp::CppParser::AST::CStyleCastExpr* native)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)native)
{
}

CppSharp::Parser::AST::CStyleCastExpr^ CppSharp::Parser::AST::CStyleCastExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CStyleCastExpr((class ::CppSharp::CppParser::AST::CStyleCastExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CStyleCastExpr::CStyleCastExpr(class ::CppSharp::CppParser::AST::CStyleCastExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CStyleCastExpr^ CppSharp::Parser::AST::CStyleCastExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CStyleCastExpr((class ::CppSharp::CppParser::AST::CStyleCastExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CStyleCastExpr::~CStyleCastExpr()
{
}

CppSharp::Parser::AST::CStyleCastExpr::CStyleCastExpr()
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CStyleCastExpr();
}

CppSharp::Parser::AST::CStyleCastExpr::CStyleCastExpr(CppSharp::Parser::AST::CStyleCastExpr^ _0)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CStyleCastExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CStyleCastExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CStyleCastExpr::LParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CStyleCastExpr*)NativePtr)->lParenLoc);
}

void CppSharp::Parser::AST::CStyleCastExpr::LParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CStyleCastExpr*)NativePtr)->lParenLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CStyleCastExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CStyleCastExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::CStyleCastExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CStyleCastExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::BinaryOperator::BinaryOperator(class ::CppSharp::CppParser::AST::BinaryOperator* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::BinaryOperator^ CppSharp::Parser::AST::BinaryOperator::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::BinaryOperator((class ::CppSharp::CppParser::AST::BinaryOperator*) native.ToPointer());
}

CppSharp::Parser::AST::BinaryOperator::BinaryOperator(class ::CppSharp::CppParser::AST::BinaryOperator* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::BinaryOperator^ CppSharp::Parser::AST::BinaryOperator::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::BinaryOperator((class ::CppSharp::CppParser::AST::BinaryOperator*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::BinaryOperator::~BinaryOperator()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::BinaryOperator*) __nativePtr;
    }
}

CppSharp::Parser::AST::BinaryOperator::BinaryOperator()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::BinaryOperator();
}

CppSharp::Parser::AST::BinaryOperator::BinaryOperator(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::BinaryOperator(__arg0);
}

CppSharp::Parser::AST::BinaryOperator::BinaryOperator(CppSharp::Parser::AST::BinaryOperator^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::BinaryOperator*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::BinaryOperator(__arg0);
}

CppSharp::Parser::AST::BinaryOperator::operator CppSharp::Parser::AST::BinaryOperator^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::BinaryOperator) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::BinaryOperator(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::BinaryOperator((class ::CppSharp::CppParser::AST::BinaryOperator*)_____ret, true);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::BinaryOperator::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::BinaryOperator::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->exprLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::BinaryOperator::OperatorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->operatorLoc);
}

void CppSharp::Parser::AST::BinaryOperator::OperatorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->operatorLoc = _marshal0;
}

CppSharp::Parser::AST::BinaryOperatorKind CppSharp::Parser::AST::BinaryOperator::Opcode::get()
{
    return (CppSharp::Parser::AST::BinaryOperatorKind)((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->opcode;
}

void CppSharp::Parser::AST::BinaryOperator::Opcode::set(CppSharp::Parser::AST::BinaryOperatorKind value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->opcode = (enum ::CppSharp::CppParser::AST::BinaryOperatorKind)value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::BinaryOperator::LHS::get()
{
    return (((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->lHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->lHS);
}

void CppSharp::Parser::AST::BinaryOperator::LHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->lHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::BinaryOperator::RHS::get()
{
    return (((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->rHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->rHS);
}

void CppSharp::Parser::AST::BinaryOperator::RHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->rHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

::System::String^ CppSharp::Parser::AST::BinaryOperator::OpcodeStr::get()
{
    return clix::marshalString<clix::E_UTF8>(((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->opcodeStr);
}

void CppSharp::Parser::AST::BinaryOperator::OpcodeStr::set(::System::String^ value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->opcodeStr = clix::marshalString<clix::E_UTF8>(value);
}

bool CppSharp::Parser::AST::BinaryOperator::IsPtrMemOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isPtrMemOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsPtrMemOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isPtrMemOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::IsMultiplicativeOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isMultiplicativeOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsMultiplicativeOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isMultiplicativeOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::IsAdditiveOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isAdditiveOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsAdditiveOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isAdditiveOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::IsShiftOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isShiftOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsShiftOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isShiftOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::IsBitwiseOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isBitwiseOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsBitwiseOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isBitwiseOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::IsRelationalOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isRelationalOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsRelationalOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isRelationalOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::IsEqualityOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isEqualityOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsEqualityOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isEqualityOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::IsComparisonOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isComparisonOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsComparisonOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isComparisonOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::IsCommaOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isCommaOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsCommaOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isCommaOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::IsLogicalOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isLogicalOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsLogicalOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isLogicalOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::IsAssignmentOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isAssignmentOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsAssignmentOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isAssignmentOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::IsCompoundAssignmentOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isCompoundAssignmentOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsCompoundAssignmentOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isCompoundAssignmentOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::IsShiftAssignOp::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isShiftAssignOp;
}

void CppSharp::Parser::AST::BinaryOperator::IsShiftAssignOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->isShiftAssignOp = value;
}

bool CppSharp::Parser::AST::BinaryOperator::HasStoredFPFeatures::get()
{
    return ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->hasStoredFPFeatures;
}

void CppSharp::Parser::AST::BinaryOperator::HasStoredFPFeatures::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::BinaryOperator*)NativePtr)->hasStoredFPFeatures = value;
}

CppSharp::Parser::AST::CompoundAssignOperator::CompoundAssignOperator(class ::CppSharp::CppParser::AST::CompoundAssignOperator* native)
    : CppSharp::Parser::AST::BinaryOperator((::CppSharp::CppParser::AST::BinaryOperator*)native)
{
}

CppSharp::Parser::AST::CompoundAssignOperator^ CppSharp::Parser::AST::CompoundAssignOperator::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CompoundAssignOperator((class ::CppSharp::CppParser::AST::CompoundAssignOperator*) native.ToPointer());
}

CppSharp::Parser::AST::CompoundAssignOperator::CompoundAssignOperator(class ::CppSharp::CppParser::AST::CompoundAssignOperator* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::BinaryOperator((::CppSharp::CppParser::AST::BinaryOperator*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CompoundAssignOperator^ CppSharp::Parser::AST::CompoundAssignOperator::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CompoundAssignOperator((class ::CppSharp::CppParser::AST::CompoundAssignOperator*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CompoundAssignOperator::~CompoundAssignOperator()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CompoundAssignOperator*) __nativePtr;
    }
}

CppSharp::Parser::AST::CompoundAssignOperator::CompoundAssignOperator()
    : CppSharp::Parser::AST::BinaryOperator((::CppSharp::CppParser::AST::BinaryOperator*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CompoundAssignOperator();
}

CppSharp::Parser::AST::CompoundAssignOperator::CompoundAssignOperator(CppSharp::Parser::AST::CompoundAssignOperator^ _0)
    : CppSharp::Parser::AST::BinaryOperator((::CppSharp::CppParser::AST::BinaryOperator*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CompoundAssignOperator*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CompoundAssignOperator(__arg0);
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::CompoundAssignOperator::ComputationLHSType::get()
{
    return (&((class ::CppSharp::CppParser::AST::CompoundAssignOperator*)NativePtr)->computationLHSType == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::CompoundAssignOperator*)NativePtr)->computationLHSType);
}

void CppSharp::Parser::AST::CompoundAssignOperator::ComputationLHSType::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CompoundAssignOperator*)NativePtr)->computationLHSType = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::CompoundAssignOperator::ComputationResultType::get()
{
    return (&((class ::CppSharp::CppParser::AST::CompoundAssignOperator*)NativePtr)->computationResultType == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::CompoundAssignOperator*)NativePtr)->computationResultType);
}

void CppSharp::Parser::AST::CompoundAssignOperator::ComputationResultType::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CompoundAssignOperator*)NativePtr)->computationResultType = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

CppSharp::Parser::AST::AbstractConditionalOperator::AbstractConditionalOperator(class ::CppSharp::CppParser::AST::AbstractConditionalOperator* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::AbstractConditionalOperator^ CppSharp::Parser::AST::AbstractConditionalOperator::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::AbstractConditionalOperator((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*) native.ToPointer());
}

CppSharp::Parser::AST::AbstractConditionalOperator::AbstractConditionalOperator(class ::CppSharp::CppParser::AST::AbstractConditionalOperator* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::AbstractConditionalOperator^ CppSharp::Parser::AST::AbstractConditionalOperator::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::AbstractConditionalOperator((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::AbstractConditionalOperator::~AbstractConditionalOperator()
{
}

CppSharp::Parser::AST::AbstractConditionalOperator::AbstractConditionalOperator()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::AbstractConditionalOperator();
}

CppSharp::Parser::AST::AbstractConditionalOperator::AbstractConditionalOperator(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::AbstractConditionalOperator(__arg0);
}

CppSharp::Parser::AST::AbstractConditionalOperator::AbstractConditionalOperator(CppSharp::Parser::AST::AbstractConditionalOperator^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::AbstractConditionalOperator(__arg0);
}

CppSharp::Parser::AST::AbstractConditionalOperator::operator CppSharp::Parser::AST::AbstractConditionalOperator^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::AbstractConditionalOperator) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::AbstractConditionalOperator(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::AbstractConditionalOperator((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)_____ret, true);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AbstractConditionalOperator::Cond::get()
{
    return (((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->cond == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->cond);
}

void CppSharp::Parser::AST::AbstractConditionalOperator::Cond::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->cond = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AbstractConditionalOperator::TrueExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->trueExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->trueExpr);
}

void CppSharp::Parser::AST::AbstractConditionalOperator::TrueExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->trueExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AbstractConditionalOperator::FalseExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->falseExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->falseExpr);
}

void CppSharp::Parser::AST::AbstractConditionalOperator::FalseExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->falseExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::AbstractConditionalOperator::QuestionLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->questionLoc);
}

void CppSharp::Parser::AST::AbstractConditionalOperator::QuestionLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->questionLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::AbstractConditionalOperator::ColonLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->colonLoc);
}

void CppSharp::Parser::AST::AbstractConditionalOperator::ColonLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::AbstractConditionalOperator*)NativePtr)->colonLoc = _marshal0;
}

CppSharp::Parser::AST::ConditionalOperator::ConditionalOperator(class ::CppSharp::CppParser::AST::ConditionalOperator* native)
    : CppSharp::Parser::AST::AbstractConditionalOperator((::CppSharp::CppParser::AST::AbstractConditionalOperator*)native)
{
}

CppSharp::Parser::AST::ConditionalOperator^ CppSharp::Parser::AST::ConditionalOperator::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ConditionalOperator((class ::CppSharp::CppParser::AST::ConditionalOperator*) native.ToPointer());
}

CppSharp::Parser::AST::ConditionalOperator::ConditionalOperator(class ::CppSharp::CppParser::AST::ConditionalOperator* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::AbstractConditionalOperator((::CppSharp::CppParser::AST::AbstractConditionalOperator*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ConditionalOperator^ CppSharp::Parser::AST::ConditionalOperator::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ConditionalOperator((class ::CppSharp::CppParser::AST::ConditionalOperator*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ConditionalOperator::~ConditionalOperator()
{
}

CppSharp::Parser::AST::ConditionalOperator::ConditionalOperator()
    : CppSharp::Parser::AST::AbstractConditionalOperator((::CppSharp::CppParser::AST::AbstractConditionalOperator*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ConditionalOperator();
}

CppSharp::Parser::AST::ConditionalOperator::ConditionalOperator(CppSharp::Parser::AST::ConditionalOperator^ _0)
    : CppSharp::Parser::AST::AbstractConditionalOperator((::CppSharp::CppParser::AST::AbstractConditionalOperator*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ConditionalOperator*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ConditionalOperator(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ConditionalOperator::Cond::get()
{
    return (((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->cond == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->cond);
}

void CppSharp::Parser::AST::ConditionalOperator::Cond::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->cond = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ConditionalOperator::TrueExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->trueExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->trueExpr);
}

void CppSharp::Parser::AST::ConditionalOperator::TrueExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->trueExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ConditionalOperator::FalseExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->falseExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->falseExpr);
}

void CppSharp::Parser::AST::ConditionalOperator::FalseExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->falseExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ConditionalOperator::LHS::get()
{
    return (((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->lHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->lHS);
}

void CppSharp::Parser::AST::ConditionalOperator::LHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->lHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ConditionalOperator::RHS::get()
{
    return (((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->rHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->rHS);
}

void CppSharp::Parser::AST::ConditionalOperator::RHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ConditionalOperator*)NativePtr)->rHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::BinaryConditionalOperator::BinaryConditionalOperator(class ::CppSharp::CppParser::AST::BinaryConditionalOperator* native)
    : CppSharp::Parser::AST::AbstractConditionalOperator((::CppSharp::CppParser::AST::AbstractConditionalOperator*)native)
{
}

CppSharp::Parser::AST::BinaryConditionalOperator^ CppSharp::Parser::AST::BinaryConditionalOperator::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::BinaryConditionalOperator((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*) native.ToPointer());
}

CppSharp::Parser::AST::BinaryConditionalOperator::BinaryConditionalOperator(class ::CppSharp::CppParser::AST::BinaryConditionalOperator* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::AbstractConditionalOperator((::CppSharp::CppParser::AST::AbstractConditionalOperator*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::BinaryConditionalOperator^ CppSharp::Parser::AST::BinaryConditionalOperator::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::BinaryConditionalOperator((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::BinaryConditionalOperator::~BinaryConditionalOperator()
{
}

CppSharp::Parser::AST::BinaryConditionalOperator::BinaryConditionalOperator()
    : CppSharp::Parser::AST::AbstractConditionalOperator((::CppSharp::CppParser::AST::AbstractConditionalOperator*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::BinaryConditionalOperator();
}

CppSharp::Parser::AST::BinaryConditionalOperator::BinaryConditionalOperator(CppSharp::Parser::AST::BinaryConditionalOperator^ _0)
    : CppSharp::Parser::AST::AbstractConditionalOperator((::CppSharp::CppParser::AST::AbstractConditionalOperator*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::BinaryConditionalOperator(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::BinaryConditionalOperator::Common::get()
{
    return (((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->common == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->common);
}

void CppSharp::Parser::AST::BinaryConditionalOperator::Common::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->common = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::OpaqueValueExpr^ CppSharp::Parser::AST::BinaryConditionalOperator::OpaqueValue::get()
{
    return (((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->opaqueValue == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::OpaqueValueExpr((class ::CppSharp::CppParser::AST::OpaqueValueExpr*)((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->opaqueValue);
}

void CppSharp::Parser::AST::BinaryConditionalOperator::OpaqueValue::set(CppSharp::Parser::AST::OpaqueValueExpr^ value)
{
    ((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->opaqueValue = (class ::CppSharp::CppParser::AST::OpaqueValueExpr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::BinaryConditionalOperator::Cond::get()
{
    return (((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->cond == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->cond);
}

void CppSharp::Parser::AST::BinaryConditionalOperator::Cond::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->cond = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::BinaryConditionalOperator::TrueExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->trueExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->trueExpr);
}

void CppSharp::Parser::AST::BinaryConditionalOperator::TrueExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->trueExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::BinaryConditionalOperator::FalseExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->falseExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->falseExpr);
}

void CppSharp::Parser::AST::BinaryConditionalOperator::FalseExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::BinaryConditionalOperator*)NativePtr)->falseExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::AddrLabelExpr::AddrLabelExpr(class ::CppSharp::CppParser::AST::AddrLabelExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::AddrLabelExpr^ CppSharp::Parser::AST::AddrLabelExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::AddrLabelExpr((class ::CppSharp::CppParser::AST::AddrLabelExpr*) native.ToPointer());
}

CppSharp::Parser::AST::AddrLabelExpr::AddrLabelExpr(class ::CppSharp::CppParser::AST::AddrLabelExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::AddrLabelExpr^ CppSharp::Parser::AST::AddrLabelExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::AddrLabelExpr((class ::CppSharp::CppParser::AST::AddrLabelExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::AddrLabelExpr::~AddrLabelExpr()
{
}

CppSharp::Parser::AST::AddrLabelExpr::AddrLabelExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::AddrLabelExpr();
}

CppSharp::Parser::AST::AddrLabelExpr::AddrLabelExpr(CppSharp::Parser::AST::AddrLabelExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::AddrLabelExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::AddrLabelExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::AddrLabelExpr::AmpAmpLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::AddrLabelExpr*)NativePtr)->ampAmpLoc);
}

void CppSharp::Parser::AST::AddrLabelExpr::AmpAmpLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::AddrLabelExpr*)NativePtr)->ampAmpLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::AddrLabelExpr::LabelLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::AddrLabelExpr*)NativePtr)->labelLoc);
}

void CppSharp::Parser::AST::AddrLabelExpr::LabelLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::AddrLabelExpr*)NativePtr)->labelLoc = _marshal0;
}

CppSharp::Parser::AST::StmtExpr::StmtExpr(class ::CppSharp::CppParser::AST::StmtExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::StmtExpr^ CppSharp::Parser::AST::StmtExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::StmtExpr((class ::CppSharp::CppParser::AST::StmtExpr*) native.ToPointer());
}

CppSharp::Parser::AST::StmtExpr::StmtExpr(class ::CppSharp::CppParser::AST::StmtExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::StmtExpr^ CppSharp::Parser::AST::StmtExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::StmtExpr((class ::CppSharp::CppParser::AST::StmtExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::StmtExpr::~StmtExpr()
{
}

CppSharp::Parser::AST::StmtExpr::StmtExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::StmtExpr();
}

CppSharp::Parser::AST::StmtExpr::StmtExpr(CppSharp::Parser::AST::StmtExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::StmtExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::StmtExpr(__arg0);
}

CppSharp::Parser::AST::CompoundStmt^ CppSharp::Parser::AST::StmtExpr::SubStmt::get()
{
    return (((class ::CppSharp::CppParser::AST::StmtExpr*)NativePtr)->subStmt == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::CompoundStmt((class ::CppSharp::CppParser::AST::CompoundStmt*)((class ::CppSharp::CppParser::AST::StmtExpr*)NativePtr)->subStmt);
}

void CppSharp::Parser::AST::StmtExpr::SubStmt::set(CppSharp::Parser::AST::CompoundStmt^ value)
{
    ((class ::CppSharp::CppParser::AST::StmtExpr*)NativePtr)->subStmt = (class ::CppSharp::CppParser::AST::CompoundStmt*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::StmtExpr::LParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::StmtExpr*)NativePtr)->lParenLoc);
}

void CppSharp::Parser::AST::StmtExpr::LParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::StmtExpr*)NativePtr)->lParenLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::StmtExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::StmtExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::StmtExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::StmtExpr*)NativePtr)->rParenLoc = _marshal0;
}

unsigned int CppSharp::Parser::AST::StmtExpr::TemplateDepth::get()
{
    return ((class ::CppSharp::CppParser::AST::StmtExpr*)NativePtr)->templateDepth;
}

void CppSharp::Parser::AST::StmtExpr::TemplateDepth::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::StmtExpr*)NativePtr)->templateDepth = value;
}

CppSharp::Parser::AST::ShuffleVectorExpr::ShuffleVectorExpr(class ::CppSharp::CppParser::AST::ShuffleVectorExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ShuffleVectorExpr^ CppSharp::Parser::AST::ShuffleVectorExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ShuffleVectorExpr((class ::CppSharp::CppParser::AST::ShuffleVectorExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ShuffleVectorExpr::ShuffleVectorExpr(class ::CppSharp::CppParser::AST::ShuffleVectorExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ShuffleVectorExpr^ CppSharp::Parser::AST::ShuffleVectorExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ShuffleVectorExpr((class ::CppSharp::CppParser::AST::ShuffleVectorExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ShuffleVectorExpr::~ShuffleVectorExpr()
{
}

CppSharp::Parser::AST::ShuffleVectorExpr::ShuffleVectorExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ShuffleVectorExpr();
}

CppSharp::Parser::AST::ShuffleVectorExpr::ShuffleVectorExpr(CppSharp::Parser::AST::ShuffleVectorExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ShuffleVectorExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ShuffleVectorExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ShuffleVectorExpr::BuiltinLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ShuffleVectorExpr*)NativePtr)->builtinLoc);
}

void CppSharp::Parser::AST::ShuffleVectorExpr::BuiltinLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ShuffleVectorExpr*)NativePtr)->builtinLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ShuffleVectorExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ShuffleVectorExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::ShuffleVectorExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ShuffleVectorExpr*)NativePtr)->rParenLoc = _marshal0;
}

unsigned int CppSharp::Parser::AST::ShuffleVectorExpr::NumSubExprs::get()
{
    return ((class ::CppSharp::CppParser::AST::ShuffleVectorExpr*)NativePtr)->numSubExprs;
}

void CppSharp::Parser::AST::ShuffleVectorExpr::NumSubExprs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::ShuffleVectorExpr*)NativePtr)->numSubExprs = value;
}

CppSharp::Parser::AST::ConvertVectorExpr::ConvertVectorExpr(class ::CppSharp::CppParser::AST::ConvertVectorExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ConvertVectorExpr^ CppSharp::Parser::AST::ConvertVectorExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ConvertVectorExpr((class ::CppSharp::CppParser::AST::ConvertVectorExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ConvertVectorExpr::ConvertVectorExpr(class ::CppSharp::CppParser::AST::ConvertVectorExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ConvertVectorExpr^ CppSharp::Parser::AST::ConvertVectorExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ConvertVectorExpr((class ::CppSharp::CppParser::AST::ConvertVectorExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ConvertVectorExpr::~ConvertVectorExpr()
{
}

CppSharp::Parser::AST::ConvertVectorExpr::ConvertVectorExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ConvertVectorExpr();
}

CppSharp::Parser::AST::ConvertVectorExpr::ConvertVectorExpr(CppSharp::Parser::AST::ConvertVectorExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ConvertVectorExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ConvertVectorExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ConvertVectorExpr::SrcExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::ConvertVectorExpr*)NativePtr)->srcExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ConvertVectorExpr*)NativePtr)->srcExpr);
}

void CppSharp::Parser::AST::ConvertVectorExpr::SrcExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ConvertVectorExpr*)NativePtr)->srcExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ConvertVectorExpr::BuiltinLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ConvertVectorExpr*)NativePtr)->builtinLoc);
}

void CppSharp::Parser::AST::ConvertVectorExpr::BuiltinLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ConvertVectorExpr*)NativePtr)->builtinLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ConvertVectorExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ConvertVectorExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::ConvertVectorExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ConvertVectorExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::ChooseExpr::ChooseExpr(class ::CppSharp::CppParser::AST::ChooseExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ChooseExpr^ CppSharp::Parser::AST::ChooseExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ChooseExpr((class ::CppSharp::CppParser::AST::ChooseExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ChooseExpr::ChooseExpr(class ::CppSharp::CppParser::AST::ChooseExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ChooseExpr^ CppSharp::Parser::AST::ChooseExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ChooseExpr((class ::CppSharp::CppParser::AST::ChooseExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ChooseExpr::~ChooseExpr()
{
}

CppSharp::Parser::AST::ChooseExpr::ChooseExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ChooseExpr();
}

CppSharp::Parser::AST::ChooseExpr::ChooseExpr(CppSharp::Parser::AST::ChooseExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ChooseExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ChooseExpr(__arg0);
}

bool CppSharp::Parser::AST::ChooseExpr::IsConditionTrue::get()
{
    return ((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->isConditionTrue;
}

void CppSharp::Parser::AST::ChooseExpr::IsConditionTrue::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->isConditionTrue = value;
}

bool CppSharp::Parser::AST::ChooseExpr::IsConditionDependent::get()
{
    return ((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->isConditionDependent;
}

void CppSharp::Parser::AST::ChooseExpr::IsConditionDependent::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->isConditionDependent = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ChooseExpr::ChosenSubExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->chosenSubExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->chosenSubExpr);
}

void CppSharp::Parser::AST::ChooseExpr::ChosenSubExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->chosenSubExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ChooseExpr::Cond::get()
{
    return (((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->cond == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->cond);
}

void CppSharp::Parser::AST::ChooseExpr::Cond::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->cond = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ChooseExpr::LHS::get()
{
    return (((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->lHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->lHS);
}

void CppSharp::Parser::AST::ChooseExpr::LHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->lHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ChooseExpr::RHS::get()
{
    return (((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->rHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->rHS);
}

void CppSharp::Parser::AST::ChooseExpr::RHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->rHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ChooseExpr::BuiltinLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->builtinLoc);
}

void CppSharp::Parser::AST::ChooseExpr::BuiltinLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->builtinLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ChooseExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::ChooseExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ChooseExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::GNUNullExpr::GNUNullExpr(class ::CppSharp::CppParser::AST::GNUNullExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::GNUNullExpr^ CppSharp::Parser::AST::GNUNullExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::GNUNullExpr((class ::CppSharp::CppParser::AST::GNUNullExpr*) native.ToPointer());
}

CppSharp::Parser::AST::GNUNullExpr::GNUNullExpr(class ::CppSharp::CppParser::AST::GNUNullExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::GNUNullExpr^ CppSharp::Parser::AST::GNUNullExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::GNUNullExpr((class ::CppSharp::CppParser::AST::GNUNullExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::GNUNullExpr::~GNUNullExpr()
{
}

CppSharp::Parser::AST::GNUNullExpr::GNUNullExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::GNUNullExpr();
}

CppSharp::Parser::AST::GNUNullExpr::GNUNullExpr(CppSharp::Parser::AST::GNUNullExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::GNUNullExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::GNUNullExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::GNUNullExpr::TokenLocation::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::GNUNullExpr*)NativePtr)->tokenLocation);
}

void CppSharp::Parser::AST::GNUNullExpr::TokenLocation::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::GNUNullExpr*)NativePtr)->tokenLocation = _marshal0;
}

CppSharp::Parser::AST::VAArgExpr::VAArgExpr(class ::CppSharp::CppParser::AST::VAArgExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::VAArgExpr^ CppSharp::Parser::AST::VAArgExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::VAArgExpr((class ::CppSharp::CppParser::AST::VAArgExpr*) native.ToPointer());
}

CppSharp::Parser::AST::VAArgExpr::VAArgExpr(class ::CppSharp::CppParser::AST::VAArgExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::VAArgExpr^ CppSharp::Parser::AST::VAArgExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::VAArgExpr((class ::CppSharp::CppParser::AST::VAArgExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::VAArgExpr::~VAArgExpr()
{
}

CppSharp::Parser::AST::VAArgExpr::VAArgExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::VAArgExpr();
}

CppSharp::Parser::AST::VAArgExpr::VAArgExpr(CppSharp::Parser::AST::VAArgExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::VAArgExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::VAArgExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::VAArgExpr::SubExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::VAArgExpr*)NativePtr)->subExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::VAArgExpr*)NativePtr)->subExpr);
}

void CppSharp::Parser::AST::VAArgExpr::SubExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::VAArgExpr*)NativePtr)->subExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

bool CppSharp::Parser::AST::VAArgExpr::IsMicrosoftABI::get()
{
    return ((class ::CppSharp::CppParser::AST::VAArgExpr*)NativePtr)->isMicrosoftABI;
}

void CppSharp::Parser::AST::VAArgExpr::IsMicrosoftABI::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::VAArgExpr*)NativePtr)->isMicrosoftABI = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::VAArgExpr::BuiltinLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::VAArgExpr*)NativePtr)->builtinLoc);
}

void CppSharp::Parser::AST::VAArgExpr::BuiltinLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::VAArgExpr*)NativePtr)->builtinLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::VAArgExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::VAArgExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::VAArgExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::VAArgExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::SourceLocExpr::SourceLocExpr(class ::CppSharp::CppParser::AST::SourceLocExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::SourceLocExpr^ CppSharp::Parser::AST::SourceLocExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::SourceLocExpr((class ::CppSharp::CppParser::AST::SourceLocExpr*) native.ToPointer());
}

CppSharp::Parser::AST::SourceLocExpr::SourceLocExpr(class ::CppSharp::CppParser::AST::SourceLocExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::SourceLocExpr^ CppSharp::Parser::AST::SourceLocExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::SourceLocExpr((class ::CppSharp::CppParser::AST::SourceLocExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::SourceLocExpr::~SourceLocExpr()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::SourceLocExpr*) __nativePtr;
    }
}

CppSharp::Parser::AST::SourceLocExpr::SourceLocExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::SourceLocExpr();
}

CppSharp::Parser::AST::SourceLocExpr::SourceLocExpr(CppSharp::Parser::AST::SourceLocExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::SourceLocExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::SourceLocExpr(__arg0);
}

::System::String^ CppSharp::Parser::AST::SourceLocExpr::BuiltinStr::get()
{
    return clix::marshalString<clix::E_UTF8>(((class ::CppSharp::CppParser::AST::SourceLocExpr*)NativePtr)->builtinStr);
}

void CppSharp::Parser::AST::SourceLocExpr::BuiltinStr::set(::System::String^ value)
{
    ((class ::CppSharp::CppParser::AST::SourceLocExpr*)NativePtr)->builtinStr = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::AST::SourceLocExpr::IdentKind CppSharp::Parser::AST::SourceLocExpr::identKind::get()
{
    return (CppSharp::Parser::AST::SourceLocExpr::IdentKind)((class ::CppSharp::CppParser::AST::SourceLocExpr*)NativePtr)->identKind;
}

void CppSharp::Parser::AST::SourceLocExpr::identKind::set(CppSharp::Parser::AST::SourceLocExpr::IdentKind value)
{
    ((class ::CppSharp::CppParser::AST::SourceLocExpr*)NativePtr)->identKind = (enum ::CppSharp::CppParser::AST::SourceLocExpr::IdentKind)value;
}

bool CppSharp::Parser::AST::SourceLocExpr::IsIntType::get()
{
    return ((class ::CppSharp::CppParser::AST::SourceLocExpr*)NativePtr)->isIntType;
}

void CppSharp::Parser::AST::SourceLocExpr::IsIntType::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::SourceLocExpr*)NativePtr)->isIntType = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SourceLocExpr::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SourceLocExpr*)NativePtr)->location);
}

void CppSharp::Parser::AST::SourceLocExpr::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SourceLocExpr*)NativePtr)->location = _marshal0;
}

CppSharp::Parser::AST::InitListExpr::InitListExpr(class ::CppSharp::CppParser::AST::InitListExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::InitListExpr^ CppSharp::Parser::AST::InitListExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::InitListExpr((class ::CppSharp::CppParser::AST::InitListExpr*) native.ToPointer());
}

CppSharp::Parser::AST::InitListExpr::InitListExpr(class ::CppSharp::CppParser::AST::InitListExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::InitListExpr^ CppSharp::Parser::AST::InitListExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::InitListExpr((class ::CppSharp::CppParser::AST::InitListExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::InitListExpr::~InitListExpr()
{
}

CppSharp::Parser::AST::InitListExpr::InitListExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::InitListExpr();
}

CppSharp::Parser::AST::InitListExpr::InitListExpr(CppSharp::Parser::AST::InitListExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::InitListExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::InitListExpr(__arg0);
}

unsigned int CppSharp::Parser::AST::InitListExpr::NumInits::get()
{
    return ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->numInits;
}

void CppSharp::Parser::AST::InitListExpr::NumInits::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->numInits = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::InitListExpr::ArrayFiller::get()
{
    return (((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->arrayFiller == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->arrayFiller);
}

void CppSharp::Parser::AST::InitListExpr::ArrayFiller::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->arrayFiller = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

bool CppSharp::Parser::AST::InitListExpr::HasArrayFiller::get()
{
    return ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->hasArrayFiller;
}

void CppSharp::Parser::AST::InitListExpr::HasArrayFiller::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->hasArrayFiller = value;
}

bool CppSharp::Parser::AST::InitListExpr::HasDesignatedInit::get()
{
    return ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->hasDesignatedInit;
}

void CppSharp::Parser::AST::InitListExpr::HasDesignatedInit::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->hasDesignatedInit = value;
}

bool CppSharp::Parser::AST::InitListExpr::IsExplicit::get()
{
    return ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->isExplicit;
}

void CppSharp::Parser::AST::InitListExpr::IsExplicit::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->isExplicit = value;
}

bool CppSharp::Parser::AST::InitListExpr::IsStringLiteralInit::get()
{
    return ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->isStringLiteralInit;
}

void CppSharp::Parser::AST::InitListExpr::IsStringLiteralInit::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->isStringLiteralInit = value;
}

bool CppSharp::Parser::AST::InitListExpr::IsTransparent::get()
{
    return ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->isTransparent;
}

void CppSharp::Parser::AST::InitListExpr::IsTransparent::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->isTransparent = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::InitListExpr::LBraceLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->lBraceLoc);
}

void CppSharp::Parser::AST::InitListExpr::LBraceLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->lBraceLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::InitListExpr::RBraceLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->rBraceLoc);
}

void CppSharp::Parser::AST::InitListExpr::RBraceLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->rBraceLoc = _marshal0;
}

bool CppSharp::Parser::AST::InitListExpr::IsSemanticForm::get()
{
    return ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->isSemanticForm;
}

void CppSharp::Parser::AST::InitListExpr::IsSemanticForm::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->isSemanticForm = value;
}

CppSharp::Parser::AST::InitListExpr^ CppSharp::Parser::AST::InitListExpr::SemanticForm::get()
{
    return (((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->semanticForm == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::InitListExpr((class ::CppSharp::CppParser::AST::InitListExpr*)((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->semanticForm);
}

void CppSharp::Parser::AST::InitListExpr::SemanticForm::set(CppSharp::Parser::AST::InitListExpr^ value)
{
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->semanticForm = (class ::CppSharp::CppParser::AST::InitListExpr*)value->NativePtr;
}

bool CppSharp::Parser::AST::InitListExpr::IsSyntacticForm::get()
{
    return ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->isSyntacticForm;
}

void CppSharp::Parser::AST::InitListExpr::IsSyntacticForm::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->isSyntacticForm = value;
}

CppSharp::Parser::AST::InitListExpr^ CppSharp::Parser::AST::InitListExpr::SyntacticForm::get()
{
    return (((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->syntacticForm == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::InitListExpr((class ::CppSharp::CppParser::AST::InitListExpr*)((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->syntacticForm);
}

void CppSharp::Parser::AST::InitListExpr::SyntacticForm::set(CppSharp::Parser::AST::InitListExpr^ value)
{
    ((class ::CppSharp::CppParser::AST::InitListExpr*)NativePtr)->syntacticForm = (class ::CppSharp::CppParser::AST::InitListExpr*)value->NativePtr;
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo::FieldDesignatorInfo(class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo^ CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo*) native.ToPointer());
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo::FieldDesignatorInfo(class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo^ CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo::~FieldDesignatorInfo()
{
    delete NativePtr;
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo::FieldDesignatorInfo()
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo();
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo::FieldDesignatorInfo(CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo(__arg0);
}

::System::IntPtr CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::FieldDesignatorInfo*)object.ToPointer();
}
CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo::ArrayOrRangeDesignatorInfo(class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo^ CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo*) native.ToPointer());
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo::ArrayOrRangeDesignatorInfo(class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo^ CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo::~ArrayOrRangeDesignatorInfo()
{
    delete NativePtr;
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo::ArrayOrRangeDesignatorInfo()
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo();
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo::ArrayOrRangeDesignatorInfo(CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo(__arg0);
}

::System::IntPtr CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator::ArrayOrRangeDesignatorInfo*)object.ToPointer();
}
CppSharp::Parser::AST::DesignatedInitExpr::Designator::Designator(class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator^ CppSharp::Parser::AST::DesignatedInitExpr::Designator::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::DesignatedInitExpr::Designator((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*) native.ToPointer());
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::Designator(class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator^ CppSharp::Parser::AST::DesignatedInitExpr::Designator::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::DesignatedInitExpr::Designator((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::~Designator()
{
    delete NativePtr;
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::Designator()
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator();
}

CppSharp::Parser::AST::DesignatedInitExpr::Designator::Designator(CppSharp::Parser::AST::DesignatedInitExpr::Designator^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator(__arg0);
}

::System::IntPtr CppSharp::Parser::AST::DesignatedInitExpr::Designator::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)object.ToPointer();
}

bool CppSharp::Parser::AST::DesignatedInitExpr::Designator::IsFieldDesignator::get()
{
    return NativePtr->isFieldDesignator;
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::IsFieldDesignator::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)NativePtr)->isFieldDesignator = value;
}

bool CppSharp::Parser::AST::DesignatedInitExpr::Designator::IsArrayDesignator::get()
{
    return NativePtr->isArrayDesignator;
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::IsArrayDesignator::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)NativePtr)->isArrayDesignator = value;
}

bool CppSharp::Parser::AST::DesignatedInitExpr::Designator::IsArrayRangeDesignator::get()
{
    return NativePtr->isArrayRangeDesignator;
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::IsArrayRangeDesignator::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)NativePtr)->isArrayRangeDesignator = value;
}

CppSharp::Parser::AST::Field^ CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDecl::get()
{
    return (NativePtr->fieldDecl == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Field((class ::CppSharp::CppParser::AST::Field*)NativePtr->fieldDecl);
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldDecl::set(CppSharp::Parser::AST::Field^ value)
{
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)NativePtr)->fieldDecl = (class ::CppSharp::CppParser::AST::Field*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DesignatedInitExpr::Designator::DotLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&NativePtr->dotLoc);
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::DotLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)NativePtr)->dotLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&NativePtr->fieldLoc);
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::FieldLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)NativePtr)->fieldLoc = _marshal0;
}

unsigned int CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayIndex::get()
{
    return NativePtr->arrayIndex;
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::ArrayIndex::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)NativePtr)->arrayIndex = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DesignatedInitExpr::Designator::LBracketLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&NativePtr->lBracketLoc);
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::LBracketLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)NativePtr)->lBracketLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DesignatedInitExpr::Designator::EllipsisLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&NativePtr->ellipsisLoc);
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::EllipsisLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)NativePtr)->ellipsisLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DesignatedInitExpr::Designator::RBracketLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&NativePtr->rBracketLoc);
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::RBracketLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)NativePtr)->rBracketLoc = _marshal0;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::DesignatedInitExpr::Designator::SourceRange::get()
{
    return (&NativePtr->sourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&NativePtr->sourceRange);
}

void CppSharp::Parser::AST::DesignatedInitExpr::Designator::SourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr::Designator*)NativePtr)->sourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

CppSharp::Parser::AST::DesignatedInitExpr::DesignatedInitExpr(class ::CppSharp::CppParser::AST::DesignatedInitExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::DesignatedInitExpr^ CppSharp::Parser::AST::DesignatedInitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::DesignatedInitExpr((class ::CppSharp::CppParser::AST::DesignatedInitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::DesignatedInitExpr::DesignatedInitExpr(class ::CppSharp::CppParser::AST::DesignatedInitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::DesignatedInitExpr^ CppSharp::Parser::AST::DesignatedInitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::DesignatedInitExpr((class ::CppSharp::CppParser::AST::DesignatedInitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::DesignatedInitExpr::~DesignatedInitExpr()
{
}

CppSharp::Parser::AST::DesignatedInitExpr::DesignatedInitExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::DesignatedInitExpr();
}

CppSharp::Parser::AST::DesignatedInitExpr::DesignatedInitExpr(CppSharp::Parser::AST::DesignatedInitExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::DesignatedInitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::DesignatedInitExpr(__arg0);
}

unsigned int CppSharp::Parser::AST::DesignatedInitExpr::Size::get()
{
    return ((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->size;
}

void CppSharp::Parser::AST::DesignatedInitExpr::Size::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->size = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DesignatedInitExpr::EqualOrColonLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->equalOrColonLoc);
}

void CppSharp::Parser::AST::DesignatedInitExpr::EqualOrColonLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->equalOrColonLoc = _marshal0;
}

bool CppSharp::Parser::AST::DesignatedInitExpr::IsDirectInit::get()
{
    return ((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->isDirectInit;
}

void CppSharp::Parser::AST::DesignatedInitExpr::IsDirectInit::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->isDirectInit = value;
}

bool CppSharp::Parser::AST::DesignatedInitExpr::UsesGNUSyntax::get()
{
    return ((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->usesGNUSyntax;
}

void CppSharp::Parser::AST::DesignatedInitExpr::UsesGNUSyntax::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->usesGNUSyntax = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::DesignatedInitExpr::Init::get()
{
    return (((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->init == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->init);
}

void CppSharp::Parser::AST::DesignatedInitExpr::Init::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->init = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

unsigned int CppSharp::Parser::AST::DesignatedInitExpr::NumSubExprs::get()
{
    return ((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->numSubExprs;
}

void CppSharp::Parser::AST::DesignatedInitExpr::NumSubExprs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->numSubExprs = value;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::DesignatedInitExpr::DesignatorsSourceRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->designatorsSourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->designatorsSourceRange);
}

void CppSharp::Parser::AST::DesignatedInitExpr::DesignatorsSourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::DesignatedInitExpr*)NativePtr)->designatorsSourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

CppSharp::Parser::AST::NoInitExpr::NoInitExpr(class ::CppSharp::CppParser::AST::NoInitExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::NoInitExpr^ CppSharp::Parser::AST::NoInitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::NoInitExpr((class ::CppSharp::CppParser::AST::NoInitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::NoInitExpr::NoInitExpr(class ::CppSharp::CppParser::AST::NoInitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::NoInitExpr^ CppSharp::Parser::AST::NoInitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::NoInitExpr((class ::CppSharp::CppParser::AST::NoInitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::NoInitExpr::~NoInitExpr()
{
}

CppSharp::Parser::AST::NoInitExpr::NoInitExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::NoInitExpr();
}

CppSharp::Parser::AST::NoInitExpr::NoInitExpr(CppSharp::Parser::AST::NoInitExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::NoInitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::NoInitExpr(__arg0);
}

CppSharp::Parser::AST::DesignatedInitUpdateExpr::DesignatedInitUpdateExpr(class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::DesignatedInitUpdateExpr^ CppSharp::Parser::AST::DesignatedInitUpdateExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::DesignatedInitUpdateExpr((class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr*) native.ToPointer());
}

CppSharp::Parser::AST::DesignatedInitUpdateExpr::DesignatedInitUpdateExpr(class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::DesignatedInitUpdateExpr^ CppSharp::Parser::AST::DesignatedInitUpdateExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::DesignatedInitUpdateExpr((class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::DesignatedInitUpdateExpr::~DesignatedInitUpdateExpr()
{
}

CppSharp::Parser::AST::DesignatedInitUpdateExpr::DesignatedInitUpdateExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr();
}

CppSharp::Parser::AST::DesignatedInitUpdateExpr::DesignatedInitUpdateExpr(CppSharp::Parser::AST::DesignatedInitUpdateExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::DesignatedInitUpdateExpr::Base::get()
{
    return (((class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr*)NativePtr)->base == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr*)NativePtr)->base);
}

void CppSharp::Parser::AST::DesignatedInitUpdateExpr::Base::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr*)NativePtr)->base = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::InitListExpr^ CppSharp::Parser::AST::DesignatedInitUpdateExpr::Updater::get()
{
    return (((class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr*)NativePtr)->updater == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::InitListExpr((class ::CppSharp::CppParser::AST::InitListExpr*)((class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr*)NativePtr)->updater);
}

void CppSharp::Parser::AST::DesignatedInitUpdateExpr::Updater::set(CppSharp::Parser::AST::InitListExpr^ value)
{
    ((class ::CppSharp::CppParser::AST::DesignatedInitUpdateExpr*)NativePtr)->updater = (class ::CppSharp::CppParser::AST::InitListExpr*)value->NativePtr;
}

CppSharp::Parser::AST::ArrayInitLoopExpr::ArrayInitLoopExpr(class ::CppSharp::CppParser::AST::ArrayInitLoopExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ArrayInitLoopExpr^ CppSharp::Parser::AST::ArrayInitLoopExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ArrayInitLoopExpr((class ::CppSharp::CppParser::AST::ArrayInitLoopExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ArrayInitLoopExpr::ArrayInitLoopExpr(class ::CppSharp::CppParser::AST::ArrayInitLoopExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ArrayInitLoopExpr^ CppSharp::Parser::AST::ArrayInitLoopExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ArrayInitLoopExpr((class ::CppSharp::CppParser::AST::ArrayInitLoopExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ArrayInitLoopExpr::~ArrayInitLoopExpr()
{
}

CppSharp::Parser::AST::ArrayInitLoopExpr::ArrayInitLoopExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ArrayInitLoopExpr();
}

CppSharp::Parser::AST::ArrayInitLoopExpr::ArrayInitLoopExpr(CppSharp::Parser::AST::ArrayInitLoopExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ArrayInitLoopExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ArrayInitLoopExpr(__arg0);
}

CppSharp::Parser::AST::OpaqueValueExpr^ CppSharp::Parser::AST::ArrayInitLoopExpr::CommonExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::ArrayInitLoopExpr*)NativePtr)->commonExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::OpaqueValueExpr((class ::CppSharp::CppParser::AST::OpaqueValueExpr*)((class ::CppSharp::CppParser::AST::ArrayInitLoopExpr*)NativePtr)->commonExpr);
}

void CppSharp::Parser::AST::ArrayInitLoopExpr::CommonExpr::set(CppSharp::Parser::AST::OpaqueValueExpr^ value)
{
    ((class ::CppSharp::CppParser::AST::ArrayInitLoopExpr*)NativePtr)->commonExpr = (class ::CppSharp::CppParser::AST::OpaqueValueExpr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ArrayInitLoopExpr::SubExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::ArrayInitLoopExpr*)NativePtr)->subExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ArrayInitLoopExpr*)NativePtr)->subExpr);
}

void CppSharp::Parser::AST::ArrayInitLoopExpr::SubExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ArrayInitLoopExpr*)NativePtr)->subExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::ArrayInitIndexExpr::ArrayInitIndexExpr(class ::CppSharp::CppParser::AST::ArrayInitIndexExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ArrayInitIndexExpr^ CppSharp::Parser::AST::ArrayInitIndexExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ArrayInitIndexExpr((class ::CppSharp::CppParser::AST::ArrayInitIndexExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ArrayInitIndexExpr::ArrayInitIndexExpr(class ::CppSharp::CppParser::AST::ArrayInitIndexExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ArrayInitIndexExpr^ CppSharp::Parser::AST::ArrayInitIndexExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ArrayInitIndexExpr((class ::CppSharp::CppParser::AST::ArrayInitIndexExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ArrayInitIndexExpr::~ArrayInitIndexExpr()
{
}

CppSharp::Parser::AST::ArrayInitIndexExpr::ArrayInitIndexExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ArrayInitIndexExpr();
}

CppSharp::Parser::AST::ArrayInitIndexExpr::ArrayInitIndexExpr(CppSharp::Parser::AST::ArrayInitIndexExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ArrayInitIndexExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ArrayInitIndexExpr(__arg0);
}

CppSharp::Parser::AST::ImplicitValueInitExpr::ImplicitValueInitExpr(class ::CppSharp::CppParser::AST::ImplicitValueInitExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ImplicitValueInitExpr^ CppSharp::Parser::AST::ImplicitValueInitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ImplicitValueInitExpr((class ::CppSharp::CppParser::AST::ImplicitValueInitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ImplicitValueInitExpr::ImplicitValueInitExpr(class ::CppSharp::CppParser::AST::ImplicitValueInitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ImplicitValueInitExpr^ CppSharp::Parser::AST::ImplicitValueInitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ImplicitValueInitExpr((class ::CppSharp::CppParser::AST::ImplicitValueInitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ImplicitValueInitExpr::~ImplicitValueInitExpr()
{
}

CppSharp::Parser::AST::ImplicitValueInitExpr::ImplicitValueInitExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ImplicitValueInitExpr();
}

CppSharp::Parser::AST::ImplicitValueInitExpr::ImplicitValueInitExpr(CppSharp::Parser::AST::ImplicitValueInitExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ImplicitValueInitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ImplicitValueInitExpr(__arg0);
}

CppSharp::Parser::AST::ParenListExpr::ParenListExpr(class ::CppSharp::CppParser::AST::ParenListExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ParenListExpr^ CppSharp::Parser::AST::ParenListExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ParenListExpr((class ::CppSharp::CppParser::AST::ParenListExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ParenListExpr::ParenListExpr(class ::CppSharp::CppParser::AST::ParenListExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ParenListExpr^ CppSharp::Parser::AST::ParenListExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ParenListExpr((class ::CppSharp::CppParser::AST::ParenListExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ParenListExpr::~ParenListExpr()
{
}

CppSharp::Parser::AST::ParenListExpr::ParenListExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ParenListExpr();
}

CppSharp::Parser::AST::ParenListExpr::ParenListExpr(CppSharp::Parser::AST::ParenListExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ParenListExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ParenListExpr(__arg0);
}

unsigned int CppSharp::Parser::AST::ParenListExpr::NumExprs::get()
{
    return ((class ::CppSharp::CppParser::AST::ParenListExpr*)NativePtr)->numExprs;
}

void CppSharp::Parser::AST::ParenListExpr::NumExprs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::ParenListExpr*)NativePtr)->numExprs = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ParenListExpr::LParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ParenListExpr*)NativePtr)->lParenLoc);
}

void CppSharp::Parser::AST::ParenListExpr::LParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ParenListExpr*)NativePtr)->lParenLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ParenListExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ParenListExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::ParenListExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ParenListExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::GenericSelectionExpr::GenericSelectionExpr(class ::CppSharp::CppParser::AST::GenericSelectionExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::GenericSelectionExpr^ CppSharp::Parser::AST::GenericSelectionExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::GenericSelectionExpr((class ::CppSharp::CppParser::AST::GenericSelectionExpr*) native.ToPointer());
}

CppSharp::Parser::AST::GenericSelectionExpr::GenericSelectionExpr(class ::CppSharp::CppParser::AST::GenericSelectionExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::GenericSelectionExpr^ CppSharp::Parser::AST::GenericSelectionExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::GenericSelectionExpr((class ::CppSharp::CppParser::AST::GenericSelectionExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::GenericSelectionExpr::~GenericSelectionExpr()
{
}

CppSharp::Parser::AST::GenericSelectionExpr::GenericSelectionExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::GenericSelectionExpr();
}

CppSharp::Parser::AST::GenericSelectionExpr::GenericSelectionExpr(CppSharp::Parser::AST::GenericSelectionExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::GenericSelectionExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::GenericSelectionExpr(__arg0);
}

unsigned int CppSharp::Parser::AST::GenericSelectionExpr::NumAssocs::get()
{
    return ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->numAssocs;
}

void CppSharp::Parser::AST::GenericSelectionExpr::NumAssocs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->numAssocs = value;
}

unsigned int CppSharp::Parser::AST::GenericSelectionExpr::ResultIndex::get()
{
    return ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->resultIndex;
}

void CppSharp::Parser::AST::GenericSelectionExpr::ResultIndex::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->resultIndex = value;
}

bool CppSharp::Parser::AST::GenericSelectionExpr::IsResultDependent::get()
{
    return ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->isResultDependent;
}

void CppSharp::Parser::AST::GenericSelectionExpr::IsResultDependent::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->isResultDependent = value;
}

bool CppSharp::Parser::AST::GenericSelectionExpr::IsExprPredicate::get()
{
    return ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->isExprPredicate;
}

void CppSharp::Parser::AST::GenericSelectionExpr::IsExprPredicate::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->isExprPredicate = value;
}

bool CppSharp::Parser::AST::GenericSelectionExpr::IsTypePredicate::get()
{
    return ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->isTypePredicate;
}

void CppSharp::Parser::AST::GenericSelectionExpr::IsTypePredicate::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->isTypePredicate = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::GenericSelectionExpr::GenericLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->genericLoc);
}

void CppSharp::Parser::AST::GenericSelectionExpr::GenericLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->genericLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::GenericSelectionExpr::DefaultLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->defaultLoc);
}

void CppSharp::Parser::AST::GenericSelectionExpr::DefaultLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->defaultLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::GenericSelectionExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::GenericSelectionExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::GenericSelectionExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::ExtVectorElementExpr::ExtVectorElementExpr(class ::CppSharp::CppParser::AST::ExtVectorElementExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ExtVectorElementExpr^ CppSharp::Parser::AST::ExtVectorElementExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ExtVectorElementExpr((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ExtVectorElementExpr::ExtVectorElementExpr(class ::CppSharp::CppParser::AST::ExtVectorElementExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ExtVectorElementExpr^ CppSharp::Parser::AST::ExtVectorElementExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ExtVectorElementExpr((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ExtVectorElementExpr::~ExtVectorElementExpr()
{
}

CppSharp::Parser::AST::ExtVectorElementExpr::ExtVectorElementExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ExtVectorElementExpr();
}

CppSharp::Parser::AST::ExtVectorElementExpr::ExtVectorElementExpr(CppSharp::Parser::AST::ExtVectorElementExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ExtVectorElementExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ExtVectorElementExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ExtVectorElementExpr::Base::get()
{
    return (((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*)NativePtr)->base == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*)NativePtr)->base);
}

void CppSharp::Parser::AST::ExtVectorElementExpr::Base::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*)NativePtr)->base = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::ExtVectorElementExpr::AccessorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*)NativePtr)->accessorLoc);
}

void CppSharp::Parser::AST::ExtVectorElementExpr::AccessorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*)NativePtr)->accessorLoc = _marshal0;
}

unsigned int CppSharp::Parser::AST::ExtVectorElementExpr::NumElements::get()
{
    return ((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*)NativePtr)->numElements;
}

void CppSharp::Parser::AST::ExtVectorElementExpr::NumElements::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*)NativePtr)->numElements = value;
}

bool CppSharp::Parser::AST::ExtVectorElementExpr::ContainsDuplicateElements::get()
{
    return ((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*)NativePtr)->containsDuplicateElements;
}

void CppSharp::Parser::AST::ExtVectorElementExpr::ContainsDuplicateElements::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*)NativePtr)->containsDuplicateElements = value;
}

bool CppSharp::Parser::AST::ExtVectorElementExpr::IsArrow::get()
{
    return ((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*)NativePtr)->isArrow;
}

void CppSharp::Parser::AST::ExtVectorElementExpr::IsArrow::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::ExtVectorElementExpr*)NativePtr)->isArrow = value;
}

CppSharp::Parser::AST::BlockExpr::BlockExpr(class ::CppSharp::CppParser::AST::BlockExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::BlockExpr^ CppSharp::Parser::AST::BlockExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::BlockExpr((class ::CppSharp::CppParser::AST::BlockExpr*) native.ToPointer());
}

CppSharp::Parser::AST::BlockExpr::BlockExpr(class ::CppSharp::CppParser::AST::BlockExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::BlockExpr^ CppSharp::Parser::AST::BlockExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::BlockExpr((class ::CppSharp::CppParser::AST::BlockExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::BlockExpr::~BlockExpr()
{
}

CppSharp::Parser::AST::BlockExpr::BlockExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::BlockExpr();
}

CppSharp::Parser::AST::BlockExpr::BlockExpr(CppSharp::Parser::AST::BlockExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::BlockExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::BlockExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::BlockExpr::CaretLocation::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::BlockExpr*)NativePtr)->caretLocation);
}

void CppSharp::Parser::AST::BlockExpr::CaretLocation::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::BlockExpr*)NativePtr)->caretLocation = _marshal0;
}

CppSharp::Parser::AST::AsTypeExpr::AsTypeExpr(class ::CppSharp::CppParser::AST::AsTypeExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::AsTypeExpr^ CppSharp::Parser::AST::AsTypeExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::AsTypeExpr((class ::CppSharp::CppParser::AST::AsTypeExpr*) native.ToPointer());
}

CppSharp::Parser::AST::AsTypeExpr::AsTypeExpr(class ::CppSharp::CppParser::AST::AsTypeExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::AsTypeExpr^ CppSharp::Parser::AST::AsTypeExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::AsTypeExpr((class ::CppSharp::CppParser::AST::AsTypeExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::AsTypeExpr::~AsTypeExpr()
{
}

CppSharp::Parser::AST::AsTypeExpr::AsTypeExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::AsTypeExpr();
}

CppSharp::Parser::AST::AsTypeExpr::AsTypeExpr(CppSharp::Parser::AST::AsTypeExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::AsTypeExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::AsTypeExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AsTypeExpr::SrcExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::AsTypeExpr*)NativePtr)->srcExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::AsTypeExpr*)NativePtr)->srcExpr);
}

void CppSharp::Parser::AST::AsTypeExpr::SrcExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::AsTypeExpr*)NativePtr)->srcExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::AsTypeExpr::BuiltinLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::AsTypeExpr*)NativePtr)->builtinLoc);
}

void CppSharp::Parser::AST::AsTypeExpr::BuiltinLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::AsTypeExpr*)NativePtr)->builtinLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::AsTypeExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::AsTypeExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::AsTypeExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::AsTypeExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::PseudoObjectExpr::PseudoObjectExpr(class ::CppSharp::CppParser::AST::PseudoObjectExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::PseudoObjectExpr^ CppSharp::Parser::AST::PseudoObjectExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::PseudoObjectExpr((class ::CppSharp::CppParser::AST::PseudoObjectExpr*) native.ToPointer());
}

CppSharp::Parser::AST::PseudoObjectExpr::PseudoObjectExpr(class ::CppSharp::CppParser::AST::PseudoObjectExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::PseudoObjectExpr^ CppSharp::Parser::AST::PseudoObjectExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::PseudoObjectExpr((class ::CppSharp::CppParser::AST::PseudoObjectExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::PseudoObjectExpr::~PseudoObjectExpr()
{
}

CppSharp::Parser::AST::PseudoObjectExpr::PseudoObjectExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::PseudoObjectExpr();
}

CppSharp::Parser::AST::PseudoObjectExpr::PseudoObjectExpr(CppSharp::Parser::AST::PseudoObjectExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::PseudoObjectExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::PseudoObjectExpr(__arg0);
}

unsigned int CppSharp::Parser::AST::PseudoObjectExpr::ResultExprIndex::get()
{
    return ((class ::CppSharp::CppParser::AST::PseudoObjectExpr*)NativePtr)->resultExprIndex;
}

void CppSharp::Parser::AST::PseudoObjectExpr::ResultExprIndex::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::PseudoObjectExpr*)NativePtr)->resultExprIndex = value;
}

unsigned int CppSharp::Parser::AST::PseudoObjectExpr::NumSemanticExprs::get()
{
    return ((class ::CppSharp::CppParser::AST::PseudoObjectExpr*)NativePtr)->numSemanticExprs;
}

void CppSharp::Parser::AST::PseudoObjectExpr::NumSemanticExprs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::PseudoObjectExpr*)NativePtr)->numSemanticExprs = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::PseudoObjectExpr::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::PseudoObjectExpr*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::PseudoObjectExpr::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::PseudoObjectExpr*)NativePtr)->exprLoc = _marshal0;
}

CppSharp::Parser::AST::AtomicExpr::AtomicExpr(class ::CppSharp::CppParser::AST::AtomicExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::AtomicExpr^ CppSharp::Parser::AST::AtomicExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::AtomicExpr((class ::CppSharp::CppParser::AST::AtomicExpr*) native.ToPointer());
}

CppSharp::Parser::AST::AtomicExpr::AtomicExpr(class ::CppSharp::CppParser::AST::AtomicExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::AtomicExpr^ CppSharp::Parser::AST::AtomicExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::AtomicExpr((class ::CppSharp::CppParser::AST::AtomicExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::AtomicExpr::~AtomicExpr()
{
}

CppSharp::Parser::AST::AtomicExpr::AtomicExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::AtomicExpr();
}

CppSharp::Parser::AST::AtomicExpr::AtomicExpr(CppSharp::Parser::AST::AtomicExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::AtomicExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::AtomicExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AtomicExpr::Ptr::get()
{
    return (((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->ptr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->ptr);
}

void CppSharp::Parser::AST::AtomicExpr::Ptr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->ptr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AtomicExpr::Order::get()
{
    return (((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->order == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->order);
}

void CppSharp::Parser::AST::AtomicExpr::Order::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->order = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AtomicExpr::Scope::get()
{
    return (((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->scope == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->scope);
}

void CppSharp::Parser::AST::AtomicExpr::Scope::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->scope = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AtomicExpr::Val1::get()
{
    return (((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->val1 == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->val1);
}

void CppSharp::Parser::AST::AtomicExpr::Val1::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->val1 = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AtomicExpr::OrderFail::get()
{
    return (((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->orderFail == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->orderFail);
}

void CppSharp::Parser::AST::AtomicExpr::OrderFail::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->orderFail = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AtomicExpr::Val2::get()
{
    return (((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->val2 == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->val2);
}

void CppSharp::Parser::AST::AtomicExpr::Val2::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->val2 = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::AtomicExpr::Weak::get()
{
    return (((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->weak == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->weak);
}

void CppSharp::Parser::AST::AtomicExpr::Weak::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->weak = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::AtomicExpr::ValueType::get()
{
    return (&((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->valueType == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->valueType);
}

void CppSharp::Parser::AST::AtomicExpr::ValueType::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->valueType = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

CppSharp::Parser::AST::AtomicExpr::AtomicOp CppSharp::Parser::AST::AtomicExpr::Op::get()
{
    return (CppSharp::Parser::AST::AtomicExpr::AtomicOp)((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->op;
}

void CppSharp::Parser::AST::AtomicExpr::Op::set(CppSharp::Parser::AST::AtomicExpr::AtomicOp value)
{
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->op = (enum ::CppSharp::CppParser::AST::AtomicExpr::AtomicOp)value;
}

unsigned int CppSharp::Parser::AST::AtomicExpr::NumSubExprs::get()
{
    return ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->numSubExprs;
}

void CppSharp::Parser::AST::AtomicExpr::NumSubExprs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->numSubExprs = value;
}

bool CppSharp::Parser::AST::AtomicExpr::IsVolatile::get()
{
    return ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->isVolatile;
}

void CppSharp::Parser::AST::AtomicExpr::IsVolatile::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->isVolatile = value;
}

bool CppSharp::Parser::AST::AtomicExpr::IsCmpXChg::get()
{
    return ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->isCmpXChg;
}

void CppSharp::Parser::AST::AtomicExpr::IsCmpXChg::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->isCmpXChg = value;
}

bool CppSharp::Parser::AST::AtomicExpr::IsOpenCL::get()
{
    return ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->isOpenCL;
}

void CppSharp::Parser::AST::AtomicExpr::IsOpenCL::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->isOpenCL = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::AtomicExpr::BuiltinLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->builtinLoc);
}

void CppSharp::Parser::AST::AtomicExpr::BuiltinLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->builtinLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::AtomicExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::AtomicExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::AtomicExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::TypoExpr::TypoExpr(class ::CppSharp::CppParser::AST::TypoExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::TypoExpr^ CppSharp::Parser::AST::TypoExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::TypoExpr((class ::CppSharp::CppParser::AST::TypoExpr*) native.ToPointer());
}

CppSharp::Parser::AST::TypoExpr::TypoExpr(class ::CppSharp::CppParser::AST::TypoExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::TypoExpr^ CppSharp::Parser::AST::TypoExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::TypoExpr((class ::CppSharp::CppParser::AST::TypoExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::TypoExpr::~TypoExpr()
{
}

CppSharp::Parser::AST::TypoExpr::TypoExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::TypoExpr();
}

CppSharp::Parser::AST::TypoExpr::TypoExpr(CppSharp::Parser::AST::TypoExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::TypoExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::TypoExpr(__arg0);
}

CppSharp::Parser::AST::RecoveryExpr::RecoveryExpr(class ::CppSharp::CppParser::AST::RecoveryExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::RecoveryExpr^ CppSharp::Parser::AST::RecoveryExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::RecoveryExpr((class ::CppSharp::CppParser::AST::RecoveryExpr*) native.ToPointer());
}

CppSharp::Parser::AST::RecoveryExpr::RecoveryExpr(class ::CppSharp::CppParser::AST::RecoveryExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::RecoveryExpr^ CppSharp::Parser::AST::RecoveryExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::RecoveryExpr((class ::CppSharp::CppParser::AST::RecoveryExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::RecoveryExpr::~RecoveryExpr()
{
}

CppSharp::Parser::AST::RecoveryExpr::RecoveryExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::RecoveryExpr();
}

CppSharp::Parser::AST::RecoveryExpr::RecoveryExpr(CppSharp::Parser::AST::RecoveryExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::RecoveryExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::RecoveryExpr(__arg0);
}

CppSharp::Parser::AST::CXXOperatorCallExpr::CXXOperatorCallExpr(class ::CppSharp::CppParser::AST::CXXOperatorCallExpr* native)
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)native)
{
}

CppSharp::Parser::AST::CXXOperatorCallExpr^ CppSharp::Parser::AST::CXXOperatorCallExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXOperatorCallExpr((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXOperatorCallExpr::CXXOperatorCallExpr(class ::CppSharp::CppParser::AST::CXXOperatorCallExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXOperatorCallExpr^ CppSharp::Parser::AST::CXXOperatorCallExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXOperatorCallExpr((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXOperatorCallExpr::~CXXOperatorCallExpr()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*) __nativePtr;
    }
}

CppSharp::Parser::AST::CXXOperatorCallExpr::CXXOperatorCallExpr()
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXOperatorCallExpr();
}

CppSharp::Parser::AST::CXXOperatorCallExpr::CXXOperatorCallExpr(CppSharp::Parser::AST::CXXOperatorCallExpr^ _0)
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXOperatorCallExpr(__arg0);
}

CppSharp::Parser::AST::OverloadedOperatorKind CppSharp::Parser::AST::CXXOperatorCallExpr::Operator::get()
{
    return (CppSharp::Parser::AST::OverloadedOperatorKind)((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->_operator;
}

void CppSharp::Parser::AST::CXXOperatorCallExpr::Operator::set(CppSharp::Parser::AST::OverloadedOperatorKind value)
{
    ((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->_operator = (enum ::CppSharp::CppParser::AST::OverloadedOperatorKind)value;
}

bool CppSharp::Parser::AST::CXXOperatorCallExpr::IsAssignmentOp::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->isAssignmentOp;
}

void CppSharp::Parser::AST::CXXOperatorCallExpr::IsAssignmentOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->isAssignmentOp = value;
}

bool CppSharp::Parser::AST::CXXOperatorCallExpr::IsComparisonOp::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->isComparisonOp;
}

void CppSharp::Parser::AST::CXXOperatorCallExpr::IsComparisonOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->isComparisonOp = value;
}

bool CppSharp::Parser::AST::CXXOperatorCallExpr::IsInfixBinaryOp::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->isInfixBinaryOp;
}

void CppSharp::Parser::AST::CXXOperatorCallExpr::IsInfixBinaryOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->isInfixBinaryOp = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXOperatorCallExpr::OperatorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->operatorLoc);
}

void CppSharp::Parser::AST::CXXOperatorCallExpr::OperatorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->operatorLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXOperatorCallExpr::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::CXXOperatorCallExpr::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->exprLoc = _marshal0;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CXXOperatorCallExpr::SourceRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->sourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->sourceRange);
}

void CppSharp::Parser::AST::CXXOperatorCallExpr::SourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXOperatorCallExpr*)NativePtr)->sourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

CppSharp::Parser::AST::CXXMemberCallExpr::CXXMemberCallExpr(class ::CppSharp::CppParser::AST::CXXMemberCallExpr* native)
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)native)
{
}

CppSharp::Parser::AST::CXXMemberCallExpr^ CppSharp::Parser::AST::CXXMemberCallExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXMemberCallExpr((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXMemberCallExpr::CXXMemberCallExpr(class ::CppSharp::CppParser::AST::CXXMemberCallExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXMemberCallExpr^ CppSharp::Parser::AST::CXXMemberCallExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXMemberCallExpr((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXMemberCallExpr::~CXXMemberCallExpr()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CXXMemberCallExpr*) __nativePtr;
    }
}

CppSharp::Parser::AST::CXXMemberCallExpr::CXXMemberCallExpr()
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXMemberCallExpr();
}

CppSharp::Parser::AST::CXXMemberCallExpr::CXXMemberCallExpr(CppSharp::Parser::AST::CXXMemberCallExpr^ _0)
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXMemberCallExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXMemberCallExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXMemberCallExpr::ImplicitObjectArgument::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*)NativePtr)->implicitObjectArgument == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*)NativePtr)->implicitObjectArgument);
}

void CppSharp::Parser::AST::CXXMemberCallExpr::ImplicitObjectArgument::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*)NativePtr)->implicitObjectArgument = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::CXXMemberCallExpr::ObjectType::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*)NativePtr)->objectType == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*)NativePtr)->objectType);
}

void CppSharp::Parser::AST::CXXMemberCallExpr::ObjectType::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*)NativePtr)->objectType = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

CppSharp::Parser::AST::Method^ CppSharp::Parser::AST::CXXMemberCallExpr::MethodDecl::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*)NativePtr)->methodDecl == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Method((class ::CppSharp::CppParser::AST::Method*)((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*)NativePtr)->methodDecl);
}

void CppSharp::Parser::AST::CXXMemberCallExpr::MethodDecl::set(CppSharp::Parser::AST::Method^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*)NativePtr)->methodDecl = (class ::CppSharp::CppParser::AST::Method*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXMemberCallExpr::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::CXXMemberCallExpr::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXMemberCallExpr*)NativePtr)->exprLoc = _marshal0;
}

CppSharp::Parser::AST::CUDAKernelCallExpr::CUDAKernelCallExpr(class ::CppSharp::CppParser::AST::CUDAKernelCallExpr* native)
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)native)
{
}

CppSharp::Parser::AST::CUDAKernelCallExpr^ CppSharp::Parser::AST::CUDAKernelCallExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CUDAKernelCallExpr((class ::CppSharp::CppParser::AST::CUDAKernelCallExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CUDAKernelCallExpr::CUDAKernelCallExpr(class ::CppSharp::CppParser::AST::CUDAKernelCallExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CUDAKernelCallExpr^ CppSharp::Parser::AST::CUDAKernelCallExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CUDAKernelCallExpr((class ::CppSharp::CppParser::AST::CUDAKernelCallExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CUDAKernelCallExpr::~CUDAKernelCallExpr()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CUDAKernelCallExpr*) __nativePtr;
    }
}

CppSharp::Parser::AST::CUDAKernelCallExpr::CUDAKernelCallExpr()
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CUDAKernelCallExpr();
}

CppSharp::Parser::AST::CUDAKernelCallExpr::CUDAKernelCallExpr(CppSharp::Parser::AST::CUDAKernelCallExpr^ _0)
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CUDAKernelCallExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CUDAKernelCallExpr(__arg0);
}

CppSharp::Parser::AST::CXXRewrittenBinaryOperator::CXXRewrittenBinaryOperator(class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXRewrittenBinaryOperator^ CppSharp::Parser::AST::CXXRewrittenBinaryOperator::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXRewrittenBinaryOperator((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*) native.ToPointer());
}

CppSharp::Parser::AST::CXXRewrittenBinaryOperator::CXXRewrittenBinaryOperator(class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXRewrittenBinaryOperator^ CppSharp::Parser::AST::CXXRewrittenBinaryOperator::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXRewrittenBinaryOperator((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXRewrittenBinaryOperator::~CXXRewrittenBinaryOperator()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*) __nativePtr;
    }
}

CppSharp::Parser::AST::CXXRewrittenBinaryOperator::CXXRewrittenBinaryOperator()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator();
}

CppSharp::Parser::AST::CXXRewrittenBinaryOperator::CXXRewrittenBinaryOperator(CppSharp::Parser::AST::CXXRewrittenBinaryOperator^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator(__arg0);
}

bool CppSharp::Parser::AST::CXXRewrittenBinaryOperator::IsReversed::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->isReversed;
}

void CppSharp::Parser::AST::CXXRewrittenBinaryOperator::IsReversed::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->isReversed = value;
}

CppSharp::Parser::AST::BinaryOperatorKind CppSharp::Parser::AST::CXXRewrittenBinaryOperator::Operator::get()
{
    return (CppSharp::Parser::AST::BinaryOperatorKind)((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->_operator;
}

void CppSharp::Parser::AST::CXXRewrittenBinaryOperator::Operator::set(CppSharp::Parser::AST::BinaryOperatorKind value)
{
    ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->_operator = (enum ::CppSharp::CppParser::AST::BinaryOperatorKind)value;
}

CppSharp::Parser::AST::BinaryOperatorKind CppSharp::Parser::AST::CXXRewrittenBinaryOperator::Opcode::get()
{
    return (CppSharp::Parser::AST::BinaryOperatorKind)((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->opcode;
}

void CppSharp::Parser::AST::CXXRewrittenBinaryOperator::Opcode::set(CppSharp::Parser::AST::BinaryOperatorKind value)
{
    ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->opcode = (enum ::CppSharp::CppParser::AST::BinaryOperatorKind)value;
}

::System::String^ CppSharp::Parser::AST::CXXRewrittenBinaryOperator::OpcodeStr::get()
{
    return clix::marshalString<clix::E_UTF8>(((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->opcodeStr);
}

void CppSharp::Parser::AST::CXXRewrittenBinaryOperator::OpcodeStr::set(::System::String^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->opcodeStr = clix::marshalString<clix::E_UTF8>(value);
}

bool CppSharp::Parser::AST::CXXRewrittenBinaryOperator::IsComparisonOp::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->isComparisonOp;
}

void CppSharp::Parser::AST::CXXRewrittenBinaryOperator::IsComparisonOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->isComparisonOp = value;
}

bool CppSharp::Parser::AST::CXXRewrittenBinaryOperator::IsAssignmentOp::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->isAssignmentOp;
}

void CppSharp::Parser::AST::CXXRewrittenBinaryOperator::IsAssignmentOp::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->isAssignmentOp = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXRewrittenBinaryOperator::LHS::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->lHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->lHS);
}

void CppSharp::Parser::AST::CXXRewrittenBinaryOperator::LHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->lHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXRewrittenBinaryOperator::RHS::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->rHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->rHS);
}

void CppSharp::Parser::AST::CXXRewrittenBinaryOperator::RHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->rHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXRewrittenBinaryOperator::OperatorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->operatorLoc);
}

void CppSharp::Parser::AST::CXXRewrittenBinaryOperator::OperatorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->operatorLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXRewrittenBinaryOperator::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::CXXRewrittenBinaryOperator::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->exprLoc = _marshal0;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CXXRewrittenBinaryOperator::SourceRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->sourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->sourceRange);
}

void CppSharp::Parser::AST::CXXRewrittenBinaryOperator::SourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXRewrittenBinaryOperator*)NativePtr)->sourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

CppSharp::Parser::AST::CXXNamedCastExpr::CXXNamedCastExpr(class ::CppSharp::CppParser::AST::CXXNamedCastExpr* native)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)native)
{
}

CppSharp::Parser::AST::CXXNamedCastExpr^ CppSharp::Parser::AST::CXXNamedCastExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXNamedCastExpr((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXNamedCastExpr::CXXNamedCastExpr(class ::CppSharp::CppParser::AST::CXXNamedCastExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXNamedCastExpr^ CppSharp::Parser::AST::CXXNamedCastExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXNamedCastExpr((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXNamedCastExpr::~CXXNamedCastExpr()
{
}

CppSharp::Parser::AST::CXXNamedCastExpr::CXXNamedCastExpr()
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXNamedCastExpr();
}

CppSharp::Parser::AST::CXXNamedCastExpr::CXXNamedCastExpr(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXNamedCastExpr(__arg0);
}

CppSharp::Parser::AST::CXXNamedCastExpr::CXXNamedCastExpr(CppSharp::Parser::AST::CXXNamedCastExpr^ _0)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXNamedCastExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXNamedCastExpr(__arg0);
}

CppSharp::Parser::AST::CXXNamedCastExpr::operator CppSharp::Parser::AST::CXXNamedCastExpr^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::CXXNamedCastExpr) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::CXXNamedCastExpr(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::CXXNamedCastExpr((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*)_____ret, true);
}

::System::String^ CppSharp::Parser::AST::CXXNamedCastExpr::CastName::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*)NativePtr)->castName == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*)NativePtr)->castName));
}

void CppSharp::Parser::AST::CXXNamedCastExpr::CastName::set(::System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*)NativePtr)->castName = _value.c_str();
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXNamedCastExpr::OperatorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*)NativePtr)->operatorLoc);
}

void CppSharp::Parser::AST::CXXNamedCastExpr::OperatorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*)NativePtr)->operatorLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXNamedCastExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::CXXNamedCastExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CXXNamedCastExpr::AngleBrackets::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*)NativePtr)->angleBrackets == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*)NativePtr)->angleBrackets);
}

void CppSharp::Parser::AST::CXXNamedCastExpr::AngleBrackets::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXNamedCastExpr*)NativePtr)->angleBrackets = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

CppSharp::Parser::AST::CXXStaticCastExpr::CXXStaticCastExpr(class ::CppSharp::CppParser::AST::CXXStaticCastExpr* native)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)native)
{
}

CppSharp::Parser::AST::CXXStaticCastExpr^ CppSharp::Parser::AST::CXXStaticCastExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXStaticCastExpr((class ::CppSharp::CppParser::AST::CXXStaticCastExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXStaticCastExpr::CXXStaticCastExpr(class ::CppSharp::CppParser::AST::CXXStaticCastExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXStaticCastExpr^ CppSharp::Parser::AST::CXXStaticCastExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXStaticCastExpr((class ::CppSharp::CppParser::AST::CXXStaticCastExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXStaticCastExpr::~CXXStaticCastExpr()
{
}

CppSharp::Parser::AST::CXXStaticCastExpr::CXXStaticCastExpr()
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXStaticCastExpr();
}

CppSharp::Parser::AST::CXXStaticCastExpr::CXXStaticCastExpr(CppSharp::Parser::AST::CXXStaticCastExpr^ _0)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXStaticCastExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXStaticCastExpr(__arg0);
}

CppSharp::Parser::AST::CXXDynamicCastExpr::CXXDynamicCastExpr(class ::CppSharp::CppParser::AST::CXXDynamicCastExpr* native)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)native)
{
}

CppSharp::Parser::AST::CXXDynamicCastExpr^ CppSharp::Parser::AST::CXXDynamicCastExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXDynamicCastExpr((class ::CppSharp::CppParser::AST::CXXDynamicCastExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXDynamicCastExpr::CXXDynamicCastExpr(class ::CppSharp::CppParser::AST::CXXDynamicCastExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXDynamicCastExpr^ CppSharp::Parser::AST::CXXDynamicCastExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXDynamicCastExpr((class ::CppSharp::CppParser::AST::CXXDynamicCastExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXDynamicCastExpr::~CXXDynamicCastExpr()
{
}

CppSharp::Parser::AST::CXXDynamicCastExpr::CXXDynamicCastExpr()
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXDynamicCastExpr();
}

CppSharp::Parser::AST::CXXDynamicCastExpr::CXXDynamicCastExpr(CppSharp::Parser::AST::CXXDynamicCastExpr^ _0)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXDynamicCastExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXDynamicCastExpr(__arg0);
}

bool CppSharp::Parser::AST::CXXDynamicCastExpr::IsAlwaysNull::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXDynamicCastExpr*)NativePtr)->isAlwaysNull;
}

void CppSharp::Parser::AST::CXXDynamicCastExpr::IsAlwaysNull::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXDynamicCastExpr*)NativePtr)->isAlwaysNull = value;
}

CppSharp::Parser::AST::CXXReinterpretCastExpr::CXXReinterpretCastExpr(class ::CppSharp::CppParser::AST::CXXReinterpretCastExpr* native)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)native)
{
}

CppSharp::Parser::AST::CXXReinterpretCastExpr^ CppSharp::Parser::AST::CXXReinterpretCastExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXReinterpretCastExpr((class ::CppSharp::CppParser::AST::CXXReinterpretCastExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXReinterpretCastExpr::CXXReinterpretCastExpr(class ::CppSharp::CppParser::AST::CXXReinterpretCastExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXReinterpretCastExpr^ CppSharp::Parser::AST::CXXReinterpretCastExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXReinterpretCastExpr((class ::CppSharp::CppParser::AST::CXXReinterpretCastExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXReinterpretCastExpr::~CXXReinterpretCastExpr()
{
}

CppSharp::Parser::AST::CXXReinterpretCastExpr::CXXReinterpretCastExpr()
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXReinterpretCastExpr();
}

CppSharp::Parser::AST::CXXReinterpretCastExpr::CXXReinterpretCastExpr(CppSharp::Parser::AST::CXXReinterpretCastExpr^ _0)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXReinterpretCastExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXReinterpretCastExpr(__arg0);
}

CppSharp::Parser::AST::CXXConstCastExpr::CXXConstCastExpr(class ::CppSharp::CppParser::AST::CXXConstCastExpr* native)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)native)
{
}

CppSharp::Parser::AST::CXXConstCastExpr^ CppSharp::Parser::AST::CXXConstCastExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXConstCastExpr((class ::CppSharp::CppParser::AST::CXXConstCastExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXConstCastExpr::CXXConstCastExpr(class ::CppSharp::CppParser::AST::CXXConstCastExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXConstCastExpr^ CppSharp::Parser::AST::CXXConstCastExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXConstCastExpr((class ::CppSharp::CppParser::AST::CXXConstCastExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXConstCastExpr::~CXXConstCastExpr()
{
}

CppSharp::Parser::AST::CXXConstCastExpr::CXXConstCastExpr()
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXConstCastExpr();
}

CppSharp::Parser::AST::CXXConstCastExpr::CXXConstCastExpr(CppSharp::Parser::AST::CXXConstCastExpr^ _0)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXConstCastExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXConstCastExpr(__arg0);
}

CppSharp::Parser::AST::CXXAddrspaceCastExpr::CXXAddrspaceCastExpr(class ::CppSharp::CppParser::AST::CXXAddrspaceCastExpr* native)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)native)
{
}

CppSharp::Parser::AST::CXXAddrspaceCastExpr^ CppSharp::Parser::AST::CXXAddrspaceCastExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXAddrspaceCastExpr((class ::CppSharp::CppParser::AST::CXXAddrspaceCastExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXAddrspaceCastExpr::CXXAddrspaceCastExpr(class ::CppSharp::CppParser::AST::CXXAddrspaceCastExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXAddrspaceCastExpr^ CppSharp::Parser::AST::CXXAddrspaceCastExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXAddrspaceCastExpr((class ::CppSharp::CppParser::AST::CXXAddrspaceCastExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXAddrspaceCastExpr::~CXXAddrspaceCastExpr()
{
}

CppSharp::Parser::AST::CXXAddrspaceCastExpr::CXXAddrspaceCastExpr()
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXAddrspaceCastExpr();
}

CppSharp::Parser::AST::CXXAddrspaceCastExpr::CXXAddrspaceCastExpr(CppSharp::Parser::AST::CXXAddrspaceCastExpr^ _0)
    : CppSharp::Parser::AST::CXXNamedCastExpr((::CppSharp::CppParser::AST::CXXNamedCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXAddrspaceCastExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXAddrspaceCastExpr(__arg0);
}

CppSharp::Parser::AST::UserDefinedLiteral::UserDefinedLiteral(class ::CppSharp::CppParser::AST::UserDefinedLiteral* native)
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)native)
{
}

CppSharp::Parser::AST::UserDefinedLiteral^ CppSharp::Parser::AST::UserDefinedLiteral::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::UserDefinedLiteral((class ::CppSharp::CppParser::AST::UserDefinedLiteral*) native.ToPointer());
}

CppSharp::Parser::AST::UserDefinedLiteral::UserDefinedLiteral(class ::CppSharp::CppParser::AST::UserDefinedLiteral* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::UserDefinedLiteral^ CppSharp::Parser::AST::UserDefinedLiteral::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::UserDefinedLiteral((class ::CppSharp::CppParser::AST::UserDefinedLiteral*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::UserDefinedLiteral::~UserDefinedLiteral()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::UserDefinedLiteral*) __nativePtr;
    }
}

CppSharp::Parser::AST::UserDefinedLiteral::UserDefinedLiteral()
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::UserDefinedLiteral();
}

CppSharp::Parser::AST::UserDefinedLiteral::UserDefinedLiteral(CppSharp::Parser::AST::UserDefinedLiteral^ _0)
    : CppSharp::Parser::AST::CallExpr((::CppSharp::CppParser::AST::CallExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::UserDefinedLiteral*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::UserDefinedLiteral(__arg0);
}

CppSharp::Parser::AST::UserDefinedLiteral::LiteralOperatorKind CppSharp::Parser::AST::UserDefinedLiteral::literalOperatorKind::get()
{
    return (CppSharp::Parser::AST::UserDefinedLiteral::LiteralOperatorKind)((class ::CppSharp::CppParser::AST::UserDefinedLiteral*)NativePtr)->literalOperatorKind;
}

void CppSharp::Parser::AST::UserDefinedLiteral::literalOperatorKind::set(CppSharp::Parser::AST::UserDefinedLiteral::LiteralOperatorKind value)
{
    ((class ::CppSharp::CppParser::AST::UserDefinedLiteral*)NativePtr)->literalOperatorKind = (enum ::CppSharp::CppParser::AST::UserDefinedLiteral::LiteralOperatorKind)value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::UserDefinedLiteral::UDSuffixLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::UserDefinedLiteral*)NativePtr)->uDSuffixLoc);
}

void CppSharp::Parser::AST::UserDefinedLiteral::UDSuffixLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::UserDefinedLiteral*)NativePtr)->uDSuffixLoc = _marshal0;
}

CppSharp::Parser::AST::CXXBoolLiteralExpr::CXXBoolLiteralExpr(class ::CppSharp::CppParser::AST::CXXBoolLiteralExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXBoolLiteralExpr^ CppSharp::Parser::AST::CXXBoolLiteralExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXBoolLiteralExpr((class ::CppSharp::CppParser::AST::CXXBoolLiteralExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXBoolLiteralExpr::CXXBoolLiteralExpr(class ::CppSharp::CppParser::AST::CXXBoolLiteralExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXBoolLiteralExpr^ CppSharp::Parser::AST::CXXBoolLiteralExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXBoolLiteralExpr((class ::CppSharp::CppParser::AST::CXXBoolLiteralExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXBoolLiteralExpr::~CXXBoolLiteralExpr()
{
}

CppSharp::Parser::AST::CXXBoolLiteralExpr::CXXBoolLiteralExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXBoolLiteralExpr();
}

CppSharp::Parser::AST::CXXBoolLiteralExpr::CXXBoolLiteralExpr(CppSharp::Parser::AST::CXXBoolLiteralExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXBoolLiteralExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXBoolLiteralExpr(__arg0);
}

bool CppSharp::Parser::AST::CXXBoolLiteralExpr::Value::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXBoolLiteralExpr*)NativePtr)->value;
}

void CppSharp::Parser::AST::CXXBoolLiteralExpr::Value::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXBoolLiteralExpr*)NativePtr)->value = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXBoolLiteralExpr::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXBoolLiteralExpr*)NativePtr)->location);
}

void CppSharp::Parser::AST::CXXBoolLiteralExpr::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXBoolLiteralExpr*)NativePtr)->location = _marshal0;
}

CppSharp::Parser::AST::CXXNullPtrLiteralExpr::CXXNullPtrLiteralExpr(class ::CppSharp::CppParser::AST::CXXNullPtrLiteralExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXNullPtrLiteralExpr^ CppSharp::Parser::AST::CXXNullPtrLiteralExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXNullPtrLiteralExpr((class ::CppSharp::CppParser::AST::CXXNullPtrLiteralExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXNullPtrLiteralExpr::CXXNullPtrLiteralExpr(class ::CppSharp::CppParser::AST::CXXNullPtrLiteralExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXNullPtrLiteralExpr^ CppSharp::Parser::AST::CXXNullPtrLiteralExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXNullPtrLiteralExpr((class ::CppSharp::CppParser::AST::CXXNullPtrLiteralExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXNullPtrLiteralExpr::~CXXNullPtrLiteralExpr()
{
}

CppSharp::Parser::AST::CXXNullPtrLiteralExpr::CXXNullPtrLiteralExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXNullPtrLiteralExpr();
}

CppSharp::Parser::AST::CXXNullPtrLiteralExpr::CXXNullPtrLiteralExpr(CppSharp::Parser::AST::CXXNullPtrLiteralExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXNullPtrLiteralExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXNullPtrLiteralExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXNullPtrLiteralExpr::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXNullPtrLiteralExpr*)NativePtr)->location);
}

void CppSharp::Parser::AST::CXXNullPtrLiteralExpr::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXNullPtrLiteralExpr*)NativePtr)->location = _marshal0;
}

CppSharp::Parser::AST::CXXStdInitializerListExpr::CXXStdInitializerListExpr(class ::CppSharp::CppParser::AST::CXXStdInitializerListExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXStdInitializerListExpr^ CppSharp::Parser::AST::CXXStdInitializerListExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXStdInitializerListExpr((class ::CppSharp::CppParser::AST::CXXStdInitializerListExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXStdInitializerListExpr::CXXStdInitializerListExpr(class ::CppSharp::CppParser::AST::CXXStdInitializerListExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXStdInitializerListExpr^ CppSharp::Parser::AST::CXXStdInitializerListExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXStdInitializerListExpr((class ::CppSharp::CppParser::AST::CXXStdInitializerListExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXStdInitializerListExpr::~CXXStdInitializerListExpr()
{
}

CppSharp::Parser::AST::CXXStdInitializerListExpr::CXXStdInitializerListExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXStdInitializerListExpr();
}

CppSharp::Parser::AST::CXXStdInitializerListExpr::CXXStdInitializerListExpr(CppSharp::Parser::AST::CXXStdInitializerListExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXStdInitializerListExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXStdInitializerListExpr(__arg0);
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CXXStdInitializerListExpr::SourceRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXStdInitializerListExpr*)NativePtr)->sourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CXXStdInitializerListExpr*)NativePtr)->sourceRange);
}

void CppSharp::Parser::AST::CXXStdInitializerListExpr::SourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXStdInitializerListExpr*)NativePtr)->sourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

CppSharp::Parser::AST::CXXTypeidExpr::CXXTypeidExpr(class ::CppSharp::CppParser::AST::CXXTypeidExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXTypeidExpr^ CppSharp::Parser::AST::CXXTypeidExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXTypeidExpr((class ::CppSharp::CppParser::AST::CXXTypeidExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXTypeidExpr::CXXTypeidExpr(class ::CppSharp::CppParser::AST::CXXTypeidExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXTypeidExpr^ CppSharp::Parser::AST::CXXTypeidExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXTypeidExpr((class ::CppSharp::CppParser::AST::CXXTypeidExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXTypeidExpr::~CXXTypeidExpr()
{
}

CppSharp::Parser::AST::CXXTypeidExpr::CXXTypeidExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXTypeidExpr();
}

CppSharp::Parser::AST::CXXTypeidExpr::CXXTypeidExpr(CppSharp::Parser::AST::CXXTypeidExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXTypeidExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXTypeidExpr(__arg0);
}

bool CppSharp::Parser::AST::CXXTypeidExpr::IsPotentiallyEvaluated::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXTypeidExpr*)NativePtr)->isPotentiallyEvaluated;
}

void CppSharp::Parser::AST::CXXTypeidExpr::IsPotentiallyEvaluated::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXTypeidExpr*)NativePtr)->isPotentiallyEvaluated = value;
}

bool CppSharp::Parser::AST::CXXTypeidExpr::IsTypeOperand::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXTypeidExpr*)NativePtr)->isTypeOperand;
}

void CppSharp::Parser::AST::CXXTypeidExpr::IsTypeOperand::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXTypeidExpr*)NativePtr)->isTypeOperand = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXTypeidExpr::ExprOperand::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXTypeidExpr*)NativePtr)->exprOperand == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXTypeidExpr*)NativePtr)->exprOperand);
}

void CppSharp::Parser::AST::CXXTypeidExpr::ExprOperand::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXTypeidExpr*)NativePtr)->exprOperand = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CXXTypeidExpr::SourceRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXTypeidExpr*)NativePtr)->sourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CXXTypeidExpr*)NativePtr)->sourceRange);
}

void CppSharp::Parser::AST::CXXTypeidExpr::SourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXTypeidExpr*)NativePtr)->sourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

CppSharp::Parser::AST::MSPropertyRefExpr::MSPropertyRefExpr(class ::CppSharp::CppParser::AST::MSPropertyRefExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::MSPropertyRefExpr^ CppSharp::Parser::AST::MSPropertyRefExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::MSPropertyRefExpr((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*) native.ToPointer());
}

CppSharp::Parser::AST::MSPropertyRefExpr::MSPropertyRefExpr(class ::CppSharp::CppParser::AST::MSPropertyRefExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::MSPropertyRefExpr^ CppSharp::Parser::AST::MSPropertyRefExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::MSPropertyRefExpr((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::MSPropertyRefExpr::~MSPropertyRefExpr()
{
}

CppSharp::Parser::AST::MSPropertyRefExpr::MSPropertyRefExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::MSPropertyRefExpr();
}

CppSharp::Parser::AST::MSPropertyRefExpr::MSPropertyRefExpr(CppSharp::Parser::AST::MSPropertyRefExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::MSPropertyRefExpr(__arg0);
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::MSPropertyRefExpr::SourceRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)NativePtr)->sourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)NativePtr)->sourceRange);
}

void CppSharp::Parser::AST::MSPropertyRefExpr::SourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)NativePtr)->sourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

bool CppSharp::Parser::AST::MSPropertyRefExpr::IsImplicitAccess::get()
{
    return ((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)NativePtr)->isImplicitAccess;
}

void CppSharp::Parser::AST::MSPropertyRefExpr::IsImplicitAccess::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)NativePtr)->isImplicitAccess = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::MSPropertyRefExpr::BaseExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)NativePtr)->baseExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)NativePtr)->baseExpr);
}

void CppSharp::Parser::AST::MSPropertyRefExpr::BaseExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)NativePtr)->baseExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

bool CppSharp::Parser::AST::MSPropertyRefExpr::IsArrow::get()
{
    return ((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)NativePtr)->isArrow;
}

void CppSharp::Parser::AST::MSPropertyRefExpr::IsArrow::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)NativePtr)->isArrow = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MSPropertyRefExpr::MemberLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)NativePtr)->memberLoc);
}

void CppSharp::Parser::AST::MSPropertyRefExpr::MemberLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MSPropertyRefExpr*)NativePtr)->memberLoc = _marshal0;
}

CppSharp::Parser::AST::MSPropertySubscriptExpr::MSPropertySubscriptExpr(class ::CppSharp::CppParser::AST::MSPropertySubscriptExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::MSPropertySubscriptExpr^ CppSharp::Parser::AST::MSPropertySubscriptExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::MSPropertySubscriptExpr((class ::CppSharp::CppParser::AST::MSPropertySubscriptExpr*) native.ToPointer());
}

CppSharp::Parser::AST::MSPropertySubscriptExpr::MSPropertySubscriptExpr(class ::CppSharp::CppParser::AST::MSPropertySubscriptExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::MSPropertySubscriptExpr^ CppSharp::Parser::AST::MSPropertySubscriptExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::MSPropertySubscriptExpr((class ::CppSharp::CppParser::AST::MSPropertySubscriptExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::MSPropertySubscriptExpr::~MSPropertySubscriptExpr()
{
}

CppSharp::Parser::AST::MSPropertySubscriptExpr::MSPropertySubscriptExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::MSPropertySubscriptExpr();
}

CppSharp::Parser::AST::MSPropertySubscriptExpr::MSPropertySubscriptExpr(CppSharp::Parser::AST::MSPropertySubscriptExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::MSPropertySubscriptExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::MSPropertySubscriptExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MSPropertySubscriptExpr::RBracketLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MSPropertySubscriptExpr*)NativePtr)->rBracketLoc);
}

void CppSharp::Parser::AST::MSPropertySubscriptExpr::RBracketLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MSPropertySubscriptExpr*)NativePtr)->rBracketLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::MSPropertySubscriptExpr::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::MSPropertySubscriptExpr*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::MSPropertySubscriptExpr::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::MSPropertySubscriptExpr*)NativePtr)->exprLoc = _marshal0;
}

CppSharp::Parser::AST::CXXUuidofExpr::CXXUuidofExpr(class ::CppSharp::CppParser::AST::CXXUuidofExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXUuidofExpr^ CppSharp::Parser::AST::CXXUuidofExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXUuidofExpr((class ::CppSharp::CppParser::AST::CXXUuidofExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXUuidofExpr::CXXUuidofExpr(class ::CppSharp::CppParser::AST::CXXUuidofExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXUuidofExpr^ CppSharp::Parser::AST::CXXUuidofExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXUuidofExpr((class ::CppSharp::CppParser::AST::CXXUuidofExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXUuidofExpr::~CXXUuidofExpr()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CXXUuidofExpr*) __nativePtr;
    }
}

CppSharp::Parser::AST::CXXUuidofExpr::CXXUuidofExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXUuidofExpr();
}

CppSharp::Parser::AST::CXXUuidofExpr::CXXUuidofExpr(CppSharp::Parser::AST::CXXUuidofExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXUuidofExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXUuidofExpr(__arg0);
}

bool CppSharp::Parser::AST::CXXUuidofExpr::IsTypeOperand::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXUuidofExpr*)NativePtr)->isTypeOperand;
}

void CppSharp::Parser::AST::CXXUuidofExpr::IsTypeOperand::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXUuidofExpr*)NativePtr)->isTypeOperand = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXUuidofExpr::ExprOperand::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXUuidofExpr*)NativePtr)->exprOperand == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXUuidofExpr*)NativePtr)->exprOperand);
}

void CppSharp::Parser::AST::CXXUuidofExpr::ExprOperand::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXUuidofExpr*)NativePtr)->exprOperand = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

::System::String^ CppSharp::Parser::AST::CXXUuidofExpr::GuidDecl::get()
{
    return clix::marshalString<clix::E_UTF8>(((class ::CppSharp::CppParser::AST::CXXUuidofExpr*)NativePtr)->guidDecl);
}

void CppSharp::Parser::AST::CXXUuidofExpr::GuidDecl::set(::System::String^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXUuidofExpr*)NativePtr)->guidDecl = clix::marshalString<clix::E_UTF8>(value);
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CXXUuidofExpr::SourceRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXUuidofExpr*)NativePtr)->sourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CXXUuidofExpr*)NativePtr)->sourceRange);
}

void CppSharp::Parser::AST::CXXUuidofExpr::SourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXUuidofExpr*)NativePtr)->sourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

CppSharp::Parser::AST::CXXThisExpr::CXXThisExpr(class ::CppSharp::CppParser::AST::CXXThisExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXThisExpr^ CppSharp::Parser::AST::CXXThisExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXThisExpr((class ::CppSharp::CppParser::AST::CXXThisExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXThisExpr::CXXThisExpr(class ::CppSharp::CppParser::AST::CXXThisExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXThisExpr^ CppSharp::Parser::AST::CXXThisExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXThisExpr((class ::CppSharp::CppParser::AST::CXXThisExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXThisExpr::~CXXThisExpr()
{
}

CppSharp::Parser::AST::CXXThisExpr::CXXThisExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXThisExpr();
}

CppSharp::Parser::AST::CXXThisExpr::CXXThisExpr(CppSharp::Parser::AST::CXXThisExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXThisExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXThisExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXThisExpr::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXThisExpr*)NativePtr)->location);
}

void CppSharp::Parser::AST::CXXThisExpr::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXThisExpr*)NativePtr)->location = _marshal0;
}

bool CppSharp::Parser::AST::CXXThisExpr::Implicit::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXThisExpr*)NativePtr)->implicit;
}

void CppSharp::Parser::AST::CXXThisExpr::Implicit::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXThisExpr*)NativePtr)->implicit = value;
}

CppSharp::Parser::AST::CXXThrowExpr::CXXThrowExpr(class ::CppSharp::CppParser::AST::CXXThrowExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXThrowExpr^ CppSharp::Parser::AST::CXXThrowExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXThrowExpr((class ::CppSharp::CppParser::AST::CXXThrowExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXThrowExpr::CXXThrowExpr(class ::CppSharp::CppParser::AST::CXXThrowExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXThrowExpr^ CppSharp::Parser::AST::CXXThrowExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXThrowExpr((class ::CppSharp::CppParser::AST::CXXThrowExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXThrowExpr::~CXXThrowExpr()
{
}

CppSharp::Parser::AST::CXXThrowExpr::CXXThrowExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXThrowExpr();
}

CppSharp::Parser::AST::CXXThrowExpr::CXXThrowExpr(CppSharp::Parser::AST::CXXThrowExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXThrowExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXThrowExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXThrowExpr::ThrowLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXThrowExpr*)NativePtr)->throwLoc);
}

void CppSharp::Parser::AST::CXXThrowExpr::ThrowLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXThrowExpr*)NativePtr)->throwLoc = _marshal0;
}

bool CppSharp::Parser::AST::CXXThrowExpr::IsThrownVariableInScope::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXThrowExpr*)NativePtr)->isThrownVariableInScope;
}

void CppSharp::Parser::AST::CXXThrowExpr::IsThrownVariableInScope::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXThrowExpr*)NativePtr)->isThrownVariableInScope = value;
}

CppSharp::Parser::AST::CXXDefaultArgExpr::CXXDefaultArgExpr(class ::CppSharp::CppParser::AST::CXXDefaultArgExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXDefaultArgExpr^ CppSharp::Parser::AST::CXXDefaultArgExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXDefaultArgExpr((class ::CppSharp::CppParser::AST::CXXDefaultArgExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXDefaultArgExpr::CXXDefaultArgExpr(class ::CppSharp::CppParser::AST::CXXDefaultArgExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXDefaultArgExpr^ CppSharp::Parser::AST::CXXDefaultArgExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXDefaultArgExpr((class ::CppSharp::CppParser::AST::CXXDefaultArgExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXDefaultArgExpr::~CXXDefaultArgExpr()
{
}

CppSharp::Parser::AST::CXXDefaultArgExpr::CXXDefaultArgExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXDefaultArgExpr();
}

CppSharp::Parser::AST::CXXDefaultArgExpr::CXXDefaultArgExpr(CppSharp::Parser::AST::CXXDefaultArgExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXDefaultArgExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXDefaultArgExpr(__arg0);
}

bool CppSharp::Parser::AST::CXXDefaultArgExpr::HasRewrittenInit::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXDefaultArgExpr*)NativePtr)->hasRewrittenInit;
}

void CppSharp::Parser::AST::CXXDefaultArgExpr::HasRewrittenInit::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXDefaultArgExpr*)NativePtr)->hasRewrittenInit = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXDefaultArgExpr::UsedLocation::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXDefaultArgExpr*)NativePtr)->usedLocation);
}

void CppSharp::Parser::AST::CXXDefaultArgExpr::UsedLocation::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXDefaultArgExpr*)NativePtr)->usedLocation = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXDefaultArgExpr::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXDefaultArgExpr*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::CXXDefaultArgExpr::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXDefaultArgExpr*)NativePtr)->exprLoc = _marshal0;
}

CppSharp::Parser::AST::CXXDefaultInitExpr::CXXDefaultInitExpr(class ::CppSharp::CppParser::AST::CXXDefaultInitExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXDefaultInitExpr^ CppSharp::Parser::AST::CXXDefaultInitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXDefaultInitExpr((class ::CppSharp::CppParser::AST::CXXDefaultInitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXDefaultInitExpr::CXXDefaultInitExpr(class ::CppSharp::CppParser::AST::CXXDefaultInitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXDefaultInitExpr^ CppSharp::Parser::AST::CXXDefaultInitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXDefaultInitExpr((class ::CppSharp::CppParser::AST::CXXDefaultInitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXDefaultInitExpr::~CXXDefaultInitExpr()
{
}

CppSharp::Parser::AST::CXXDefaultInitExpr::CXXDefaultInitExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXDefaultInitExpr();
}

CppSharp::Parser::AST::CXXDefaultInitExpr::CXXDefaultInitExpr(CppSharp::Parser::AST::CXXDefaultInitExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXDefaultInitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXDefaultInitExpr(__arg0);
}

bool CppSharp::Parser::AST::CXXDefaultInitExpr::HasRewrittenInit::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXDefaultInitExpr*)NativePtr)->hasRewrittenInit;
}

void CppSharp::Parser::AST::CXXDefaultInitExpr::HasRewrittenInit::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXDefaultInitExpr*)NativePtr)->hasRewrittenInit = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXDefaultInitExpr::UsedLocation::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXDefaultInitExpr*)NativePtr)->usedLocation);
}

void CppSharp::Parser::AST::CXXDefaultInitExpr::UsedLocation::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXDefaultInitExpr*)NativePtr)->usedLocation = _marshal0;
}

CppSharp::Parser::AST::CXXBindTemporaryExpr::CXXBindTemporaryExpr(class ::CppSharp::CppParser::AST::CXXBindTemporaryExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXBindTemporaryExpr^ CppSharp::Parser::AST::CXXBindTemporaryExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXBindTemporaryExpr((class ::CppSharp::CppParser::AST::CXXBindTemporaryExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXBindTemporaryExpr::CXXBindTemporaryExpr(class ::CppSharp::CppParser::AST::CXXBindTemporaryExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXBindTemporaryExpr^ CppSharp::Parser::AST::CXXBindTemporaryExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXBindTemporaryExpr((class ::CppSharp::CppParser::AST::CXXBindTemporaryExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXBindTemporaryExpr::~CXXBindTemporaryExpr()
{
}

CppSharp::Parser::AST::CXXBindTemporaryExpr::CXXBindTemporaryExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXBindTemporaryExpr();
}

CppSharp::Parser::AST::CXXBindTemporaryExpr::CXXBindTemporaryExpr(CppSharp::Parser::AST::CXXBindTemporaryExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXBindTemporaryExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXBindTemporaryExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXBindTemporaryExpr::SubExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXBindTemporaryExpr*)NativePtr)->subExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXBindTemporaryExpr*)NativePtr)->subExpr);
}

void CppSharp::Parser::AST::CXXBindTemporaryExpr::SubExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXBindTemporaryExpr*)NativePtr)->subExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::CXXConstructExpr::CXXConstructExpr(class ::CppSharp::CppParser::AST::CXXConstructExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXConstructExpr^ CppSharp::Parser::AST::CXXConstructExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXConstructExpr((class ::CppSharp::CppParser::AST::CXXConstructExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXConstructExpr::CXXConstructExpr(class ::CppSharp::CppParser::AST::CXXConstructExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXConstructExpr^ CppSharp::Parser::AST::CXXConstructExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXConstructExpr((class ::CppSharp::CppParser::AST::CXXConstructExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXConstructExpr::~CXXConstructExpr()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CXXConstructExpr*) __nativePtr;
    }
}

CppSharp::Parser::AST::CXXConstructExpr::CXXConstructExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXConstructExpr();
}

CppSharp::Parser::AST::CXXConstructExpr::CXXConstructExpr(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXConstructExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXConstructExpr::Getarguments(unsigned int i)
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->getarguments(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)___ret);
}

void CppSharp::Parser::AST::CXXConstructExpr::Addarguments(CppSharp::Parser::AST::Expr^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::Expr*)s->NativePtr;
    ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->addarguments(__arg0);
}

void CppSharp::Parser::AST::CXXConstructExpr::Cleararguments()
{
    ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->cleararguments();
}

CppSharp::Parser::AST::CXXConstructExpr::CXXConstructExpr(CppSharp::Parser::AST::CXXConstructExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXConstructExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXConstructExpr(__arg0);
}

CppSharp::Parser::AST::CXXConstructExpr::operator CppSharp::Parser::AST::CXXConstructExpr^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::CXXConstructExpr) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::CXXConstructExpr(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::CXXConstructExpr((class ::CppSharp::CppParser::AST::CXXConstructExpr*)_____ret, true);
}

::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ CppSharp::Parser::AST::CXXConstructExpr::Arguments::get()
{
    auto _tmp__arguments = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>();
    auto __list0 = ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->arguments;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)_element);
        _tmp__arguments->Add(_marshalElement);
    }
    return _tmp__arguments;
}

void CppSharp::Parser::AST::CXXConstructExpr::Arguments::set(::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::Expr*>();
    for each(CppSharp::Parser::AST::Expr^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::Expr*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->arguments = _tmpvalue;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXConstructExpr::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->location);
}

void CppSharp::Parser::AST::CXXConstructExpr::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->location = _marshal0;
}

bool CppSharp::Parser::AST::CXXConstructExpr::Elidable::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->elidable;
}

void CppSharp::Parser::AST::CXXConstructExpr::Elidable::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->elidable = value;
}

bool CppSharp::Parser::AST::CXXConstructExpr::HadMultipleCandidates::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->hadMultipleCandidates;
}

void CppSharp::Parser::AST::CXXConstructExpr::HadMultipleCandidates::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->hadMultipleCandidates = value;
}

bool CppSharp::Parser::AST::CXXConstructExpr::ListInitialization::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->listInitialization;
}

void CppSharp::Parser::AST::CXXConstructExpr::ListInitialization::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->listInitialization = value;
}

bool CppSharp::Parser::AST::CXXConstructExpr::StdInitListInitialization::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->stdInitListInitialization;
}

void CppSharp::Parser::AST::CXXConstructExpr::StdInitListInitialization::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->stdInitListInitialization = value;
}

bool CppSharp::Parser::AST::CXXConstructExpr::RequiresZeroInitialization::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->requiresZeroInitialization;
}

void CppSharp::Parser::AST::CXXConstructExpr::RequiresZeroInitialization::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->requiresZeroInitialization = value;
}

unsigned int CppSharp::Parser::AST::CXXConstructExpr::NumArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->numArgs;
}

void CppSharp::Parser::AST::CXXConstructExpr::NumArgs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->numArgs = value;
}

bool CppSharp::Parser::AST::CXXConstructExpr::IsImmediateEscalating::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->isImmediateEscalating;
}

void CppSharp::Parser::AST::CXXConstructExpr::IsImmediateEscalating::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->isImmediateEscalating = value;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CXXConstructExpr::ParenOrBraceRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->parenOrBraceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->parenOrBraceRange);
}

void CppSharp::Parser::AST::CXXConstructExpr::ParenOrBraceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->parenOrBraceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

unsigned int CppSharp::Parser::AST::CXXConstructExpr::GetargumentsCount::get()
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CXXConstructExpr*)NativePtr)->getargumentsCount();
    return ___ret;
}

CppSharp::Parser::AST::CXXInheritedCtorInitExpr::CXXInheritedCtorInitExpr(class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXInheritedCtorInitExpr^ CppSharp::Parser::AST::CXXInheritedCtorInitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXInheritedCtorInitExpr((class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXInheritedCtorInitExpr::CXXInheritedCtorInitExpr(class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXInheritedCtorInitExpr^ CppSharp::Parser::AST::CXXInheritedCtorInitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXInheritedCtorInitExpr((class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXInheritedCtorInitExpr::~CXXInheritedCtorInitExpr()
{
}

CppSharp::Parser::AST::CXXInheritedCtorInitExpr::CXXInheritedCtorInitExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr();
}

CppSharp::Parser::AST::CXXInheritedCtorInitExpr::CXXInheritedCtorInitExpr(CppSharp::Parser::AST::CXXInheritedCtorInitExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr(__arg0);
}

bool CppSharp::Parser::AST::CXXInheritedCtorInitExpr::ConstructsVBase::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr*)NativePtr)->constructsVBase;
}

void CppSharp::Parser::AST::CXXInheritedCtorInitExpr::ConstructsVBase::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr*)NativePtr)->constructsVBase = value;
}

bool CppSharp::Parser::AST::CXXInheritedCtorInitExpr::InheritedFromVBase::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr*)NativePtr)->inheritedFromVBase;
}

void CppSharp::Parser::AST::CXXInheritedCtorInitExpr::InheritedFromVBase::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr*)NativePtr)->inheritedFromVBase = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXInheritedCtorInitExpr::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr*)NativePtr)->location);
}

void CppSharp::Parser::AST::CXXInheritedCtorInitExpr::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXInheritedCtorInitExpr*)NativePtr)->location = _marshal0;
}

CppSharp::Parser::AST::CXXFunctionalCastExpr::CXXFunctionalCastExpr(class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr* native)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)native)
{
}

CppSharp::Parser::AST::CXXFunctionalCastExpr^ CppSharp::Parser::AST::CXXFunctionalCastExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXFunctionalCastExpr((class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXFunctionalCastExpr::CXXFunctionalCastExpr(class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXFunctionalCastExpr^ CppSharp::Parser::AST::CXXFunctionalCastExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXFunctionalCastExpr((class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXFunctionalCastExpr::~CXXFunctionalCastExpr()
{
}

CppSharp::Parser::AST::CXXFunctionalCastExpr::CXXFunctionalCastExpr()
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr();
}

CppSharp::Parser::AST::CXXFunctionalCastExpr::CXXFunctionalCastExpr(CppSharp::Parser::AST::CXXFunctionalCastExpr^ _0)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXFunctionalCastExpr::LParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr*)NativePtr)->lParenLoc);
}

void CppSharp::Parser::AST::CXXFunctionalCastExpr::LParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr*)NativePtr)->lParenLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXFunctionalCastExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::CXXFunctionalCastExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr*)NativePtr)->rParenLoc = _marshal0;
}

bool CppSharp::Parser::AST::CXXFunctionalCastExpr::IsListInitialization::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr*)NativePtr)->isListInitialization;
}

void CppSharp::Parser::AST::CXXFunctionalCastExpr::IsListInitialization::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXFunctionalCastExpr*)NativePtr)->isListInitialization = value;
}

CppSharp::Parser::AST::CXXTemporaryObjectExpr::CXXTemporaryObjectExpr(class ::CppSharp::CppParser::AST::CXXTemporaryObjectExpr* native)
    : CppSharp::Parser::AST::CXXConstructExpr((::CppSharp::CppParser::AST::CXXConstructExpr*)native)
{
}

CppSharp::Parser::AST::CXXTemporaryObjectExpr^ CppSharp::Parser::AST::CXXTemporaryObjectExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXTemporaryObjectExpr((class ::CppSharp::CppParser::AST::CXXTemporaryObjectExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXTemporaryObjectExpr::CXXTemporaryObjectExpr(class ::CppSharp::CppParser::AST::CXXTemporaryObjectExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CXXConstructExpr((::CppSharp::CppParser::AST::CXXConstructExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXTemporaryObjectExpr^ CppSharp::Parser::AST::CXXTemporaryObjectExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXTemporaryObjectExpr((class ::CppSharp::CppParser::AST::CXXTemporaryObjectExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXTemporaryObjectExpr::~CXXTemporaryObjectExpr()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CXXTemporaryObjectExpr*) __nativePtr;
    }
}

CppSharp::Parser::AST::CXXTemporaryObjectExpr::CXXTemporaryObjectExpr()
    : CppSharp::Parser::AST::CXXConstructExpr((::CppSharp::CppParser::AST::CXXConstructExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXTemporaryObjectExpr();
}

CppSharp::Parser::AST::CXXTemporaryObjectExpr::CXXTemporaryObjectExpr(CppSharp::Parser::AST::CXXTemporaryObjectExpr^ _0)
    : CppSharp::Parser::AST::CXXConstructExpr((::CppSharp::CppParser::AST::CXXConstructExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXTemporaryObjectExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXTemporaryObjectExpr(__arg0);
}

CppSharp::Parser::AST::LambdaExpr::LambdaExpr(class ::CppSharp::CppParser::AST::LambdaExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::LambdaExpr^ CppSharp::Parser::AST::LambdaExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::LambdaExpr((class ::CppSharp::CppParser::AST::LambdaExpr*) native.ToPointer());
}

CppSharp::Parser::AST::LambdaExpr::LambdaExpr(class ::CppSharp::CppParser::AST::LambdaExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::LambdaExpr^ CppSharp::Parser::AST::LambdaExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::LambdaExpr((class ::CppSharp::CppParser::AST::LambdaExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::LambdaExpr::~LambdaExpr()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::LambdaExpr*) __nativePtr;
    }
}

CppSharp::Parser::AST::LambdaExpr::LambdaExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::LambdaExpr();
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::LambdaExpr::GetcaptureInits(unsigned int i)
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->getcapture_inits(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)___ret);
}

void CppSharp::Parser::AST::LambdaExpr::AddcaptureInits(CppSharp::Parser::AST::Expr^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::Expr*)s->NativePtr;
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->addcapture_inits(__arg0);
}

void CppSharp::Parser::AST::LambdaExpr::ClearcaptureInits()
{
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->clearcapture_inits();
}

CppSharp::Parser::AST::LambdaExpr::LambdaExpr(CppSharp::Parser::AST::LambdaExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::LambdaExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::LambdaExpr(__arg0);
}

::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ CppSharp::Parser::AST::LambdaExpr::CaptureInits::get()
{
    auto _tmp__capture_inits = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>();
    auto __list0 = ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->capture_inits;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)_element);
        _tmp__capture_inits->Add(_marshalElement);
    }
    return _tmp__capture_inits;
}

void CppSharp::Parser::AST::LambdaExpr::CaptureInits::set(::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::Expr*>();
    for each(CppSharp::Parser::AST::Expr^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::Expr*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->capture_inits = _tmpvalue;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::LambdaExpr::CaptureDefaultLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->captureDefaultLoc);
}

void CppSharp::Parser::AST::LambdaExpr::CaptureDefaultLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->captureDefaultLoc = _marshal0;
}

unsigned int CppSharp::Parser::AST::LambdaExpr::CaptureSize::get()
{
    return ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->capture_size;
}

void CppSharp::Parser::AST::LambdaExpr::CaptureSize::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->capture_size = value;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::LambdaExpr::IntroducerRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->introducerRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->introducerRange);
}

void CppSharp::Parser::AST::LambdaExpr::IntroducerRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->introducerRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

CppSharp::Parser::AST::Method^ CppSharp::Parser::AST::LambdaExpr::CallOperator::get()
{
    return (((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->callOperator == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Method((class ::CppSharp::CppParser::AST::Method*)((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->callOperator);
}

void CppSharp::Parser::AST::LambdaExpr::CallOperator::set(CppSharp::Parser::AST::Method^ value)
{
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->callOperator = (class ::CppSharp::CppParser::AST::Method*)value->NativePtr;
}

CppSharp::Parser::AST::FunctionTemplate^ CppSharp::Parser::AST::LambdaExpr::DependentCallOperator::get()
{
    return (((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->dependentCallOperator == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::FunctionTemplate((class ::CppSharp::CppParser::AST::FunctionTemplate*)((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->dependentCallOperator);
}

void CppSharp::Parser::AST::LambdaExpr::DependentCallOperator::set(CppSharp::Parser::AST::FunctionTemplate^ value)
{
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->dependentCallOperator = (class ::CppSharp::CppParser::AST::FunctionTemplate*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::LambdaExpr::TrailingRequiresClause::get()
{
    return (((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->trailingRequiresClause == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->trailingRequiresClause);
}

void CppSharp::Parser::AST::LambdaExpr::TrailingRequiresClause::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->trailingRequiresClause = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

bool CppSharp::Parser::AST::LambdaExpr::IsGenericLambda::get()
{
    return ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->isGenericLambda;
}

void CppSharp::Parser::AST::LambdaExpr::IsGenericLambda::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->isGenericLambda = value;
}

CppSharp::Parser::AST::Stmt^ CppSharp::Parser::AST::LambdaExpr::Body::get()
{
    return (((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->body == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Stmt((class ::CppSharp::CppParser::AST::Stmt*)((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->body);
}

void CppSharp::Parser::AST::LambdaExpr::Body::set(CppSharp::Parser::AST::Stmt^ value)
{
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->body = (class ::CppSharp::CppParser::AST::Stmt*)value->NativePtr;
}

bool CppSharp::Parser::AST::LambdaExpr::IsMutable::get()
{
    return ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->isMutable;
}

void CppSharp::Parser::AST::LambdaExpr::IsMutable::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->isMutable = value;
}

bool CppSharp::Parser::AST::LambdaExpr::HasExplicitParameters::get()
{
    return ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->hasExplicitParameters;
}

void CppSharp::Parser::AST::LambdaExpr::HasExplicitParameters::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->hasExplicitParameters = value;
}

bool CppSharp::Parser::AST::LambdaExpr::HasExplicitResultType::get()
{
    return ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->hasExplicitResultType;
}

void CppSharp::Parser::AST::LambdaExpr::HasExplicitResultType::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->hasExplicitResultType = value;
}

unsigned int CppSharp::Parser::AST::LambdaExpr::GetcaptureInitsCount::get()
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::LambdaExpr*)NativePtr)->getcapture_initsCount();
    return ___ret;
}

CppSharp::Parser::AST::CXXScalarValueInitExpr::CXXScalarValueInitExpr(class ::CppSharp::CppParser::AST::CXXScalarValueInitExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXScalarValueInitExpr^ CppSharp::Parser::AST::CXXScalarValueInitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXScalarValueInitExpr((class ::CppSharp::CppParser::AST::CXXScalarValueInitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXScalarValueInitExpr::CXXScalarValueInitExpr(class ::CppSharp::CppParser::AST::CXXScalarValueInitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXScalarValueInitExpr^ CppSharp::Parser::AST::CXXScalarValueInitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXScalarValueInitExpr((class ::CppSharp::CppParser::AST::CXXScalarValueInitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXScalarValueInitExpr::~CXXScalarValueInitExpr()
{
}

CppSharp::Parser::AST::CXXScalarValueInitExpr::CXXScalarValueInitExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXScalarValueInitExpr();
}

CppSharp::Parser::AST::CXXScalarValueInitExpr::CXXScalarValueInitExpr(CppSharp::Parser::AST::CXXScalarValueInitExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXScalarValueInitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXScalarValueInitExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXScalarValueInitExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXScalarValueInitExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::CXXScalarValueInitExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXScalarValueInitExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::CXXNewExpr::CXXNewExpr(class ::CppSharp::CppParser::AST::CXXNewExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXNewExpr^ CppSharp::Parser::AST::CXXNewExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXNewExpr((class ::CppSharp::CppParser::AST::CXXNewExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXNewExpr::CXXNewExpr(class ::CppSharp::CppParser::AST::CXXNewExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXNewExpr^ CppSharp::Parser::AST::CXXNewExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXNewExpr((class ::CppSharp::CppParser::AST::CXXNewExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXNewExpr::~CXXNewExpr()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CXXNewExpr*) __nativePtr;
    }
}

CppSharp::Parser::AST::CXXNewExpr::CXXNewExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXNewExpr();
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXNewExpr::GetplacementArguments(unsigned int i)
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->getplacement_arguments(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)___ret);
}

void CppSharp::Parser::AST::CXXNewExpr::AddplacementArguments(CppSharp::Parser::AST::Expr^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::Expr*)s->NativePtr;
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->addplacement_arguments(__arg0);
}

void CppSharp::Parser::AST::CXXNewExpr::ClearplacementArguments()
{
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->clearplacement_arguments();
}

CppSharp::Parser::AST::CXXNewExpr::CXXNewExpr(CppSharp::Parser::AST::CXXNewExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXNewExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXNewExpr(__arg0);
}

::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ CppSharp::Parser::AST::CXXNewExpr::PlacementArguments::get()
{
    auto _tmp__placement_arguments = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>();
    auto __list0 = ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->placement_arguments;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)_element);
        _tmp__placement_arguments->Add(_marshalElement);
    }
    return _tmp__placement_arguments;
}

void CppSharp::Parser::AST::CXXNewExpr::PlacementArguments::set(::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::Expr*>();
    for each(CppSharp::Parser::AST::Expr^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::Expr*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->placement_arguments = _tmpvalue;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::CXXNewExpr::AllocatedType::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->allocatedType == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->allocatedType);
}

void CppSharp::Parser::AST::CXXNewExpr::AllocatedType::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->allocatedType = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

CppSharp::Parser::AST::Function^ CppSharp::Parser::AST::CXXNewExpr::OperatorNew::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->operatorNew == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Function((class ::CppSharp::CppParser::AST::Function*)((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->operatorNew);
}

void CppSharp::Parser::AST::CXXNewExpr::OperatorNew::set(CppSharp::Parser::AST::Function^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->operatorNew = (class ::CppSharp::CppParser::AST::Function*)value->NativePtr;
}

CppSharp::Parser::AST::Function^ CppSharp::Parser::AST::CXXNewExpr::OperatorDelete::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->operatorDelete == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Function((class ::CppSharp::CppParser::AST::Function*)((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->operatorDelete);
}

void CppSharp::Parser::AST::CXXNewExpr::OperatorDelete::set(CppSharp::Parser::AST::Function^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->operatorDelete = (class ::CppSharp::CppParser::AST::Function*)value->NativePtr;
}

bool CppSharp::Parser::AST::CXXNewExpr::IsArray::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->isArray;
}

void CppSharp::Parser::AST::CXXNewExpr::IsArray::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->isArray = value;
}

unsigned int CppSharp::Parser::AST::CXXNewExpr::NumPlacementArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->numPlacementArgs;
}

void CppSharp::Parser::AST::CXXNewExpr::NumPlacementArgs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->numPlacementArgs = value;
}

bool CppSharp::Parser::AST::CXXNewExpr::IsParenTypeId::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->isParenTypeId;
}

void CppSharp::Parser::AST::CXXNewExpr::IsParenTypeId::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->isParenTypeId = value;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CXXNewExpr::TypeIdParens::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->typeIdParens == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->typeIdParens);
}

void CppSharp::Parser::AST::CXXNewExpr::TypeIdParens::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->typeIdParens = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

bool CppSharp::Parser::AST::CXXNewExpr::IsGlobalNew::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->isGlobalNew;
}

void CppSharp::Parser::AST::CXXNewExpr::IsGlobalNew::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->isGlobalNew = value;
}

bool CppSharp::Parser::AST::CXXNewExpr::HasInitializer::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->hasInitializer;
}

void CppSharp::Parser::AST::CXXNewExpr::HasInitializer::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->hasInitializer = value;
}

CppSharp::Parser::AST::CXXNewExpr::InitializationStyle CppSharp::Parser::AST::CXXNewExpr::initializationStyle::get()
{
    return (CppSharp::Parser::AST::CXXNewExpr::InitializationStyle)((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->initializationStyle;
}

void CppSharp::Parser::AST::CXXNewExpr::initializationStyle::set(CppSharp::Parser::AST::CXXNewExpr::InitializationStyle value)
{
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->initializationStyle = (enum ::CppSharp::CppParser::AST::CXXNewExpr::InitializationStyle)value;
}

CppSharp::Parser::AST::CXXConstructExpr^ CppSharp::Parser::AST::CXXNewExpr::ConstructExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->constructExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::CXXConstructExpr((class ::CppSharp::CppParser::AST::CXXConstructExpr*)((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->constructExpr);
}

void CppSharp::Parser::AST::CXXNewExpr::ConstructExpr::set(CppSharp::Parser::AST::CXXConstructExpr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->constructExpr = (class ::CppSharp::CppParser::AST::CXXConstructExpr*)value->NativePtr;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CXXNewExpr::DirectInitRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->directInitRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->directInitRange);
}

void CppSharp::Parser::AST::CXXNewExpr::DirectInitRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->directInitRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CXXNewExpr::SourceRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->sourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->sourceRange);
}

void CppSharp::Parser::AST::CXXNewExpr::SourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->sourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

unsigned int CppSharp::Parser::AST::CXXNewExpr::GetplacementArgumentsCount::get()
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CXXNewExpr*)NativePtr)->getplacement_argumentsCount();
    return ___ret;
}

CppSharp::Parser::AST::CXXDeleteExpr::CXXDeleteExpr(class ::CppSharp::CppParser::AST::CXXDeleteExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXDeleteExpr^ CppSharp::Parser::AST::CXXDeleteExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXDeleteExpr((class ::CppSharp::CppParser::AST::CXXDeleteExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXDeleteExpr::CXXDeleteExpr(class ::CppSharp::CppParser::AST::CXXDeleteExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXDeleteExpr^ CppSharp::Parser::AST::CXXDeleteExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXDeleteExpr((class ::CppSharp::CppParser::AST::CXXDeleteExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXDeleteExpr::~CXXDeleteExpr()
{
}

CppSharp::Parser::AST::CXXDeleteExpr::CXXDeleteExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXDeleteExpr();
}

CppSharp::Parser::AST::CXXDeleteExpr::CXXDeleteExpr(CppSharp::Parser::AST::CXXDeleteExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXDeleteExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXDeleteExpr(__arg0);
}

bool CppSharp::Parser::AST::CXXDeleteExpr::IsGlobalDelete::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXDeleteExpr*)NativePtr)->isGlobalDelete;
}

void CppSharp::Parser::AST::CXXDeleteExpr::IsGlobalDelete::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXDeleteExpr*)NativePtr)->isGlobalDelete = value;
}

bool CppSharp::Parser::AST::CXXDeleteExpr::IsArrayForm::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXDeleteExpr*)NativePtr)->isArrayForm;
}

void CppSharp::Parser::AST::CXXDeleteExpr::IsArrayForm::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXDeleteExpr*)NativePtr)->isArrayForm = value;
}

bool CppSharp::Parser::AST::CXXDeleteExpr::IsArrayFormAsWritten::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXDeleteExpr*)NativePtr)->isArrayFormAsWritten;
}

void CppSharp::Parser::AST::CXXDeleteExpr::IsArrayFormAsWritten::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXDeleteExpr*)NativePtr)->isArrayFormAsWritten = value;
}

CppSharp::Parser::AST::Function^ CppSharp::Parser::AST::CXXDeleteExpr::OperatorDelete::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXDeleteExpr*)NativePtr)->operatorDelete == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Function((class ::CppSharp::CppParser::AST::Function*)((class ::CppSharp::CppParser::AST::CXXDeleteExpr*)NativePtr)->operatorDelete);
}

void CppSharp::Parser::AST::CXXDeleteExpr::OperatorDelete::set(CppSharp::Parser::AST::Function^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXDeleteExpr*)NativePtr)->operatorDelete = (class ::CppSharp::CppParser::AST::Function*)value->NativePtr;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::CXXDeleteExpr::DestroyedType::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXDeleteExpr*)NativePtr)->destroyedType == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::CXXDeleteExpr*)NativePtr)->destroyedType);
}

void CppSharp::Parser::AST::CXXDeleteExpr::DestroyedType::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXDeleteExpr*)NativePtr)->destroyedType = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

CppSharp::Parser::AST::CXXPseudoDestructorExpr::CXXPseudoDestructorExpr(class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXPseudoDestructorExpr^ CppSharp::Parser::AST::CXXPseudoDestructorExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXPseudoDestructorExpr((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXPseudoDestructorExpr::CXXPseudoDestructorExpr(class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXPseudoDestructorExpr^ CppSharp::Parser::AST::CXXPseudoDestructorExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXPseudoDestructorExpr((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXPseudoDestructorExpr::~CXXPseudoDestructorExpr()
{
}

CppSharp::Parser::AST::CXXPseudoDestructorExpr::CXXPseudoDestructorExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr();
}

CppSharp::Parser::AST::CXXPseudoDestructorExpr::CXXPseudoDestructorExpr(CppSharp::Parser::AST::CXXPseudoDestructorExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXPseudoDestructorExpr::Base::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->base == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->base);
}

void CppSharp::Parser::AST::CXXPseudoDestructorExpr::Base::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->base = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

bool CppSharp::Parser::AST::CXXPseudoDestructorExpr::HasQualifier::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->hasQualifier;
}

void CppSharp::Parser::AST::CXXPseudoDestructorExpr::HasQualifier::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->hasQualifier = value;
}

bool CppSharp::Parser::AST::CXXPseudoDestructorExpr::IsArrow::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->isArrow;
}

void CppSharp::Parser::AST::CXXPseudoDestructorExpr::IsArrow::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->isArrow = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXPseudoDestructorExpr::OperatorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->operatorLoc);
}

void CppSharp::Parser::AST::CXXPseudoDestructorExpr::OperatorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->operatorLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXPseudoDestructorExpr::ColonColonLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->colonColonLoc);
}

void CppSharp::Parser::AST::CXXPseudoDestructorExpr::ColonColonLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->colonColonLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXPseudoDestructorExpr::TildeLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->tildeLoc);
}

void CppSharp::Parser::AST::CXXPseudoDestructorExpr::TildeLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->tildeLoc = _marshal0;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::CXXPseudoDestructorExpr::DestroyedType::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->destroyedType == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->destroyedType);
}

void CppSharp::Parser::AST::CXXPseudoDestructorExpr::DestroyedType::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->destroyedType = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXPseudoDestructorExpr::DestroyedTypeLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->destroyedTypeLoc);
}

void CppSharp::Parser::AST::CXXPseudoDestructorExpr::DestroyedTypeLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXPseudoDestructorExpr*)NativePtr)->destroyedTypeLoc = _marshal0;
}

CppSharp::Parser::AST::TypeTraitExpr::TypeTraitExpr(class ::CppSharp::CppParser::AST::TypeTraitExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::TypeTraitExpr^ CppSharp::Parser::AST::TypeTraitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::TypeTraitExpr((class ::CppSharp::CppParser::AST::TypeTraitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::TypeTraitExpr::TypeTraitExpr(class ::CppSharp::CppParser::AST::TypeTraitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::TypeTraitExpr^ CppSharp::Parser::AST::TypeTraitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::TypeTraitExpr((class ::CppSharp::CppParser::AST::TypeTraitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::TypeTraitExpr::~TypeTraitExpr()
{
}

CppSharp::Parser::AST::TypeTraitExpr::TypeTraitExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::TypeTraitExpr();
}

CppSharp::Parser::AST::TypeTraitExpr::TypeTraitExpr(CppSharp::Parser::AST::TypeTraitExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::TypeTraitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::TypeTraitExpr(__arg0);
}

bool CppSharp::Parser::AST::TypeTraitExpr::Value::get()
{
    return ((class ::CppSharp::CppParser::AST::TypeTraitExpr*)NativePtr)->value;
}

void CppSharp::Parser::AST::TypeTraitExpr::Value::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::TypeTraitExpr*)NativePtr)->value = value;
}

unsigned int CppSharp::Parser::AST::TypeTraitExpr::NumArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::TypeTraitExpr*)NativePtr)->numArgs;
}

void CppSharp::Parser::AST::TypeTraitExpr::NumArgs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::TypeTraitExpr*)NativePtr)->numArgs = value;
}

CppSharp::Parser::AST::ArrayTypeTraitExpr::ArrayTypeTraitExpr(class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ArrayTypeTraitExpr^ CppSharp::Parser::AST::ArrayTypeTraitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ArrayTypeTraitExpr((class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ArrayTypeTraitExpr::ArrayTypeTraitExpr(class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ArrayTypeTraitExpr^ CppSharp::Parser::AST::ArrayTypeTraitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ArrayTypeTraitExpr((class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ArrayTypeTraitExpr::~ArrayTypeTraitExpr()
{
}

CppSharp::Parser::AST::ArrayTypeTraitExpr::ArrayTypeTraitExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr();
}

CppSharp::Parser::AST::ArrayTypeTraitExpr::ArrayTypeTraitExpr(CppSharp::Parser::AST::ArrayTypeTraitExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr(__arg0);
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::ArrayTypeTraitExpr::QueriedType::get()
{
    return (&((class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr*)NativePtr)->queriedType == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr*)NativePtr)->queriedType);
}

void CppSharp::Parser::AST::ArrayTypeTraitExpr::QueriedType::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr*)NativePtr)->queriedType = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

unsigned long long CppSharp::Parser::AST::ArrayTypeTraitExpr::Value::get()
{
    return ((class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr*)NativePtr)->value;
}

void CppSharp::Parser::AST::ArrayTypeTraitExpr::Value::set(unsigned long long value)
{
    ((class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr*)NativePtr)->value = (::uint64_t)value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ArrayTypeTraitExpr::DimensionExpression::get()
{
    return (((class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr*)NativePtr)->dimensionExpression == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr*)NativePtr)->dimensionExpression);
}

void CppSharp::Parser::AST::ArrayTypeTraitExpr::DimensionExpression::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ArrayTypeTraitExpr*)NativePtr)->dimensionExpression = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::ExpressionTraitExpr::ExpressionTraitExpr(class ::CppSharp::CppParser::AST::ExpressionTraitExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::ExpressionTraitExpr^ CppSharp::Parser::AST::ExpressionTraitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ExpressionTraitExpr((class ::CppSharp::CppParser::AST::ExpressionTraitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::ExpressionTraitExpr::ExpressionTraitExpr(class ::CppSharp::CppParser::AST::ExpressionTraitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ExpressionTraitExpr^ CppSharp::Parser::AST::ExpressionTraitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ExpressionTraitExpr((class ::CppSharp::CppParser::AST::ExpressionTraitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ExpressionTraitExpr::~ExpressionTraitExpr()
{
}

CppSharp::Parser::AST::ExpressionTraitExpr::ExpressionTraitExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ExpressionTraitExpr();
}

CppSharp::Parser::AST::ExpressionTraitExpr::ExpressionTraitExpr(CppSharp::Parser::AST::ExpressionTraitExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ExpressionTraitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ExpressionTraitExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::ExpressionTraitExpr::QueriedExpression::get()
{
    return (((class ::CppSharp::CppParser::AST::ExpressionTraitExpr*)NativePtr)->queriedExpression == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::ExpressionTraitExpr*)NativePtr)->queriedExpression);
}

void CppSharp::Parser::AST::ExpressionTraitExpr::QueriedExpression::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::ExpressionTraitExpr*)NativePtr)->queriedExpression = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

bool CppSharp::Parser::AST::ExpressionTraitExpr::Value::get()
{
    return ((class ::CppSharp::CppParser::AST::ExpressionTraitExpr*)NativePtr)->value;
}

void CppSharp::Parser::AST::ExpressionTraitExpr::Value::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::ExpressionTraitExpr*)NativePtr)->value = value;
}

CppSharp::Parser::AST::OverloadExpr::FindResult::FindResult(class ::CppSharp::CppParser::AST::OverloadExpr::FindResult* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharp::Parser::AST::OverloadExpr::FindResult^ CppSharp::Parser::AST::OverloadExpr::FindResult::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::OverloadExpr::FindResult((class ::CppSharp::CppParser::AST::OverloadExpr::FindResult*) native.ToPointer());
}

CppSharp::Parser::AST::OverloadExpr::FindResult::FindResult(class ::CppSharp::CppParser::AST::OverloadExpr::FindResult* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

CppSharp::Parser::AST::OverloadExpr::FindResult^ CppSharp::Parser::AST::OverloadExpr::FindResult::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::OverloadExpr::FindResult((class ::CppSharp::CppParser::AST::OverloadExpr::FindResult*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::OverloadExpr::FindResult::~FindResult()
{
    delete NativePtr;
}

CppSharp::Parser::AST::OverloadExpr::FindResult::FindResult()
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::OverloadExpr::FindResult();
}

CppSharp::Parser::AST::OverloadExpr::FindResult::FindResult(CppSharp::Parser::AST::OverloadExpr::FindResult^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::OverloadExpr::FindResult*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::OverloadExpr::FindResult(__arg0);
}

::System::IntPtr CppSharp::Parser::AST::OverloadExpr::FindResult::__Instance::get()
{
    return ::System::IntPtr(NativePtr);
}

void CppSharp::Parser::AST::OverloadExpr::FindResult::__Instance::set(::System::IntPtr object)
{
    NativePtr = (class ::CppSharp::CppParser::AST::OverloadExpr::FindResult*)object.ToPointer();
}
CppSharp::Parser::AST::OverloadExpr::OverloadExpr(class ::CppSharp::CppParser::AST::OverloadExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::OverloadExpr^ CppSharp::Parser::AST::OverloadExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::OverloadExpr((class ::CppSharp::CppParser::AST::OverloadExpr*) native.ToPointer());
}

CppSharp::Parser::AST::OverloadExpr::OverloadExpr(class ::CppSharp::CppParser::AST::OverloadExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::OverloadExpr^ CppSharp::Parser::AST::OverloadExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::OverloadExpr((class ::CppSharp::CppParser::AST::OverloadExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::OverloadExpr::~OverloadExpr()
{
}

CppSharp::Parser::AST::OverloadExpr::OverloadExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::OverloadExpr();
}

CppSharp::Parser::AST::OverloadExpr::OverloadExpr(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::OverloadExpr(__arg0);
}

CppSharp::Parser::AST::OverloadExpr::OverloadExpr(CppSharp::Parser::AST::OverloadExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::OverloadExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::OverloadExpr(__arg0);
}

CppSharp::Parser::AST::OverloadExpr::operator CppSharp::Parser::AST::OverloadExpr^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::OverloadExpr) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::OverloadExpr(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::OverloadExpr((class ::CppSharp::CppParser::AST::OverloadExpr*)_____ret, true);
}

unsigned int CppSharp::Parser::AST::OverloadExpr::NumDecls::get()
{
    return ((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->numDecls;
}

void CppSharp::Parser::AST::OverloadExpr::NumDecls::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->numDecls = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::OverloadExpr::NameLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->nameLoc);
}

void CppSharp::Parser::AST::OverloadExpr::NameLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->nameLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::OverloadExpr::TemplateKeywordLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->templateKeywordLoc);
}

void CppSharp::Parser::AST::OverloadExpr::TemplateKeywordLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->templateKeywordLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::OverloadExpr::LAngleLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->lAngleLoc);
}

void CppSharp::Parser::AST::OverloadExpr::LAngleLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->lAngleLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::OverloadExpr::RAngleLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->rAngleLoc);
}

void CppSharp::Parser::AST::OverloadExpr::RAngleLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->rAngleLoc = _marshal0;
}

bool CppSharp::Parser::AST::OverloadExpr::HasTemplateKeyword::get()
{
    return ((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->hasTemplateKeyword;
}

void CppSharp::Parser::AST::OverloadExpr::HasTemplateKeyword::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->hasTemplateKeyword = value;
}

bool CppSharp::Parser::AST::OverloadExpr::HasExplicitTemplateArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->hasExplicitTemplateArgs;
}

void CppSharp::Parser::AST::OverloadExpr::HasExplicitTemplateArgs::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->hasExplicitTemplateArgs = value;
}

unsigned int CppSharp::Parser::AST::OverloadExpr::NumTemplateArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->numTemplateArgs;
}

void CppSharp::Parser::AST::OverloadExpr::NumTemplateArgs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::OverloadExpr*)NativePtr)->numTemplateArgs = value;
}

CppSharp::Parser::AST::UnresolvedLookupExpr::UnresolvedLookupExpr(class ::CppSharp::CppParser::AST::UnresolvedLookupExpr* native)
    : CppSharp::Parser::AST::OverloadExpr((::CppSharp::CppParser::AST::OverloadExpr*)native)
{
}

CppSharp::Parser::AST::UnresolvedLookupExpr^ CppSharp::Parser::AST::UnresolvedLookupExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::UnresolvedLookupExpr((class ::CppSharp::CppParser::AST::UnresolvedLookupExpr*) native.ToPointer());
}

CppSharp::Parser::AST::UnresolvedLookupExpr::UnresolvedLookupExpr(class ::CppSharp::CppParser::AST::UnresolvedLookupExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::OverloadExpr((::CppSharp::CppParser::AST::OverloadExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::UnresolvedLookupExpr^ CppSharp::Parser::AST::UnresolvedLookupExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::UnresolvedLookupExpr((class ::CppSharp::CppParser::AST::UnresolvedLookupExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::UnresolvedLookupExpr::~UnresolvedLookupExpr()
{
}

CppSharp::Parser::AST::UnresolvedLookupExpr::UnresolvedLookupExpr()
    : CppSharp::Parser::AST::OverloadExpr((::CppSharp::CppParser::AST::OverloadExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::UnresolvedLookupExpr();
}

CppSharp::Parser::AST::UnresolvedLookupExpr::UnresolvedLookupExpr(CppSharp::Parser::AST::UnresolvedLookupExpr^ _0)
    : CppSharp::Parser::AST::OverloadExpr((::CppSharp::CppParser::AST::OverloadExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::UnresolvedLookupExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::UnresolvedLookupExpr(__arg0);
}

bool CppSharp::Parser::AST::UnresolvedLookupExpr::RequiresADL::get()
{
    return ((class ::CppSharp::CppParser::AST::UnresolvedLookupExpr*)NativePtr)->requiresADL;
}

void CppSharp::Parser::AST::UnresolvedLookupExpr::RequiresADL::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnresolvedLookupExpr*)NativePtr)->requiresADL = value;
}

bool CppSharp::Parser::AST::UnresolvedLookupExpr::IsOverloaded::get()
{
    return ((class ::CppSharp::CppParser::AST::UnresolvedLookupExpr*)NativePtr)->isOverloaded;
}

void CppSharp::Parser::AST::UnresolvedLookupExpr::IsOverloaded::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnresolvedLookupExpr*)NativePtr)->isOverloaded = value;
}

CppSharp::Parser::AST::DependentScopeDeclRefExpr::DependentScopeDeclRefExpr(class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::DependentScopeDeclRefExpr^ CppSharp::Parser::AST::DependentScopeDeclRefExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::DependentScopeDeclRefExpr((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*) native.ToPointer());
}

CppSharp::Parser::AST::DependentScopeDeclRefExpr::DependentScopeDeclRefExpr(class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::DependentScopeDeclRefExpr^ CppSharp::Parser::AST::DependentScopeDeclRefExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::DependentScopeDeclRefExpr((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::DependentScopeDeclRefExpr::~DependentScopeDeclRefExpr()
{
}

CppSharp::Parser::AST::DependentScopeDeclRefExpr::DependentScopeDeclRefExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr();
}

CppSharp::Parser::AST::DependentScopeDeclRefExpr::DependentScopeDeclRefExpr(CppSharp::Parser::AST::DependentScopeDeclRefExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DependentScopeDeclRefExpr::Location::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->location);
}

void CppSharp::Parser::AST::DependentScopeDeclRefExpr::Location::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->location = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DependentScopeDeclRefExpr::TemplateKeywordLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->templateKeywordLoc);
}

void CppSharp::Parser::AST::DependentScopeDeclRefExpr::TemplateKeywordLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->templateKeywordLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DependentScopeDeclRefExpr::LAngleLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->lAngleLoc);
}

void CppSharp::Parser::AST::DependentScopeDeclRefExpr::LAngleLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->lAngleLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DependentScopeDeclRefExpr::RAngleLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->rAngleLoc);
}

void CppSharp::Parser::AST::DependentScopeDeclRefExpr::RAngleLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->rAngleLoc = _marshal0;
}

bool CppSharp::Parser::AST::DependentScopeDeclRefExpr::HasTemplateKeyword::get()
{
    return ((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->hasTemplateKeyword;
}

void CppSharp::Parser::AST::DependentScopeDeclRefExpr::HasTemplateKeyword::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->hasTemplateKeyword = value;
}

bool CppSharp::Parser::AST::DependentScopeDeclRefExpr::HasExplicitTemplateArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->hasExplicitTemplateArgs;
}

void CppSharp::Parser::AST::DependentScopeDeclRefExpr::HasExplicitTemplateArgs::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->hasExplicitTemplateArgs = value;
}

unsigned int CppSharp::Parser::AST::DependentScopeDeclRefExpr::NumTemplateArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->numTemplateArgs;
}

void CppSharp::Parser::AST::DependentScopeDeclRefExpr::NumTemplateArgs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::DependentScopeDeclRefExpr*)NativePtr)->numTemplateArgs = value;
}

CppSharp::Parser::AST::ExprWithCleanups::ExprWithCleanups(class ::CppSharp::CppParser::AST::ExprWithCleanups* native)
    : CppSharp::Parser::AST::FullExpr((::CppSharp::CppParser::AST::FullExpr*)native)
{
}

CppSharp::Parser::AST::ExprWithCleanups^ CppSharp::Parser::AST::ExprWithCleanups::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::ExprWithCleanups((class ::CppSharp::CppParser::AST::ExprWithCleanups*) native.ToPointer());
}

CppSharp::Parser::AST::ExprWithCleanups::ExprWithCleanups(class ::CppSharp::CppParser::AST::ExprWithCleanups* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::FullExpr((::CppSharp::CppParser::AST::FullExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::ExprWithCleanups^ CppSharp::Parser::AST::ExprWithCleanups::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::ExprWithCleanups((class ::CppSharp::CppParser::AST::ExprWithCleanups*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::ExprWithCleanups::~ExprWithCleanups()
{
}

CppSharp::Parser::AST::ExprWithCleanups::ExprWithCleanups()
    : CppSharp::Parser::AST::FullExpr((::CppSharp::CppParser::AST::FullExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::ExprWithCleanups();
}

CppSharp::Parser::AST::ExprWithCleanups::ExprWithCleanups(CppSharp::Parser::AST::ExprWithCleanups^ _0)
    : CppSharp::Parser::AST::FullExpr((::CppSharp::CppParser::AST::FullExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::ExprWithCleanups*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::ExprWithCleanups(__arg0);
}

unsigned int CppSharp::Parser::AST::ExprWithCleanups::NumObjects::get()
{
    return ((class ::CppSharp::CppParser::AST::ExprWithCleanups*)NativePtr)->numObjects;
}

void CppSharp::Parser::AST::ExprWithCleanups::NumObjects::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::ExprWithCleanups*)NativePtr)->numObjects = value;
}

bool CppSharp::Parser::AST::ExprWithCleanups::CleanupsHaveSideEffects::get()
{
    return ((class ::CppSharp::CppParser::AST::ExprWithCleanups*)NativePtr)->cleanupsHaveSideEffects;
}

void CppSharp::Parser::AST::ExprWithCleanups::CleanupsHaveSideEffects::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::ExprWithCleanups*)NativePtr)->cleanupsHaveSideEffects = value;
}

CppSharp::Parser::AST::CXXUnresolvedConstructExpr::CXXUnresolvedConstructExpr(class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXUnresolvedConstructExpr^ CppSharp::Parser::AST::CXXUnresolvedConstructExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXUnresolvedConstructExpr((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXUnresolvedConstructExpr::CXXUnresolvedConstructExpr(class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXUnresolvedConstructExpr^ CppSharp::Parser::AST::CXXUnresolvedConstructExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXUnresolvedConstructExpr((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXUnresolvedConstructExpr::~CXXUnresolvedConstructExpr()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*) __nativePtr;
    }
}

CppSharp::Parser::AST::CXXUnresolvedConstructExpr::CXXUnresolvedConstructExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr();
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXUnresolvedConstructExpr::Getarguments(unsigned int i)
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->getarguments(i);
    if (___ret == nullptr) return nullptr;
    return (___ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)___ret);
}

void CppSharp::Parser::AST::CXXUnresolvedConstructExpr::Addarguments(CppSharp::Parser::AST::Expr^ s)
{
    if (ReferenceEquals(s, nullptr))
        throw gcnew ::System::ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
    auto __arg0 = (class ::CppSharp::CppParser::AST::Expr*)s->NativePtr;
    ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->addarguments(__arg0);
}

void CppSharp::Parser::AST::CXXUnresolvedConstructExpr::Cleararguments()
{
    ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->cleararguments();
}

CppSharp::Parser::AST::CXXUnresolvedConstructExpr::CXXUnresolvedConstructExpr(CppSharp::Parser::AST::CXXUnresolvedConstructExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr(__arg0);
}

::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ CppSharp::Parser::AST::CXXUnresolvedConstructExpr::Arguments::get()
{
    auto _tmp__arguments = gcnew ::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>();
    auto __list0 = ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->arguments;
    for(auto _element : __list0)
    {
        auto _marshalElement = (_element == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)_element);
        _tmp__arguments->Add(_marshalElement);
    }
    return _tmp__arguments;
}

void CppSharp::Parser::AST::CXXUnresolvedConstructExpr::Arguments::set(::System::Collections::Generic::List<CppSharp::Parser::AST::Expr^>^ value)
{
    auto _tmpvalue = std::vector<::CppSharp::CppParser::AST::Expr*>();
    for each(CppSharp::Parser::AST::Expr^ _element in value)
    {
        auto _marshalElement = (class ::CppSharp::CppParser::AST::Expr*)_element->NativePtr;
        _tmpvalue.push_back(_marshalElement);
    }
    ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->arguments = _tmpvalue;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::CXXUnresolvedConstructExpr::TypeAsWritten::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->typeAsWritten == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->typeAsWritten);
}

void CppSharp::Parser::AST::CXXUnresolvedConstructExpr::TypeAsWritten::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->typeAsWritten = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXUnresolvedConstructExpr::LParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->lParenLoc);
}

void CppSharp::Parser::AST::CXXUnresolvedConstructExpr::LParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->lParenLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXUnresolvedConstructExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::CXXUnresolvedConstructExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->rParenLoc = _marshal0;
}

bool CppSharp::Parser::AST::CXXUnresolvedConstructExpr::IsListInitialization::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->isListInitialization;
}

void CppSharp::Parser::AST::CXXUnresolvedConstructExpr::IsListInitialization::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->isListInitialization = value;
}

unsigned int CppSharp::Parser::AST::CXXUnresolvedConstructExpr::NumArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->numArgs;
}

void CppSharp::Parser::AST::CXXUnresolvedConstructExpr::NumArgs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->numArgs = value;
}

unsigned int CppSharp::Parser::AST::CXXUnresolvedConstructExpr::GetargumentsCount::get()
{
    auto ___ret = ((class ::CppSharp::CppParser::AST::CXXUnresolvedConstructExpr*)NativePtr)->getargumentsCount();
    return ___ret;
}

CppSharp::Parser::AST::CXXDependentScopeMemberExpr::CXXDependentScopeMemberExpr(class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXDependentScopeMemberExpr^ CppSharp::Parser::AST::CXXDependentScopeMemberExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXDependentScopeMemberExpr((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXDependentScopeMemberExpr::CXXDependentScopeMemberExpr(class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXDependentScopeMemberExpr^ CppSharp::Parser::AST::CXXDependentScopeMemberExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXDependentScopeMemberExpr((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXDependentScopeMemberExpr::~CXXDependentScopeMemberExpr()
{
}

CppSharp::Parser::AST::CXXDependentScopeMemberExpr::CXXDependentScopeMemberExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr();
}

CppSharp::Parser::AST::CXXDependentScopeMemberExpr::CXXDependentScopeMemberExpr(CppSharp::Parser::AST::CXXDependentScopeMemberExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr(__arg0);
}

bool CppSharp::Parser::AST::CXXDependentScopeMemberExpr::IsImplicitAccess::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->isImplicitAccess;
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::IsImplicitAccess::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->isImplicitAccess = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXDependentScopeMemberExpr::Base::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->base == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->base);
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::Base::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->base = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::CXXDependentScopeMemberExpr::BaseType::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->baseType == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->baseType);
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::BaseType::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->baseType = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

bool CppSharp::Parser::AST::CXXDependentScopeMemberExpr::IsArrow::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->isArrow;
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::IsArrow::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->isArrow = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXDependentScopeMemberExpr::OperatorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->operatorLoc);
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::OperatorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->operatorLoc = _marshal0;
}

CppSharp::Parser::AST::Declaration^ CppSharp::Parser::AST::CXXDependentScopeMemberExpr::FirstQualifierFoundInScope::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->firstQualifierFoundInScope == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Declaration((class ::CppSharp::CppParser::AST::Declaration*)((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->firstQualifierFoundInScope);
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::FirstQualifierFoundInScope::set(CppSharp::Parser::AST::Declaration^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->firstQualifierFoundInScope = (class ::CppSharp::CppParser::AST::Declaration*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXDependentScopeMemberExpr::MemberLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->memberLoc);
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::MemberLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->memberLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXDependentScopeMemberExpr::TemplateKeywordLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->templateKeywordLoc);
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::TemplateKeywordLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->templateKeywordLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXDependentScopeMemberExpr::LAngleLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->lAngleLoc);
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::LAngleLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->lAngleLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXDependentScopeMemberExpr::RAngleLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->rAngleLoc);
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::RAngleLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->rAngleLoc = _marshal0;
}

bool CppSharp::Parser::AST::CXXDependentScopeMemberExpr::HasTemplateKeyword::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->hasTemplateKeyword;
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::HasTemplateKeyword::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->hasTemplateKeyword = value;
}

bool CppSharp::Parser::AST::CXXDependentScopeMemberExpr::HasExplicitTemplateArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->hasExplicitTemplateArgs;
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::HasExplicitTemplateArgs::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->hasExplicitTemplateArgs = value;
}

unsigned int CppSharp::Parser::AST::CXXDependentScopeMemberExpr::NumTemplateArgs::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->numTemplateArgs;
}

void CppSharp::Parser::AST::CXXDependentScopeMemberExpr::NumTemplateArgs::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::CXXDependentScopeMemberExpr*)NativePtr)->numTemplateArgs = value;
}

CppSharp::Parser::AST::UnresolvedMemberExpr::UnresolvedMemberExpr(class ::CppSharp::CppParser::AST::UnresolvedMemberExpr* native)
    : CppSharp::Parser::AST::OverloadExpr((::CppSharp::CppParser::AST::OverloadExpr*)native)
{
}

CppSharp::Parser::AST::UnresolvedMemberExpr^ CppSharp::Parser::AST::UnresolvedMemberExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::UnresolvedMemberExpr((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*) native.ToPointer());
}

CppSharp::Parser::AST::UnresolvedMemberExpr::UnresolvedMemberExpr(class ::CppSharp::CppParser::AST::UnresolvedMemberExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::OverloadExpr((::CppSharp::CppParser::AST::OverloadExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::UnresolvedMemberExpr^ CppSharp::Parser::AST::UnresolvedMemberExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::UnresolvedMemberExpr((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::UnresolvedMemberExpr::~UnresolvedMemberExpr()
{
}

CppSharp::Parser::AST::UnresolvedMemberExpr::UnresolvedMemberExpr()
    : CppSharp::Parser::AST::OverloadExpr((::CppSharp::CppParser::AST::OverloadExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::UnresolvedMemberExpr();
}

CppSharp::Parser::AST::UnresolvedMemberExpr::UnresolvedMemberExpr(CppSharp::Parser::AST::UnresolvedMemberExpr^ _0)
    : CppSharp::Parser::AST::OverloadExpr((::CppSharp::CppParser::AST::OverloadExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::UnresolvedMemberExpr(__arg0);
}

bool CppSharp::Parser::AST::UnresolvedMemberExpr::IsImplicitAccess::get()
{
    return ((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->isImplicitAccess;
}

void CppSharp::Parser::AST::UnresolvedMemberExpr::IsImplicitAccess::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->isImplicitAccess = value;
}

CppSharp::Parser::AST::QualifiedType^ CppSharp::Parser::AST::UnresolvedMemberExpr::BaseType::get()
{
    return (&((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->baseType == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::QualifiedType((struct ::CppSharp::CppParser::AST::QualifiedType*)&((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->baseType);
}

void CppSharp::Parser::AST::UnresolvedMemberExpr::BaseType::set(CppSharp::Parser::AST::QualifiedType^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->baseType = *(struct ::CppSharp::CppParser::AST::QualifiedType*)value->NativePtr;
}

bool CppSharp::Parser::AST::UnresolvedMemberExpr::HasUnresolvedUsing::get()
{
    return ((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->hasUnresolvedUsing;
}

void CppSharp::Parser::AST::UnresolvedMemberExpr::HasUnresolvedUsing::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->hasUnresolvedUsing = value;
}

bool CppSharp::Parser::AST::UnresolvedMemberExpr::IsArrow::get()
{
    return ((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->isArrow;
}

void CppSharp::Parser::AST::UnresolvedMemberExpr::IsArrow::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->isArrow = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::UnresolvedMemberExpr::OperatorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->operatorLoc);
}

void CppSharp::Parser::AST::UnresolvedMemberExpr::OperatorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->operatorLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::UnresolvedMemberExpr::MemberLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->memberLoc);
}

void CppSharp::Parser::AST::UnresolvedMemberExpr::MemberLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->memberLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::UnresolvedMemberExpr::ExprLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->exprLoc);
}

void CppSharp::Parser::AST::UnresolvedMemberExpr::ExprLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::UnresolvedMemberExpr*)NativePtr)->exprLoc = _marshal0;
}

CppSharp::Parser::AST::CXXNoexceptExpr::CXXNoexceptExpr(class ::CppSharp::CppParser::AST::CXXNoexceptExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXNoexceptExpr^ CppSharp::Parser::AST::CXXNoexceptExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXNoexceptExpr((class ::CppSharp::CppParser::AST::CXXNoexceptExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXNoexceptExpr::CXXNoexceptExpr(class ::CppSharp::CppParser::AST::CXXNoexceptExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXNoexceptExpr^ CppSharp::Parser::AST::CXXNoexceptExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXNoexceptExpr((class ::CppSharp::CppParser::AST::CXXNoexceptExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXNoexceptExpr::~CXXNoexceptExpr()
{
}

CppSharp::Parser::AST::CXXNoexceptExpr::CXXNoexceptExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXNoexceptExpr();
}

CppSharp::Parser::AST::CXXNoexceptExpr::CXXNoexceptExpr(CppSharp::Parser::AST::CXXNoexceptExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXNoexceptExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXNoexceptExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXNoexceptExpr::Operand::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXNoexceptExpr*)NativePtr)->operand == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXNoexceptExpr*)NativePtr)->operand);
}

void CppSharp::Parser::AST::CXXNoexceptExpr::Operand::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXNoexceptExpr*)NativePtr)->operand = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CXXNoexceptExpr::SourceRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXNoexceptExpr*)NativePtr)->sourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CXXNoexceptExpr*)NativePtr)->sourceRange);
}

void CppSharp::Parser::AST::CXXNoexceptExpr::SourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXNoexceptExpr*)NativePtr)->sourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

bool CppSharp::Parser::AST::CXXNoexceptExpr::Value::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXNoexceptExpr*)NativePtr)->value;
}

void CppSharp::Parser::AST::CXXNoexceptExpr::Value::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXNoexceptExpr*)NativePtr)->value = value;
}

CppSharp::Parser::AST::PackExpansionExpr::PackExpansionExpr(class ::CppSharp::CppParser::AST::PackExpansionExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::PackExpansionExpr^ CppSharp::Parser::AST::PackExpansionExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::PackExpansionExpr((class ::CppSharp::CppParser::AST::PackExpansionExpr*) native.ToPointer());
}

CppSharp::Parser::AST::PackExpansionExpr::PackExpansionExpr(class ::CppSharp::CppParser::AST::PackExpansionExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::PackExpansionExpr^ CppSharp::Parser::AST::PackExpansionExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::PackExpansionExpr((class ::CppSharp::CppParser::AST::PackExpansionExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::PackExpansionExpr::~PackExpansionExpr()
{
}

CppSharp::Parser::AST::PackExpansionExpr::PackExpansionExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::PackExpansionExpr();
}

CppSharp::Parser::AST::PackExpansionExpr::PackExpansionExpr(CppSharp::Parser::AST::PackExpansionExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::PackExpansionExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::PackExpansionExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::PackExpansionExpr::EllipsisLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::PackExpansionExpr*)NativePtr)->ellipsisLoc);
}

void CppSharp::Parser::AST::PackExpansionExpr::EllipsisLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::PackExpansionExpr*)NativePtr)->ellipsisLoc = _marshal0;
}

System::Nullable<unsigned int> CppSharp::Parser::AST::PackExpansionExpr::NumExpansions::get()
{
    if (!((class ::CppSharp::CppParser::AST::PackExpansionExpr*)NativePtr)->numExpansions.has_value())
        return {};

    return ((class ::CppSharp::CppParser::AST::PackExpansionExpr*)NativePtr)->numExpansions.value();
}

void CppSharp::Parser::AST::PackExpansionExpr::NumExpansions::set(System::Nullable<unsigned int> value)
{
    if (!value.HasValue)
    {
        ((class ::CppSharp::CppParser::AST::PackExpansionExpr*)NativePtr)->numExpansions = std::nullopt;
        return;
    }
    ((class ::CppSharp::CppParser::AST::PackExpansionExpr*)NativePtr)->numExpansions = value.Value;
}

CppSharp::Parser::AST::SizeOfPackExpr::SizeOfPackExpr(class ::CppSharp::CppParser::AST::SizeOfPackExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::SizeOfPackExpr^ CppSharp::Parser::AST::SizeOfPackExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::SizeOfPackExpr((class ::CppSharp::CppParser::AST::SizeOfPackExpr*) native.ToPointer());
}

CppSharp::Parser::AST::SizeOfPackExpr::SizeOfPackExpr(class ::CppSharp::CppParser::AST::SizeOfPackExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::SizeOfPackExpr^ CppSharp::Parser::AST::SizeOfPackExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::SizeOfPackExpr((class ::CppSharp::CppParser::AST::SizeOfPackExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::SizeOfPackExpr::~SizeOfPackExpr()
{
}

CppSharp::Parser::AST::SizeOfPackExpr::SizeOfPackExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::SizeOfPackExpr();
}

CppSharp::Parser::AST::SizeOfPackExpr::SizeOfPackExpr(CppSharp::Parser::AST::SizeOfPackExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::SizeOfPackExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::SizeOfPackExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SizeOfPackExpr::OperatorLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->operatorLoc);
}

void CppSharp::Parser::AST::SizeOfPackExpr::OperatorLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->operatorLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SizeOfPackExpr::PackLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->packLoc);
}

void CppSharp::Parser::AST::SizeOfPackExpr::PackLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->packLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SizeOfPackExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::SizeOfPackExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::AST::Declaration^ CppSharp::Parser::AST::SizeOfPackExpr::Pack::get()
{
    return (((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->pack == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Declaration((class ::CppSharp::CppParser::AST::Declaration*)((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->pack);
}

void CppSharp::Parser::AST::SizeOfPackExpr::Pack::set(CppSharp::Parser::AST::Declaration^ value)
{
    ((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->pack = (class ::CppSharp::CppParser::AST::Declaration*)value->NativePtr;
}

unsigned int CppSharp::Parser::AST::SizeOfPackExpr::PackLength::get()
{
    return ((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->packLength;
}

void CppSharp::Parser::AST::SizeOfPackExpr::PackLength::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->packLength = value;
}

bool CppSharp::Parser::AST::SizeOfPackExpr::IsPartiallySubstituted::get()
{
    return ((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->isPartiallySubstituted;
}

void CppSharp::Parser::AST::SizeOfPackExpr::IsPartiallySubstituted::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::SizeOfPackExpr*)NativePtr)->isPartiallySubstituted = value;
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::SubstNonTypeTemplateParmExpr(class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr^ CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*) native.ToPointer());
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::SubstNonTypeTemplateParmExpr(class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr^ CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::~SubstNonTypeTemplateParmExpr()
{
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::SubstNonTypeTemplateParmExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr();
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::SubstNonTypeTemplateParmExpr(CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::NameLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->nameLoc);
}

void CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::NameLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->nameLoc = _marshal0;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::Replacement::get()
{
    return (((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->replacement == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->replacement);
}

void CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::Replacement::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->replacement = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Declaration^ CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::AssociatedDecl::get()
{
    return (((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->associatedDecl == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Declaration((class ::CppSharp::CppParser::AST::Declaration*)((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->associatedDecl);
}

void CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::AssociatedDecl::set(CppSharp::Parser::AST::Declaration^ value)
{
    ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->associatedDecl = (class ::CppSharp::CppParser::AST::Declaration*)value->NativePtr;
}

unsigned int CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::Index::get()
{
    return ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->index;
}

void CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::Index::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->index = value;
}

System::Nullable<unsigned int> CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::PackIndex::get()
{
    if (!((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->packIndex.has_value())
        return {};

    return ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->packIndex.value();
}

void CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::PackIndex::set(System::Nullable<unsigned int> value)
{
    if (!value.HasValue)
    {
        ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->packIndex = std::nullopt;
        return;
    }
    ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->packIndex = value.Value;
}

bool CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::IsReferenceParameter::get()
{
    return ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->isReferenceParameter;
}

void CppSharp::Parser::AST::SubstNonTypeTemplateParmExpr::IsReferenceParameter::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmExpr*)NativePtr)->isReferenceParameter = value;
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::SubstNonTypeTemplateParmPackExpr(class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr^ CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*) native.ToPointer());
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::SubstNonTypeTemplateParmPackExpr(class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr^ CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::~SubstNonTypeTemplateParmPackExpr()
{
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::SubstNonTypeTemplateParmPackExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr();
}

CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::SubstNonTypeTemplateParmPackExpr(CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr(__arg0);
}

CppSharp::Parser::AST::Declaration^ CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::AssociatedDecl::get()
{
    return (((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*)NativePtr)->associatedDecl == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Declaration((class ::CppSharp::CppParser::AST::Declaration*)((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*)NativePtr)->associatedDecl);
}

void CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::AssociatedDecl::set(CppSharp::Parser::AST::Declaration^ value)
{
    ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*)NativePtr)->associatedDecl = (class ::CppSharp::CppParser::AST::Declaration*)value->NativePtr;
}

unsigned int CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::Index::get()
{
    return ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*)NativePtr)->index;
}

void CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::Index::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*)NativePtr)->index = value;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::ParameterPackLocation::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*)NativePtr)->parameterPackLocation);
}

void CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::ParameterPackLocation::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*)NativePtr)->parameterPackLocation = _marshal0;
}

CppSharp::Parser::AST::TemplateArgument^ CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::ArgumentPack::get()
{
    return (&((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*)NativePtr)->argumentPack == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::TemplateArgument((struct ::CppSharp::CppParser::AST::TemplateArgument*)&((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*)NativePtr)->argumentPack);
}

void CppSharp::Parser::AST::SubstNonTypeTemplateParmPackExpr::ArgumentPack::set(CppSharp::Parser::AST::TemplateArgument^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::SubstNonTypeTemplateParmPackExpr*)NativePtr)->argumentPack = *(struct ::CppSharp::CppParser::AST::TemplateArgument*)value->NativePtr;
}

CppSharp::Parser::AST::FunctionParmPackExpr::FunctionParmPackExpr(class ::CppSharp::CppParser::AST::FunctionParmPackExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::FunctionParmPackExpr^ CppSharp::Parser::AST::FunctionParmPackExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::FunctionParmPackExpr((class ::CppSharp::CppParser::AST::FunctionParmPackExpr*) native.ToPointer());
}

CppSharp::Parser::AST::FunctionParmPackExpr::FunctionParmPackExpr(class ::CppSharp::CppParser::AST::FunctionParmPackExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::FunctionParmPackExpr^ CppSharp::Parser::AST::FunctionParmPackExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::FunctionParmPackExpr((class ::CppSharp::CppParser::AST::FunctionParmPackExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::FunctionParmPackExpr::~FunctionParmPackExpr()
{
}

CppSharp::Parser::AST::FunctionParmPackExpr::FunctionParmPackExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::FunctionParmPackExpr();
}

CppSharp::Parser::AST::FunctionParmPackExpr::FunctionParmPackExpr(CppSharp::Parser::AST::FunctionParmPackExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::FunctionParmPackExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::FunctionParmPackExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::FunctionParmPackExpr::ParameterPackLocation::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::FunctionParmPackExpr*)NativePtr)->parameterPackLocation);
}

void CppSharp::Parser::AST::FunctionParmPackExpr::ParameterPackLocation::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::FunctionParmPackExpr*)NativePtr)->parameterPackLocation = _marshal0;
}

unsigned int CppSharp::Parser::AST::FunctionParmPackExpr::NumExpansions::get()
{
    return ((class ::CppSharp::CppParser::AST::FunctionParmPackExpr*)NativePtr)->numExpansions;
}

void CppSharp::Parser::AST::FunctionParmPackExpr::NumExpansions::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::FunctionParmPackExpr*)NativePtr)->numExpansions = value;
}

CppSharp::Parser::AST::MaterializeTemporaryExpr::MaterializeTemporaryExpr(class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::MaterializeTemporaryExpr^ CppSharp::Parser::AST::MaterializeTemporaryExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::MaterializeTemporaryExpr((class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr*) native.ToPointer());
}

CppSharp::Parser::AST::MaterializeTemporaryExpr::MaterializeTemporaryExpr(class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::MaterializeTemporaryExpr^ CppSharp::Parser::AST::MaterializeTemporaryExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::MaterializeTemporaryExpr((class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::MaterializeTemporaryExpr::~MaterializeTemporaryExpr()
{
}

CppSharp::Parser::AST::MaterializeTemporaryExpr::MaterializeTemporaryExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr();
}

CppSharp::Parser::AST::MaterializeTemporaryExpr::MaterializeTemporaryExpr(CppSharp::Parser::AST::MaterializeTemporaryExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::MaterializeTemporaryExpr::SubExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr*)NativePtr)->subExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr*)NativePtr)->subExpr);
}

void CppSharp::Parser::AST::MaterializeTemporaryExpr::SubExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr*)NativePtr)->subExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

unsigned int CppSharp::Parser::AST::MaterializeTemporaryExpr::ManglingNumber::get()
{
    return ((class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr*)NativePtr)->manglingNumber;
}

void CppSharp::Parser::AST::MaterializeTemporaryExpr::ManglingNumber::set(unsigned int value)
{
    ((class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr*)NativePtr)->manglingNumber = value;
}

bool CppSharp::Parser::AST::MaterializeTemporaryExpr::IsBoundToLvalueReference::get()
{
    return ((class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr*)NativePtr)->isBoundToLvalueReference;
}

void CppSharp::Parser::AST::MaterializeTemporaryExpr::IsBoundToLvalueReference::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::MaterializeTemporaryExpr*)NativePtr)->isBoundToLvalueReference = value;
}

CppSharp::Parser::AST::CXXFoldExpr::CXXFoldExpr(class ::CppSharp::CppParser::AST::CXXFoldExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXFoldExpr^ CppSharp::Parser::AST::CXXFoldExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXFoldExpr((class ::CppSharp::CppParser::AST::CXXFoldExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXFoldExpr::CXXFoldExpr(class ::CppSharp::CppParser::AST::CXXFoldExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXFoldExpr^ CppSharp::Parser::AST::CXXFoldExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXFoldExpr((class ::CppSharp::CppParser::AST::CXXFoldExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXFoldExpr::~CXXFoldExpr()
{
}

CppSharp::Parser::AST::CXXFoldExpr::CXXFoldExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXFoldExpr();
}

CppSharp::Parser::AST::CXXFoldExpr::CXXFoldExpr(CppSharp::Parser::AST::CXXFoldExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXFoldExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXFoldExpr(__arg0);
}

CppSharp::Parser::AST::UnresolvedLookupExpr^ CppSharp::Parser::AST::CXXFoldExpr::Callee::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->callee == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::UnresolvedLookupExpr((class ::CppSharp::CppParser::AST::UnresolvedLookupExpr*)((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->callee);
}

void CppSharp::Parser::AST::CXXFoldExpr::Callee::set(CppSharp::Parser::AST::UnresolvedLookupExpr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->callee = (class ::CppSharp::CppParser::AST::UnresolvedLookupExpr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXFoldExpr::LHS::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->lHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->lHS);
}

void CppSharp::Parser::AST::CXXFoldExpr::LHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->lHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXFoldExpr::RHS::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->rHS == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->rHS);
}

void CppSharp::Parser::AST::CXXFoldExpr::RHS::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->rHS = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

bool CppSharp::Parser::AST::CXXFoldExpr::IsRightFold::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->isRightFold;
}

void CppSharp::Parser::AST::CXXFoldExpr::IsRightFold::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->isRightFold = value;
}

bool CppSharp::Parser::AST::CXXFoldExpr::IsLeftFold::get()
{
    return ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->isLeftFold;
}

void CppSharp::Parser::AST::CXXFoldExpr::IsLeftFold::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->isLeftFold = value;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXFoldExpr::Pattern::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->pattern == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->pattern);
}

void CppSharp::Parser::AST::CXXFoldExpr::Pattern::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->pattern = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXFoldExpr::Init::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->init == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->init);
}

void CppSharp::Parser::AST::CXXFoldExpr::Init::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->init = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXFoldExpr::LParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->lParenLoc);
}

void CppSharp::Parser::AST::CXXFoldExpr::LParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->lParenLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXFoldExpr::RParenLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->rParenLoc);
}

void CppSharp::Parser::AST::CXXFoldExpr::RParenLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->rParenLoc = _marshal0;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXFoldExpr::EllipsisLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->ellipsisLoc);
}

void CppSharp::Parser::AST::CXXFoldExpr::EllipsisLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->ellipsisLoc = _marshal0;
}

CppSharp::Parser::AST::BinaryOperatorKind CppSharp::Parser::AST::CXXFoldExpr::Operator::get()
{
    return (CppSharp::Parser::AST::BinaryOperatorKind)((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->_operator;
}

void CppSharp::Parser::AST::CXXFoldExpr::Operator::set(CppSharp::Parser::AST::BinaryOperatorKind value)
{
    ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->_operator = (enum ::CppSharp::CppParser::AST::BinaryOperatorKind)value;
}

System::Nullable<unsigned int> CppSharp::Parser::AST::CXXFoldExpr::NumExpansions::get()
{
    if (!((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->numExpansions.has_value())
        return {};

    return ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->numExpansions.value();
}

void CppSharp::Parser::AST::CXXFoldExpr::NumExpansions::set(System::Nullable<unsigned int> value)
{
    if (!value.HasValue)
    {
        ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->numExpansions = std::nullopt;
        return;
    }
    ((class ::CppSharp::CppParser::AST::CXXFoldExpr*)NativePtr)->numExpansions = value.Value;
}

CppSharp::Parser::AST::CXXParenListInitExpr::CXXParenListInitExpr(class ::CppSharp::CppParser::AST::CXXParenListInitExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CXXParenListInitExpr^ CppSharp::Parser::AST::CXXParenListInitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CXXParenListInitExpr((class ::CppSharp::CppParser::AST::CXXParenListInitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CXXParenListInitExpr::CXXParenListInitExpr(class ::CppSharp::CppParser::AST::CXXParenListInitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CXXParenListInitExpr^ CppSharp::Parser::AST::CXXParenListInitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CXXParenListInitExpr((class ::CppSharp::CppParser::AST::CXXParenListInitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CXXParenListInitExpr::~CXXParenListInitExpr()
{
}

CppSharp::Parser::AST::CXXParenListInitExpr::CXXParenListInitExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXParenListInitExpr();
}

CppSharp::Parser::AST::CXXParenListInitExpr::CXXParenListInitExpr(CppSharp::Parser::AST::CXXParenListInitExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CXXParenListInitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CXXParenListInitExpr(__arg0);
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CXXParenListInitExpr::InitLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CXXParenListInitExpr*)NativePtr)->initLoc);
}

void CppSharp::Parser::AST::CXXParenListInitExpr::InitLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CXXParenListInitExpr*)NativePtr)->initLoc = _marshal0;
}

CppSharp::Parser::SourceRange^ CppSharp::Parser::AST::CXXParenListInitExpr::SourceRange::get()
{
    return (&((class ::CppSharp::CppParser::AST::CXXParenListInitExpr*)NativePtr)->sourceRange == nullptr) ? nullptr : gcnew ::CppSharp::Parser::SourceRange((struct ::CppSharp::CppParser::SourceRange*)&((class ::CppSharp::CppParser::AST::CXXParenListInitExpr*)NativePtr)->sourceRange);
}

void CppSharp::Parser::AST::CXXParenListInitExpr::SourceRange::set(CppSharp::Parser::SourceRange^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((class ::CppSharp::CppParser::AST::CXXParenListInitExpr*)NativePtr)->sourceRange = *(struct ::CppSharp::CppParser::SourceRange*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CXXParenListInitExpr::ArrayFiller::get()
{
    return (((class ::CppSharp::CppParser::AST::CXXParenListInitExpr*)NativePtr)->arrayFiller == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CXXParenListInitExpr*)NativePtr)->arrayFiller);
}

void CppSharp::Parser::AST::CXXParenListInitExpr::ArrayFiller::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CXXParenListInitExpr*)NativePtr)->arrayFiller = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::CoroutineSuspendExpr::CoroutineSuspendExpr(class ::CppSharp::CppParser::AST::CoroutineSuspendExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::CoroutineSuspendExpr^ CppSharp::Parser::AST::CoroutineSuspendExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CoroutineSuspendExpr((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CoroutineSuspendExpr::CoroutineSuspendExpr(class ::CppSharp::CppParser::AST::CoroutineSuspendExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CoroutineSuspendExpr^ CppSharp::Parser::AST::CoroutineSuspendExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CoroutineSuspendExpr((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CoroutineSuspendExpr::~CoroutineSuspendExpr()
{
}

CppSharp::Parser::AST::CoroutineSuspendExpr::CoroutineSuspendExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CoroutineSuspendExpr();
}

CppSharp::Parser::AST::CoroutineSuspendExpr::CoroutineSuspendExpr(CppSharp::Parser::AST::StmtClass klass)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    NativePtr = new class ::CppSharp::CppParser::AST::CoroutineSuspendExpr(__arg0);
}

CppSharp::Parser::AST::CoroutineSuspendExpr::CoroutineSuspendExpr(CppSharp::Parser::AST::CoroutineSuspendExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CoroutineSuspendExpr(__arg0);
}

CppSharp::Parser::AST::CoroutineSuspendExpr::operator CppSharp::Parser::AST::CoroutineSuspendExpr^(CppSharp::Parser::AST::StmtClass klass)
{
    auto __arg0 = (enum ::CppSharp::CppParser::AST::StmtClass)klass;
    auto ___ret = (::CppSharp::CppParser::AST::CoroutineSuspendExpr) __arg0;
    auto _____ret = new class ::CppSharp::CppParser::AST::CoroutineSuspendExpr(___ret);
    return (_____ret == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::CoroutineSuspendExpr((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)_____ret, true);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CoroutineSuspendExpr::CommonExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->commonExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->commonExpr);
}

void CppSharp::Parser::AST::CoroutineSuspendExpr::CommonExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->commonExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::OpaqueValueExpr^ CppSharp::Parser::AST::CoroutineSuspendExpr::OpaqueValue::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->opaqueValue == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::OpaqueValueExpr((class ::CppSharp::CppParser::AST::OpaqueValueExpr*)((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->opaqueValue);
}

void CppSharp::Parser::AST::CoroutineSuspendExpr::OpaqueValue::set(CppSharp::Parser::AST::OpaqueValueExpr^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->opaqueValue = (class ::CppSharp::CppParser::AST::OpaqueValueExpr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CoroutineSuspendExpr::ReadyExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->readyExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->readyExpr);
}

void CppSharp::Parser::AST::CoroutineSuspendExpr::ReadyExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->readyExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CoroutineSuspendExpr::SuspendExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->suspendExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->suspendExpr);
}

void CppSharp::Parser::AST::CoroutineSuspendExpr::SuspendExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->suspendExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CoroutineSuspendExpr::ResumeExpr::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->resumeExpr == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->resumeExpr);
}

void CppSharp::Parser::AST::CoroutineSuspendExpr::ResumeExpr::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->resumeExpr = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::CoroutineSuspendExpr::Operand::get()
{
    return (((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->operand == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->operand);
}

void CppSharp::Parser::AST::CoroutineSuspendExpr::Operand::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->operand = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::CoroutineSuspendExpr::KeywordLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->keywordLoc);
}

void CppSharp::Parser::AST::CoroutineSuspendExpr::KeywordLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::CoroutineSuspendExpr*)NativePtr)->keywordLoc = _marshal0;
}

CppSharp::Parser::AST::CoawaitExpr::CoawaitExpr(class ::CppSharp::CppParser::AST::CoawaitExpr* native)
    : CppSharp::Parser::AST::CoroutineSuspendExpr((::CppSharp::CppParser::AST::CoroutineSuspendExpr*)native)
{
}

CppSharp::Parser::AST::CoawaitExpr^ CppSharp::Parser::AST::CoawaitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CoawaitExpr((class ::CppSharp::CppParser::AST::CoawaitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CoawaitExpr::CoawaitExpr(class ::CppSharp::CppParser::AST::CoawaitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CoroutineSuspendExpr((::CppSharp::CppParser::AST::CoroutineSuspendExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CoawaitExpr^ CppSharp::Parser::AST::CoawaitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CoawaitExpr((class ::CppSharp::CppParser::AST::CoawaitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CoawaitExpr::~CoawaitExpr()
{
}

CppSharp::Parser::AST::CoawaitExpr::CoawaitExpr()
    : CppSharp::Parser::AST::CoroutineSuspendExpr((::CppSharp::CppParser::AST::CoroutineSuspendExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CoawaitExpr();
}

CppSharp::Parser::AST::CoawaitExpr::CoawaitExpr(CppSharp::Parser::AST::CoawaitExpr^ _0)
    : CppSharp::Parser::AST::CoroutineSuspendExpr((::CppSharp::CppParser::AST::CoroutineSuspendExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CoawaitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CoawaitExpr(__arg0);
}

bool CppSharp::Parser::AST::CoawaitExpr::IsImplicit::get()
{
    return ((class ::CppSharp::CppParser::AST::CoawaitExpr*)NativePtr)->isImplicit;
}

void CppSharp::Parser::AST::CoawaitExpr::IsImplicit::set(bool value)
{
    ((class ::CppSharp::CppParser::AST::CoawaitExpr*)NativePtr)->isImplicit = value;
}

CppSharp::Parser::AST::DependentCoawaitExpr::DependentCoawaitExpr(class ::CppSharp::CppParser::AST::DependentCoawaitExpr* native)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native)
{
}

CppSharp::Parser::AST::DependentCoawaitExpr^ CppSharp::Parser::AST::DependentCoawaitExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::DependentCoawaitExpr((class ::CppSharp::CppParser::AST::DependentCoawaitExpr*) native.ToPointer());
}

CppSharp::Parser::AST::DependentCoawaitExpr::DependentCoawaitExpr(class ::CppSharp::CppParser::AST::DependentCoawaitExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::DependentCoawaitExpr^ CppSharp::Parser::AST::DependentCoawaitExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::DependentCoawaitExpr((class ::CppSharp::CppParser::AST::DependentCoawaitExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::DependentCoawaitExpr::~DependentCoawaitExpr()
{
}

CppSharp::Parser::AST::DependentCoawaitExpr::DependentCoawaitExpr()
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::DependentCoawaitExpr();
}

CppSharp::Parser::AST::DependentCoawaitExpr::DependentCoawaitExpr(CppSharp::Parser::AST::DependentCoawaitExpr^ _0)
    : CppSharp::Parser::AST::Expr((::CppSharp::CppParser::AST::Expr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::DependentCoawaitExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::DependentCoawaitExpr(__arg0);
}

CppSharp::Parser::AST::Expr^ CppSharp::Parser::AST::DependentCoawaitExpr::Operand::get()
{
    return (((class ::CppSharp::CppParser::AST::DependentCoawaitExpr*)NativePtr)->operand == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::Expr((class ::CppSharp::CppParser::AST::Expr*)((class ::CppSharp::CppParser::AST::DependentCoawaitExpr*)NativePtr)->operand);
}

void CppSharp::Parser::AST::DependentCoawaitExpr::Operand::set(CppSharp::Parser::AST::Expr^ value)
{
    ((class ::CppSharp::CppParser::AST::DependentCoawaitExpr*)NativePtr)->operand = (class ::CppSharp::CppParser::AST::Expr*)value->NativePtr;
}

CppSharp::Parser::AST::UnresolvedLookupExpr^ CppSharp::Parser::AST::DependentCoawaitExpr::OperatorCoawaitLookup::get()
{
    return (((class ::CppSharp::CppParser::AST::DependentCoawaitExpr*)NativePtr)->operatorCoawaitLookup == nullptr) ? nullptr : gcnew ::CppSharp::Parser::AST::UnresolvedLookupExpr((class ::CppSharp::CppParser::AST::UnresolvedLookupExpr*)((class ::CppSharp::CppParser::AST::DependentCoawaitExpr*)NativePtr)->operatorCoawaitLookup);
}

void CppSharp::Parser::AST::DependentCoawaitExpr::OperatorCoawaitLookup::set(CppSharp::Parser::AST::UnresolvedLookupExpr^ value)
{
    ((class ::CppSharp::CppParser::AST::DependentCoawaitExpr*)NativePtr)->operatorCoawaitLookup = (class ::CppSharp::CppParser::AST::UnresolvedLookupExpr*)value->NativePtr;
}

CppSharp::Parser::SourceLocation CppSharp::Parser::AST::DependentCoawaitExpr::KeywordLoc::get()
{
    return ::CppSharp::Parser::SourceLocation((struct ::CppSharp::CppParser::SourceLocation*)&((class ::CppSharp::CppParser::AST::DependentCoawaitExpr*)NativePtr)->keywordLoc);
}

void CppSharp::Parser::AST::DependentCoawaitExpr::KeywordLoc::set(CppSharp::Parser::SourceLocation value)
{
    auto _marshal0 = ::CppSharp::CppParser::SourceLocation();
    _marshal0.ID = value.ID;
    ((class ::CppSharp::CppParser::AST::DependentCoawaitExpr*)NativePtr)->keywordLoc = _marshal0;
}

CppSharp::Parser::AST::CoyieldExpr::CoyieldExpr(class ::CppSharp::CppParser::AST::CoyieldExpr* native)
    : CppSharp::Parser::AST::CoroutineSuspendExpr((::CppSharp::CppParser::AST::CoroutineSuspendExpr*)native)
{
}

CppSharp::Parser::AST::CoyieldExpr^ CppSharp::Parser::AST::CoyieldExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::CoyieldExpr((class ::CppSharp::CppParser::AST::CoyieldExpr*) native.ToPointer());
}

CppSharp::Parser::AST::CoyieldExpr::CoyieldExpr(class ::CppSharp::CppParser::AST::CoyieldExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::CoroutineSuspendExpr((::CppSharp::CppParser::AST::CoroutineSuspendExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::CoyieldExpr^ CppSharp::Parser::AST::CoyieldExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::CoyieldExpr((class ::CppSharp::CppParser::AST::CoyieldExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::CoyieldExpr::~CoyieldExpr()
{
}

CppSharp::Parser::AST::CoyieldExpr::CoyieldExpr()
    : CppSharp::Parser::AST::CoroutineSuspendExpr((::CppSharp::CppParser::AST::CoroutineSuspendExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::CoyieldExpr();
}

CppSharp::Parser::AST::CoyieldExpr::CoyieldExpr(CppSharp::Parser::AST::CoyieldExpr^ _0)
    : CppSharp::Parser::AST::CoroutineSuspendExpr((::CppSharp::CppParser::AST::CoroutineSuspendExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::CoyieldExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::CoyieldExpr(__arg0);
}

CppSharp::Parser::AST::BuiltinBitCastExpr::BuiltinBitCastExpr(class ::CppSharp::CppParser::AST::BuiltinBitCastExpr* native)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)native)
{
}

CppSharp::Parser::AST::BuiltinBitCastExpr^ CppSharp::Parser::AST::BuiltinBitCastExpr::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharp::Parser::AST::BuiltinBitCastExpr((class ::CppSharp::CppParser::AST::BuiltinBitCastExpr*) native.ToPointer());
}

CppSharp::Parser::AST::BuiltinBitCastExpr::BuiltinBitCastExpr(class ::CppSharp::CppParser::AST::BuiltinBitCastExpr* native, bool ownNativeInstance)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)native, ownNativeInstance)
{
}

CppSharp::Parser::AST::BuiltinBitCastExpr^ CppSharp::Parser::AST::BuiltinBitCastExpr::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::CppSharp::Parser::AST::BuiltinBitCastExpr((class ::CppSharp::CppParser::AST::BuiltinBitCastExpr*) native.ToPointer(), __ownsNativeInstance);
}

CppSharp::Parser::AST::BuiltinBitCastExpr::~BuiltinBitCastExpr()
{
}

CppSharp::Parser::AST::BuiltinBitCastExpr::BuiltinBitCastExpr()
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new class ::CppSharp::CppParser::AST::BuiltinBitCastExpr();
}

CppSharp::Parser::AST::BuiltinBitCastExpr::BuiltinBitCastExpr(CppSharp::Parser::AST::BuiltinBitCastExpr^ _0)
    : CppSharp::Parser::AST::ExplicitCastExpr((::CppSharp::CppParser::AST::ExplicitCastExpr*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(class ::CppSharp::CppParser::AST::BuiltinBitCastExpr*)_0->NativePtr;
    NativePtr = new class ::CppSharp::CppParser::AST::BuiltinBitCastExpr(__arg0);
}

