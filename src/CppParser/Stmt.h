// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------

#pragma once

namespace CppSharp { namespace CppParser { namespace AST {

enum class StmtKind
{
    NoStmt = 0,
    GCCAsmStmt = 1,
    MSAsmStmt = 2,
    firstAsmStmtConstant = 1,
    lastAsmStmtConstant = 2,
    AttributedStmt = 3,
    BreakStmt = 4,
    CXXCatchStmt = 5,
    CXXForRangeStmt = 6,
    CXXTryStmt = 7,
    CapturedStmt = 8,
    CompoundStmt = 9,
    ContinueStmt = 10,
    CoreturnStmt = 11,
    CoroutineBodyStmt = 12,
    DeclStmt = 13,
    DoStmt = 14,
    BinaryConditionalOperator = 15,
    ConditionalOperator = 16,
    firstAbstractConditionalOperatorConstant = 15,
    lastAbstractConditionalOperatorConstant = 16,
    AddrLabelExpr = 17,
    ArrayInitIndexExpr = 18,
    ArrayInitLoopExpr = 19,
    ArraySubscriptExpr = 20,
    ArrayTypeTraitExpr = 21,
    AsTypeExpr = 22,
    AtomicExpr = 23,
    BinaryOperator = 24,
    CompoundAssignOperator = 25,
    firstBinaryOperatorConstant = 24,
    lastBinaryOperatorConstant = 25,
    BlockExpr = 26,
    CXXBindTemporaryExpr = 27,
    CXXBoolLiteralExpr = 28,
    CXXConstructExpr = 29,
    CXXTemporaryObjectExpr = 30,
    firstCXXConstructExprConstant = 29,
    lastCXXConstructExprConstant = 30,
    CXXDefaultArgExpr = 31,
    CXXDefaultInitExpr = 32,
    CXXDeleteExpr = 33,
    CXXDependentScopeMemberExpr = 34,
    CXXFoldExpr = 35,
    CXXInheritedCtorInitExpr = 36,
    CXXNewExpr = 37,
    CXXNoexceptExpr = 38,
    CXXNullPtrLiteralExpr = 39,
    CXXPseudoDestructorExpr = 40,
    CXXScalarValueInitExpr = 41,
    CXXStdInitializerListExpr = 42,
    CXXThisExpr = 43,
    CXXThrowExpr = 44,
    CXXTypeidExpr = 45,
    CXXUnresolvedConstructExpr = 46,
    CXXUuidofExpr = 47,
    CallExpr = 48,
    CUDAKernelCallExpr = 49,
    CXXMemberCallExpr = 50,
    CXXOperatorCallExpr = 51,
    UserDefinedLiteral = 52,
    firstCallExprConstant = 48,
    lastCallExprConstant = 52,
    CStyleCastExpr = 53,
    CXXFunctionalCastExpr = 54,
    CXXConstCastExpr = 55,
    CXXDynamicCastExpr = 56,
    CXXReinterpretCastExpr = 57,
    CXXStaticCastExpr = 58,
    firstCXXNamedCastExprConstant = 55,
    lastCXXNamedCastExprConstant = 58,
    ObjCBridgedCastExpr = 59,
    firstExplicitCastExprConstant = 53,
    lastExplicitCastExprConstant = 59,
    ImplicitCastExpr = 60,
    firstCastExprConstant = 53,
    lastCastExprConstant = 60,
    CharacterLiteral = 61,
    ChooseExpr = 62,
    CompoundLiteralExpr = 63,
    ConvertVectorExpr = 64,
    CoawaitExpr = 65,
    CoyieldExpr = 66,
    firstCoroutineSuspendExprConstant = 65,
    lastCoroutineSuspendExprConstant = 66,
    DeclRefExpr = 67,
    DependentCoawaitExpr = 68,
    DependentScopeDeclRefExpr = 69,
    DesignatedInitExpr = 70,
    DesignatedInitUpdateExpr = 71,
    ExpressionTraitExpr = 72,
    ExtVectorElementExpr = 73,
    FixedPointLiteral = 74,
    FloatingLiteral = 75,
    ConstantExpr = 76,
    ExprWithCleanups = 77,
    firstFullExprConstant = 76,
    lastFullExprConstant = 77,
    FunctionParmPackExpr = 78,
    GNUNullExpr = 79,
    GenericSelectionExpr = 80,
    ImaginaryLiteral = 81,
    ImplicitValueInitExpr = 82,
    InitListExpr = 83,
    IntegerLiteral = 84,
    LambdaExpr = 85,
    MSPropertyRefExpr = 86,
    MSPropertySubscriptExpr = 87,
    MaterializeTemporaryExpr = 88,
    MemberExpr = 89,
    NoInitExpr = 90,
    OMPArraySectionExpr = 91,
    ObjCArrayLiteral = 92,
    ObjCAvailabilityCheckExpr = 93,
    ObjCBoolLiteralExpr = 94,
    ObjCBoxedExpr = 95,
    ObjCDictionaryLiteral = 96,
    ObjCEncodeExpr = 97,
    ObjCIndirectCopyRestoreExpr = 98,
    ObjCIsaExpr = 99,
    ObjCIvarRefExpr = 100,
    ObjCMessageExpr = 101,
    ObjCPropertyRefExpr = 102,
    ObjCProtocolExpr = 103,
    ObjCSelectorExpr = 104,
    ObjCStringLiteral = 105,
    ObjCSubscriptRefExpr = 106,
    OffsetOfExpr = 107,
    OpaqueValueExpr = 108,
    UnresolvedLookupExpr = 109,
    UnresolvedMemberExpr = 110,
    firstOverloadExprConstant = 109,
    lastOverloadExprConstant = 110,
    PackExpansionExpr = 111,
    ParenExpr = 112,
    ParenListExpr = 113,
    PredefinedExpr = 114,
    PseudoObjectExpr = 115,
    ShuffleVectorExpr = 116,
    SizeOfPackExpr = 117,
    StmtExpr = 118,
    StringLiteral = 119,
    SubstNonTypeTemplateParmExpr = 120,
    SubstNonTypeTemplateParmPackExpr = 121,
    TypeTraitExpr = 122,
    TypoExpr = 123,
    UnaryExprOrTypeTraitExpr = 124,
    UnaryOperator = 125,
    VAArgExpr = 126,
    firstExprConstant = 15,
    lastExprConstant = 126,
    ForStmt = 127,
    GotoStmt = 128,
    IfStmt = 129,
    IndirectGotoStmt = 130,
    LabelStmt = 131,
    MSDependentExistsStmt = 132,
    NullStmt = 133,
    OMPAtomicDirective = 134,
    OMPBarrierDirective = 135,
    OMPCancelDirective = 136,
    OMPCancellationPointDirective = 137,
    OMPCriticalDirective = 138,
    OMPFlushDirective = 139,
    OMPDistributeDirective = 140,
    OMPDistributeParallelForDirective = 141,
    OMPDistributeParallelForSimdDirective = 142,
    OMPDistributeSimdDirective = 143,
    OMPForDirective = 144,
    OMPForSimdDirective = 145,
    OMPParallelForDirective = 146,
    OMPParallelForSimdDirective = 147,
    OMPSimdDirective = 148,
    OMPTargetParallelForSimdDirective = 149,
    OMPTargetSimdDirective = 150,
    OMPTargetTeamsDistributeDirective = 151,
    OMPTargetTeamsDistributeParallelForDirective = 152,
    OMPTargetTeamsDistributeParallelForSimdDirective = 153,
    OMPTargetTeamsDistributeSimdDirective = 154,
    OMPTaskLoopDirective = 155,
    OMPTaskLoopSimdDirective = 156,
    OMPTeamsDistributeDirective = 157,
    OMPTeamsDistributeParallelForDirective = 158,
    OMPTeamsDistributeParallelForSimdDirective = 159,
    OMPTeamsDistributeSimdDirective = 160,
    firstOMPLoopDirectiveConstant = 140,
    lastOMPLoopDirectiveConstant = 160,
    OMPMasterDirective = 161,
    OMPOrderedDirective = 162,
    OMPParallelDirective = 163,
    OMPParallelSectionsDirective = 164,
    OMPSectionDirective = 165,
    OMPSectionsDirective = 166,
    OMPSingleDirective = 167,
    OMPTargetDataDirective = 168,
    OMPTargetDirective = 169,
    OMPTargetEnterDataDirective = 170,
    OMPTargetExitDataDirective = 171,
    OMPTargetParallelDirective = 172,
    OMPTargetParallelForDirective = 173,
    OMPTargetTeamsDirective = 174,
    OMPTargetUpdateDirective = 175,
    OMPTaskDirective = 176,
    OMPTaskgroupDirective = 177,
    OMPTaskwaitDirective = 178,
    OMPTaskyieldDirective = 179,
    OMPTeamsDirective = 180,
    firstOMPExecutableDirectiveConstant = 134,
    lastOMPExecutableDirectiveConstant = 180,
    ObjCAtCatchStmt = 181,
    ObjCAtFinallyStmt = 182,
    ObjCAtSynchronizedStmt = 183,
    ObjCAtThrowStmt = 184,
    ObjCAtTryStmt = 185,
    ObjCAutoreleasePoolStmt = 186,
    ObjCForCollectionStmt = 187,
    ReturnStmt = 188,
    SEHExceptStmt = 189,
    SEHFinallyStmt = 190,
    SEHLeaveStmt = 191,
    SEHTryStmt = 192,
    CaseStmt = 193,
    DefaultStmt = 194,
    firstSwitchCaseConstant = 193,
    lastSwitchCaseConstant = 194,
    SwitchStmt = 195,
    WhileStmt = 196,
    firstStmtConstant = 1,
    lastStmtConstant = 196
};

class Stmt
{
};

class DeclStmt : public Stmt
{
};

class NullStmt : public Stmt
{
};

class CompoundStmt : public Stmt
{
};

class SwitchCase : public Stmt
{
};

class CaseStmt : public SwitchCase
{
};

class DefaultStmt : public SwitchCase
{
};

class LabelStmt : public Stmt
{
};

class AttributedStmt : public Stmt
{
};

class IfStmt : public Stmt
{
};

class SwitchStmt : public Stmt
{
};

class WhileStmt : public Stmt
{
};

class DoStmt : public Stmt
{
};

class ForStmt : public Stmt
{
};

class GotoStmt : public Stmt
{
};

class IndirectGotoStmt : public Stmt
{
};

class ContinueStmt : public Stmt
{
};

class BreakStmt : public Stmt
{
};

class ReturnStmt : public Stmt
{
};

class AsmStmt : public Stmt
{
};

class GCCAsmStmt : public AsmStmt
{
    class AsmStringPiece
    {
        enum class Kind
        {
            String = 0,
            Operand = 1
        };
    };
};

class MSAsmStmt : public AsmStmt
{
};

class SEHExceptStmt : public Stmt
{
};

class SEHFinallyStmt : public Stmt
{
};

class SEHTryStmt : public Stmt
{
};

class SEHLeaveStmt : public Stmt
{
};

class CapturedStmt : public Stmt
{
    enum class VariableCaptureKind
    {
        VCK_This = 0,
        VCK_ByRef = 1,
        VCK_ByCopy = 2,
        VCK_VLAType = 3
    };

    class Capture
    {
    };
};

} } }
