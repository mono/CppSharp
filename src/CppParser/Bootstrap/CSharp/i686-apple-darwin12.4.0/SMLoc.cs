//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace llvm
    {
        /// <summary>
        /// <para>Represents a location in source code.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// Represents a location in source code.</para>
        /// </remarks>
        public unsafe partial class SMLoc : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr Ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm5SMLocC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm5SMLocC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm5SMLoc7isValidEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isValid_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm5SMLoceqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm5SMLocneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm5SMLoc10getPointerEv")]
                internal static extern global::System.IntPtr getPointer_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm5SMLoc14getFromPointerEPKc")]
                internal static extern llvm.SMLoc.Internal getFromPointer_0(global::System.IntPtr Ptr);
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, SMLoc> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, SMLoc>();

            private readonly bool __ownsNativeInstance;

            public static SMLoc __CreateInstance(global::System.IntPtr native)
            {
                return new SMLoc((SMLoc.Internal*) native);
            }

            public static SMLoc __CreateInstance(SMLoc.Internal native)
            {
                return new SMLoc(native);
            }

            private static SMLoc.Internal* __CopyValue(SMLoc.Internal native)
            {
                var ret = (SMLoc.Internal*) Marshal.AllocHGlobal(4);
                *ret = native;
                return ret;
            }

            private SMLoc(SMLoc.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected SMLoc(SMLoc.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public SMLoc()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0(__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                llvm.SMLoc __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public bool isValid()
            {
                var __ret = Internal.isValid_0(__Instance);
                return __ret;
            }

            public static bool operator ==(llvm.SMLoc __op, llvm.SMLoc RHS)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool RHSNull = ReferenceEquals(RHS, null);
                if (__opNull || RHSNull)
                    return __opNull && RHSNull;
                var arg0 = __op.__Instance;
                var arg1 = RHS.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as SMLoc;
            }

            public static bool operator !=(llvm.SMLoc __op, llvm.SMLoc RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public string getPointer()
            {
                var __ret = Internal.getPointer_0(__Instance);
                return Marshal.PtrToStringAnsi(__ret);
            }

            public static llvm.SMLoc getFromPointer(string Ptr)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(Ptr);
                var __ret = Internal.getFromPointer_0(arg0);
                Marshal.FreeHGlobal(arg0);
                return llvm.SMLoc.__CreateInstance(__ret);
            }
        }

        /// <summary>
        /// <para>Represents a range in source code.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// Represents a range in source code.</para>
        /// <para>///</para>
        /// <para>/// SMRange is implemented using a half-open range, as is the
        /// convention in C++.</para>
        /// <para>/// In the string &quot;abc&quot;, the range (1,3] represents the
        /// substring &quot;bc&quot;, and the</para>
        /// <para>/// range (2,2] represents an empty range between the characters
        /// &quot;b&quot; and &quot;c&quot;.</para>
        /// </remarks>
        public unsafe partial class SMRange : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public llvm.SMLoc.Internal Start;

                [FieldOffset(4)]
                public llvm.SMLoc.Internal End;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm7SMRangeC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm7SMRangeC2ENS_5SMLocES1_")]
                internal static extern void ctor_1(global::System.IntPtr instance, llvm.SMLoc.Internal St, llvm.SMLoc.Internal En);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm7SMRangeC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm7SMRange7isValidEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isValid_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, SMRange> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, SMRange>();

            private readonly bool __ownsNativeInstance;

            public static SMRange __CreateInstance(global::System.IntPtr native)
            {
                return new SMRange((SMRange.Internal*) native);
            }

            public static SMRange __CreateInstance(SMRange.Internal native)
            {
                return new SMRange(native);
            }

            private static SMRange.Internal* __CopyValue(SMRange.Internal native)
            {
                var ret = (SMRange.Internal*) Marshal.AllocHGlobal(8);
                *ret = native;
                return ret;
            }

            private SMRange(SMRange.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected SMRange(SMRange.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public SMRange()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0(__Instance);
            }

            public SMRange(llvm.SMLoc St, llvm.SMLoc En)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(St, null) ? new llvm.SMLoc.Internal() : *(llvm.SMLoc.Internal*) (St.__Instance);
                var arg1 = ReferenceEquals(En, null) ? new llvm.SMLoc.Internal() : *(llvm.SMLoc.Internal*) (En.__Instance);
                Internal.ctor_1(__Instance, arg0, arg1);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                llvm.SMRange __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public bool isValid()
            {
                var __ret = Internal.isValid_0(__Instance);
                return __ret;
            }

            public llvm.SMLoc Start
            {
                get
                {
                    return llvm.SMLoc.__CreateInstance(((Internal*) __Instance)->Start);
                }

                set
                {
                    ((Internal*) __Instance)->Start = ReferenceEquals(value, null) ? new llvm.SMLoc.Internal() : *(llvm.SMLoc.Internal*) (value.__Instance);
                }
            }

            public llvm.SMLoc End
            {
                get
                {
                    return llvm.SMLoc.__CreateInstance(((Internal*) __Instance)->End);
                }

                set
                {
                    ((Internal*) __Instance)->End = ReferenceEquals(value, null) ? new llvm.SMLoc.Internal() : *(llvm.SMLoc.Internal*) (value.__Instance);
                }
            }
        }
    }
}
