//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace clang
    {
        /// <summary>
        /// <para>Specifies which overload candidates to display when overload
        /// resolution fails.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Specifies which overload candidates to display when
        /// overload</para>
        /// <para>/// resolution fails.</para>
        /// </remarks>
        public enum OverloadsShown : uint
        {
            /// <summary>Show all overloads.</summary>
            Ovl_All = 0,
            /// <summary>Show just the "best" overload candidates.</summary>
            Ovl_Best = 1
        }

        /// <summary>
        /// <para>Options for controlling the compiler diagnostics engine.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Options for controlling the compiler diagnostics
        /// engine.</para>
        /// </remarks>
        public unsafe partial class DiagnosticOptions : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 88)]
            public partial struct Internal
            {
                [FieldOffset(4)]
                public uint IgnoreWarnings;

                [FieldOffset(4)]
                public uint NoRewriteMacros;

                [FieldOffset(4)]
                public uint Pedantic;

                [FieldOffset(4)]
                public uint PedanticErrors;

                [FieldOffset(4)]
                public uint ShowColumn;

                [FieldOffset(4)]
                public uint ShowLocation;

                [FieldOffset(4)]
                public uint ShowCarets;

                [FieldOffset(4)]
                public uint ShowFixits;

                [FieldOffset(5)]
                public uint ShowSourceRanges;

                [FieldOffset(5)]
                public uint ShowParseableFixits;

                [FieldOffset(5)]
                public uint ShowPresumedLoc;

                [FieldOffset(5)]
                public uint ShowOptionNames;

                [FieldOffset(5)]
                public uint ShowNoteIncludeStack;

                [FieldOffset(5)]
                public uint ShowCategories;

                [FieldOffset(5)]
                public uint ShowColors;

                [FieldOffset(6)]
                public uint VerifyDiagnostics;

                [FieldOffset(6)]
                public uint ElideType;

                [FieldOffset(6)]
                public uint ShowTemplateTree;

                [FieldOffset(6)]
                public uint CLFallbackMode;

                [FieldOffset(8)]
                public uint ErrorLimit;

                [FieldOffset(12)]
                public uint MacroBacktraceLimit;

                [FieldOffset(16)]
                public uint TemplateBacktraceLimit;

                [FieldOffset(20)]
                public uint ConstexprBacktraceLimit;

                [FieldOffset(24)]
                public uint SpellCheckingLimit;

                [FieldOffset(28)]
                public uint TabStop;

                [FieldOffset(32)]
                public uint MessageLength;

                [FieldOffset(36)]
                public uint Format;

                [FieldOffset(36)]
                public uint ShowOverloads;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang17DiagnosticOptionsC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang17DiagnosticOptionsC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang17DiagnosticOptionsD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang17DiagnosticOptions9getFormatEv")]
                internal static extern clang.DiagnosticOptions.TextDiagnosticFormat getFormat_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang17DiagnosticOptions9setFormatENS0_20TextDiagnosticFormatE")]
                internal static extern void setFormat_0(global::System.IntPtr instance, clang.DiagnosticOptions.TextDiagnosticFormat Value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang17DiagnosticOptions16getShowOverloadsEv")]
                internal static extern clang.OverloadsShown getShowOverloads_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang17DiagnosticOptions16setShowOverloadsENS_14OverloadsShownE")]
                internal static extern void setShowOverloads_0(global::System.IntPtr instance, clang.OverloadsShown Value);
            }

            public enum TextDiagnosticFormat : uint
            {
                Clang = 0,
                MSVC = 1,
                Vi = 2
            }

            public enum _0 : uint
            {
                DefaultTabStop = 8,
                MaxTabStop = 100,
                DefaultMacroBacktraceLimit = 6,
                DefaultTemplateBacktraceLimit = 10,
                DefaultConstexprBacktraceLimit = 10,
                DefaultSpellCheckingLimit = 50
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, DiagnosticOptions> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, DiagnosticOptions>();

            private readonly bool __ownsNativeInstance;

            public static DiagnosticOptions __CreateInstance(global::System.IntPtr native)
            {
                return new DiagnosticOptions((DiagnosticOptions.Internal*) native);
            }

            public static DiagnosticOptions __CreateInstance(DiagnosticOptions.Internal native)
            {
                return new DiagnosticOptions(native);
            }

            private static DiagnosticOptions.Internal* __CopyValue(DiagnosticOptions.Internal native)
            {
                var ret = (DiagnosticOptions.Internal*) Marshal.AllocHGlobal(88);
                *ret = native;
                return ret;
            }

            private DiagnosticOptions(DiagnosticOptions.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected DiagnosticOptions(DiagnosticOptions.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public DiagnosticOptions()
            {
                __Instance = Marshal.AllocHGlobal(88);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0(__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                clang.DiagnosticOptions __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance || force)
                    Internal.dtor_0(__Instance);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public clang.DiagnosticOptions.TextDiagnosticFormat getFormat()
            {
                var __ret = Internal.getFormat_0(__Instance);
                return __ret;
            }

            public void setFormat(clang.DiagnosticOptions.TextDiagnosticFormat Value)
            {
                var arg0 = Value;
                Internal.setFormat_0(__Instance, arg0);
            }

            public clang.OverloadsShown getShowOverloads()
            {
                var __ret = Internal.getShowOverloads_0(__Instance);
                return __ret;
            }

            public void setShowOverloads(clang.OverloadsShown Value)
            {
                var arg0 = Value;
                Internal.setShowOverloads_0(__Instance, arg0);
            }

            public uint IgnoreWarnings
            {
                get
                {
                    return ((Internal*) __Instance)->IgnoreWarnings;
                }

                set
                {
                    ((Internal*) __Instance)->IgnoreWarnings = value;
                }
            }

            public uint NoRewriteMacros
            {
                get
                {
                    return ((Internal*) __Instance)->NoRewriteMacros;
                }

                set
                {
                    ((Internal*) __Instance)->NoRewriteMacros = value;
                }
            }

            public uint Pedantic
            {
                get
                {
                    return ((Internal*) __Instance)->Pedantic;
                }

                set
                {
                    ((Internal*) __Instance)->Pedantic = value;
                }
            }

            public uint PedanticErrors
            {
                get
                {
                    return ((Internal*) __Instance)->PedanticErrors;
                }

                set
                {
                    ((Internal*) __Instance)->PedanticErrors = value;
                }
            }

            public uint ShowColumn
            {
                get
                {
                    return ((Internal*) __Instance)->ShowColumn;
                }

                set
                {
                    ((Internal*) __Instance)->ShowColumn = value;
                }
            }

            public uint ShowLocation
            {
                get
                {
                    return ((Internal*) __Instance)->ShowLocation;
                }

                set
                {
                    ((Internal*) __Instance)->ShowLocation = value;
                }
            }

            public uint ShowCarets
            {
                get
                {
                    return ((Internal*) __Instance)->ShowCarets;
                }

                set
                {
                    ((Internal*) __Instance)->ShowCarets = value;
                }
            }

            public uint ShowFixits
            {
                get
                {
                    return ((Internal*) __Instance)->ShowFixits;
                }

                set
                {
                    ((Internal*) __Instance)->ShowFixits = value;
                }
            }

            public uint ShowSourceRanges
            {
                get
                {
                    return ((Internal*) __Instance)->ShowSourceRanges;
                }

                set
                {
                    ((Internal*) __Instance)->ShowSourceRanges = value;
                }
            }

            public uint ShowParseableFixits
            {
                get
                {
                    return ((Internal*) __Instance)->ShowParseableFixits;
                }

                set
                {
                    ((Internal*) __Instance)->ShowParseableFixits = value;
                }
            }

            public uint ShowPresumedLoc
            {
                get
                {
                    return ((Internal*) __Instance)->ShowPresumedLoc;
                }

                set
                {
                    ((Internal*) __Instance)->ShowPresumedLoc = value;
                }
            }

            public uint ShowOptionNames
            {
                get
                {
                    return ((Internal*) __Instance)->ShowOptionNames;
                }

                set
                {
                    ((Internal*) __Instance)->ShowOptionNames = value;
                }
            }

            public uint ShowNoteIncludeStack
            {
                get
                {
                    return ((Internal*) __Instance)->ShowNoteIncludeStack;
                }

                set
                {
                    ((Internal*) __Instance)->ShowNoteIncludeStack = value;
                }
            }

            public uint ShowCategories
            {
                get
                {
                    return ((Internal*) __Instance)->ShowCategories;
                }

                set
                {
                    ((Internal*) __Instance)->ShowCategories = value;
                }
            }

            public uint ShowColors
            {
                get
                {
                    return ((Internal*) __Instance)->ShowColors;
                }

                set
                {
                    ((Internal*) __Instance)->ShowColors = value;
                }
            }

            public uint VerifyDiagnostics
            {
                get
                {
                    return ((Internal*) __Instance)->VerifyDiagnostics;
                }

                set
                {
                    ((Internal*) __Instance)->VerifyDiagnostics = value;
                }
            }

            public uint ElideType
            {
                get
                {
                    return ((Internal*) __Instance)->ElideType;
                }

                set
                {
                    ((Internal*) __Instance)->ElideType = value;
                }
            }

            public uint ShowTemplateTree
            {
                get
                {
                    return ((Internal*) __Instance)->ShowTemplateTree;
                }

                set
                {
                    ((Internal*) __Instance)->ShowTemplateTree = value;
                }
            }

            public uint CLFallbackMode
            {
                get
                {
                    return ((Internal*) __Instance)->CLFallbackMode;
                }

                set
                {
                    ((Internal*) __Instance)->CLFallbackMode = value;
                }
            }

            public uint ErrorLimit
            {
                get
                {
                    return ((Internal*) __Instance)->ErrorLimit;
                }

                set
                {
                    ((Internal*) __Instance)->ErrorLimit = value;
                }
            }

            public uint MacroBacktraceLimit
            {
                get
                {
                    return ((Internal*) __Instance)->MacroBacktraceLimit;
                }

                set
                {
                    ((Internal*) __Instance)->MacroBacktraceLimit = value;
                }
            }

            public uint TemplateBacktraceLimit
            {
                get
                {
                    return ((Internal*) __Instance)->TemplateBacktraceLimit;
                }

                set
                {
                    ((Internal*) __Instance)->TemplateBacktraceLimit = value;
                }
            }

            public uint ConstexprBacktraceLimit
            {
                get
                {
                    return ((Internal*) __Instance)->ConstexprBacktraceLimit;
                }

                set
                {
                    ((Internal*) __Instance)->ConstexprBacktraceLimit = value;
                }
            }

            public uint SpellCheckingLimit
            {
                get
                {
                    return ((Internal*) __Instance)->SpellCheckingLimit;
                }

                set
                {
                    ((Internal*) __Instance)->SpellCheckingLimit = value;
                }
            }

            public uint TabStop
            {
                get
                {
                    return ((Internal*) __Instance)->TabStop;
                }

                set
                {
                    ((Internal*) __Instance)->TabStop = value;
                }
            }

            public uint MessageLength
            {
                get
                {
                    return ((Internal*) __Instance)->MessageLength;
                }

                set
                {
                    ((Internal*) __Instance)->MessageLength = value;
                }
            }

            protected uint Format
            {
                get
                {
                    return ((Internal*) __Instance)->Format;
                }

                set
                {
                    ((Internal*) __Instance)->Format = value;
                }
            }

            protected uint ShowOverloads
            {
                get
                {
                    return ((Internal*) __Instance)->ShowOverloads;
                }

                set
                {
                    ((Internal*) __Instance)->ShowOverloads = value;
                }
            }
        }
    }
}
