//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace clang
    {
        /// <summary>
        /// <para>A POD class for pairing a NamedDecl* with an access specifier.
        /// Can be put into unions.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// A POD class for pairing a NamedDecl* with an access
        /// specifier.</para>
        /// <para>/// Can be put into unions.</para>
        /// </remarks>
        public unsafe partial class DeclAccessPair : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public uint Ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang14DeclAccessPairC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang14DeclAccessPair4makeEPNS_9NamedDeclENS_15AccessSpecifierE")]
                internal static extern clang.DeclAccessPair.Internal make_0(global::System.IntPtr D, clang.AccessSpecifier AS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang14DeclAccessPair7getDeclEv")]
                internal static extern global::System.IntPtr getDecl_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang14DeclAccessPair9getAccessEv")]
                internal static extern clang.AccessSpecifier getAccess_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang14DeclAccessPair7setDeclEPNS_9NamedDeclE")]
                internal static extern void setDecl_0(global::System.IntPtr instance, global::System.IntPtr D);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang14DeclAccessPair9setAccessENS_15AccessSpecifierE")]
                internal static extern void setAccess_0(global::System.IntPtr instance, clang.AccessSpecifier AS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang14DeclAccessPair3setEPNS_9NamedDeclENS_15AccessSpecifierE")]
                internal static extern void set_0(global::System.IntPtr instance, global::System.IntPtr D, clang.AccessSpecifier AS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang14DeclAccessPaircvPNS_9NamedDeclEEv")]
                internal static extern global::System.IntPtr OperatorConversion_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, DeclAccessPair> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, DeclAccessPair>();

            private readonly bool __ownsNativeInstance;

            public static DeclAccessPair __CreateInstance(global::System.IntPtr native)
            {
                return new DeclAccessPair((DeclAccessPair.Internal*) native);
            }

            public static DeclAccessPair __CreateInstance(DeclAccessPair.Internal native)
            {
                return new DeclAccessPair(native);
            }

            private static DeclAccessPair.Internal* __CopyValue(DeclAccessPair.Internal native)
            {
                var ret = (DeclAccessPair.Internal*) Marshal.AllocHGlobal(4);
                *ret = native;
                return ret;
            }

            private DeclAccessPair(DeclAccessPair.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected DeclAccessPair(DeclAccessPair.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public DeclAccessPair()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                clang.DeclAccessPair __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public clang.NamedDecl getDecl()
            {
                var __ret = Internal.getDecl_0(__Instance);
                clang.NamedDecl __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (clang.NamedDecl.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (clang.NamedDecl) clang.NamedDecl.NativeToManagedMap[__ret];
                else clang.NamedDecl.NativeToManagedMap[__ret] = __result0 = (clang.NamedDecl) clang.NamedDecl.__CreateInstance(__ret);
                return __result0;
            }

            public clang.AccessSpecifier getAccess()
            {
                var __ret = Internal.getAccess_0(__Instance);
                return __ret;
            }

            public void setDecl(clang.NamedDecl D)
            {
                var arg0 = ReferenceEquals(D, null) ? global::System.IntPtr.Zero : D.__Instance;
                Internal.setDecl_0(__Instance, arg0);
            }

            public void setAccess(clang.AccessSpecifier AS)
            {
                var arg0 = AS;
                Internal.setAccess_0(__Instance, arg0);
            }

            public void set(clang.NamedDecl D, clang.AccessSpecifier AS)
            {
                var arg0 = ReferenceEquals(D, null) ? global::System.IntPtr.Zero : D.__Instance;
                var arg1 = AS;
                Internal.set_0(__Instance, arg0, arg1);
            }

            public static implicit operator clang.NamedDecl(clang.DeclAccessPair __op)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var __ret = Internal.OperatorConversion_0(arg0);
                clang.NamedDecl __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (clang.NamedDecl.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (clang.NamedDecl) clang.NamedDecl.NativeToManagedMap[__ret];
                else clang.NamedDecl.NativeToManagedMap[__ret] = __result0 = (clang.NamedDecl) clang.NamedDecl.__CreateInstance(__ret);
                return __result0;
            }

            public static clang.DeclAccessPair make(clang.NamedDecl D, clang.AccessSpecifier AS)
            {
                var arg0 = ReferenceEquals(D, null) ? global::System.IntPtr.Zero : D.__Instance;
                var arg1 = AS;
                var __ret = Internal.make_0(arg0, arg1);
                return clang.DeclAccessPair.__CreateInstance(__ret);
            }
        }
    }

    namespace llvm
    {
    }
}
