//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    public unsafe partial class ExceptionSpecificationType
    {
        public partial struct Internal
        {
        }
    }

    namespace clang
    {
        /// <summary>
        /// <para>The various types of exception specifications that exist in
        /// C++11.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief The various types of exception specifications that
        /// exist in C++11.</para>
        /// </remarks>
        public enum ExceptionSpecificationType : uint
        {
            /// <summary>no exception specification</summary>
            EST_None = 0,
            /// <summary>throw()</summary>
            EST_DynamicNone = 1,
            /// <summary>throw(T1, T2)</summary>
            EST_Dynamic = 2,
            /// <summary>Microsoft throw(...) extension</summary>
            EST_MSAny = 3,
            /// <summary>noexcept</summary>
            EST_BasicNoexcept = 4,
            /// <summary>noexcept(expression)</summary>
            EST_ComputedNoexcept = 5,
            /// <summary>not evaluated yet, for special member function</summary>
            EST_Unevaluated = 6,
            /// <summary>not instantiated yet</summary>
            EST_Uninstantiated = 7,
            /// <summary>not parsed yet</summary>
            EST_Unparsed = 8
        }

        /// <summary>
        /// <para>Possible results from evaluation of a noexcept expression.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Possible results from evaluation of a noexcept
        /// expression.</para>
        /// </remarks>
        public enum CanThrowResult : uint
        {
            CT_Cannot = 0,
            CT_Dependent = 1,
            CT_Can = 2
        }

        public unsafe partial class ExceptionSpecificationType
        {
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang22isDynamicExceptionSpecENS_26ExceptionSpecificationTypeE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isDynamicExceptionSpec_0(clang.ExceptionSpecificationType ESpecType);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang23isNoexceptExceptionSpecENS_26ExceptionSpecificationTypeE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isNoexceptExceptionSpec_0(clang.ExceptionSpecificationType ESpecType);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang25isUnresolvedExceptionSpecENS_26ExceptionSpecificationTypeE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isUnresolvedExceptionSpec_0(clang.ExceptionSpecificationType ESpecType);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang13mergeCanThrowENS_14CanThrowResultES0_")]
                internal static extern clang.CanThrowResult mergeCanThrow_0(clang.CanThrowResult CT1, clang.CanThrowResult CT2);
            }

            public static bool isDynamicExceptionSpec(clang.ExceptionSpecificationType ESpecType)
            {
                var arg0 = ESpecType;
                var __ret = Internal.isDynamicExceptionSpec_0(arg0);
                return __ret;
            }

            public static bool isNoexceptExceptionSpec(clang.ExceptionSpecificationType ESpecType)
            {
                var arg0 = ESpecType;
                var __ret = Internal.isNoexceptExceptionSpec_0(arg0);
                return __ret;
            }

            public static bool isUnresolvedExceptionSpec(clang.ExceptionSpecificationType ESpecType)
            {
                var arg0 = ESpecType;
                var __ret = Internal.isUnresolvedExceptionSpec_0(arg0);
                return __ret;
            }

            public static clang.CanThrowResult mergeCanThrow(clang.CanThrowResult CT1, clang.CanThrowResult CT2)
            {
                var arg0 = CT1;
                var arg1 = CT2;
                var __ret = Internal.mergeCanThrow_0(arg0, arg1);
                return __ret;
            }
        }
    }
}
