//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace llvm
    {
        /// <summary>
        /// <para>DenseSet - This implements a dense probed hash-table based
        /// set.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// DenseSet - This implements a dense probed hash-table based
        /// set.</para>
        /// </remarks>
        public unsafe partial class DenseSet
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }

            public unsafe partial class Iterator
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                }
            }

            public unsafe partial class ConstIterator
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                }
            }
        }

        namespace detail
        {
            public unsafe partial class DenseSetPair
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public new partial struct Internal
                {
                }
            }

            public unsafe partial class DenseSetEmpty : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm6detail13DenseSetEmptyC2ERKS1_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, DenseSetEmpty> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, DenseSetEmpty>();

                private readonly bool __ownsNativeInstance;

                public static DenseSetEmpty __CreateInstance(global::System.IntPtr native)
                {
                    return new DenseSetEmpty((DenseSetEmpty.Internal*) native);
                }

                public static DenseSetEmpty __CreateInstance(DenseSetEmpty.Internal native)
                {
                    return new DenseSetEmpty(native);
                }

                private static DenseSetEmpty.Internal* __CopyValue(DenseSetEmpty.Internal native)
                {
                    var ret = (DenseSetEmpty.Internal*) Marshal.AllocHGlobal(0);
                    *ret = native;
                    return ret;
                }

                private DenseSetEmpty(DenseSetEmpty.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected DenseSetEmpty(DenseSetEmpty.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public DenseSetEmpty()
                {
                    __Instance = Marshal.AllocHGlobal(0);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    DestroyNativeInstance(false);
                }

                public virtual void DestroyNativeInstance()
                {
                    DestroyNativeInstance(true);
                }

                private void DestroyNativeInstance(bool force)
                {
                    llvm.detail.DenseSetEmpty __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }
        }
    }
}
