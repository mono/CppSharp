//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    public unsafe partial class Redeclarable
    {
        public partial struct Internal
        {
        }
    }

    namespace clang
    {
        /// <summary>
        /// <para>Provides common interface for the Decls that can be
        /// redeclared.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Provides common interface for the Decls that can be
        /// redeclared.</para>
        /// </remarks>
        public unsafe partial class Redeclarable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }

            protected internal unsafe partial class DeclLink
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                    [FieldOffset(234881024)]
                    internal llvm.PointerUnion.Internal Next;
                }
            }

            /// <summary>
            /// <para>Iterates through all the redeclarations of the same decl.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Iterates through all the redeclarations of the same
            /// decl.</para>
            /// </remarks>
            public unsafe partial class redecl_iterator
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr Current;

                    [FieldOffset(0)]
                    public global::System.IntPtr Starter;

                    [FieldOffset(0)]
                    public bool PassedFirst;
                }
            }
        }

        /// <summary>
        /// <para>Provides common interface for the Decls that cannot be
        /// redeclared, but can be merged if the same declaration is brought in from
        /// multiple modules.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Provides common interface for the Decls that cannot be
        /// redeclared,</para>
        /// <para>/// but can be merged if the same declaration is brought in from
        /// multiple</para>
        /// <para>/// modules.</para>
        /// </remarks>
        public unsafe partial class Mergeable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }
        }

        public unsafe partial class Redeclarable
        {
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang20getPrimaryMergedDeclEPNS_4DeclE")]
                internal static extern global::System.IntPtr getPrimaryMergedDecl_0(global::System.IntPtr D);
            }

            /// <summary>
            /// <para>Get the primary declaration for a declaration from an AST file.
            /// That will be the first-loaded declaration.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Get the primary declaration for a declaration from an
            /// AST file. That</para>
            /// <para>/// will be the first-loaded declaration.</para>
            /// </remarks>
            public static clang.Decl getPrimaryMergedDecl(clang.Decl D)
            {
                var arg0 = ReferenceEquals(D, null) ? global::System.IntPtr.Zero : D.__Instance;
                var __ret = Internal.getPrimaryMergedDecl_0(arg0);
                clang.Decl __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (clang.Decl.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (clang.Decl) clang.Decl.NativeToManagedMap[__ret];
                else clang.Decl.NativeToManagedMap[__ret] = __result0 = (clang.Decl) clang.Decl.__CreateInstance(__ret);
                return __result0;
            }
        }
    }
}
