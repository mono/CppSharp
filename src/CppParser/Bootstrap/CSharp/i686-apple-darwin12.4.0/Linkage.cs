//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    public unsafe partial class Linkage
    {
        public partial struct Internal
        {
        }
    }

    namespace clang
    {
        /// <summary>
        /// <para>Describes the different kinds of linkage (C++ [basic.link], C99
        /// 6.2.2) that an entity may have.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Describes the different kinds of linkage </para>
        /// <para>/// (C++ [basic.link], C99 6.2.2) that an entity may have.</para>
        /// </remarks>
        public enum Linkage : byte
        {
            /// <summary>No linkage, which means that the entity is unique and can only be referred to from within its scope.</summary>
            NoLinkage = 0,
            /// <summary>Internal linkage, which indicates that the entity can be referred to from within the translation unit (but not other translation units).</summary>
            InternalLinkage = 1,
            /// <summary>External linkage within a unique namespace.</summary>
            UniqueExternalLinkage = 2,
            /// <summary>No linkage according to the standard, but is visible from other translation units because of types defined in a inline function.</summary>
            VisibleNoLinkage = 3,
            /// <summary>External linkage, which indicates that the entity can be referred to from other translation units.</summary>
            ExternalLinkage = 4
        }

        /// <summary>
        /// <para>Describes the different kinds of language linkage (C++
        /// [dcl.link]) that an entity may have.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Describes the different kinds of language
        /// linkage</para>
        /// <para>/// (C++ [dcl.link]) that an entity may have.</para>
        /// </remarks>
        public enum LanguageLinkage : uint
        {
            CLanguageLinkage = 0,
            CXXLanguageLinkage = 1,
            NoLanguageLinkage = 2
        }

        /// <summary>
        /// <para>A more specific kind of linkage than enum Linkage.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief A more specific kind of linkage than enum
        /// Linkage.</para>
        /// <para>///</para>
        /// <para>/// This is relevant to CodeGen and AST file reading.</para>
        /// </remarks>
        public enum GVALinkage : uint
        {
            GVA_Internal = 0,
            GVA_AvailableExternally = 1,
            GVA_DiscardableODR = 2,
            GVA_StrongExternal = 3,
            GVA_StrongODR = 4
        }

        public unsafe partial class Linkage
        {
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang19isExternallyVisibleENS_7LinkageE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isExternallyVisible_0(clang.Linkage L);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang16getFormalLinkageENS_7LinkageE")]
                internal static extern clang.Linkage getFormalLinkage_0(clang.Linkage L);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang23isExternalFormalLinkageENS_7LinkageE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isExternalFormalLinkage_0(clang.Linkage L);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang10minLinkageENS_7LinkageES0_")]
                internal static extern clang.Linkage minLinkage_0(clang.Linkage L1, clang.Linkage L2);
            }

            public static bool isExternallyVisible(clang.Linkage L)
            {
                var arg0 = L;
                var __ret = Internal.isExternallyVisible_0(arg0);
                return __ret;
            }

            public static clang.Linkage getFormalLinkage(clang.Linkage L)
            {
                var arg0 = L;
                var __ret = Internal.getFormalLinkage_0(arg0);
                return __ret;
            }

            public static bool isExternalFormalLinkage(clang.Linkage L)
            {
                var arg0 = L;
                var __ret = Internal.isExternalFormalLinkage_0(arg0);
                return __ret;
            }

            /// <summary>
            /// <para>Compute the minimum linkage given two linkages.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Compute the minimum linkage given two linkages.</para>
            /// <para>///</para>
            /// <para>/// The linkage can be interpreted as a pair formed by the formal
            /// linkage and</para>
            /// <para>/// a boolean for external visibility. This is just what
            /// getFormalLinkage and</para>
            /// <para>/// isExternallyVisible return. We want the minimum of both
            /// components. The</para>
            /// <para>/// Linkage enum is defined in an order that makes this simple,
            /// we just need</para>
            /// <para>/// special cases for when VisibleNoLinkage would lose the
            /// visible bit and</para>
            /// <para>/// become NoLinkage.</para>
            /// </remarks>
            public static clang.Linkage minLinkage(clang.Linkage L1, clang.Linkage L2)
            {
                var arg0 = L1;
                var arg1 = L2;
                var __ret = Internal.minLinkage_0(arg0, arg1);
                return __ret;
            }
        }
    }
}
