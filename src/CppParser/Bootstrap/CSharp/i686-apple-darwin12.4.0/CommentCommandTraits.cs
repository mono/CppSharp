//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace clang
    {
        namespace comments
        {
            /// <summary>
            /// <para>Information about a single command.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Information about a single command.</para>
            /// <para>///</para>
            /// <para>/// When reordering, adding or removing members please update the
            /// corresponding</para>
            /// <para>/// TableGen backend.</para>
            /// </remarks>
            public unsafe partial class CommandInfo : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr Name;

                    [FieldOffset(4)]
                    public global::System.IntPtr EndCommandName;

                    [FieldOffset(8)]
                    public uint ID;

                    [FieldOffset(10)]
                    public uint NumArgs;

                    [FieldOffset(11)]
                    public uint IsInlineCommand;

                    [FieldOffset(11)]
                    public uint IsBlockCommand;

                    [FieldOffset(11)]
                    public uint IsBriefCommand;

                    [FieldOffset(11)]
                    public uint IsReturnsCommand;

                    [FieldOffset(11)]
                    public uint IsParamCommand;

                    [FieldOffset(11)]
                    public uint IsTParamCommand;

                    [FieldOffset(11)]
                    public uint IsThrowsCommand;

                    [FieldOffset(11)]
                    public uint IsDeprecatedCommand;

                    [FieldOffset(12)]
                    public uint IsHeaderfileCommand;

                    [FieldOffset(12)]
                    public uint IsEmptyParagraphAllowed;

                    [FieldOffset(12)]
                    public uint IsVerbatimBlockCommand;

                    [FieldOffset(12)]
                    public uint IsVerbatimBlockEndCommand;

                    [FieldOffset(12)]
                    public uint IsVerbatimLineCommand;

                    [FieldOffset(12)]
                    public uint IsDeclarationCommand;

                    [FieldOffset(12)]
                    public uint IsFunctionDeclarationCommand;

                    [FieldOffset(12)]
                    public uint IsRecordLikeDetailCommand;

                    [FieldOffset(13)]
                    public uint IsRecordLikeDeclarationCommand;

                    [FieldOffset(13)]
                    public uint IsUnknownCommand;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN5clang8comments11CommandInfoC2ERKS1_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK5clang8comments11CommandInfo5getIDEv")]
                    internal static extern uint getID_0(global::System.IntPtr instance);
                }

                /// <summary>
                /// <para>DRY definition of the number of bits used for a command
                /// ID.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// DRY definition of the number of bits used for a command
                /// ID.</para>
                /// </remarks>
                public enum NumCommandIDBits : uint
                {
                    NumCommandIDBits = 20
                }

                public global::System.IntPtr __Instance { get; protected set; }
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, CommandInfo> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, CommandInfo>();

                private readonly bool __ownsNativeInstance;

                public static CommandInfo __CreateInstance(global::System.IntPtr native)
                {
                    return new CommandInfo((CommandInfo.Internal*) native);
                }

                public static CommandInfo __CreateInstance(CommandInfo.Internal native)
                {
                    return new CommandInfo(native);
                }

                private static CommandInfo.Internal* __CopyValue(CommandInfo.Internal native)
                {
                    var ret = (CommandInfo.Internal*) Marshal.AllocHGlobal(16);
                    *ret = native;
                    return ret;
                }

                private CommandInfo(CommandInfo.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected CommandInfo(CommandInfo.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public CommandInfo()
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    DestroyNativeInstance(false);
                }

                public virtual void DestroyNativeInstance()
                {
                    DestroyNativeInstance(true);
                }

                private void DestroyNativeInstance(bool force)
                {
                    clang.comments.CommandInfo __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public uint getID()
                {
                    var __ret = Internal.getID_0(__Instance);
                    return __ret;
                }

                public string Name
                {
                    get
                    {
                        return Marshal.PtrToStringAnsi(((Internal*) __Instance)->Name);
                    }

                    set
                    {
                        ((Internal*) __Instance)->Name = Marshal.StringToHGlobalAnsi(value);
                    }
                }

                public string EndCommandName
                {
                    get
                    {
                        return Marshal.PtrToStringAnsi(((Internal*) __Instance)->EndCommandName);
                    }

                    set
                    {
                        ((Internal*) __Instance)->EndCommandName = Marshal.StringToHGlobalAnsi(value);
                    }
                }

                public uint ID
                {
                    get
                    {
                        return ((Internal*) __Instance)->ID;
                    }

                    set
                    {
                        ((Internal*) __Instance)->ID = value;
                    }
                }

                public uint NumArgs
                {
                    get
                    {
                        return ((Internal*) __Instance)->NumArgs;
                    }

                    set
                    {
                        ((Internal*) __Instance)->NumArgs = value;
                    }
                }

                public uint IsInlineCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsInlineCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsInlineCommand = value;
                    }
                }

                public uint IsBlockCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsBlockCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsBlockCommand = value;
                    }
                }

                public uint IsBriefCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsBriefCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsBriefCommand = value;
                    }
                }

                public uint IsReturnsCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsReturnsCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsReturnsCommand = value;
                    }
                }

                public uint IsParamCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsParamCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsParamCommand = value;
                    }
                }

                public uint IsTParamCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsTParamCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsTParamCommand = value;
                    }
                }

                public uint IsThrowsCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsThrowsCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsThrowsCommand = value;
                    }
                }

                public uint IsDeprecatedCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsDeprecatedCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsDeprecatedCommand = value;
                    }
                }

                public uint IsHeaderfileCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsHeaderfileCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsHeaderfileCommand = value;
                    }
                }

                public uint IsEmptyParagraphAllowed
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsEmptyParagraphAllowed;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsEmptyParagraphAllowed = value;
                    }
                }

                public uint IsVerbatimBlockCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsVerbatimBlockCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsVerbatimBlockCommand = value;
                    }
                }

                public uint IsVerbatimBlockEndCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsVerbatimBlockEndCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsVerbatimBlockEndCommand = value;
                    }
                }

                public uint IsVerbatimLineCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsVerbatimLineCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsVerbatimLineCommand = value;
                    }
                }

                public uint IsDeclarationCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsDeclarationCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsDeclarationCommand = value;
                    }
                }

                public uint IsFunctionDeclarationCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsFunctionDeclarationCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsFunctionDeclarationCommand = value;
                    }
                }

                public uint IsRecordLikeDetailCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsRecordLikeDetailCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsRecordLikeDetailCommand = value;
                    }
                }

                public uint IsRecordLikeDeclarationCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsRecordLikeDeclarationCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsRecordLikeDeclarationCommand = value;
                    }
                }

                public uint IsUnknownCommand
                {
                    get
                    {
                        return ((Internal*) __Instance)->IsUnknownCommand;
                    }

                    set
                    {
                        ((Internal*) __Instance)->IsUnknownCommand = value;
                    }
                }
            }

            /// <summary>
            /// <para>This class provides information about commands that can be used
            /// in comments.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// This class provides information about commands that can be
            /// used</para>
            /// <para>/// in comments.</para>
            /// </remarks>
            public unsafe partial class CommandTraits : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 36)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public uint NextID;

                    [FieldOffset(4)]
                    public global::System.IntPtr Allocator;

                    [FieldOffset(8)]
                    internal llvm.SmallVector.Internal RegisteredCommands;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN5clang8comments13CommandTraitsD2Ev")]
                    internal static extern void dtor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN5clang8comments13CommandTraits22registerCommentOptionsERKNS_14CommentOptionsE")]
                    internal static extern void registerCommentOptions_0(global::System.IntPtr instance, global::System.IntPtr CommentOptions);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK5clang8comments13CommandTraits20getCommandInfoOrNULLEN4llvm9StringRefE")]
                    internal static extern global::System.IntPtr getCommandInfoOrNULL_0(global::System.IntPtr instance, llvm.StringRef.Internal Name);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK5clang8comments13CommandTraits14getCommandInfoEN4llvm9StringRefE")]
                    internal static extern global::System.IntPtr getCommandInfo_0(global::System.IntPtr instance, llvm.StringRef.Internal Name);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK5clang8comments13CommandTraits25getTypoCorrectCommandInfoEN4llvm9StringRefE")]
                    internal static extern global::System.IntPtr getTypoCorrectCommandInfo_0(global::System.IntPtr instance, llvm.StringRef.Internal Typo);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK5clang8comments13CommandTraits14getCommandInfoEj")]
                    internal static extern global::System.IntPtr getCommandInfo_1(global::System.IntPtr instance, uint CommandID);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN5clang8comments13CommandTraits22registerUnknownCommandEN4llvm9StringRefE")]
                    internal static extern global::System.IntPtr registerUnknownCommand_0(global::System.IntPtr instance, llvm.StringRef.Internal CommandName);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN5clang8comments13CommandTraits20registerBlockCommandEN4llvm9StringRefE")]
                    internal static extern global::System.IntPtr registerBlockCommand_0(global::System.IntPtr instance, llvm.StringRef.Internal CommandName);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN5clang8comments13CommandTraits21getBuiltinCommandInfoEN4llvm9StringRefE")]
                    internal static extern global::System.IntPtr getBuiltinCommandInfo_0(llvm.StringRef.Internal Name);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN5clang8comments13CommandTraits21getBuiltinCommandInfoEj")]
                    internal static extern global::System.IntPtr getBuiltinCommandInfo_1(uint CommandID);
                }

                public enum KnownCommandIDs : uint
                {
                    KCI_a = 0,
                    KCI_abstract = 1,
                    KCI_addtogroup = 2,
                    KCI_arg = 3,
                    KCI_attention = 4,
                    KCI_author = 5,
                    KCI_authors = 6,
                    KCI_b = 7,
                    KCI_brief = 8,
                    KCI_bug = 9,
                    KCI_c = 10,
                    KCI_callback = 11,
                    KCI_category = 12,
                    KCI_class = 13,
                    KCI_classdesign = 14,
                    KCI_coclass = 15,
                    KCI_code = 16,
                    KCI_endcode = 17,
                    KCI_const = 18,
                    KCI_constant = 19,
                    KCI_copyright = 20,
                    KCI_date = 21,
                    KCI_def = 22,
                    KCI_defgroup = 23,
                    KCI_dependency = 24,
                    KCI_deprecated = 25,
                    KCI_details = 26,
                    KCI_discussion = 27,
                    KCI_dot = 28,
                    KCI_enddot = 29,
                    KCI_e = 30,
                    KCI_em = 31,
                    KCI_enum = 32,
                    KCI_exception = 33,
                    KCI_flbrace = 34,
                    KCI_frbrace = 35,
                    KCI_flsquare = 36,
                    KCI_frsquare = 37,
                    KCI_fdollar = 38,
                    KCI_fn = 39,
                    KCI_function = 40,
                    KCI_functiongroup = 41,
                    KCI_headerfile = 42,
                    KCI_helper = 43,
                    KCI_helperclass = 44,
                    KCI_helps = 45,
                    KCI_htmlonly = 46,
                    KCI_endhtmlonly = 47,
                    KCI_ingroup = 48,
                    KCI_instancesize = 49,
                    KCI_interface = 50,
                    KCI_invariant = 51,
                    KCI_latexonly = 52,
                    KCI_endlatexonly = 53,
                    KCI_li = 54,
                    KCI_link = 55,
                    KCI_slashlink = 56,
                    KCI_mainpage = 57,
                    KCI_manonly = 58,
                    KCI_endmanonly = 59,
                    KCI_method = 60,
                    KCI_methodgroup = 61,
                    KCI_msc = 62,
                    KCI_endmsc = 63,
                    KCI_name = 64,
                    KCI_namespace = 65,
                    KCI_note = 66,
                    KCI_overload = 67,
                    KCI_ownership = 68,
                    KCI_p = 69,
                    KCI_par = 70,
                    KCI_paragraph = 71,
                    KCI_param = 72,
                    KCI_performance = 73,
                    KCI_post = 74,
                    KCI_pre = 75,
                    KCI_property = 76,
                    KCI_protocol = 77,
                    KCI_ref = 78,
                    KCI_related = 79,
                    KCI_relatedalso = 80,
                    KCI_relates = 81,
                    KCI_relatesalso = 82,
                    KCI_remark = 83,
                    KCI_remarks = 84,
                    KCI_result = 85,
                    KCI_return = 86,
                    KCI_returns = 87,
                    KCI_rtfonly = 88,
                    KCI_endrtfonly = 89,
                    KCI_sa = 90,
                    KCI_section = 91,
                    KCI_security = 92,
                    KCI_see = 93,
                    KCI_seealso = 94,
                    KCI_short = 95,
                    KCI_since = 96,
                    KCI_struct = 97,
                    KCI_subpage = 98,
                    KCI_subsection = 99,
                    KCI_subsubsection = 100,
                    KCI_superclass = 101,
                    KCI_template = 102,
                    KCI_templatefield = 103,
                    KCI_textblock = 104,
                    KCI_slashtextblock = 105,
                    KCI_throw = 106,
                    KCI_throws = 107,
                    KCI_todo = 108,
                    KCI_tparam = 109,
                    KCI_typedef = 110,
                    KCI_union = 111,
                    KCI_var = 112,
                    KCI_verbatim = 113,
                    KCI_endverbatim = 114,
                    KCI_version = 115,
                    KCI_warning = 116,
                    KCI_weakgroup = 117,
                    KCI_xmlonly = 118,
                    KCI_endxmlonly = 119,
                    KCI_Last = 120
                }

                public global::System.IntPtr __Instance { get; protected set; }
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, CommandTraits> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, CommandTraits>();

                private readonly bool __ownsNativeInstance;

                public static CommandTraits __CreateInstance(global::System.IntPtr native)
                {
                    return new CommandTraits((CommandTraits.Internal*) native);
                }

                public static CommandTraits __CreateInstance(CommandTraits.Internal native)
                {
                    return new CommandTraits(native);
                }

                private static CommandTraits.Internal* __CopyValue(CommandTraits.Internal native)
                {
                    var ret = (CommandTraits.Internal*) Marshal.AllocHGlobal(36);
                    *ret = native;
                    return ret;
                }

                private CommandTraits(CommandTraits.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected CommandTraits(CommandTraits.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    DestroyNativeInstance(false);
                }

                public virtual void DestroyNativeInstance()
                {
                    DestroyNativeInstance(true);
                }

                private void DestroyNativeInstance(bool force)
                {
                    clang.comments.CommandTraits __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance || force)
                        Internal.dtor_0(__Instance);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public void registerCommentOptions(clang.CommentOptions CommentOptions)
                {
                    var arg0 = ReferenceEquals(CommentOptions, null) ? global::System.IntPtr.Zero : CommentOptions.__Instance;
                    Internal.registerCommentOptions_0(__Instance, arg0);
                }

                /// <summary>
                /// <para>Returns a CommandInfo object for a given command name or NULL if
                /// no CommandInfo object exists for this command.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// \returns a CommandInfo object for a given command name
                /// or</para>
                /// <para>  /// NULL if no CommandInfo object exists for this
                /// command.</para>
                /// </remarks>
                public clang.comments.CommandInfo getCommandInfoOrNULL(llvm.StringRef Name)
                {
                    var arg0 = ReferenceEquals(Name, null) ? new llvm.StringRef.Internal() : *(llvm.StringRef.Internal*) (Name.__Instance);
                    var __ret = Internal.getCommandInfoOrNULL_0(__Instance, arg0);
                    clang.comments.CommandInfo __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (clang.comments.CommandInfo.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (clang.comments.CommandInfo) clang.comments.CommandInfo.NativeToManagedMap[__ret];
                    else __result0 = clang.comments.CommandInfo.__CreateInstance(__ret);
                    return __result0;
                }

                public clang.comments.CommandInfo getCommandInfo(llvm.StringRef Name)
                {
                    var arg0 = ReferenceEquals(Name, null) ? new llvm.StringRef.Internal() : *(llvm.StringRef.Internal*) (Name.__Instance);
                    var __ret = Internal.getCommandInfo_0(__Instance, arg0);
                    clang.comments.CommandInfo __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (clang.comments.CommandInfo.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (clang.comments.CommandInfo) clang.comments.CommandInfo.NativeToManagedMap[__ret];
                    else __result0 = clang.comments.CommandInfo.__CreateInstance(__ret);
                    return __result0;
                }

                public clang.comments.CommandInfo getTypoCorrectCommandInfo(llvm.StringRef Typo)
                {
                    var arg0 = ReferenceEquals(Typo, null) ? new llvm.StringRef.Internal() : *(llvm.StringRef.Internal*) (Typo.__Instance);
                    var __ret = Internal.getTypoCorrectCommandInfo_0(__Instance, arg0);
                    clang.comments.CommandInfo __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (clang.comments.CommandInfo.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (clang.comments.CommandInfo) clang.comments.CommandInfo.NativeToManagedMap[__ret];
                    else __result0 = clang.comments.CommandInfo.__CreateInstance(__ret);
                    return __result0;
                }

                public clang.comments.CommandInfo getCommandInfo(uint CommandID)
                {
                    var __ret = Internal.getCommandInfo_1(__Instance, CommandID);
                    clang.comments.CommandInfo __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (clang.comments.CommandInfo.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (clang.comments.CommandInfo) clang.comments.CommandInfo.NativeToManagedMap[__ret];
                    else __result0 = clang.comments.CommandInfo.__CreateInstance(__ret);
                    return __result0;
                }

                public clang.comments.CommandInfo registerUnknownCommand(llvm.StringRef CommandName)
                {
                    var arg0 = ReferenceEquals(CommandName, null) ? new llvm.StringRef.Internal() : *(llvm.StringRef.Internal*) (CommandName.__Instance);
                    var __ret = Internal.registerUnknownCommand_0(__Instance, arg0);
                    clang.comments.CommandInfo __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (clang.comments.CommandInfo.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (clang.comments.CommandInfo) clang.comments.CommandInfo.NativeToManagedMap[__ret];
                    else __result0 = clang.comments.CommandInfo.__CreateInstance(__ret);
                    return __result0;
                }

                public clang.comments.CommandInfo registerBlockCommand(llvm.StringRef CommandName)
                {
                    var arg0 = ReferenceEquals(CommandName, null) ? new llvm.StringRef.Internal() : *(llvm.StringRef.Internal*) (CommandName.__Instance);
                    var __ret = Internal.registerBlockCommand_0(__Instance, arg0);
                    clang.comments.CommandInfo __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (clang.comments.CommandInfo.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (clang.comments.CommandInfo) clang.comments.CommandInfo.NativeToManagedMap[__ret];
                    else __result0 = clang.comments.CommandInfo.__CreateInstance(__ret);
                    return __result0;
                }

                /// <summary>
                /// <para>Returns a CommandInfo object for a given command name or NULL if
                /// Name is not a builtin command.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// \returns a CommandInfo object for a given command name
                /// or</para>
                /// <para>  /// NULL if \c Name is not a builtin command.</para>
                /// </remarks>
                public static clang.comments.CommandInfo getBuiltinCommandInfo(llvm.StringRef Name)
                {
                    var arg0 = ReferenceEquals(Name, null) ? new llvm.StringRef.Internal() : *(llvm.StringRef.Internal*) (Name.__Instance);
                    var __ret = Internal.getBuiltinCommandInfo_0(arg0);
                    clang.comments.CommandInfo __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (clang.comments.CommandInfo.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (clang.comments.CommandInfo) clang.comments.CommandInfo.NativeToManagedMap[__ret];
                    else __result0 = clang.comments.CommandInfo.__CreateInstance(__ret);
                    return __result0;
                }

                /// <summary>
                /// <para>Returns a CommandInfo object for a given command ID or NULL if
                /// CommandID is not a builtin command.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// \returns a CommandInfo object for a given command ID
                /// or</para>
                /// <para>  /// NULL if \c CommandID is not a builtin command.</para>
                /// </remarks>
                public static clang.comments.CommandInfo getBuiltinCommandInfo(uint CommandID)
                {
                    var __ret = Internal.getBuiltinCommandInfo_1(CommandID);
                    clang.comments.CommandInfo __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (clang.comments.CommandInfo.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (clang.comments.CommandInfo) clang.comments.CommandInfo.NativeToManagedMap[__ret];
                    else __result0 = clang.comments.CommandInfo.__CreateInstance(__ret);
                    return __result0;
                }
            }
        }
    }
}
