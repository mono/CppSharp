//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    public unsafe partial class Visibility
    {
        public partial struct Internal
        {
        }
    }

    namespace clang
    {
        /// <summary>
        /// <para>Describes the different kinds of visibility that a declaration
        /// may have.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Describes the different kinds of visibility that a
        /// declaration</para>
        /// <para>/// may have.</para>
        /// <para>///</para>
        /// <para>/// Visibility determines how a declaration interacts with the
        /// dynamic</para>
        /// <para>/// linker.  It may also affect whether the symbol can be found
        /// by runtime</para>
        /// <para>/// symbol lookup APIs.</para>
        /// <para>///</para>
        /// <para>/// Visibility is not described in any language standard
        /// and</para>
        /// <para>/// (nonetheless) sometimes has odd behavior.  Not all
        /// platforms</para>
        /// <para>/// support all visibility kinds.</para>
        /// </remarks>
        public enum Visibility : uint
        {
            /// <summary>Objects with "hidden" visibility are not seen by the dynamic linker.</summary>
            HiddenVisibility = 0,
            /// <summary>Objects with "protected" visibility are seen by the dynamic linker but always dynamically resolve to an object within this shared object.</summary>
            ProtectedVisibility = 1,
            /// <summary>Objects with "default" visibility are seen by the dynamic linker and act like normal objects.</summary>
            DefaultVisibility = 2
        }

        public unsafe partial class LinkageInfo : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 1)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public byte linkage_;

                [FieldOffset(0)]
                public byte visibility_;

                [FieldOffset(0)]
                public byte explicit_;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfoC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfoC2ENS_7LinkageENS_10VisibilityEb")]
                internal static extern void ctor_1(global::System.IntPtr instance, clang.Linkage L, clang.Visibility V, bool E);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfoC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo8externalEv")]
                internal static extern clang.LinkageInfo.Internal external_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo8internalEv")]
                internal static extern clang.LinkageInfo.Internal @internal_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo14uniqueExternalEv")]
                internal static extern clang.LinkageInfo.Internal uniqueExternal_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo4noneEv")]
                internal static extern clang.LinkageInfo.Internal none_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang11LinkageInfo10getLinkageEv")]
                internal static extern clang.Linkage getLinkage_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang11LinkageInfo13getVisibilityEv")]
                internal static extern clang.Visibility getVisibility_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang11LinkageInfo20isVisibilityExplicitEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isVisibilityExplicit_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo10setLinkageENS_7LinkageE")]
                internal static extern void setLinkage_0(global::System.IntPtr instance, clang.Linkage L);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo12mergeLinkageENS_7LinkageE")]
                internal static extern void mergeLinkage_0(global::System.IntPtr instance, clang.Linkage L);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo12mergeLinkageES0_")]
                internal static extern void mergeLinkage_1(global::System.IntPtr instance, clang.LinkageInfo.Internal other);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo23mergeExternalVisibilityENS_7LinkageE")]
                internal static extern void mergeExternalVisibility_0(global::System.IntPtr instance, clang.Linkage L);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo23mergeExternalVisibilityES0_")]
                internal static extern void mergeExternalVisibility_1(global::System.IntPtr instance, clang.LinkageInfo.Internal Other);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo15mergeVisibilityENS_10VisibilityEb")]
                internal static extern void mergeVisibility_0(global::System.IntPtr instance, clang.Visibility newVis, bool newExplicit);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo15mergeVisibilityES0_")]
                internal static extern void mergeVisibility_1(global::System.IntPtr instance, clang.LinkageInfo.Internal other);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo5mergeES0_")]
                internal static extern void merge_0(global::System.IntPtr instance, clang.LinkageInfo.Internal other);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LinkageInfo24mergeMaybeWithVisibilityES0_b")]
                internal static extern void mergeMaybeWithVisibility_0(global::System.IntPtr instance, clang.LinkageInfo.Internal other, bool withVis);
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, LinkageInfo> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, LinkageInfo>();

            private readonly bool __ownsNativeInstance;

            public static LinkageInfo __CreateInstance(global::System.IntPtr native)
            {
                return new LinkageInfo((LinkageInfo.Internal*) native);
            }

            public static LinkageInfo __CreateInstance(LinkageInfo.Internal native)
            {
                return new LinkageInfo(native);
            }

            private static LinkageInfo.Internal* __CopyValue(LinkageInfo.Internal native)
            {
                var ret = (LinkageInfo.Internal*) Marshal.AllocHGlobal(1);
                *ret = native;
                return ret;
            }

            private LinkageInfo(LinkageInfo.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected LinkageInfo(LinkageInfo.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public LinkageInfo()
            {
                __Instance = Marshal.AllocHGlobal(1);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0(__Instance);
            }

            public LinkageInfo(clang.Linkage L, clang.Visibility V, bool E)
            {
                __Instance = Marshal.AllocHGlobal(1);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = L;
                var arg1 = V;
                Internal.ctor_1(__Instance, arg0, arg1, E);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                clang.LinkageInfo __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public clang.Linkage getLinkage()
            {
                var __ret = Internal.getLinkage_0(__Instance);
                return __ret;
            }

            public clang.Visibility getVisibility()
            {
                var __ret = Internal.getVisibility_0(__Instance);
                return __ret;
            }

            public bool isVisibilityExplicit()
            {
                var __ret = Internal.isVisibilityExplicit_0(__Instance);
                return __ret;
            }

            public void setLinkage(clang.Linkage L)
            {
                var arg0 = L;
                Internal.setLinkage_0(__Instance, arg0);
            }

            public void mergeLinkage(clang.Linkage L)
            {
                var arg0 = L;
                Internal.mergeLinkage_0(__Instance, arg0);
            }

            public void mergeLinkage(clang.LinkageInfo other)
            {
                var arg0 = ReferenceEquals(other, null) ? new clang.LinkageInfo.Internal() : *(clang.LinkageInfo.Internal*) (other.__Instance);
                Internal.mergeLinkage_1(__Instance, arg0);
            }

            public void mergeExternalVisibility(clang.Linkage L)
            {
                var arg0 = L;
                Internal.mergeExternalVisibility_0(__Instance, arg0);
            }

            public void mergeExternalVisibility(clang.LinkageInfo Other)
            {
                var arg0 = ReferenceEquals(Other, null) ? new clang.LinkageInfo.Internal() : *(clang.LinkageInfo.Internal*) (Other.__Instance);
                Internal.mergeExternalVisibility_1(__Instance, arg0);
            }

            /// <summary>
            /// <para>Merge in the visibility 'newVis'.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Merge in the visibility 'newVis'.</para>
            /// </remarks>
            public void mergeVisibility(clang.Visibility newVis, bool newExplicit)
            {
                var arg0 = newVis;
                Internal.mergeVisibility_0(__Instance, arg0, newExplicit);
            }

            public void mergeVisibility(clang.LinkageInfo other)
            {
                var arg0 = ReferenceEquals(other, null) ? new clang.LinkageInfo.Internal() : *(clang.LinkageInfo.Internal*) (other.__Instance);
                Internal.mergeVisibility_1(__Instance, arg0);
            }

            /// <summary>
            /// <para>Merge both linkage and visibility.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Merge both linkage and visibility.</para>
            /// </remarks>
            public void merge(clang.LinkageInfo other)
            {
                var arg0 = ReferenceEquals(other, null) ? new clang.LinkageInfo.Internal() : *(clang.LinkageInfo.Internal*) (other.__Instance);
                Internal.merge_0(__Instance, arg0);
            }

            /// <summary>
            /// <para>Merge linkage and conditionally merge visibility.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Merge linkage and conditionally merge visibility.</para>
            /// </remarks>
            public void mergeMaybeWithVisibility(clang.LinkageInfo other, bool withVis)
            {
                var arg0 = ReferenceEquals(other, null) ? new clang.LinkageInfo.Internal() : *(clang.LinkageInfo.Internal*) (other.__Instance);
                Internal.mergeMaybeWithVisibility_0(__Instance, arg0, withVis);
            }

            public static clang.LinkageInfo external()
            {
                var __ret = Internal.external_0();
                return clang.LinkageInfo.__CreateInstance(__ret);
            }

            public static clang.LinkageInfo @internal()
            {
                var __ret = Internal.@internal_0();
                return clang.LinkageInfo.__CreateInstance(__ret);
            }

            public static clang.LinkageInfo uniqueExternal()
            {
                var __ret = Internal.uniqueExternal_0();
                return clang.LinkageInfo.__CreateInstance(__ret);
            }

            public static clang.LinkageInfo none()
            {
                var __ret = Internal.none_0();
                return clang.LinkageInfo.__CreateInstance(__ret);
            }
        }

        public unsafe partial class Visibility
        {
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang13minVisibilityENS_10VisibilityES0_")]
                internal static extern clang.Visibility minVisibility_0(clang.Visibility L, clang.Visibility R);
            }

            public static clang.Visibility minVisibility(clang.Visibility L, clang.Visibility R)
            {
                var arg0 = L;
                var arg1 = R;
                var __ret = Internal.minVisibility_0(arg0, arg1);
                return __ret;
            }
        }
    }
}
