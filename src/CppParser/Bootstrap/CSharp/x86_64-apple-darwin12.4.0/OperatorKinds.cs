//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    public unsafe partial class OperatorKinds
    {
        public partial struct Internal
        {
        }
    }

    namespace clang
    {
        /// <summary>
        /// <para>Enumeration specifying the different kinds of C++ overloaded
        /// operators.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Enumeration specifying the different kinds of C++
        /// overloaded</para>
        /// <para>/// operators.</para>
        /// </remarks>
        public enum OverloadedOperatorKind
        {
            /// <summary>Not an overloaded operator</summary>
            OO_None = 0,
            OO_New = 1,
            OO_Delete = 2,
            OO_Array_New = 3,
            OO_Array_Delete = 4,
            OO_Plus = 5,
            OO_Minus = 6,
            OO_Star = 7,
            OO_Slash = 8,
            OO_Percent = 9,
            OO_Caret = 10,
            OO_Amp = 11,
            OO_Pipe = 12,
            OO_Tilde = 13,
            OO_Exclaim = 14,
            OO_Equal = 15,
            OO_Less = 16,
            OO_Greater = 17,
            OO_PlusEqual = 18,
            OO_MinusEqual = 19,
            OO_StarEqual = 20,
            OO_SlashEqual = 21,
            OO_PercentEqual = 22,
            OO_CaretEqual = 23,
            OO_AmpEqual = 24,
            OO_PipeEqual = 25,
            OO_LessLess = 26,
            OO_GreaterGreater = 27,
            OO_LessLessEqual = 28,
            OO_GreaterGreaterEqual = 29,
            OO_EqualEqual = 30,
            OO_ExclaimEqual = 31,
            OO_LessEqual = 32,
            OO_GreaterEqual = 33,
            OO_AmpAmp = 34,
            OO_PipePipe = 35,
            OO_PlusPlus = 36,
            OO_MinusMinus = 37,
            OO_Comma = 38,
            OO_ArrowStar = 39,
            OO_Arrow = 40,
            OO_Call = 41,
            OO_Subscript = 42,
            OO_Conditional = 43,
            NUM_OVERLOADED_OPERATORS = 44
        }

        public unsafe partial class OperatorKinds
        {
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang19getOperatorSpellingENS_22OverloadedOperatorKindE")]
                internal static extern global::System.IntPtr getOperatorSpelling_0(clang.OverloadedOperatorKind Operator);
            }

            /// <summary>
            /// <para>Retrieve the spelling of the given overloaded operator, without
            /// the preceding &quot;operator&quot; keyword.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Retrieve the spelling of the given overloaded
            /// operator, without </para>
            /// <para>/// the preceding &quot;operator&quot; keyword.</para>
            /// </remarks>
            public static string getOperatorSpelling(clang.OverloadedOperatorKind Operator)
            {
                var arg0 = Operator;
                var __ret = Internal.getOperatorSpelling_0(arg0);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }
    }
}
