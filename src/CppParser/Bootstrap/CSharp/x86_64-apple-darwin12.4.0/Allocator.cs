//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    public unsafe partial class Allocator
    {
        public partial struct Internal
        {
        }
    }

    namespace llvm
    {
        /// <summary>
        /// <para>Allocate memory in an ever growing pool, as if by
        /// bump-pointer.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Allocate memory in an ever growing pool, as if by
        /// bump-pointer.</para>
        /// <para>///</para>
        /// <para>/// This isn't strictly a bump-pointer allocator as it uses
        /// backing slabs of</para>
        /// <para>/// memory rather than relying on a boundless contiguous heap.
        /// However, it has</para>
        /// <para>/// bump-pointer semantics in that it is a monotonically growing
        /// pool of memory</para>
        /// <para>/// where every allocation is found by merely allocating the next
        /// N bytes in</para>
        /// <para>/// the slab, or the next N bytes in the next slab.</para>
        /// <para>///</para>
        /// <para>/// Note that this also has a threshold for forcing allocations
        /// above a certain</para>
        /// <para>/// size into their own slab.</para>
        /// <para>///</para>
        /// <para>/// The BumpPtrAllocatorImpl template defaults to using a
        /// MallocAllocator</para>
        /// <para>/// object, which wraps malloc, to allocate memory, but it can be
        /// changed to</para>
        /// <para>/// use a custom allocator.</para>
        /// </remarks>
        public unsafe partial class BumpPtrAllocatorImpl
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public sbyte* CurPtr;

                [FieldOffset(0)]
                public sbyte* End;

                [FieldOffset(0)]
                internal llvm.SmallVector.Internal Slabs;

                [FieldOffset(0)]
                internal llvm.SmallVector.Internal CustomSizedSlabs;

                [FieldOffset(99487244)]
                public ulong BytesAllocated;
            }
        }

        /// <summary>
        /// <para>CRTP base class providing obvious overloads for the core
        /// Allocate() methods of LLVM-style allocators.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief CRTP base class providing obvious overloads for the
        /// core \c</para>
        /// <para>/// Allocate() methods of LLVM-style allocators.</para>
        /// <para>///</para>
        /// <para>/// This base class both documents the full public interface
        /// exposed by all</para>
        /// <para>/// LLVM-style allocators, and redirects all of the overloads to
        /// a single core</para>
        /// <para>/// set of methods which the derived class must define.</para>
        /// </remarks>
        public unsafe partial class AllocatorBase
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }
        }

        public unsafe partial class MallocAllocator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm15MallocAllocatorC2ERKS0_")]
                internal static extern void cctor_0(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm15MallocAllocator5ResetEv")]
                internal static extern void Reset_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm15MallocAllocator8AllocateEmm")]
                internal static extern global::System.IntPtr Allocate_0(global::System.IntPtr instance, ulong Size, ulong _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm15MallocAllocator10DeallocateEPKvm")]
                internal static extern void Deallocate_0(global::System.IntPtr instance, global::System.IntPtr Ptr, ulong _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm15MallocAllocator10PrintStatsEv")]
                internal static extern void PrintStats_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, MallocAllocator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, MallocAllocator>();

            private readonly bool __ownsNativeInstance;

            public static MallocAllocator __CreateInstance(global::System.IntPtr native)
            {
                return new MallocAllocator((MallocAllocator.Internal*) native);
            }

            public static MallocAllocator __CreateInstance(MallocAllocator.Internal native)
            {
                return new MallocAllocator(native);
            }

            private static MallocAllocator.Internal* __CopyValue(MallocAllocator.Internal native)
            {
                var ret = (MallocAllocator.Internal*) Marshal.AllocHGlobal(0);
                *ret = native;
                return ret;
            }

            private MallocAllocator(MallocAllocator.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected MallocAllocator(MallocAllocator.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public MallocAllocator()
            {
                __Instance = Marshal.AllocHGlobal(0);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                llvm.MallocAllocator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public void Reset()
            {
                Internal.Reset_0(__Instance);
            }

            public global::System.IntPtr Allocate(ulong Size, ulong _0)
            {
                var arg0 = Size;
                var arg1 = _0;
                var __ret = Internal.Allocate_0(__Instance, arg0, arg1);
                return __ret;
            }

            public void Deallocate(global::System.IntPtr Ptr, ulong _0)
            {
                var arg0 = Ptr;
                var arg1 = _0;
                Internal.Deallocate_0(__Instance, arg0, arg1);
            }

            public void PrintStats()
            {
                Internal.PrintStats_0(__Instance);
            }
        }

        public unsafe partial class Allocator
        {
            public partial struct Internal
            {
            }
        }

        namespace detail
        {
            public unsafe partial class Allocator
            {
                public partial struct Internal
                {
                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm6detail26printBumpPtrAllocatorStatsEjmm")]
                    internal static extern void printBumpPtrAllocatorStats_0(uint NumSlabs, ulong BytesAllocated, ulong TotalMemory);
                }

                public static void printBumpPtrAllocatorStats(uint NumSlabs, ulong BytesAllocated, ulong TotalMemory)
                {
                    var arg1 = BytesAllocated;
                    var arg2 = TotalMemory;
                    Internal.printBumpPtrAllocatorStats_0(NumSlabs, arg1, arg2);
                }
            }
        }
    }
}
