//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace clang
    {
        /// <summary>
        /// <para>Represents a version number in the form
        /// major[.minor[.subminor]].</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Represents a version number in the form
        /// major[.minor[.subminor]].</para>
        /// </remarks>
        public unsafe partial class VersionTuple : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public uint Major;

                [FieldOffset(4)]
                public uint Minor;

                [FieldOffset(8)]
                public uint Subminor;

                [FieldOffset(11)]
                public uint HasMinor;

                [FieldOffset(12)]
                public uint HasSubminor;

                [FieldOffset(12)]
                public uint UsesUnderscores;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang12VersionTupleC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang12VersionTupleC2Ej")]
                internal static extern void ctor_1(global::System.IntPtr instance, uint Major);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang12VersionTupleC2Ejjb")]
                internal static extern void ctor_2(global::System.IntPtr instance, uint Major, uint Minor, bool UsesUnderscores);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang12VersionTupleC2Ejjjb")]
                internal static extern void ctor_3(global::System.IntPtr instance, uint Major, uint Minor, uint Subminor, bool UsesUnderscores);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang12VersionTupleC2ERKS0_")]
                internal static extern void cctor_4(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang12VersionTuple5emptyEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool empty_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang12VersionTuple8getMajorEv")]
                internal static extern uint getMajor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang12VersionTuple15usesUnderscoresEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool usesUnderscores_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang12VersionTuple17UseDotAsSeparatorEv")]
                internal static extern void UseDotAsSeparator_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang12VersionTuple8tryParseEN4llvm9StringRefE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool tryParse_0(global::System.IntPtr instance, llvm.StringRef.Internal @string);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangeqERKNS_12VersionTupleES2_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr X, global::System.IntPtr Y);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangneERKNS_12VersionTupleES2_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr X, global::System.IntPtr Y);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangltERKNS_12VersionTupleES2_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLess_0(global::System.IntPtr X, global::System.IntPtr Y);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clanggtERKNS_12VersionTupleES2_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreater_0(global::System.IntPtr X, global::System.IntPtr Y);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangleERKNS_12VersionTupleES2_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLessEqual_0(global::System.IntPtr X, global::System.IntPtr Y);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clanggeERKNS_12VersionTupleES2_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreaterEqual_0(global::System.IntPtr X, global::System.IntPtr Y);
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VersionTuple> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VersionTuple>();

            private readonly bool __ownsNativeInstance;

            public static VersionTuple __CreateInstance(global::System.IntPtr native)
            {
                return new VersionTuple((VersionTuple.Internal*) native);
            }

            public static VersionTuple __CreateInstance(VersionTuple.Internal native)
            {
                return new VersionTuple(native);
            }

            private static VersionTuple.Internal* __CopyValue(VersionTuple.Internal native)
            {
                var ret = (VersionTuple.Internal*) Marshal.AllocHGlobal(16);
                *ret = native;
                return ret;
            }

            private VersionTuple(VersionTuple.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected VersionTuple(VersionTuple.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public VersionTuple()
            {
                __Instance = Marshal.AllocHGlobal(16);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0(__Instance);
            }

            public VersionTuple(uint Major)
            {
                __Instance = Marshal.AllocHGlobal(16);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_1(__Instance, Major);
            }

            public VersionTuple(uint Major, uint Minor, bool UsesUnderscores)
            {
                __Instance = Marshal.AllocHGlobal(16);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_2(__Instance, Major, Minor, UsesUnderscores);
            }

            public VersionTuple(uint Major, uint Minor, uint Subminor, bool UsesUnderscores)
            {
                __Instance = Marshal.AllocHGlobal(16);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_3(__Instance, Major, Minor, Subminor, UsesUnderscores);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                clang.VersionTuple __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            /// <summary>
            /// <para>Determine whether this version information is empty (e.g., all
            /// version components are zero).</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Determine whether this version information is
            /// empty</para>
            /// <para>  /// (e.g., all version components are zero).</para>
            /// </remarks>
            public bool empty()
            {
                var __ret = Internal.empty_0(__Instance);
                return __ret;
            }

            /// <summary>
            /// <para>Retrieve the major version number.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Retrieve the major version number.</para>
            /// </remarks>
            public uint getMajor()
            {
                var __ret = Internal.getMajor_0(__Instance);
                return __ret;
            }

            public bool usesUnderscores()
            {
                var __ret = Internal.usesUnderscores_0(__Instance);
                return __ret;
            }

            public void UseDotAsSeparator()
            {
                Internal.UseDotAsSeparator_0(__Instance);
            }

            /// <summary>
            /// <para>Try to parse the given string as a version number.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Try to parse the given string as a version
            /// number.</para>
            /// <para>  /// \returns \c true if the string does not match the regular
            /// expression</para>
            /// <para>  ///   [0-9]+(\.[0-9]+(\.[0-9]+))</para>
            /// </remarks>
            public bool tryParse(llvm.StringRef @string)
            {
                var arg0 = ReferenceEquals(@string, null) ? new llvm.StringRef.Internal() : *(llvm.StringRef.Internal*) (@string.__Instance);
                var __ret = Internal.tryParse_0(__Instance, arg0);
                return __ret;
            }

            /// <summary>
            /// <para>Determine if two version numbers are equivalent. If not provided,
            /// minor and subminor version numbers are considered to be zero.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Determine if two version numbers are equivalent. If
            /// not</para>
            /// <para>  /// provided, minor and subminor version numbers are considered
            /// to be zero.</para>
            /// </remarks>
            public static bool operator ==(clang.VersionTuple X, clang.VersionTuple Y)
            {
                bool XNull = ReferenceEquals(X, null);
                bool YNull = ReferenceEquals(Y, null);
                if (XNull || YNull)
                    return XNull && YNull;
                var arg0 = X.__Instance;
                var arg1 = Y.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as VersionTuple;
            }

            /// <summary>
            /// <para>Determine if two version numbers are not equivalent.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Determine if two version numbers are not
            /// equivalent.</para>
            /// <para>  ///</para>
            /// <para>  /// If not provided, minor and subminor version numbers are
            /// considered to be </para>
            /// <para>  /// zero.</para>
            /// </remarks>
            public static bool operator !=(clang.VersionTuple X, clang.VersionTuple Y)
            {
                var arg0 = ReferenceEquals(X, null) ? global::System.IntPtr.Zero : X.__Instance;
                var arg1 = ReferenceEquals(Y, null) ? global::System.IntPtr.Zero : Y.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            /// <summary>
            /// <para>Determine whether one version number precedes another.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Determine whether one version number precedes
            /// another.</para>
            /// <para>  ///</para>
            /// <para>  /// If not provided, minor and subminor version numbers are
            /// considered to be</para>
            /// <para>  /// zero.</para>
            /// </remarks>
            public static bool operator <(clang.VersionTuple X, clang.VersionTuple Y)
            {
                var arg0 = ReferenceEquals(X, null) ? global::System.IntPtr.Zero : X.__Instance;
                var arg1 = ReferenceEquals(Y, null) ? global::System.IntPtr.Zero : Y.__Instance;
                var __ret = Internal.OperatorLess_0(arg0, arg1);
                return __ret;
            }

            /// <summary>
            /// <para>Determine whether one version number follows another.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Determine whether one version number follows
            /// another.</para>
            /// <para>  ///</para>
            /// <para>  /// If not provided, minor and subminor version numbers are
            /// considered to be</para>
            /// <para>  /// zero.</para>
            /// </remarks>
            public static bool operator >(clang.VersionTuple X, clang.VersionTuple Y)
            {
                var arg0 = ReferenceEquals(X, null) ? global::System.IntPtr.Zero : X.__Instance;
                var arg1 = ReferenceEquals(Y, null) ? global::System.IntPtr.Zero : Y.__Instance;
                var __ret = Internal.OperatorGreater_0(arg0, arg1);
                return __ret;
            }

            /// <summary>
            /// <para>Determine whether one version number precedes or is equivalent to
            /// another.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Determine whether one version number precedes or
            /// is</para>
            /// <para>  /// equivalent to another. </para>
            /// <para>  ///</para>
            /// <para>  /// If not provided, minor and subminor version numbers are
            /// considered to be</para>
            /// <para>  /// zero.</para>
            /// </remarks>
            public static bool operator <=(clang.VersionTuple X, clang.VersionTuple Y)
            {
                var arg0 = ReferenceEquals(X, null) ? global::System.IntPtr.Zero : X.__Instance;
                var arg1 = ReferenceEquals(Y, null) ? global::System.IntPtr.Zero : Y.__Instance;
                var __ret = Internal.OperatorLessEqual_0(arg0, arg1);
                return __ret;
            }

            /// <summary>
            /// <para>Determine whether one version number follows or is equivalent to
            /// another.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Determine whether one version number follows or
            /// is</para>
            /// <para>  /// equivalent to another.</para>
            /// <para>  ///</para>
            /// <para>  /// If not provided, minor and subminor version numbers are
            /// considered to be</para>
            /// <para>  /// zero.</para>
            /// </remarks>
            public static bool operator >=(clang.VersionTuple X, clang.VersionTuple Y)
            {
                var arg0 = ReferenceEquals(X, null) ? global::System.IntPtr.Zero : X.__Instance;
                var arg1 = ReferenceEquals(Y, null) ? global::System.IntPtr.Zero : Y.__Instance;
                var __ret = Internal.OperatorGreaterEqual_0(arg0, arg1);
                return __ret;
            }
        }
    }
}
