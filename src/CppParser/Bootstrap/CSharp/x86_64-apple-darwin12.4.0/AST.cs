//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace CppSharp
    {
        namespace CppParser
        {
            namespace AST
            {
                public enum TypeKind
                {
                    Tag = 0,
                    Array = 1,
                    Function = 2,
                    Pointer = 3,
                    MemberPointer = 4,
                    Typedef = 5,
                    Attributed = 6,
                    Decayed = 7,
                    TemplateSpecialization = 8,
                    TemplateParameter = 9,
                    TemplateParameterSubstitution = 10,
                    InjectedClassName = 11,
                    DependentName = 12,
                    PackExpansion = 13,
                    Builtin = 14
                }

                public enum DeclarationKind
                {
                    DeclarationContext = 0,
                    Typedef = 1,
                    Parameter = 2,
                    Function = 3,
                    Method = 4,
                    Enumeration = 5,
                    EnumerationItem = 6,
                    Variable = 7,
                    Field = 8,
                    AccessSpecifier = 9,
                    Class = 10,
                    Template = 11,
                    ClassTemplate = 12,
                    ClassTemplateSpecialization = 13,
                    ClassTemplatePartialSpecialization = 14,
                    FunctionTemplate = 15,
                    Namespace = 16,
                    PreprocessedEntity = 17,
                    MacroDefinition = 18,
                    MacroExpansion = 19,
                    TranslationUnit = 20,
                    Friend = 21
                }

                public enum AccessSpecifier
                {
                    Private = 0,
                    Protected = 1,
                    Public = 2
                }

                public enum CXXMethodKind
                {
                    Normal = 0,
                    Constructor = 1,
                    Destructor = 2,
                    Conversion = 3,
                    Operator = 4,
                    UsingDirective = 5
                }

                public enum CXXOperatorKind
                {
                    None = 0,
                    New = 1,
                    Delete = 2,
                    Array_New = 3,
                    Array_Delete = 4,
                    Plus = 5,
                    Minus = 6,
                    Star = 7,
                    Slash = 8,
                    Percent = 9,
                    Caret = 10,
                    Amp = 11,
                    Pipe = 12,
                    Tilde = 13,
                    Exclaim = 14,
                    Equal = 15,
                    Less = 16,
                    Greater = 17,
                    PlusEqual = 18,
                    MinusEqual = 19,
                    StarEqual = 20,
                    SlashEqual = 21,
                    PercentEqual = 22,
                    CaretEqual = 23,
                    AmpEqual = 24,
                    PipeEqual = 25,
                    LessLess = 26,
                    GreaterGreater = 27,
                    LessLessEqual = 28,
                    GreaterGreaterEqual = 29,
                    EqualEqual = 30,
                    ExclaimEqual = 31,
                    LessEqual = 32,
                    GreaterEqual = 33,
                    AmpAmp = 34,
                    PipePipe = 35,
                    PlusPlus = 36,
                    MinusMinus = 37,
                    Comma = 38,
                    ArrowStar = 39,
                    Arrow = 40,
                    Call = 41,
                    Subscript = 42,
                    Conditional = 43
                }

                public enum CallingConvention
                {
                    Default = 0,
                    C = 1,
                    StdCall = 2,
                    ThisCall = 3,
                    FastCall = 4,
                    Unknown = 5
                }

                public enum StatementClass
                {
                    Any = 0,
                    BinaryOperator = 1,
                    DeclRefExprClass = 2,
                    CXXConstructExprClass = 3,
                    CXXOperatorCallExpr = 4,
                    ImplicitCastExpr = 5,
                    ExplicitCastExpr = 6
                }

                public enum TemplateSpecializationKind
                {
                    Undeclared = 0,
                    ImplicitInstantiation = 1,
                    ExplicitSpecialization = 2,
                    ExplicitInstantiationDeclaration = 3,
                    ExplicitInstantiationDefinition = 4
                }

                public enum CppAbi
                {
                    Itanium = 0,
                    Microsoft = 1,
                    ARM = 2,
                    iOS = 3,
                    iOS64 = 4
                }

                public enum VTableComponentKind
                {
                    VCallOffset = 0,
                    VBaseOffset = 1,
                    OffsetToTop = 2,
                    RTTI = 3,
                    FunctionPointer = 4,
                    CompleteDtorPointer = 5,
                    DeletingDtorPointer = 6,
                    UnusedFunctionPointer = 7
                }

                public enum PrimitiveType
                {
                    Null = 0,
                    Void = 1,
                    Bool = 2,
                    WideChar = 3,
                    Char = 4,
                    UChar = 5,
                    Short = 6,
                    UShort = 7,
                    Int = 8,
                    UInt = 9,
                    Long = 10,
                    ULong = 11,
                    LongLong = 12,
                    ULongLong = 13,
                    Float = 14,
                    Double = 15,
                    IntPtr = 16
                }

                public enum RawCommentKind
                {
                    Invalid = 0,
                    OrdinaryBCPL = 1,
                    OrdinaryC = 2,
                    BCPLSlash = 3,
                    BCPLExcl = 4,
                    JavaDoc = 5,
                    Qt = 6,
                    Merged = 7
                }

                public enum CommentKind
                {
                    FullComment = 0,
                    BlockContentComment = 1,
                    BlockCommandComment = 2,
                    ParamCommandComment = 3,
                    TParamCommandComment = 4,
                    VerbatimBlockComment = 5,
                    VerbatimLineComment = 6,
                    ParagraphComment = 7,
                    HTMLTagComment = 8,
                    HTMLStartTagComment = 9,
                    HTMLEndTagComment = 10,
                    TextComment = 11,
                    InlineContentComment = 12,
                    InlineCommandComment = 13,
                    VerbatimBlockLineComment = 14
                }

                public enum MacroLocation
                {
                    Unknown = 0,
                    ClassHead = 1,
                    ClassBody = 2,
                    FunctionHead = 3,
                    FunctionParameters = 4,
                    FunctionBody = 5
                }

                public enum ArchType
                {
                    UnknownArch = 0,
                    x86 = 1,
                    x86_64 = 2
                }

                public unsafe partial class Type : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 8)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST4TypeC2ENS1_8TypeKindE")]
                        internal static extern void ctor_0(global::System.IntPtr instance, CppSharp.CppParser.AST.TypeKind kind);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST4TypeC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Type> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Type>();

                    private readonly bool __ownsNativeInstance;

                    public static Type __CreateInstance(global::System.IntPtr native)
                    {
                        return new Type((Type.Internal*) native);
                    }

                    public static Type __CreateInstance(Type.Internal native)
                    {
                        return new Type(native);
                    }

                    private static Type.Internal* __CopyValue(Type.Internal native)
                    {
                        var ret = (Type.Internal*) Marshal.AllocHGlobal(8);
                        *ret = native;
                        return ret;
                    }

                    private Type(Type.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Type(Type.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public Type(CppSharp.CppParser.AST.TypeKind kind)
                    {
                        __Instance = Marshal.AllocHGlobal(8);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = kind;
                        Internal.ctor_0(__Instance, arg0);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.TypeKind Kind
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Kind;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Kind = value;
                        }
                    }

                    public bool IsDependent
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsDependent;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsDependent = value;
                        }
                    }
                }

                public unsafe partial class TypeQualifiers : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 3)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public bool IsConst;

                        [FieldOffset(1)]
                        public bool IsVolatile;

                        [FieldOffset(2)]
                        public bool IsRestrict;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14TypeQualifiersC2ERKS2_")]
                        internal static extern void cctor_0(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeQualifiers> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TypeQualifiers>();

                    private readonly bool __ownsNativeInstance;

                    public static TypeQualifiers __CreateInstance(global::System.IntPtr native)
                    {
                        return new TypeQualifiers((TypeQualifiers.Internal*) native);
                    }

                    public static TypeQualifiers __CreateInstance(TypeQualifiers.Internal native)
                    {
                        return new TypeQualifiers(native);
                    }

                    private static TypeQualifiers.Internal* __CopyValue(TypeQualifiers.Internal native)
                    {
                        var ret = (TypeQualifiers.Internal*) Marshal.AllocHGlobal(3);
                        *ret = native;
                        return ret;
                    }

                    private TypeQualifiers(TypeQualifiers.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected TypeQualifiers(TypeQualifiers.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public TypeQualifiers()
                    {
                        __Instance = Marshal.AllocHGlobal(3);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.TypeQualifiers __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public bool IsConst
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsConst;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsConst = value;
                        }
                    }

                    public bool IsVolatile
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsVolatile;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsVolatile = value;
                        }
                    }

                    public bool IsRestrict
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsRestrict;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsRestrict = value;
                        }
                    }
                }

                public unsafe partial class QualifiedType : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 16)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public global::System.IntPtr Type;

                        [FieldOffset(8)]
                        public CppSharp.CppParser.AST.TypeQualifiers.Internal Qualifiers;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13QualifiedTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13QualifiedTypeC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, QualifiedType> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, QualifiedType>();

                    private readonly bool __ownsNativeInstance;

                    public static QualifiedType __CreateInstance(global::System.IntPtr native)
                    {
                        return new QualifiedType((QualifiedType.Internal*) native);
                    }

                    public static QualifiedType __CreateInstance(QualifiedType.Internal native)
                    {
                        return new QualifiedType(native);
                    }

                    private static QualifiedType.Internal* __CopyValue(QualifiedType.Internal native)
                    {
                        var ret = (QualifiedType.Internal*) Marshal.AllocHGlobal(16);
                        *ret = native;
                        return ret;
                    }

                    private QualifiedType(QualifiedType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected QualifiedType(QualifiedType.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public QualifiedType()
                    {
                        __Instance = Marshal.AllocHGlobal(16);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.QualifiedType __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.Type Type
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Type __result0;
                            if (((Internal*) __Instance)->Type == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Type.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Type))
                                __result0 = (CppSharp.CppParser.AST.Type) CppSharp.CppParser.AST.Type.NativeToManagedMap[((Internal*) __Instance)->Type];
                            else __result0 = CppSharp.CppParser.AST.Type.__CreateInstance(((Internal*) __Instance)->Type);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Type = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public CppSharp.CppParser.AST.TypeQualifiers Qualifiers
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.TypeQualifiers.__CreateInstance(((Internal*) __Instance)->Qualifiers);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Qualifiers = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.TypeQualifiers.Internal() : *(CppSharp.CppParser.AST.TypeQualifiers.Internal*) (value.__Instance);
                        }
                    }
                }

                public unsafe partial class TagType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 16)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(8)]
                        public global::System.IntPtr Declaration;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST7TagTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST7TagTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new TagType __CreateInstance(global::System.IntPtr native)
                    {
                        return new TagType((TagType.Internal*) native);
                    }

                    public static TagType __CreateInstance(TagType.Internal native)
                    {
                        return new TagType(native);
                    }

                    private static TagType.Internal* __CopyValue(TagType.Internal native)
                    {
                        var ret = (TagType.Internal*) Marshal.AllocHGlobal(16);
                        *ret = native;
                        return ret;
                    }

                    private TagType(TagType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected TagType(TagType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public TagType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(16);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.Declaration Declaration
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Declaration __result0;
                            if (((Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Declaration))
                                __result0 = (CppSharp.CppParser.AST.Declaration) CppSharp.CppParser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->Declaration];
                            else __result0 = CppSharp.CppParser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->Declaration);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }

                public unsafe partial class ArrayType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 40)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(8)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal QualifiedType;

                        [FieldOffset(24)]
                        public CppSharp.CppParser.AST.ArrayType.ArraySize SizeType;

                        [FieldOffset(32)]
                        public long Size;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST9ArrayTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST9ArrayTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    public enum ArraySize
                    {
                        Constant = 0,
                        Variable = 1,
                        Dependent = 2,
                        Incomplete = 3
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new ArrayType __CreateInstance(global::System.IntPtr native)
                    {
                        return new ArrayType((ArrayType.Internal*) native);
                    }

                    public static ArrayType __CreateInstance(ArrayType.Internal native)
                    {
                        return new ArrayType(native);
                    }

                    private static ArrayType.Internal* __CopyValue(ArrayType.Internal native)
                    {
                        var ret = (ArrayType.Internal*) Marshal.AllocHGlobal(40);
                        *ret = native;
                        return ret;
                    }

                    private ArrayType(ArrayType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected ArrayType(ArrayType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public ArrayType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(40);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.QualifiedType QualifiedType
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->QualifiedType);
                        }

                        set
                        {
                            ((Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }

                    public CppSharp.CppParser.AST.ArrayType.ArraySize SizeType
                    {
                        get
                        {
                            return ((Internal*) __Instance)->SizeType;
                        }

                        set
                        {
                            ((Internal*) __Instance)->SizeType = value;
                        }
                    }

                    public long Size
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Size;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Size = value;
                        }
                    }
                }

                public unsafe partial class FunctionType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 56)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(8)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal ReturnType;

                        [FieldOffset(24)]
                        public CppSharp.CppParser.AST.CallingConvention CallingConvention;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionTypeD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionType13getParametersEj")]
                        internal static extern global::System.IntPtr getParameters_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionType13addParametersERPNS1_9ParameterE")]
                        internal static extern void addParameters_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionType18getParametersCountEv")]
                        internal static extern uint getParametersCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12FunctionType15clearParametersEv")]
                        internal static extern void clearParameters_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new FunctionType __CreateInstance(global::System.IntPtr native)
                    {
                        return new FunctionType((FunctionType.Internal*) native);
                    }

                    public static FunctionType __CreateInstance(FunctionType.Internal native)
                    {
                        return new FunctionType(native);
                    }

                    private static FunctionType.Internal* __CopyValue(FunctionType.Internal native)
                    {
                        var ret = (FunctionType.Internal*) Marshal.AllocHGlobal(56);
                        *ret = native;
                        return ret;
                    }

                    private FunctionType(FunctionType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected FunctionType(FunctionType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public FunctionType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(56);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.Parameter getParameters(uint i)
                    {
                        var __ret = Internal.getParameters_0(__Instance, i);
                        CppSharp.CppParser.AST.Parameter __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Parameter.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Parameter) CppSharp.CppParser.AST.Parameter.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Parameter.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addParameters(CppSharp.CppParser.AST.Parameter s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addParameters_0(__Instance, arg0);
                    }

                    public uint getParametersCount()
                    {
                        var __ret = Internal.getParametersCount_0(__Instance);
                        return __ret;
                    }

                    public void clearParameters()
                    {
                        Internal.clearParameters_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.QualifiedType ReturnType
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->ReturnType);
                        }

                        set
                        {
                            ((Internal*) __Instance)->ReturnType = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }

                    public CppSharp.CppParser.AST.CallingConvention CallingConvention
                    {
                        get
                        {
                            return ((Internal*) __Instance)->CallingConvention;
                        }

                        set
                        {
                            ((Internal*) __Instance)->CallingConvention = value;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Parameter> Parameters
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Parameter>(((Internal*) __Instance)->Parameters);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Parameters = value.Internal;
                        }
                    }
                }

                public unsafe partial class PointerType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 32)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(8)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal QualifiedPointee;

                        [FieldOffset(24)]
                        public CppSharp.CppParser.AST.PointerType.TypeModifier Modifier;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11PointerTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11PointerTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    public enum TypeModifier
                    {
                        Value = 0,
                        Pointer = 1,
                        LVReference = 2,
                        RVReference = 3
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new PointerType __CreateInstance(global::System.IntPtr native)
                    {
                        return new PointerType((PointerType.Internal*) native);
                    }

                    public static PointerType __CreateInstance(PointerType.Internal native)
                    {
                        return new PointerType(native);
                    }

                    private static PointerType.Internal* __CopyValue(PointerType.Internal native)
                    {
                        var ret = (PointerType.Internal*) Marshal.AllocHGlobal(32);
                        *ret = native;
                        return ret;
                    }

                    private PointerType(PointerType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected PointerType(PointerType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public PointerType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(32);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.QualifiedType QualifiedPointee
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->QualifiedPointee);
                        }

                        set
                        {
                            ((Internal*) __Instance)->QualifiedPointee = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }

                    public CppSharp.CppParser.AST.PointerType.TypeModifier Modifier
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Modifier;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Modifier = value;
                        }
                    }
                }

                public unsafe partial class MemberPointerType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 24)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(8)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal Pointee;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17MemberPointerTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17MemberPointerTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new MemberPointerType __CreateInstance(global::System.IntPtr native)
                    {
                        return new MemberPointerType((MemberPointerType.Internal*) native);
                    }

                    public static MemberPointerType __CreateInstance(MemberPointerType.Internal native)
                    {
                        return new MemberPointerType(native);
                    }

                    private static MemberPointerType.Internal* __CopyValue(MemberPointerType.Internal native)
                    {
                        var ret = (MemberPointerType.Internal*) Marshal.AllocHGlobal(24);
                        *ret = native;
                        return ret;
                    }

                    private MemberPointerType(MemberPointerType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected MemberPointerType(MemberPointerType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public MemberPointerType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(24);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.QualifiedType Pointee
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Pointee);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Pointee = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }
                }

                public unsafe partial class TypedefType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 16)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(8)]
                        public global::System.IntPtr Declaration;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11TypedefTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11TypedefTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new TypedefType __CreateInstance(global::System.IntPtr native)
                    {
                        return new TypedefType((TypedefType.Internal*) native);
                    }

                    public static TypedefType __CreateInstance(TypedefType.Internal native)
                    {
                        return new TypedefType(native);
                    }

                    private static TypedefType.Internal* __CopyValue(TypedefType.Internal native)
                    {
                        var ret = (TypedefType.Internal*) Marshal.AllocHGlobal(16);
                        *ret = native;
                        return ret;
                    }

                    private TypedefType(TypedefType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected TypedefType(TypedefType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public TypedefType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(16);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.TypedefDecl Declaration
                    {
                        get
                        {
                            CppSharp.CppParser.AST.TypedefDecl __result0;
                            if (((Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.TypedefDecl.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Declaration))
                                __result0 = (CppSharp.CppParser.AST.TypedefDecl) CppSharp.CppParser.AST.TypedefDecl.NativeToManagedMap[((Internal*) __Instance)->Declaration];
                            else __result0 = CppSharp.CppParser.AST.TypedefDecl.__CreateInstance(((Internal*) __Instance)->Declaration);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }

                public unsafe partial class AttributedType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 40)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(8)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal Modified;

                        [FieldOffset(24)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal Equivalent;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14AttributedTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14AttributedTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new AttributedType __CreateInstance(global::System.IntPtr native)
                    {
                        return new AttributedType((AttributedType.Internal*) native);
                    }

                    public static AttributedType __CreateInstance(AttributedType.Internal native)
                    {
                        return new AttributedType(native);
                    }

                    private static AttributedType.Internal* __CopyValue(AttributedType.Internal native)
                    {
                        var ret = (AttributedType.Internal*) Marshal.AllocHGlobal(40);
                        *ret = native;
                        return ret;
                    }

                    private AttributedType(AttributedType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected AttributedType(AttributedType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public AttributedType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(40);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.QualifiedType Modified
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Modified);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Modified = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }

                    public CppSharp.CppParser.AST.QualifiedType Equivalent
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Equivalent);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Equivalent = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }
                }

                public unsafe partial class DecayedType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 56)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(8)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal Decayed;

                        [FieldOffset(24)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal Original;

                        [FieldOffset(40)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal Pointee;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11DecayedTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11DecayedTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new DecayedType __CreateInstance(global::System.IntPtr native)
                    {
                        return new DecayedType((DecayedType.Internal*) native);
                    }

                    public static DecayedType __CreateInstance(DecayedType.Internal native)
                    {
                        return new DecayedType(native);
                    }

                    private static DecayedType.Internal* __CopyValue(DecayedType.Internal native)
                    {
                        var ret = (DecayedType.Internal*) Marshal.AllocHGlobal(56);
                        *ret = native;
                        return ret;
                    }

                    private DecayedType(DecayedType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected DecayedType(DecayedType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public DecayedType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(56);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.QualifiedType Decayed
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Decayed);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Decayed = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }

                    public CppSharp.CppParser.AST.QualifiedType Original
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Original);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Original = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }

                    public CppSharp.CppParser.AST.QualifiedType Pointee
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Pointee);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Pointee = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }
                }

                public unsafe partial class TemplateArgument : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 40)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TemplateArgument.ArgumentKind Kind;

                        [FieldOffset(8)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal Type;

                        [FieldOffset(24)]
                        public global::System.IntPtr Declaration;

                        [FieldOffset(32)]
                        public long Integral;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16TemplateArgumentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16TemplateArgumentC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    public enum ArgumentKind
                    {
                        Type = 0,
                        Declaration = 1,
                        NullPtr = 2,
                        Integral = 3,
                        Template = 4,
                        TemplateExpansion = 5,
                        Expression = 6,
                        Pack = 7
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TemplateArgument> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TemplateArgument>();

                    private readonly bool __ownsNativeInstance;

                    public static TemplateArgument __CreateInstance(global::System.IntPtr native)
                    {
                        return new TemplateArgument((TemplateArgument.Internal*) native);
                    }

                    public static TemplateArgument __CreateInstance(TemplateArgument.Internal native)
                    {
                        return new TemplateArgument(native);
                    }

                    private static TemplateArgument.Internal* __CopyValue(TemplateArgument.Internal native)
                    {
                        var ret = (TemplateArgument.Internal*) Marshal.AllocHGlobal(40);
                        *ret = native;
                        return ret;
                    }

                    private TemplateArgument(TemplateArgument.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected TemplateArgument(TemplateArgument.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public TemplateArgument()
                    {
                        __Instance = Marshal.AllocHGlobal(40);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.TemplateArgument __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.TemplateArgument.ArgumentKind Kind
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Kind;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Kind = value;
                        }
                    }

                    public CppSharp.CppParser.AST.QualifiedType Type
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Type);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Type = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }

                    public CppSharp.CppParser.AST.Declaration Declaration
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Declaration __result0;
                            if (((Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Declaration))
                                __result0 = (CppSharp.CppParser.AST.Declaration) CppSharp.CppParser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->Declaration];
                            else __result0 = CppSharp.CppParser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->Declaration);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public long Integral
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Integral;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Integral = value;
                        }
                    }
                }

                public unsafe partial class TemplateSpecializationType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 48)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(32)]
                        public global::System.IntPtr Template;

                        [FieldOffset(40)]
                        public global::System.IntPtr Desugared;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationTypeC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationTypeD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationType12getArgumentsEj")]
                        internal static extern void getArguments_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationType12addArgumentsERNS1_16TemplateArgumentE")]
                        internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationType17getArgumentsCountEv")]
                        internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST26TemplateSpecializationType14clearArgumentsEv")]
                        internal static extern void clearArguments_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new TemplateSpecializationType __CreateInstance(global::System.IntPtr native)
                    {
                        return new TemplateSpecializationType((TemplateSpecializationType.Internal*) native);
                    }

                    public static TemplateSpecializationType __CreateInstance(TemplateSpecializationType.Internal native)
                    {
                        return new TemplateSpecializationType(native);
                    }

                    private static TemplateSpecializationType.Internal* __CopyValue(TemplateSpecializationType.Internal native)
                    {
                        var ret = (TemplateSpecializationType.Internal*) Marshal.AllocHGlobal(48);
                        *ret = native;
                        return ret;
                    }

                    private TemplateSpecializationType(TemplateSpecializationType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected TemplateSpecializationType(TemplateSpecializationType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public TemplateSpecializationType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(48);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.TemplateArgument getArguments(uint i)
                    {
                        var __ret = new CppSharp.CppParser.AST.TemplateArgument.Internal();
                        Internal.getArguments_0(new IntPtr(&__ret), __Instance, i);
                        return CppSharp.CppParser.AST.TemplateArgument.__CreateInstance(__ret);
                    }

                    public void addArguments(CppSharp.CppParser.AST.TemplateArgument s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addArguments_0(__Instance, arg0);
                    }

                    public uint getArgumentsCount()
                    {
                        var __ret = Internal.getArgumentsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearArguments()
                    {
                        Internal.clearArguments_0(__Instance);
                    }

                    public Std.Vector<CppSharp.CppParser.AST.TemplateArgument> Arguments
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.TemplateArgument>(((Internal*) __Instance)->Arguments);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Arguments = value.Internal;
                        }
                    }

                    public CppSharp.CppParser.AST.Template Template
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Template __result0;
                            if (((Internal*) __Instance)->Template == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Template.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Template))
                                __result0 = (CppSharp.CppParser.AST.Template) CppSharp.CppParser.AST.Template.NativeToManagedMap[((Internal*) __Instance)->Template];
                            else __result0 = CppSharp.CppParser.AST.Template.__CreateInstance(((Internal*) __Instance)->Template);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Template = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public CppSharp.CppParser.AST.Type Desugared
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Type __result0;
                            if (((Internal*) __Instance)->Desugared == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Type.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Desugared))
                                __result0 = (CppSharp.CppParser.AST.Type) CppSharp.CppParser.AST.Type.NativeToManagedMap[((Internal*) __Instance)->Desugared];
                            else __result0 = CppSharp.CppParser.AST.Type.__CreateInstance(((Internal*) __Instance)->Desugared);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Desugared = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }

                public unsafe partial class TemplateParameter : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 32)]
                    public partial struct Internal
                    {
                        [FieldOffset(24)]
                        public bool IsTypeParameter;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17TemplateParameterC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17TemplateParameterC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17TemplateParameterD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZNK8CppSharp9CppParser3AST17TemplateParametereqERKS2_")]
                        [return: MarshalAsAttribute(UnmanagedType.I1)]
                        internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr param);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17TemplateParameter7getNameEv")]
                        internal static extern global::System.IntPtr getName_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17TemplateParameter7setNameEPKc")]
                        internal static extern void setName_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TemplateParameter> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TemplateParameter>();

                    private readonly bool __ownsNativeInstance;

                    public static TemplateParameter __CreateInstance(global::System.IntPtr native)
                    {
                        return new TemplateParameter((TemplateParameter.Internal*) native);
                    }

                    public static TemplateParameter __CreateInstance(TemplateParameter.Internal native)
                    {
                        return new TemplateParameter(native);
                    }

                    private static TemplateParameter.Internal* __CopyValue(TemplateParameter.Internal native)
                    {
                        var ret = (TemplateParameter.Internal*) Marshal.AllocHGlobal(32);
                        *ret = native;
                        return ret;
                    }

                    private TemplateParameter(TemplateParameter.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected TemplateParameter(TemplateParameter.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public TemplateParameter()
                    {
                        __Instance = Marshal.AllocHGlobal(32);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.TemplateParameter __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance || force)
                            Internal.dtor_0(__Instance);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public static bool operator !=(CppSharp.CppParser.AST.TemplateParameter __op, CppSharp.CppParser.AST.TemplateParameter param)
                    {
                        return !(__op == param);
                    }

                    public static bool operator ==(CppSharp.CppParser.AST.TemplateParameter __op, CppSharp.CppParser.AST.TemplateParameter param)
                    {
                        bool __opNull = ReferenceEquals(__op, null);
                        bool paramNull = ReferenceEquals(param, null);
                        if (__opNull || paramNull)
                            return __opNull && paramNull;
                        var arg0 = __op.__Instance;
                        var arg1 = param.__Instance;
                        var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                        return __ret;
                    }

                    public override bool Equals(object obj)
                    {
                        return this == obj as TemplateParameter;
                    }

                    public string getName()
                    {
                        var __ret = Internal.getName_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setName(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setName_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public bool IsTypeParameter
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsTypeParameter;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsTypeParameter = value;
                        }
                    }
                }

                public unsafe partial class TemplateParameterType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 56)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(8)]
                        public CppSharp.CppParser.AST.TemplateParameter.Internal Parameter;

                        [FieldOffset(40)]
                        public uint Depth;

                        [FieldOffset(44)]
                        public uint Index;

                        [FieldOffset(48)]
                        public bool IsParameterPack;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST21TemplateParameterTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST21TemplateParameterTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST21TemplateParameterTypeD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new TemplateParameterType __CreateInstance(global::System.IntPtr native)
                    {
                        return new TemplateParameterType((TemplateParameterType.Internal*) native);
                    }

                    public static TemplateParameterType __CreateInstance(TemplateParameterType.Internal native)
                    {
                        return new TemplateParameterType(native);
                    }

                    private static TemplateParameterType.Internal* __CopyValue(TemplateParameterType.Internal native)
                    {
                        var ret = (TemplateParameterType.Internal*) Marshal.AllocHGlobal(56);
                        *ret = native;
                        return ret;
                    }

                    private TemplateParameterType(TemplateParameterType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected TemplateParameterType(TemplateParameterType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public TemplateParameterType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(56);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.TemplateParameter Parameter
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.TemplateParameter.__CreateInstance(((Internal*) __Instance)->Parameter);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Parameter = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.TemplateParameter.Internal() : *(CppSharp.CppParser.AST.TemplateParameter.Internal*) (value.__Instance);
                        }
                    }

                    public uint Depth
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Depth;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Depth = value;
                        }
                    }

                    public uint Index
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Index;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Index = value;
                        }
                    }

                    public bool IsParameterPack
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsParameterPack;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsParameterPack = value;
                        }
                    }
                }

                public unsafe partial class TemplateParameterSubstitutionType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 24)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(8)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal Replacement;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST33TemplateParameterSubstitutionTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST33TemplateParameterSubstitutionTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new TemplateParameterSubstitutionType __CreateInstance(global::System.IntPtr native)
                    {
                        return new TemplateParameterSubstitutionType((TemplateParameterSubstitutionType.Internal*) native);
                    }

                    public static TemplateParameterSubstitutionType __CreateInstance(TemplateParameterSubstitutionType.Internal native)
                    {
                        return new TemplateParameterSubstitutionType(native);
                    }

                    private static TemplateParameterSubstitutionType.Internal* __CopyValue(TemplateParameterSubstitutionType.Internal native)
                    {
                        var ret = (TemplateParameterSubstitutionType.Internal*) Marshal.AllocHGlobal(24);
                        *ret = native;
                        return ret;
                    }

                    private TemplateParameterSubstitutionType(TemplateParameterSubstitutionType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected TemplateParameterSubstitutionType(TemplateParameterSubstitutionType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public TemplateParameterSubstitutionType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(24);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.QualifiedType Replacement
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->Replacement);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Replacement = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }
                }

                public unsafe partial class InjectedClassNameType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 24)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(8)]
                        public global::System.IntPtr TemplateSpecialization;

                        [FieldOffset(16)]
                        public global::System.IntPtr Class;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST21InjectedClassNameTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST21InjectedClassNameTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new InjectedClassNameType __CreateInstance(global::System.IntPtr native)
                    {
                        return new InjectedClassNameType((InjectedClassNameType.Internal*) native);
                    }

                    public static InjectedClassNameType __CreateInstance(InjectedClassNameType.Internal native)
                    {
                        return new InjectedClassNameType(native);
                    }

                    private static InjectedClassNameType.Internal* __CopyValue(InjectedClassNameType.Internal native)
                    {
                        var ret = (InjectedClassNameType.Internal*) Marshal.AllocHGlobal(24);
                        *ret = native;
                        return ret;
                    }

                    private InjectedClassNameType(InjectedClassNameType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected InjectedClassNameType(InjectedClassNameType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public InjectedClassNameType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(24);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.TemplateSpecializationType TemplateSpecialization
                    {
                        get
                        {
                            CppSharp.CppParser.AST.TemplateSpecializationType __result0;
                            if (((Internal*) __Instance)->TemplateSpecialization == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.TemplateSpecializationType.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->TemplateSpecialization))
                                __result0 = (CppSharp.CppParser.AST.TemplateSpecializationType) CppSharp.CppParser.AST.TemplateSpecializationType.NativeToManagedMap[((Internal*) __Instance)->TemplateSpecialization];
                            else __result0 = CppSharp.CppParser.AST.TemplateSpecializationType.__CreateInstance(((Internal*) __Instance)->TemplateSpecialization);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->TemplateSpecialization = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public CppSharp.CppParser.AST.Class Class
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Class __result0;
                            if (((Internal*) __Instance)->Class == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Class.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Class))
                                __result0 = (CppSharp.CppParser.AST.Class) CppSharp.CppParser.AST.Class.NativeToManagedMap[((Internal*) __Instance)->Class];
                            else __result0 = CppSharp.CppParser.AST.Class.__CreateInstance(((Internal*) __Instance)->Class);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }

                public unsafe partial class DependentNameType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 8)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17DependentNameTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17DependentNameTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new DependentNameType __CreateInstance(global::System.IntPtr native)
                    {
                        return new DependentNameType((DependentNameType.Internal*) native);
                    }

                    public static DependentNameType __CreateInstance(DependentNameType.Internal native)
                    {
                        return new DependentNameType(native);
                    }

                    private static DependentNameType.Internal* __CopyValue(DependentNameType.Internal native)
                    {
                        var ret = (DependentNameType.Internal*) Marshal.AllocHGlobal(8);
                        *ret = native;
                        return ret;
                    }

                    private DependentNameType(DependentNameType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected DependentNameType(DependentNameType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public DependentNameType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(8);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }
                }

                public unsafe partial class PackExpansionType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 8)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17PackExpansionTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17PackExpansionTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new PackExpansionType __CreateInstance(global::System.IntPtr native)
                    {
                        return new PackExpansionType((PackExpansionType.Internal*) native);
                    }

                    public static PackExpansionType __CreateInstance(PackExpansionType.Internal native)
                    {
                        return new PackExpansionType(native);
                    }

                    private static PackExpansionType.Internal* __CopyValue(PackExpansionType.Internal native)
                    {
                        var ret = (PackExpansionType.Internal*) Marshal.AllocHGlobal(8);
                        *ret = native;
                        return ret;
                    }

                    private PackExpansionType(PackExpansionType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected PackExpansionType(PackExpansionType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public PackExpansionType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(8);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }
                }

                public unsafe partial class BuiltinType : CppSharp.CppParser.AST.Type, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 12)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.TypeKind Kind;

                        [FieldOffset(4)]
                        public bool IsDependent;

                        [FieldOffset(8)]
                        public CppSharp.CppParser.AST.PrimitiveType Type;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11BuiltinTypeC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11BuiltinTypeC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new BuiltinType __CreateInstance(global::System.IntPtr native)
                    {
                        return new BuiltinType((BuiltinType.Internal*) native);
                    }

                    public static BuiltinType __CreateInstance(BuiltinType.Internal native)
                    {
                        return new BuiltinType(native);
                    }

                    private static BuiltinType.Internal* __CopyValue(BuiltinType.Internal native)
                    {
                        var ret = (BuiltinType.Internal*) Marshal.AllocHGlobal(12);
                        *ret = native;
                        return ret;
                    }

                    private BuiltinType(BuiltinType.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected BuiltinType(BuiltinType.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Type.Internal*) native)
                    {
                    }

                    public BuiltinType()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(12);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Type __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.PrimitiveType Type
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Type;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Type = value;
                        }
                    }
                }

                public unsafe partial class VTableComponent : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 16)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.VTableComponentKind Kind;

                        [FieldOffset(4)]
                        public uint Offset;

                        [FieldOffset(8)]
                        public global::System.IntPtr Declaration;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15VTableComponentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15VTableComponentC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VTableComponent> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VTableComponent>();

                    private readonly bool __ownsNativeInstance;

                    public static VTableComponent __CreateInstance(global::System.IntPtr native)
                    {
                        return new VTableComponent((VTableComponent.Internal*) native);
                    }

                    public static VTableComponent __CreateInstance(VTableComponent.Internal native)
                    {
                        return new VTableComponent(native);
                    }

                    private static VTableComponent.Internal* __CopyValue(VTableComponent.Internal native)
                    {
                        var ret = (VTableComponent.Internal*) Marshal.AllocHGlobal(16);
                        *ret = native;
                        return ret;
                    }

                    private VTableComponent(VTableComponent.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected VTableComponent(VTableComponent.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public VTableComponent()
                    {
                        __Instance = Marshal.AllocHGlobal(16);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.VTableComponent __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.VTableComponentKind Kind
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Kind;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Kind = value;
                        }
                    }

                    public uint Offset
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Offset;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Offset = value;
                        }
                    }

                    public CppSharp.CppParser.AST.Declaration Declaration
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Declaration __result0;
                            if (((Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Declaration))
                                __result0 = (CppSharp.CppParser.AST.Declaration) CppSharp.CppParser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->Declaration];
                            else __result0 = CppSharp.CppParser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->Declaration);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }

                public unsafe partial class VTableLayout : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 24)]
                    public partial struct Internal
                    {
                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayoutC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayoutC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayoutD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayout13getComponentsEj")]
                        internal static extern CppSharp.CppParser.AST.VTableComponent.Internal getComponents_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayout13addComponentsERNS1_15VTableComponentE")]
                        internal static extern void addComponents_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayout18getComponentsCountEv")]
                        internal static extern uint getComponentsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST12VTableLayout15clearComponentsEv")]
                        internal static extern void clearComponents_0(global::System.IntPtr instance);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VTableLayout> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VTableLayout>();

                    private readonly bool __ownsNativeInstance;

                    public static VTableLayout __CreateInstance(global::System.IntPtr native)
                    {
                        return new VTableLayout((VTableLayout.Internal*) native);
                    }

                    public static VTableLayout __CreateInstance(VTableLayout.Internal native)
                    {
                        return new VTableLayout(native);
                    }

                    private static VTableLayout.Internal* __CopyValue(VTableLayout.Internal native)
                    {
                        var ret = (VTableLayout.Internal*) Marshal.AllocHGlobal(24);
                        *ret = native;
                        return ret;
                    }

                    private VTableLayout(VTableLayout.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected VTableLayout(VTableLayout.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public VTableLayout()
                    {
                        __Instance = Marshal.AllocHGlobal(24);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.VTableLayout __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance || force)
                            Internal.dtor_0(__Instance);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.VTableComponent getComponents(uint i)
                    {
                        var __ret = Internal.getComponents_0(__Instance, i);
                        return CppSharp.CppParser.AST.VTableComponent.__CreateInstance(__ret);
                    }

                    public void addComponents(CppSharp.CppParser.AST.VTableComponent s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addComponents_0(__Instance, arg0);
                    }

                    public uint getComponentsCount()
                    {
                        var __ret = Internal.getComponentsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearComponents()
                    {
                        Internal.clearComponents_0(__Instance);
                    }

                    public Std.Vector<CppSharp.CppParser.AST.VTableComponent> Components
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.VTableComponent>(((Internal*) __Instance)->Components);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Components = value.Internal;
                        }
                    }
                }

                public unsafe partial class VFTableInfo : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 40)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public ulong VBTableIndex;

                        [FieldOffset(8)]
                        public uint VFPtrOffset;

                        [FieldOffset(12)]
                        public uint VFPtrFullOffset;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.AST.VTableLayout.Internal Layout;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11VFTableInfoC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11VFTableInfoC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11VFTableInfoD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VFTableInfo> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, VFTableInfo>();

                    private readonly bool __ownsNativeInstance;

                    public static VFTableInfo __CreateInstance(global::System.IntPtr native)
                    {
                        return new VFTableInfo((VFTableInfo.Internal*) native);
                    }

                    public static VFTableInfo __CreateInstance(VFTableInfo.Internal native)
                    {
                        return new VFTableInfo(native);
                    }

                    private static VFTableInfo.Internal* __CopyValue(VFTableInfo.Internal native)
                    {
                        var ret = (VFTableInfo.Internal*) Marshal.AllocHGlobal(40);
                        *ret = native;
                        return ret;
                    }

                    private VFTableInfo(VFTableInfo.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected VFTableInfo(VFTableInfo.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public VFTableInfo()
                    {
                        __Instance = Marshal.AllocHGlobal(40);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.VFTableInfo __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance || force)
                            Internal.dtor_0(__Instance);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public ulong VBTableIndex
                    {
                        get
                        {
                            return ((Internal*) __Instance)->VBTableIndex;
                        }

                        set
                        {
                            ((Internal*) __Instance)->VBTableIndex = value;
                        }
                    }

                    public uint VFPtrOffset
                    {
                        get
                        {
                            return ((Internal*) __Instance)->VFPtrOffset;
                        }

                        set
                        {
                            ((Internal*) __Instance)->VFPtrOffset = value;
                        }
                    }

                    public uint VFPtrFullOffset
                    {
                        get
                        {
                            return ((Internal*) __Instance)->VFPtrFullOffset;
                        }

                        set
                        {
                            ((Internal*) __Instance)->VFPtrFullOffset = value;
                        }
                    }

                    public CppSharp.CppParser.AST.VTableLayout Layout
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.VTableLayout.__CreateInstance(((Internal*) __Instance)->Layout);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Layout = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.VTableLayout.Internal() : *(CppSharp.CppParser.AST.VTableLayout.Internal*) (value.__Instance);
                        }
                    }
                }

                public unsafe partial class ClassLayout : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 88)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CppAbi ABI;

                        [FieldOffset(32)]
                        public CppSharp.CppParser.AST.VTableLayout.Internal Layout;

                        [FieldOffset(56)]
                        public bool HasOwnVFPtr;

                        [FieldOffset(64)]
                        public long VBPtrOffset;

                        [FieldOffset(72)]
                        public int Alignment;

                        [FieldOffset(76)]
                        public int Size;

                        [FieldOffset(80)]
                        public int DataSize;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayoutC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayoutC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayoutD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayout11getVFTablesEj")]
                        internal static extern void getVFTables_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayout11addVFTablesERNS1_11VFTableInfoE")]
                        internal static extern void addVFTables_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayout16getVFTablesCountEv")]
                        internal static extern uint getVFTablesCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11ClassLayout13clearVFTablesEv")]
                        internal static extern void clearVFTables_0(global::System.IntPtr instance);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ClassLayout> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ClassLayout>();

                    private readonly bool __ownsNativeInstance;

                    public static ClassLayout __CreateInstance(global::System.IntPtr native)
                    {
                        return new ClassLayout((ClassLayout.Internal*) native);
                    }

                    public static ClassLayout __CreateInstance(ClassLayout.Internal native)
                    {
                        return new ClassLayout(native);
                    }

                    private static ClassLayout.Internal* __CopyValue(ClassLayout.Internal native)
                    {
                        var ret = (ClassLayout.Internal*) Marshal.AllocHGlobal(88);
                        *ret = native;
                        return ret;
                    }

                    private ClassLayout(ClassLayout.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected ClassLayout(ClassLayout.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public ClassLayout()
                    {
                        __Instance = Marshal.AllocHGlobal(88);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.ClassLayout __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance || force)
                            Internal.dtor_0(__Instance);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.VFTableInfo getVFTables(uint i)
                    {
                        var __ret = new CppSharp.CppParser.AST.VFTableInfo.Internal();
                        Internal.getVFTables_0(new IntPtr(&__ret), __Instance, i);
                        return CppSharp.CppParser.AST.VFTableInfo.__CreateInstance(__ret);
                    }

                    public void addVFTables(CppSharp.CppParser.AST.VFTableInfo s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addVFTables_0(__Instance, arg0);
                    }

                    public uint getVFTablesCount()
                    {
                        var __ret = Internal.getVFTablesCount_0(__Instance);
                        return __ret;
                    }

                    public void clearVFTables()
                    {
                        Internal.clearVFTables_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.CppAbi ABI
                    {
                        get
                        {
                            return ((Internal*) __Instance)->ABI;
                        }

                        set
                        {
                            ((Internal*) __Instance)->ABI = value;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.VFTableInfo> VFTables
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.VFTableInfo>(((Internal*) __Instance)->VFTables);
                        }

                        set
                        {
                            ((Internal*) __Instance)->VFTables = value.Internal;
                        }
                    }

                    public CppSharp.CppParser.AST.VTableLayout Layout
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.VTableLayout.__CreateInstance(((Internal*) __Instance)->Layout);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Layout = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.VTableLayout.Internal() : *(CppSharp.CppParser.AST.VTableLayout.Internal*) (value.__Instance);
                        }
                    }

                    public bool HasOwnVFPtr
                    {
                        get
                        {
                            return ((Internal*) __Instance)->HasOwnVFPtr;
                        }

                        set
                        {
                            ((Internal*) __Instance)->HasOwnVFPtr = value;
                        }
                    }

                    public long VBPtrOffset
                    {
                        get
                        {
                            return ((Internal*) __Instance)->VBPtrOffset;
                        }

                        set
                        {
                            ((Internal*) __Instance)->VBPtrOffset = value;
                        }
                    }

                    public int Alignment
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Alignment;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Alignment = value;
                        }
                    }

                    public int Size
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Size;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Size = value;
                        }
                    }

                    public int DataSize
                    {
                        get
                        {
                            return ((Internal*) __Instance)->DataSize;
                        }

                        set
                        {
                            ((Internal*) __Instance)->DataSize = value;
                        }
                    }
                }

                public unsafe partial class Declaration : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 168)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11DeclarationC2ENS1_15DeclarationKindE")]
                        internal static extern void ctor_0(global::System.IntPtr instance, CppSharp.CppParser.AST.DeclarationKind kind);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11DeclarationC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11DeclarationD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration7getNameEv")]
                        internal static extern global::System.IntPtr getName_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration7setNameEPKc")]
                        internal static extern void setName_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration12getDebugTextEv")]
                        internal static extern global::System.IntPtr getDebugText_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration12setDebugTextEPKc")]
                        internal static extern void setDebugText_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration23getPreprocessedEntitiesEj")]
                        internal static extern global::System.IntPtr getPreprocessedEntities_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration23addPreprocessedEntitiesERPNS1_18PreprocessedEntityE")]
                        internal static extern void addPreprocessedEntities_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration28getPreprocessedEntitiesCountEv")]
                        internal static extern uint getPreprocessedEntitiesCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Declaration25clearPreprocessedEntitiesEv")]
                        internal static extern void clearPreprocessedEntities_0(global::System.IntPtr instance);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Declaration> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Declaration>();

                    private readonly bool __ownsNativeInstance;

                    public static Declaration __CreateInstance(global::System.IntPtr native)
                    {
                        return new Declaration((Declaration.Internal*) native);
                    }

                    public static Declaration __CreateInstance(Declaration.Internal native)
                    {
                        return new Declaration(native);
                    }

                    private static Declaration.Internal* __CopyValue(Declaration.Internal native)
                    {
                        var ret = (Declaration.Internal*) Marshal.AllocHGlobal(168);
                        *ret = native;
                        return ret;
                    }

                    private Declaration(Declaration.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Declaration(Declaration.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public Declaration(CppSharp.CppParser.AST.DeclarationKind kind)
                    {
                        __Instance = Marshal.AllocHGlobal(168);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = kind;
                        Internal.ctor_0(__Instance, arg0);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance || force)
                            Internal.dtor_0(__Instance);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getName()
                    {
                        var __ret = Internal.getName_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setName(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setName_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public string getDebugText()
                    {
                        var __ret = Internal.getDebugText_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setDebugText(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setDebugText_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public CppSharp.CppParser.AST.PreprocessedEntity getPreprocessedEntities(uint i)
                    {
                        var __ret = Internal.getPreprocessedEntities_0(__Instance, i);
                        CppSharp.CppParser.AST.PreprocessedEntity __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.PreprocessedEntity.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.PreprocessedEntity) CppSharp.CppParser.AST.PreprocessedEntity.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.PreprocessedEntity.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addPreprocessedEntities(CppSharp.CppParser.AST.PreprocessedEntity s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addPreprocessedEntities_0(__Instance, arg0);
                    }

                    public uint getPreprocessedEntitiesCount()
                    {
                        var __ret = Internal.getPreprocessedEntitiesCount_0(__Instance);
                        return __ret;
                    }

                    public void clearPreprocessedEntities()
                    {
                        Internal.clearPreprocessedEntities_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.DeclarationKind Kind
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Kind;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Kind = value;
                        }
                    }

                    public CppSharp.CppParser.AST.AccessSpecifier Access
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Access;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Access = value;
                        }
                    }

                    public CppSharp.CppParser.AST.DeclarationContext _Namespace
                    {
                        get
                        {
                            CppSharp.CppParser.AST.DeclarationContext __result0;
                            if (((Internal*) __Instance)->_Namespace == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.DeclarationContext.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->_Namespace))
                                __result0 = (CppSharp.CppParser.AST.DeclarationContext) CppSharp.CppParser.AST.DeclarationContext.NativeToManagedMap[((Internal*) __Instance)->_Namespace];
                            else __result0 = CppSharp.CppParser.AST.DeclarationContext.__CreateInstance(((Internal*) __Instance)->_Namespace);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->_Namespace = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public CppSharp.CppParser.SourceLocation Location
                    {
                        get
                        {
                            return CppSharp.CppParser.SourceLocation.__CreateInstance(((Internal*) __Instance)->Location);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Location = ReferenceEquals(value, null) ? new CppSharp.CppParser.SourceLocation.Internal() : *(CppSharp.CppParser.SourceLocation.Internal*) (value.__Instance);
                        }
                    }

                    public int LineNumberStart
                    {
                        get
                        {
                            return ((Internal*) __Instance)->LineNumberStart;
                        }

                        set
                        {
                            ((Internal*) __Instance)->LineNumberStart = value;
                        }
                    }

                    public int LineNumberEnd
                    {
                        get
                        {
                            return ((Internal*) __Instance)->LineNumberEnd;
                        }

                        set
                        {
                            ((Internal*) __Instance)->LineNumberEnd = value;
                        }
                    }

                    public CppSharp.CppParser.AST.RawComment Comment
                    {
                        get
                        {
                            CppSharp.CppParser.AST.RawComment __result0;
                            if (((Internal*) __Instance)->Comment == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.RawComment.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Comment))
                                __result0 = (CppSharp.CppParser.AST.RawComment) CppSharp.CppParser.AST.RawComment.NativeToManagedMap[((Internal*) __Instance)->Comment];
                            else __result0 = CppSharp.CppParser.AST.RawComment.__CreateInstance(((Internal*) __Instance)->Comment);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Comment = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public bool IsIncomplete
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsIncomplete;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsIncomplete = value;
                        }
                    }

                    public bool IsDependent
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsDependent;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsDependent = value;
                        }
                    }

                    public CppSharp.CppParser.AST.Declaration CompleteDeclaration
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Declaration __result0;
                            if (((Internal*) __Instance)->CompleteDeclaration == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->CompleteDeclaration))
                                __result0 = (CppSharp.CppParser.AST.Declaration) CppSharp.CppParser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->CompleteDeclaration];
                            else __result0 = CppSharp.CppParser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->CompleteDeclaration);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->CompleteDeclaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public uint DefinitionOrder
                    {
                        get
                        {
                            return ((Internal*) __Instance)->DefinitionOrder;
                        }

                        set
                        {
                            ((Internal*) __Instance)->DefinitionOrder = value;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.PreprocessedEntity> PreprocessedEntities
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.PreprocessedEntity>(((Internal*) __Instance)->PreprocessedEntities);
                        }

                        set
                        {
                            ((Internal*) __Instance)->PreprocessedEntities = value.Internal;
                        }
                    }

                    public global::System.IntPtr OriginalPtr
                    {
                        get
                        {
                            return ((Internal*) __Instance)->OriginalPtr;
                        }

                        set
                        {
                            ((Internal*) __Instance)->OriginalPtr = value;
                        }
                    }
                }

                public unsafe partial class DeclarationContext : CppSharp.CppParser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 392)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(384)]
                        public bool IsAnonymous;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContextC2ENS1_15DeclarationKindE")]
                        internal static extern void ctor_0(global::System.IntPtr instance, CppSharp.CppParser.AST.DeclarationKind kind);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContextC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContextD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext8FindEnumEPv")]
                        internal static extern global::System.IntPtr FindEnum_0(global::System.IntPtr instance, global::System.IntPtr OriginalPtr);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext13getNamespacesEj")]
                        internal static extern global::System.IntPtr getNamespaces_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext13addNamespacesERPNS1_9NamespaceE")]
                        internal static extern void addNamespaces_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext18getNamespacesCountEv")]
                        internal static extern uint getNamespacesCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext15clearNamespacesEv")]
                        internal static extern void clearNamespaces_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext8getEnumsEj")]
                        internal static extern global::System.IntPtr getEnums_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext8addEnumsERPNS1_11EnumerationE")]
                        internal static extern void addEnums_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext13getEnumsCountEv")]
                        internal static extern uint getEnumsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext10clearEnumsEv")]
                        internal static extern void clearEnums_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12getFunctionsEj")]
                        internal static extern global::System.IntPtr getFunctions_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12addFunctionsERPNS1_8FunctionE")]
                        internal static extern void addFunctions_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext17getFunctionsCountEv")]
                        internal static extern uint getFunctionsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext14clearFunctionsEv")]
                        internal static extern void clearFunctions_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext10getClassesEj")]
                        internal static extern global::System.IntPtr getClasses_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext10addClassesERPNS1_5ClassE")]
                        internal static extern void addClasses_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext15getClassesCountEv")]
                        internal static extern uint getClassesCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12clearClassesEv")]
                        internal static extern void clearClasses_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12getTemplatesEj")]
                        internal static extern global::System.IntPtr getTemplates_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12addTemplatesERPNS1_8TemplateE")]
                        internal static extern void addTemplates_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext17getTemplatesCountEv")]
                        internal static extern uint getTemplatesCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext14clearTemplatesEv")]
                        internal static extern void clearTemplates_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext11getTypedefsEj")]
                        internal static extern global::System.IntPtr getTypedefs_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext11addTypedefsERPNS1_11TypedefDeclE")]
                        internal static extern void addTypedefs_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext16getTypedefsCountEv")]
                        internal static extern uint getTypedefsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext13clearTypedefsEv")]
                        internal static extern void clearTypedefs_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12getVariablesEj")]
                        internal static extern global::System.IntPtr getVariables_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12addVariablesERPNS1_8VariableE")]
                        internal static extern void addVariables_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext17getVariablesCountEv")]
                        internal static extern uint getVariablesCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext14clearVariablesEv")]
                        internal static extern void clearVariables_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext10getFriendsEj")]
                        internal static extern global::System.IntPtr getFriends_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext10addFriendsERPNS1_6FriendE")]
                        internal static extern void addFriends_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext15getFriendsCountEv")]
                        internal static extern uint getFriendsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18DeclarationContext12clearFriendsEv")]
                        internal static extern void clearFriends_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new DeclarationContext __CreateInstance(global::System.IntPtr native)
                    {
                        return new DeclarationContext((DeclarationContext.Internal*) native);
                    }

                    public static DeclarationContext __CreateInstance(DeclarationContext.Internal native)
                    {
                        return new DeclarationContext(native);
                    }

                    private static DeclarationContext.Internal* __CopyValue(DeclarationContext.Internal native)
                    {
                        var ret = (DeclarationContext.Internal*) Marshal.AllocHGlobal(392);
                        *ret = native;
                        return ret;
                    }

                    private DeclarationContext(DeclarationContext.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected DeclarationContext(DeclarationContext.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Declaration.Internal*) native)
                    {
                    }

                    public DeclarationContext(CppSharp.CppParser.AST.DeclarationKind kind)
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(392);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = kind;
                        Internal.ctor_0(__Instance, arg0);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.Enumeration FindEnum(global::System.IntPtr OriginalPtr)
                    {
                        var arg0 = OriginalPtr;
                        var __ret = Internal.FindEnum_0(__Instance, arg0);
                        CppSharp.CppParser.AST.Enumeration __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Enumeration.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Enumeration) CppSharp.CppParser.AST.Enumeration.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Enumeration.__CreateInstance(__ret);
                        return __result0;
                    }

                    public CppSharp.CppParser.AST.Namespace getNamespaces(uint i)
                    {
                        var __ret = Internal.getNamespaces_0(__Instance, i);
                        CppSharp.CppParser.AST.Namespace __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Namespace.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Namespace) CppSharp.CppParser.AST.Namespace.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Namespace.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addNamespaces(CppSharp.CppParser.AST.Namespace s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addNamespaces_0(__Instance, arg0);
                    }

                    public uint getNamespacesCount()
                    {
                        var __ret = Internal.getNamespacesCount_0(__Instance);
                        return __ret;
                    }

                    public void clearNamespaces()
                    {
                        Internal.clearNamespaces_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.Enumeration getEnums(uint i)
                    {
                        var __ret = Internal.getEnums_0(__Instance, i);
                        CppSharp.CppParser.AST.Enumeration __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Enumeration.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Enumeration) CppSharp.CppParser.AST.Enumeration.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Enumeration.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addEnums(CppSharp.CppParser.AST.Enumeration s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addEnums_0(__Instance, arg0);
                    }

                    public uint getEnumsCount()
                    {
                        var __ret = Internal.getEnumsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearEnums()
                    {
                        Internal.clearEnums_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.Function getFunctions(uint i)
                    {
                        var __ret = Internal.getFunctions_0(__Instance, i);
                        CppSharp.CppParser.AST.Function __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Function.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Function) CppSharp.CppParser.AST.Function.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Function.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addFunctions(CppSharp.CppParser.AST.Function s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addFunctions_0(__Instance, arg0);
                    }

                    public uint getFunctionsCount()
                    {
                        var __ret = Internal.getFunctionsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearFunctions()
                    {
                        Internal.clearFunctions_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.Class getClasses(uint i)
                    {
                        var __ret = Internal.getClasses_0(__Instance, i);
                        CppSharp.CppParser.AST.Class __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Class.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Class) CppSharp.CppParser.AST.Class.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Class.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addClasses(CppSharp.CppParser.AST.Class s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addClasses_0(__Instance, arg0);
                    }

                    public uint getClassesCount()
                    {
                        var __ret = Internal.getClassesCount_0(__Instance);
                        return __ret;
                    }

                    public void clearClasses()
                    {
                        Internal.clearClasses_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.Template getTemplates(uint i)
                    {
                        var __ret = Internal.getTemplates_0(__Instance, i);
                        CppSharp.CppParser.AST.Template __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Template.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Template) CppSharp.CppParser.AST.Template.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Template.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addTemplates(CppSharp.CppParser.AST.Template s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addTemplates_0(__Instance, arg0);
                    }

                    public uint getTemplatesCount()
                    {
                        var __ret = Internal.getTemplatesCount_0(__Instance);
                        return __ret;
                    }

                    public void clearTemplates()
                    {
                        Internal.clearTemplates_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.TypedefDecl getTypedefs(uint i)
                    {
                        var __ret = Internal.getTypedefs_0(__Instance, i);
                        CppSharp.CppParser.AST.TypedefDecl __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.TypedefDecl.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.TypedefDecl) CppSharp.CppParser.AST.TypedefDecl.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.TypedefDecl.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addTypedefs(CppSharp.CppParser.AST.TypedefDecl s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addTypedefs_0(__Instance, arg0);
                    }

                    public uint getTypedefsCount()
                    {
                        var __ret = Internal.getTypedefsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearTypedefs()
                    {
                        Internal.clearTypedefs_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.Variable getVariables(uint i)
                    {
                        var __ret = Internal.getVariables_0(__Instance, i);
                        CppSharp.CppParser.AST.Variable __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Variable.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Variable) CppSharp.CppParser.AST.Variable.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Variable.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addVariables(CppSharp.CppParser.AST.Variable s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addVariables_0(__Instance, arg0);
                    }

                    public uint getVariablesCount()
                    {
                        var __ret = Internal.getVariablesCount_0(__Instance);
                        return __ret;
                    }

                    public void clearVariables()
                    {
                        Internal.clearVariables_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.Friend getFriends(uint i)
                    {
                        var __ret = Internal.getFriends_0(__Instance, i);
                        CppSharp.CppParser.AST.Friend __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Friend.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Friend) CppSharp.CppParser.AST.Friend.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Friend.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addFriends(CppSharp.CppParser.AST.Friend s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addFriends_0(__Instance, arg0);
                    }

                    public uint getFriendsCount()
                    {
                        var __ret = Internal.getFriendsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearFriends()
                    {
                        Internal.clearFriends_0(__Instance);
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Namespace> Namespaces
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Namespace>(((Internal*) __Instance)->Namespaces);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Namespaces = value.Internal;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Enumeration> Enums
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Enumeration>(((Internal*) __Instance)->Enums);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Enums = value.Internal;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Function> Functions
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Function>(((Internal*) __Instance)->Functions);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Functions = value.Internal;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Class> Classes
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Class>(((Internal*) __Instance)->Classes);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Classes = value.Internal;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Template> Templates
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Template>(((Internal*) __Instance)->Templates);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Templates = value.Internal;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.TypedefDecl> Typedefs
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.TypedefDecl>(((Internal*) __Instance)->Typedefs);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Typedefs = value.Internal;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Variable> Variables
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Variable>(((Internal*) __Instance)->Variables);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Variables = value.Internal;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Friend> Friends
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Friend>(((Internal*) __Instance)->Friends);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Friends = value.Internal;
                        }
                    }

                    public bool IsAnonymous
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsAnonymous;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsAnonymous = value;
                        }
                    }
                }

                public unsafe partial class TypedefDecl : CppSharp.CppParser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 184)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(168)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal QualifiedType;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11TypedefDeclC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11TypedefDeclC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11TypedefDeclD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new TypedefDecl __CreateInstance(global::System.IntPtr native)
                    {
                        return new TypedefDecl((TypedefDecl.Internal*) native);
                    }

                    public static TypedefDecl __CreateInstance(TypedefDecl.Internal native)
                    {
                        return new TypedefDecl(native);
                    }

                    private static TypedefDecl.Internal* __CopyValue(TypedefDecl.Internal native)
                    {
                        var ret = (TypedefDecl.Internal*) Marshal.AllocHGlobal(184);
                        *ret = native;
                        return ret;
                    }

                    private TypedefDecl(TypedefDecl.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected TypedefDecl(TypedefDecl.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Declaration.Internal*) native)
                    {
                    }

                    public TypedefDecl()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(184);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.QualifiedType QualifiedType
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->QualifiedType);
                        }

                        set
                        {
                            ((Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }
                }

                public unsafe partial class Friend : CppSharp.CppParser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 176)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(168)]
                        public global::System.IntPtr Declaration;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST6FriendC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST6FriendC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST6FriendD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new Friend __CreateInstance(global::System.IntPtr native)
                    {
                        return new Friend((Friend.Internal*) native);
                    }

                    public static Friend __CreateInstance(Friend.Internal native)
                    {
                        return new Friend(native);
                    }

                    private static Friend.Internal* __CopyValue(Friend.Internal native)
                    {
                        var ret = (Friend.Internal*) Marshal.AllocHGlobal(176);
                        *ret = native;
                        return ret;
                    }

                    private Friend(Friend.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Friend(Friend.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Declaration.Internal*) native)
                    {
                    }

                    public Friend()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(176);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.Declaration Declaration
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Declaration __result0;
                            if (((Internal*) __Instance)->Declaration == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Declaration))
                                __result0 = (CppSharp.CppParser.AST.Declaration) CppSharp.CppParser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->Declaration];
                            else __result0 = CppSharp.CppParser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->Declaration);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Declaration = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }

                public unsafe partial class Statement : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 40)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.StatementClass Class;

                        [FieldOffset(8)]
                        public global::System.IntPtr Decl;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST9StatementC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST9StatementD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST9Statement9getStringEv")]
                        internal static extern global::System.IntPtr getString_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST9Statement9setStringEPKc")]
                        internal static extern void setString_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Statement> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Statement>();

                    private readonly bool __ownsNativeInstance;

                    public static Statement __CreateInstance(global::System.IntPtr native)
                    {
                        return new Statement((Statement.Internal*) native);
                    }

                    public static Statement __CreateInstance(Statement.Internal native)
                    {
                        return new Statement(native);
                    }

                    private static Statement.Internal* __CopyValue(Statement.Internal native)
                    {
                        var ret = (Statement.Internal*) Marshal.AllocHGlobal(40);
                        *ret = native;
                        return ret;
                    }

                    private Statement(Statement.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Statement(Statement.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Statement __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance || force)
                            Internal.dtor_0(__Instance);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getString()
                    {
                        var __ret = Internal.getString_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setString(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setString_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public CppSharp.CppParser.AST.StatementClass Class
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Class;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Class = value;
                        }
                    }

                    public CppSharp.CppParser.AST.Declaration Decl
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Declaration __result0;
                            if (((Internal*) __Instance)->Decl == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Decl))
                                __result0 = (CppSharp.CppParser.AST.Declaration) CppSharp.CppParser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->Decl];
                            else __result0 = CppSharp.CppParser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->Decl);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Decl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }

                public unsafe partial class Expression : CppSharp.CppParser.AST.Statement, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 40)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.StatementClass Class;

                        [FieldOffset(8)]
                        public global::System.IntPtr Decl;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10ExpressionC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10ExpressionD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new Expression __CreateInstance(global::System.IntPtr native)
                    {
                        return new Expression((Expression.Internal*) native);
                    }

                    public static Expression __CreateInstance(Expression.Internal native)
                    {
                        return new Expression(native);
                    }

                    private static Expression.Internal* __CopyValue(Expression.Internal native)
                    {
                        var ret = (Expression.Internal*) Marshal.AllocHGlobal(40);
                        *ret = native;
                        return ret;
                    }

                    private Expression(Expression.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Expression(Expression.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Statement.Internal*) native)
                    {
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Statement __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }
                }

                public unsafe partial class BinaryOperator : CppSharp.CppParser.AST.Expression, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 80)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.StatementClass Class;

                        [FieldOffset(8)]
                        public global::System.IntPtr Decl;

                        [FieldOffset(40)]
                        public global::System.IntPtr LHS;

                        [FieldOffset(48)]
                        public global::System.IntPtr RHS;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14BinaryOperatorC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14BinaryOperatorD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14BinaryOperator12getOpcodeStrEv")]
                        internal static extern global::System.IntPtr getOpcodeStr_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14BinaryOperator12setOpcodeStrEPKc")]
                        internal static extern void setOpcodeStr_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new BinaryOperator __CreateInstance(global::System.IntPtr native)
                    {
                        return new BinaryOperator((BinaryOperator.Internal*) native);
                    }

                    public static BinaryOperator __CreateInstance(BinaryOperator.Internal native)
                    {
                        return new BinaryOperator(native);
                    }

                    private static BinaryOperator.Internal* __CopyValue(BinaryOperator.Internal native)
                    {
                        var ret = (BinaryOperator.Internal*) Marshal.AllocHGlobal(80);
                        *ret = native;
                        return ret;
                    }

                    private BinaryOperator(BinaryOperator.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected BinaryOperator(BinaryOperator.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Expression.Internal*) native)
                    {
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Statement __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getOpcodeStr()
                    {
                        var __ret = Internal.getOpcodeStr_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setOpcodeStr(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setOpcodeStr_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public CppSharp.CppParser.AST.Expression LHS
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Expression __result0;
                            if (((Internal*) __Instance)->LHS == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Expression.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->LHS))
                                __result0 = (CppSharp.CppParser.AST.Expression) CppSharp.CppParser.AST.Expression.NativeToManagedMap[((Internal*) __Instance)->LHS];
                            else __result0 = CppSharp.CppParser.AST.Expression.__CreateInstance(((Internal*) __Instance)->LHS);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->LHS = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public CppSharp.CppParser.AST.Expression RHS
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Expression __result0;
                            if (((Internal*) __Instance)->RHS == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Expression.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->RHS))
                                __result0 = (CppSharp.CppParser.AST.Expression) CppSharp.CppParser.AST.Expression.NativeToManagedMap[((Internal*) __Instance)->RHS];
                            else __result0 = CppSharp.CppParser.AST.Expression.__CreateInstance(((Internal*) __Instance)->RHS);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->RHS = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }

                public unsafe partial class CXXConstructExpr : CppSharp.CppParser.AST.Expression, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 64)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.StatementClass Class;

                        [FieldOffset(8)]
                        public global::System.IntPtr Decl;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16CXXConstructExprC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16CXXConstructExprD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16CXXConstructExpr12getArgumentsEj")]
                        internal static extern global::System.IntPtr getArguments_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16CXXConstructExpr12addArgumentsERPNS1_10ExpressionE")]
                        internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16CXXConstructExpr17getArgumentsCountEv")]
                        internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16CXXConstructExpr14clearArgumentsEv")]
                        internal static extern void clearArguments_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new CXXConstructExpr __CreateInstance(global::System.IntPtr native)
                    {
                        return new CXXConstructExpr((CXXConstructExpr.Internal*) native);
                    }

                    public static CXXConstructExpr __CreateInstance(CXXConstructExpr.Internal native)
                    {
                        return new CXXConstructExpr(native);
                    }

                    private static CXXConstructExpr.Internal* __CopyValue(CXXConstructExpr.Internal native)
                    {
                        var ret = (CXXConstructExpr.Internal*) Marshal.AllocHGlobal(64);
                        *ret = native;
                        return ret;
                    }

                    private CXXConstructExpr(CXXConstructExpr.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected CXXConstructExpr(CXXConstructExpr.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Expression.Internal*) native)
                    {
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Statement __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.Expression getArguments(uint i)
                    {
                        var __ret = Internal.getArguments_0(__Instance, i);
                        CppSharp.CppParser.AST.Expression __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Expression.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Expression) CppSharp.CppParser.AST.Expression.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Expression.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addArguments(CppSharp.CppParser.AST.Expression s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addArguments_0(__Instance, arg0);
                    }

                    public uint getArgumentsCount()
                    {
                        var __ret = Internal.getArgumentsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearArguments()
                    {
                        Internal.clearArguments_0(__Instance);
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Expression> Arguments
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Expression>(((Internal*) __Instance)->Arguments);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Arguments = value.Internal;
                        }
                    }
                }

                public unsafe partial class Parameter : CppSharp.CppParser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 200)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(168)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal QualifiedType;

                        [FieldOffset(184)]
                        public bool IsIndirect;

                        [FieldOffset(185)]
                        public bool HasDefaultValue;

                        [FieldOffset(188)]
                        public uint Index;

                        [FieldOffset(192)]
                        public global::System.IntPtr DefaultArgument;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST9ParameterC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST9ParameterC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST9ParameterD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new Parameter __CreateInstance(global::System.IntPtr native)
                    {
                        return new Parameter((Parameter.Internal*) native);
                    }

                    public static Parameter __CreateInstance(Parameter.Internal native)
                    {
                        return new Parameter(native);
                    }

                    private static Parameter.Internal* __CopyValue(Parameter.Internal native)
                    {
                        var ret = (Parameter.Internal*) Marshal.AllocHGlobal(200);
                        *ret = native;
                        return ret;
                    }

                    private Parameter(Parameter.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Parameter(Parameter.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Declaration.Internal*) native)
                    {
                    }

                    public Parameter()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(200);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.QualifiedType QualifiedType
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->QualifiedType);
                        }

                        set
                        {
                            ((Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }

                    public bool IsIndirect
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsIndirect;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsIndirect = value;
                        }
                    }

                    public bool HasDefaultValue
                    {
                        get
                        {
                            return ((Internal*) __Instance)->HasDefaultValue;
                        }

                        set
                        {
                            ((Internal*) __Instance)->HasDefaultValue = value;
                        }
                    }

                    public uint Index
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Index;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Index = value;
                        }
                    }

                    public CppSharp.CppParser.AST.Expression DefaultArgument
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Expression __result0;
                            if (((Internal*) __Instance)->DefaultArgument == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Expression.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->DefaultArgument))
                                __result0 = (CppSharp.CppParser.AST.Expression) CppSharp.CppParser.AST.Expression.NativeToManagedMap[((Internal*) __Instance)->DefaultArgument];
                            else __result0 = CppSharp.CppParser.AST.Expression.__CreateInstance(((Internal*) __Instance)->DefaultArgument);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->DefaultArgument = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }

                public unsafe partial class Function : CppSharp.CppParser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 288)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(168)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal ReturnType;

                        [FieldOffset(184)]
                        public bool IsReturnIndirect;

                        [FieldOffset(185)]
                        public bool HasThisReturn;

                        [FieldOffset(186)]
                        public bool IsVariadic;

                        [FieldOffset(187)]
                        public bool IsInline;

                        [FieldOffset(188)]
                        public bool IsPure;

                        [FieldOffset(189)]
                        public bool IsDeleted;

                        [FieldOffset(192)]
                        public CppSharp.CppParser.AST.CXXOperatorKind OperatorKind;

                        [FieldOffset(248)]
                        public CppSharp.CppParser.AST.CallingConvention CallingConvention;

                        [FieldOffset(280)]
                        public global::System.IntPtr SpecializationInfo;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8FunctionC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8FunctionC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8FunctionD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Function10getMangledEv")]
                        internal static extern global::System.IntPtr getMangled_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Function10setMangledEPKc")]
                        internal static extern void setMangled_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Function12getSignatureEv")]
                        internal static extern global::System.IntPtr getSignature_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Function12setSignatureEPKc")]
                        internal static extern void setSignature_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Function13getParametersEj")]
                        internal static extern global::System.IntPtr getParameters_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Function13addParametersERPNS1_9ParameterE")]
                        internal static extern void addParameters_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Function18getParametersCountEv")]
                        internal static extern uint getParametersCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Function15clearParametersEv")]
                        internal static extern void clearParameters_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new Function __CreateInstance(global::System.IntPtr native)
                    {
                        return new Function((Function.Internal*) native);
                    }

                    public static Function __CreateInstance(Function.Internal native)
                    {
                        return new Function(native);
                    }

                    private static Function.Internal* __CopyValue(Function.Internal native)
                    {
                        var ret = (Function.Internal*) Marshal.AllocHGlobal(288);
                        *ret = native;
                        return ret;
                    }

                    private Function(Function.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Function(Function.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Declaration.Internal*) native)
                    {
                    }

                    public Function()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(288);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getMangled()
                    {
                        var __ret = Internal.getMangled_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setMangled(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setMangled_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public string getSignature()
                    {
                        var __ret = Internal.getSignature_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setSignature(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setSignature_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public CppSharp.CppParser.AST.Parameter getParameters(uint i)
                    {
                        var __ret = Internal.getParameters_0(__Instance, i);
                        CppSharp.CppParser.AST.Parameter __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Parameter.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Parameter) CppSharp.CppParser.AST.Parameter.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Parameter.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addParameters(CppSharp.CppParser.AST.Parameter s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addParameters_0(__Instance, arg0);
                    }

                    public uint getParametersCount()
                    {
                        var __ret = Internal.getParametersCount_0(__Instance);
                        return __ret;
                    }

                    public void clearParameters()
                    {
                        Internal.clearParameters_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.QualifiedType ReturnType
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->ReturnType);
                        }

                        set
                        {
                            ((Internal*) __Instance)->ReturnType = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }

                    public bool IsReturnIndirect
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsReturnIndirect;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsReturnIndirect = value;
                        }
                    }

                    public bool HasThisReturn
                    {
                        get
                        {
                            return ((Internal*) __Instance)->HasThisReturn;
                        }

                        set
                        {
                            ((Internal*) __Instance)->HasThisReturn = value;
                        }
                    }

                    public bool IsVariadic
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsVariadic;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsVariadic = value;
                        }
                    }

                    public bool IsInline
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsInline;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsInline = value;
                        }
                    }

                    public bool IsPure
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsPure;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsPure = value;
                        }
                    }

                    public bool IsDeleted
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsDeleted;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsDeleted = value;
                        }
                    }

                    public CppSharp.CppParser.AST.CXXOperatorKind OperatorKind
                    {
                        get
                        {
                            return ((Internal*) __Instance)->OperatorKind;
                        }

                        set
                        {
                            ((Internal*) __Instance)->OperatorKind = value;
                        }
                    }

                    public CppSharp.CppParser.AST.CallingConvention CallingConvention
                    {
                        get
                        {
                            return ((Internal*) __Instance)->CallingConvention;
                        }

                        set
                        {
                            ((Internal*) __Instance)->CallingConvention = value;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Parameter> Parameters
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Parameter>(((Internal*) __Instance)->Parameters);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Parameters = value.Internal;
                        }
                    }

                    public CppSharp.CppParser.AST.FunctionTemplateSpecialization SpecializationInfo
                    {
                        get
                        {
                            CppSharp.CppParser.AST.FunctionTemplateSpecialization __result0;
                            if (((Internal*) __Instance)->SpecializationInfo == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.FunctionTemplateSpecialization.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->SpecializationInfo))
                                __result0 = (CppSharp.CppParser.AST.FunctionTemplateSpecialization) CppSharp.CppParser.AST.FunctionTemplateSpecialization.NativeToManagedMap[((Internal*) __Instance)->SpecializationInfo];
                            else __result0 = CppSharp.CppParser.AST.FunctionTemplateSpecialization.__CreateInstance(((Internal*) __Instance)->SpecializationInfo);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->SpecializationInfo = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }

                public unsafe partial class Method : CppSharp.CppParser.AST.Function, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 328)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(168)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal ReturnType;

                        [FieldOffset(184)]
                        public bool IsReturnIndirect;

                        [FieldOffset(185)]
                        public bool HasThisReturn;

                        [FieldOffset(186)]
                        public bool IsVariadic;

                        [FieldOffset(187)]
                        public bool IsInline;

                        [FieldOffset(188)]
                        public bool IsPure;

                        [FieldOffset(189)]
                        public bool IsDeleted;

                        [FieldOffset(192)]
                        public CppSharp.CppParser.AST.CXXOperatorKind OperatorKind;

                        [FieldOffset(248)]
                        public CppSharp.CppParser.AST.CallingConvention CallingConvention;

                        [FieldOffset(280)]
                        public global::System.IntPtr SpecializationInfo;

                        [FieldOffset(288)]
                        public global::System.IntPtr AccessDecl;

                        [FieldOffset(296)]
                        public bool IsVirtual;

                        [FieldOffset(297)]
                        public bool IsStatic;

                        [FieldOffset(298)]
                        public bool IsConst;

                        [FieldOffset(299)]
                        public bool IsImplicit;

                        [FieldOffset(300)]
                        public bool IsExplicit;

                        [FieldOffset(301)]
                        public bool IsOverride;

                        [FieldOffset(304)]
                        public CppSharp.CppParser.AST.CXXMethodKind MethodKind;

                        [FieldOffset(308)]
                        public bool IsDefaultConstructor;

                        [FieldOffset(309)]
                        public bool IsCopyConstructor;

                        [FieldOffset(310)]
                        public bool IsMoveConstructor;

                        [FieldOffset(312)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal ConversionType;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST6MethodC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST6MethodC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST6MethodD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new Method __CreateInstance(global::System.IntPtr native)
                    {
                        return new Method((Method.Internal*) native);
                    }

                    public static Method __CreateInstance(Method.Internal native)
                    {
                        return new Method(native);
                    }

                    private static Method.Internal* __CopyValue(Method.Internal native)
                    {
                        var ret = (Method.Internal*) Marshal.AllocHGlobal(328);
                        *ret = native;
                        return ret;
                    }

                    private Method(Method.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Method(Method.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Function.Internal*) native)
                    {
                    }

                    public Method()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(328);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.AccessSpecifierDecl AccessDecl
                    {
                        get
                        {
                            CppSharp.CppParser.AST.AccessSpecifierDecl __result0;
                            if (((Internal*) __Instance)->AccessDecl == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.AccessSpecifierDecl.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->AccessDecl))
                                __result0 = (CppSharp.CppParser.AST.AccessSpecifierDecl) CppSharp.CppParser.AST.AccessSpecifierDecl.NativeToManagedMap[((Internal*) __Instance)->AccessDecl];
                            else __result0 = CppSharp.CppParser.AST.AccessSpecifierDecl.__CreateInstance(((Internal*) __Instance)->AccessDecl);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->AccessDecl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public bool IsVirtual
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsVirtual;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsVirtual = value;
                        }
                    }

                    public bool IsStatic
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsStatic;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsStatic = value;
                        }
                    }

                    public bool IsConst
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsConst;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsConst = value;
                        }
                    }

                    public bool IsImplicit
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsImplicit;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsImplicit = value;
                        }
                    }

                    public bool IsExplicit
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsExplicit;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsExplicit = value;
                        }
                    }

                    public bool IsOverride
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsOverride;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsOverride = value;
                        }
                    }

                    public CppSharp.CppParser.AST.CXXMethodKind MethodKind
                    {
                        get
                        {
                            return ((Internal*) __Instance)->MethodKind;
                        }

                        set
                        {
                            ((Internal*) __Instance)->MethodKind = value;
                        }
                    }

                    public bool IsDefaultConstructor
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsDefaultConstructor;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsDefaultConstructor = value;
                        }
                    }

                    public bool IsCopyConstructor
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsCopyConstructor;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsCopyConstructor = value;
                        }
                    }

                    public bool IsMoveConstructor
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsMoveConstructor;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsMoveConstructor = value;
                        }
                    }

                    public CppSharp.CppParser.AST.QualifiedType ConversionType
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->ConversionType);
                        }

                        set
                        {
                            ((Internal*) __Instance)->ConversionType = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }
                }

                public unsafe partial class Enumeration : CppSharp.CppParser.AST.DeclarationContext, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 432)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(384)]
                        public bool IsAnonymous;

                        [FieldOffset(388)]
                        public CppSharp.CppParser.AST.Enumeration.EnumModifiers Modifiers;

                        [FieldOffset(392)]
                        public global::System.IntPtr Type;

                        [FieldOffset(400)]
                        public global::System.IntPtr BuiltinType;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11EnumerationC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11EnumerationC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11EnumerationD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration8getItemsEj")]
                        internal static extern void getItems_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration8addItemsERNS2_4ItemE")]
                        internal static extern void addItems_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration13getItemsCountEv")]
                        internal static extern uint getItemsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration10clearItemsEv")]
                        internal static extern void clearItems_0(global::System.IntPtr instance);
                    }

                    [Flags]
                    public enum EnumModifiers
                    {
                        Anonymous = 1,
                        Scoped = 2,
                        Flags = 4
                    }

                    public unsafe partial class Item : CppSharp.CppParser.AST.Declaration, IDisposable
                    {
                        [StructLayout(LayoutKind.Explicit, Size = 200)]
                        public new partial struct Internal
                        {
                            [FieldOffset(0)]
                            public CppSharp.CppParser.AST.DeclarationKind Kind;

                            [FieldOffset(4)]
                            public CppSharp.CppParser.AST.AccessSpecifier Access;

                            [FieldOffset(8)]
                            public global::System.IntPtr _Namespace;

                            [FieldOffset(16)]
                            public CppSharp.CppParser.SourceLocation.Internal Location;

                            [FieldOffset(20)]
                            public int LineNumberStart;

                            [FieldOffset(24)]
                            public int LineNumberEnd;

                            [FieldOffset(56)]
                            public global::System.IntPtr Comment;

                            [FieldOffset(88)]
                            public bool IsIncomplete;

                            [FieldOffset(89)]
                            public bool IsDependent;

                            [FieldOffset(96)]
                            public global::System.IntPtr CompleteDeclaration;

                            [FieldOffset(104)]
                            public uint DefinitionOrder;

                            [FieldOffset(136)]
                            public global::System.IntPtr OriginalPtr;

                            [FieldOffset(192)]
                            public ulong Value;

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration4ItemC2Ev")]
                            internal static extern void ctor_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration4ItemC2ERKS3_")]
                            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration4ItemD2Ev")]
                            internal static extern void dtor_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration4Item13getExpressionEv")]
                            internal static extern global::System.IntPtr getExpression_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST11Enumeration4Item13setExpressionEPKc")]
                            internal static extern void setExpression_0(global::System.IntPtr instance, global::System.IntPtr s);
                        }

                        private readonly bool __ownsNativeInstance;

                        public static new Item __CreateInstance(global::System.IntPtr native)
                        {
                            return new Item((Item.Internal*) native);
                        }

                        public static Item __CreateInstance(Item.Internal native)
                        {
                            return new Item(native);
                        }

                        private static Item.Internal* __CopyValue(Item.Internal native)
                        {
                            var ret = (Item.Internal*) Marshal.AllocHGlobal(200);
                            *ret = native;
                            return ret;
                        }

                        private Item(Item.Internal native)
                            : this(__CopyValue(native))
                        {
                            __ownsNativeInstance = true;
                            NativeToManagedMap[__Instance] = this;
                        }

                        protected Item(Item.Internal* native, bool isInternalImpl = false)
                            : base((CppSharp.CppParser.AST.Declaration.Internal*) native)
                        {
                        }

                        public Item()
                            : this((Internal*) null)
                        {
                            __Instance = Marshal.AllocHGlobal(200);
                            __ownsNativeInstance = true;
                            NativeToManagedMap[__Instance] = this;
                            Internal.ctor_0(__Instance);
                        }

                        protected override void Dispose(bool disposing)
                        {
                            DestroyNativeInstance(false);
                            base.Dispose(disposing);
                        }

                        public override void DestroyNativeInstance()
                        {
                            DestroyNativeInstance(true);
                        }

                        private void DestroyNativeInstance(bool force)
                        {
                            CppSharp.CppParser.AST.Declaration __dummy;
                            NativeToManagedMap.TryRemove(__Instance, out __dummy);
                            if (__ownsNativeInstance)
                                Marshal.FreeHGlobal(__Instance);
                        }

                        public string getExpression()
                        {
                            var __ret = Internal.getExpression_0(__Instance);
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        public void setExpression(string s)
                        {
                            var arg0 = Marshal.StringToHGlobalAnsi(s);
                            Internal.setExpression_0(__Instance, arg0);
                            Marshal.FreeHGlobal(arg0);
                        }

                        public ulong Value
                        {
                            get
                            {
                                return ((Internal*) __Instance)->Value;
                            }

                            set
                            {
                                ((Internal*) __Instance)->Value = value;
                            }
                        }
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new Enumeration __CreateInstance(global::System.IntPtr native)
                    {
                        return new Enumeration((Enumeration.Internal*) native);
                    }

                    public static Enumeration __CreateInstance(Enumeration.Internal native)
                    {
                        return new Enumeration(native);
                    }

                    private static Enumeration.Internal* __CopyValue(Enumeration.Internal native)
                    {
                        var ret = (Enumeration.Internal*) Marshal.AllocHGlobal(432);
                        *ret = native;
                        return ret;
                    }

                    private Enumeration(Enumeration.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Enumeration(Enumeration.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.DeclarationContext.Internal*) native)
                    {
                    }

                    public Enumeration()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(432);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.Enumeration.Item getItems(uint i)
                    {
                        var __ret = new CppSharp.CppParser.AST.Enumeration.Item.Internal();
                        Internal.getItems_0(new IntPtr(&__ret), __Instance, i);
                        return CppSharp.CppParser.AST.Enumeration.Item.__CreateInstance(__ret);
                    }

                    public void addItems(CppSharp.CppParser.AST.Enumeration.Item s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addItems_0(__Instance, arg0);
                    }

                    public uint getItemsCount()
                    {
                        var __ret = Internal.getItemsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearItems()
                    {
                        Internal.clearItems_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.Enumeration.EnumModifiers Modifiers
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Modifiers;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Modifiers = value;
                        }
                    }

                    public CppSharp.CppParser.AST.Type Type
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Type __result0;
                            if (((Internal*) __Instance)->Type == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Type.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Type))
                                __result0 = (CppSharp.CppParser.AST.Type) CppSharp.CppParser.AST.Type.NativeToManagedMap[((Internal*) __Instance)->Type];
                            else __result0 = CppSharp.CppParser.AST.Type.__CreateInstance(((Internal*) __Instance)->Type);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Type = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public CppSharp.CppParser.AST.BuiltinType BuiltinType
                    {
                        get
                        {
                            CppSharp.CppParser.AST.BuiltinType __result0;
                            if (((Internal*) __Instance)->BuiltinType == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.BuiltinType.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->BuiltinType))
                                __result0 = (CppSharp.CppParser.AST.BuiltinType) CppSharp.CppParser.AST.BuiltinType.NativeToManagedMap[((Internal*) __Instance)->BuiltinType];
                            else __result0 = CppSharp.CppParser.AST.BuiltinType.__CreateInstance(((Internal*) __Instance)->BuiltinType);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->BuiltinType = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Enumeration.Item> Items
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Enumeration.Item>(((Internal*) __Instance)->Items);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Items = value.Internal;
                        }
                    }
                }

                public unsafe partial class Variable : CppSharp.CppParser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 208)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(192)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal QualifiedType;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8VariableC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8VariableC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8VariableD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Variable10getMangledEv")]
                        internal static extern global::System.IntPtr getMangled_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Variable10setMangledEPKc")]
                        internal static extern void setMangled_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new Variable __CreateInstance(global::System.IntPtr native)
                    {
                        return new Variable((Variable.Internal*) native);
                    }

                    public static Variable __CreateInstance(Variable.Internal native)
                    {
                        return new Variable(native);
                    }

                    private static Variable.Internal* __CopyValue(Variable.Internal native)
                    {
                        var ret = (Variable.Internal*) Marshal.AllocHGlobal(208);
                        *ret = native;
                        return ret;
                    }

                    private Variable(Variable.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Variable(Variable.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Declaration.Internal*) native)
                    {
                    }

                    public Variable()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(208);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getMangled()
                    {
                        var __ret = Internal.getMangled_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setMangled(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setMangled_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public CppSharp.CppParser.AST.QualifiedType QualifiedType
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->QualifiedType);
                        }

                        set
                        {
                            ((Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }
                }

                public unsafe partial class BaseClassSpecifier : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 24)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(4)]
                        public bool IsVirtual;

                        [FieldOffset(8)]
                        public global::System.IntPtr Type;

                        [FieldOffset(16)]
                        public int Offset;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18BaseClassSpecifierC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18BaseClassSpecifierC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, BaseClassSpecifier> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, BaseClassSpecifier>();

                    private readonly bool __ownsNativeInstance;

                    public static BaseClassSpecifier __CreateInstance(global::System.IntPtr native)
                    {
                        return new BaseClassSpecifier((BaseClassSpecifier.Internal*) native);
                    }

                    public static BaseClassSpecifier __CreateInstance(BaseClassSpecifier.Internal native)
                    {
                        return new BaseClassSpecifier(native);
                    }

                    private static BaseClassSpecifier.Internal* __CopyValue(BaseClassSpecifier.Internal native)
                    {
                        var ret = (BaseClassSpecifier.Internal*) Marshal.AllocHGlobal(24);
                        *ret = native;
                        return ret;
                    }

                    private BaseClassSpecifier(BaseClassSpecifier.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected BaseClassSpecifier(BaseClassSpecifier.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public BaseClassSpecifier()
                    {
                        __Instance = Marshal.AllocHGlobal(24);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.BaseClassSpecifier __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.AccessSpecifier Access
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Access;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Access = value;
                        }
                    }

                    public bool IsVirtual
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsVirtual;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsVirtual = value;
                        }
                    }

                    public CppSharp.CppParser.AST.Type Type
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Type __result0;
                            if (((Internal*) __Instance)->Type == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Type.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Type))
                                __result0 = (CppSharp.CppParser.AST.Type) CppSharp.CppParser.AST.Type.NativeToManagedMap[((Internal*) __Instance)->Type];
                            else __result0 = CppSharp.CppParser.AST.Type.__CreateInstance(((Internal*) __Instance)->Type);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Type = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public int Offset
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Offset;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Offset = value;
                        }
                    }
                }

                public unsafe partial class Field : CppSharp.CppParser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 208)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(168)]
                        public CppSharp.CppParser.AST.QualifiedType.Internal QualifiedType;

                        [FieldOffset(184)]
                        public uint Offset;

                        [FieldOffset(192)]
                        public global::System.IntPtr Class;

                        [FieldOffset(200)]
                        public bool IsBitField;

                        [FieldOffset(204)]
                        public uint BitWidth;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5FieldC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5FieldC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5FieldD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new Field __CreateInstance(global::System.IntPtr native)
                    {
                        return new Field((Field.Internal*) native);
                    }

                    public static Field __CreateInstance(Field.Internal native)
                    {
                        return new Field(native);
                    }

                    private static Field.Internal* __CopyValue(Field.Internal native)
                    {
                        var ret = (Field.Internal*) Marshal.AllocHGlobal(208);
                        *ret = native;
                        return ret;
                    }

                    private Field(Field.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Field(Field.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Declaration.Internal*) native)
                    {
                    }

                    public Field()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(208);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.QualifiedType QualifiedType
                    {
                        get
                        {
                            return CppSharp.CppParser.AST.QualifiedType.__CreateInstance(((Internal*) __Instance)->QualifiedType);
                        }

                        set
                        {
                            ((Internal*) __Instance)->QualifiedType = ReferenceEquals(value, null) ? new CppSharp.CppParser.AST.QualifiedType.Internal() : *(CppSharp.CppParser.AST.QualifiedType.Internal*) (value.__Instance);
                        }
                    }

                    public uint Offset
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Offset;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Offset = value;
                        }
                    }

                    public CppSharp.CppParser.AST.Class Class
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Class __result0;
                            if (((Internal*) __Instance)->Class == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Class.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Class))
                                __result0 = (CppSharp.CppParser.AST.Class) CppSharp.CppParser.AST.Class.NativeToManagedMap[((Internal*) __Instance)->Class];
                            else __result0 = CppSharp.CppParser.AST.Class.__CreateInstance(((Internal*) __Instance)->Class);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Class = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public bool IsBitField
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsBitField;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsBitField = value;
                        }
                    }

                    public uint BitWidth
                    {
                        get
                        {
                            return ((Internal*) __Instance)->BitWidth;
                        }

                        set
                        {
                            ((Internal*) __Instance)->BitWidth = value;
                        }
                    }
                }

                public unsafe partial class AccessSpecifierDecl : CppSharp.CppParser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 168)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19AccessSpecifierDeclC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19AccessSpecifierDeclC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19AccessSpecifierDeclD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new AccessSpecifierDecl __CreateInstance(global::System.IntPtr native)
                    {
                        return new AccessSpecifierDecl((AccessSpecifierDecl.Internal*) native);
                    }

                    public static AccessSpecifierDecl __CreateInstance(AccessSpecifierDecl.Internal native)
                    {
                        return new AccessSpecifierDecl(native);
                    }

                    private static AccessSpecifierDecl.Internal* __CopyValue(AccessSpecifierDecl.Internal native)
                    {
                        var ret = (AccessSpecifierDecl.Internal*) Marshal.AllocHGlobal(168);
                        *ret = native;
                        return ret;
                    }

                    private AccessSpecifierDecl(AccessSpecifierDecl.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected AccessSpecifierDecl(AccessSpecifierDecl.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Declaration.Internal*) native)
                    {
                    }

                    public AccessSpecifierDecl()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(168);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }
                }

                public unsafe partial class Class : CppSharp.CppParser.AST.DeclarationContext, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 512)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(384)]
                        public bool IsAnonymous;

                        [FieldOffset(488)]
                        public bool IsPOD;

                        [FieldOffset(489)]
                        public bool IsAbstract;

                        [FieldOffset(490)]
                        public bool IsUnion;

                        [FieldOffset(491)]
                        public bool IsDynamic;

                        [FieldOffset(492)]
                        public bool IsPolymorphic;

                        [FieldOffset(493)]
                        public bool HasNonTrivialDefaultConstructor;

                        [FieldOffset(494)]
                        public bool HasNonTrivialCopyConstructor;

                        [FieldOffset(495)]
                        public bool HasNonTrivialDestructor;

                        [FieldOffset(496)]
                        public bool IsExternCContext;

                        [FieldOffset(504)]
                        public global::System.IntPtr Layout;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5ClassC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5ClassC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5ClassD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class8getBasesEj")]
                        internal static extern global::System.IntPtr getBases_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class8addBasesERPNS1_18BaseClassSpecifierE")]
                        internal static extern void addBases_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class13getBasesCountEv")]
                        internal static extern uint getBasesCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class10clearBasesEv")]
                        internal static extern void clearBases_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class9getFieldsEj")]
                        internal static extern global::System.IntPtr getFields_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class9addFieldsERPNS1_5FieldE")]
                        internal static extern void addFields_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class14getFieldsCountEv")]
                        internal static extern uint getFieldsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class11clearFieldsEv")]
                        internal static extern void clearFields_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class10getMethodsEj")]
                        internal static extern global::System.IntPtr getMethods_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class10addMethodsERPNS1_6MethodE")]
                        internal static extern void addMethods_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class15getMethodsCountEv")]
                        internal static extern uint getMethodsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class12clearMethodsEv")]
                        internal static extern void clearMethods_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class13getSpecifiersEj")]
                        internal static extern global::System.IntPtr getSpecifiers_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class13addSpecifiersERPNS1_19AccessSpecifierDeclE")]
                        internal static extern void addSpecifiers_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class18getSpecifiersCountEv")]
                        internal static extern uint getSpecifiersCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST5Class15clearSpecifiersEv")]
                        internal static extern void clearSpecifiers_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new Class __CreateInstance(global::System.IntPtr native)
                    {
                        return new Class((Class.Internal*) native);
                    }

                    public static Class __CreateInstance(Class.Internal native)
                    {
                        return new Class(native);
                    }

                    private static Class.Internal* __CopyValue(Class.Internal native)
                    {
                        var ret = (Class.Internal*) Marshal.AllocHGlobal(512);
                        *ret = native;
                        return ret;
                    }

                    private Class(Class.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Class(Class.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.DeclarationContext.Internal*) native)
                    {
                    }

                    public Class()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(512);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.BaseClassSpecifier getBases(uint i)
                    {
                        var __ret = Internal.getBases_0(__Instance, i);
                        CppSharp.CppParser.AST.BaseClassSpecifier __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.BaseClassSpecifier.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.BaseClassSpecifier) CppSharp.CppParser.AST.BaseClassSpecifier.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.BaseClassSpecifier.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addBases(CppSharp.CppParser.AST.BaseClassSpecifier s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addBases_0(__Instance, arg0);
                    }

                    public uint getBasesCount()
                    {
                        var __ret = Internal.getBasesCount_0(__Instance);
                        return __ret;
                    }

                    public void clearBases()
                    {
                        Internal.clearBases_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.Field getFields(uint i)
                    {
                        var __ret = Internal.getFields_0(__Instance, i);
                        CppSharp.CppParser.AST.Field __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Field.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Field) CppSharp.CppParser.AST.Field.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Field.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addFields(CppSharp.CppParser.AST.Field s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addFields_0(__Instance, arg0);
                    }

                    public uint getFieldsCount()
                    {
                        var __ret = Internal.getFieldsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearFields()
                    {
                        Internal.clearFields_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.Method getMethods(uint i)
                    {
                        var __ret = Internal.getMethods_0(__Instance, i);
                        CppSharp.CppParser.AST.Method __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.Method.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.Method) CppSharp.CppParser.AST.Method.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.Method.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addMethods(CppSharp.CppParser.AST.Method s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addMethods_0(__Instance, arg0);
                    }

                    public uint getMethodsCount()
                    {
                        var __ret = Internal.getMethodsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearMethods()
                    {
                        Internal.clearMethods_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.AccessSpecifierDecl getSpecifiers(uint i)
                    {
                        var __ret = Internal.getSpecifiers_0(__Instance, i);
                        CppSharp.CppParser.AST.AccessSpecifierDecl __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.AccessSpecifierDecl.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.AccessSpecifierDecl) CppSharp.CppParser.AST.AccessSpecifierDecl.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.AccessSpecifierDecl.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addSpecifiers(CppSharp.CppParser.AST.AccessSpecifierDecl s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addSpecifiers_0(__Instance, arg0);
                    }

                    public uint getSpecifiersCount()
                    {
                        var __ret = Internal.getSpecifiersCount_0(__Instance);
                        return __ret;
                    }

                    public void clearSpecifiers()
                    {
                        Internal.clearSpecifiers_0(__Instance);
                    }

                    public Std.Vector<CppSharp.CppParser.AST.BaseClassSpecifier> Bases
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.BaseClassSpecifier>(((Internal*) __Instance)->Bases);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Bases = value.Internal;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Field> Fields
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Field>(((Internal*) __Instance)->Fields);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Fields = value.Internal;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.Method> Methods
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.Method>(((Internal*) __Instance)->Methods);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Methods = value.Internal;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.AccessSpecifierDecl> Specifiers
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.AccessSpecifierDecl>(((Internal*) __Instance)->Specifiers);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Specifiers = value.Internal;
                        }
                    }

                    public bool IsPOD
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsPOD;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsPOD = value;
                        }
                    }

                    public bool IsAbstract
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsAbstract;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsAbstract = value;
                        }
                    }

                    public bool IsUnion
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsUnion;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsUnion = value;
                        }
                    }

                    public bool IsDynamic
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsDynamic;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsDynamic = value;
                        }
                    }

                    public bool IsPolymorphic
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsPolymorphic;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsPolymorphic = value;
                        }
                    }

                    public bool HasNonTrivialDefaultConstructor
                    {
                        get
                        {
                            return ((Internal*) __Instance)->HasNonTrivialDefaultConstructor;
                        }

                        set
                        {
                            ((Internal*) __Instance)->HasNonTrivialDefaultConstructor = value;
                        }
                    }

                    public bool HasNonTrivialCopyConstructor
                    {
                        get
                        {
                            return ((Internal*) __Instance)->HasNonTrivialCopyConstructor;
                        }

                        set
                        {
                            ((Internal*) __Instance)->HasNonTrivialCopyConstructor = value;
                        }
                    }

                    public bool HasNonTrivialDestructor
                    {
                        get
                        {
                            return ((Internal*) __Instance)->HasNonTrivialDestructor;
                        }

                        set
                        {
                            ((Internal*) __Instance)->HasNonTrivialDestructor = value;
                        }
                    }

                    public bool IsExternCContext
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsExternCContext;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsExternCContext = value;
                        }
                    }

                    public CppSharp.CppParser.AST.ClassLayout Layout
                    {
                        get
                        {
                            CppSharp.CppParser.AST.ClassLayout __result0;
                            if (((Internal*) __Instance)->Layout == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.ClassLayout.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Layout))
                                __result0 = (CppSharp.CppParser.AST.ClassLayout) CppSharp.CppParser.AST.ClassLayout.NativeToManagedMap[((Internal*) __Instance)->Layout];
                            else __result0 = CppSharp.CppParser.AST.ClassLayout.__CreateInstance(((Internal*) __Instance)->Layout);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Layout = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }

                public unsafe partial class Template : CppSharp.CppParser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 200)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(168)]
                        public global::System.IntPtr TemplatedDecl;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8TemplateC2ENS1_15DeclarationKindE")]
                        internal static extern void ctor_0(global::System.IntPtr instance, CppSharp.CppParser.AST.DeclarationKind kind);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8TemplateC2Ev")]
                        internal static extern void ctor_1(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8TemplateC2ERKS2_")]
                        internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8TemplateD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Template13getParametersEj")]
                        internal static extern void getParameters_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Template13addParametersERNS1_17TemplateParameterE")]
                        internal static extern void addParameters_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Template18getParametersCountEv")]
                        internal static extern uint getParametersCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST8Template15clearParametersEv")]
                        internal static extern void clearParameters_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new Template __CreateInstance(global::System.IntPtr native)
                    {
                        return new Template((Template.Internal*) native);
                    }

                    public static Template __CreateInstance(Template.Internal native)
                    {
                        return new Template(native);
                    }

                    private static Template.Internal* __CopyValue(Template.Internal native)
                    {
                        var ret = (Template.Internal*) Marshal.AllocHGlobal(200);
                        *ret = native;
                        return ret;
                    }

                    private Template(Template.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Template(Template.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Declaration.Internal*) native)
                    {
                    }

                    public Template(CppSharp.CppParser.AST.DeclarationKind kind)
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(200);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = kind;
                        Internal.ctor_0(__Instance, arg0);
                    }

                    public Template()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(200);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_1(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.TemplateParameter getParameters(uint i)
                    {
                        var __ret = new CppSharp.CppParser.AST.TemplateParameter.Internal();
                        Internal.getParameters_0(new IntPtr(&__ret), __Instance, i);
                        return CppSharp.CppParser.AST.TemplateParameter.__CreateInstance(__ret);
                    }

                    public void addParameters(CppSharp.CppParser.AST.TemplateParameter s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addParameters_0(__Instance, arg0);
                    }

                    public uint getParametersCount()
                    {
                        var __ret = Internal.getParametersCount_0(__Instance);
                        return __ret;
                    }

                    public void clearParameters()
                    {
                        Internal.clearParameters_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.Declaration TemplatedDecl
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Declaration __result0;
                            if (((Internal*) __Instance)->TemplatedDecl == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Declaration.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->TemplatedDecl))
                                __result0 = (CppSharp.CppParser.AST.Declaration) CppSharp.CppParser.AST.Declaration.NativeToManagedMap[((Internal*) __Instance)->TemplatedDecl];
                            else __result0 = CppSharp.CppParser.AST.Declaration.__CreateInstance(((Internal*) __Instance)->TemplatedDecl);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->TemplatedDecl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.TemplateParameter> Parameters
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.TemplateParameter>(((Internal*) __Instance)->Parameters);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Parameters = value.Internal;
                        }
                    }
                }

                public unsafe partial class ClassTemplate : CppSharp.CppParser.AST.Template, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 224)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(168)]
                        public global::System.IntPtr TemplatedDecl;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplateC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplateC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplateD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplate18getSpecializationsEj")]
                        internal static extern global::System.IntPtr getSpecializations_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplate18addSpecializationsERPNS1_27ClassTemplateSpecializationE")]
                        internal static extern void addSpecializations_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplate23getSpecializationsCountEv")]
                        internal static extern uint getSpecializationsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13ClassTemplate20clearSpecializationsEv")]
                        internal static extern void clearSpecializations_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new ClassTemplate __CreateInstance(global::System.IntPtr native)
                    {
                        return new ClassTemplate((ClassTemplate.Internal*) native);
                    }

                    public static ClassTemplate __CreateInstance(ClassTemplate.Internal native)
                    {
                        return new ClassTemplate(native);
                    }

                    private static ClassTemplate.Internal* __CopyValue(ClassTemplate.Internal native)
                    {
                        var ret = (ClassTemplate.Internal*) Marshal.AllocHGlobal(224);
                        *ret = native;
                        return ret;
                    }

                    private ClassTemplate(ClassTemplate.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected ClassTemplate(ClassTemplate.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Template.Internal*) native)
                    {
                    }

                    public ClassTemplate()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(224);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.ClassTemplateSpecialization getSpecializations(uint i)
                    {
                        var __ret = Internal.getSpecializations_0(__Instance, i);
                        CppSharp.CppParser.AST.ClassTemplateSpecialization __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.ClassTemplateSpecialization.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.ClassTemplateSpecialization) CppSharp.CppParser.AST.ClassTemplateSpecialization.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.ClassTemplateSpecialization.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addSpecializations(CppSharp.CppParser.AST.ClassTemplateSpecialization s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addSpecializations_0(__Instance, arg0);
                    }

                    public uint getSpecializationsCount()
                    {
                        var __ret = Internal.getSpecializationsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearSpecializations()
                    {
                        Internal.clearSpecializations_0(__Instance);
                    }

                    public Std.Vector<CppSharp.CppParser.AST.ClassTemplateSpecialization> Specializations
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.ClassTemplateSpecialization>(((Internal*) __Instance)->Specializations);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Specializations = value.Internal;
                        }
                    }
                }

                public unsafe partial class ClassTemplateSpecialization : CppSharp.CppParser.AST.Class, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 552)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(384)]
                        public bool IsAnonymous;

                        [FieldOffset(488)]
                        public bool IsPOD;

                        [FieldOffset(489)]
                        public bool IsAbstract;

                        [FieldOffset(490)]
                        public bool IsUnion;

                        [FieldOffset(491)]
                        public bool IsDynamic;

                        [FieldOffset(492)]
                        public bool IsPolymorphic;

                        [FieldOffset(493)]
                        public bool HasNonTrivialDefaultConstructor;

                        [FieldOffset(494)]
                        public bool HasNonTrivialCopyConstructor;

                        [FieldOffset(495)]
                        public bool HasNonTrivialDestructor;

                        [FieldOffset(496)]
                        public bool IsExternCContext;

                        [FieldOffset(504)]
                        public global::System.IntPtr Layout;

                        [FieldOffset(512)]
                        public global::System.IntPtr TemplatedDecl;

                        [FieldOffset(544)]
                        public CppSharp.CppParser.AST.TemplateSpecializationKind SpecializationKind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecializationC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecializationC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecializationD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecialization12getArgumentsEj")]
                        internal static extern void getArguments_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecialization12addArgumentsERNS1_16TemplateArgumentE")]
                        internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecialization17getArgumentsCountEv")]
                        internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST27ClassTemplateSpecialization14clearArgumentsEv")]
                        internal static extern void clearArguments_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new ClassTemplateSpecialization __CreateInstance(global::System.IntPtr native)
                    {
                        return new ClassTemplateSpecialization((ClassTemplateSpecialization.Internal*) native);
                    }

                    public static ClassTemplateSpecialization __CreateInstance(ClassTemplateSpecialization.Internal native)
                    {
                        return new ClassTemplateSpecialization(native);
                    }

                    private static ClassTemplateSpecialization.Internal* __CopyValue(ClassTemplateSpecialization.Internal native)
                    {
                        var ret = (ClassTemplateSpecialization.Internal*) Marshal.AllocHGlobal(552);
                        *ret = native;
                        return ret;
                    }

                    private ClassTemplateSpecialization(ClassTemplateSpecialization.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected ClassTemplateSpecialization(ClassTemplateSpecialization.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Class.Internal*) native)
                    {
                    }

                    public ClassTemplateSpecialization()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(552);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.TemplateArgument getArguments(uint i)
                    {
                        var __ret = new CppSharp.CppParser.AST.TemplateArgument.Internal();
                        Internal.getArguments_0(new IntPtr(&__ret), __Instance, i);
                        return CppSharp.CppParser.AST.TemplateArgument.__CreateInstance(__ret);
                    }

                    public void addArguments(CppSharp.CppParser.AST.TemplateArgument s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addArguments_0(__Instance, arg0);
                    }

                    public uint getArgumentsCount()
                    {
                        var __ret = Internal.getArgumentsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearArguments()
                    {
                        Internal.clearArguments_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.ClassTemplate TemplatedDecl
                    {
                        get
                        {
                            CppSharp.CppParser.AST.ClassTemplate __result0;
                            if (((Internal*) __Instance)->TemplatedDecl == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.ClassTemplate.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->TemplatedDecl))
                                __result0 = (CppSharp.CppParser.AST.ClassTemplate) CppSharp.CppParser.AST.ClassTemplate.NativeToManagedMap[((Internal*) __Instance)->TemplatedDecl];
                            else __result0 = CppSharp.CppParser.AST.ClassTemplate.__CreateInstance(((Internal*) __Instance)->TemplatedDecl);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->TemplatedDecl = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.TemplateArgument> Arguments
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.TemplateArgument>(((Internal*) __Instance)->Arguments);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Arguments = value.Internal;
                        }
                    }

                    public CppSharp.CppParser.AST.TemplateSpecializationKind SpecializationKind
                    {
                        get
                        {
                            return ((Internal*) __Instance)->SpecializationKind;
                        }

                        set
                        {
                            ((Internal*) __Instance)->SpecializationKind = value;
                        }
                    }
                }

                public unsafe partial class ClassTemplatePartialSpecialization : CppSharp.CppParser.AST.ClassTemplateSpecialization, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 552)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(384)]
                        public bool IsAnonymous;

                        [FieldOffset(488)]
                        public bool IsPOD;

                        [FieldOffset(489)]
                        public bool IsAbstract;

                        [FieldOffset(490)]
                        public bool IsUnion;

                        [FieldOffset(491)]
                        public bool IsDynamic;

                        [FieldOffset(492)]
                        public bool IsPolymorphic;

                        [FieldOffset(493)]
                        public bool HasNonTrivialDefaultConstructor;

                        [FieldOffset(494)]
                        public bool HasNonTrivialCopyConstructor;

                        [FieldOffset(495)]
                        public bool HasNonTrivialDestructor;

                        [FieldOffset(496)]
                        public bool IsExternCContext;

                        [FieldOffset(504)]
                        public global::System.IntPtr Layout;

                        [FieldOffset(512)]
                        public global::System.IntPtr TemplatedDecl;

                        [FieldOffset(544)]
                        public CppSharp.CppParser.AST.TemplateSpecializationKind SpecializationKind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST34ClassTemplatePartialSpecializationC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST34ClassTemplatePartialSpecializationC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST34ClassTemplatePartialSpecializationD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new ClassTemplatePartialSpecialization __CreateInstance(global::System.IntPtr native)
                    {
                        return new ClassTemplatePartialSpecialization((ClassTemplatePartialSpecialization.Internal*) native);
                    }

                    public static ClassTemplatePartialSpecialization __CreateInstance(ClassTemplatePartialSpecialization.Internal native)
                    {
                        return new ClassTemplatePartialSpecialization(native);
                    }

                    private static ClassTemplatePartialSpecialization.Internal* __CopyValue(ClassTemplatePartialSpecialization.Internal native)
                    {
                        var ret = (ClassTemplatePartialSpecialization.Internal*) Marshal.AllocHGlobal(552);
                        *ret = native;
                        return ret;
                    }

                    private ClassTemplatePartialSpecialization(ClassTemplatePartialSpecialization.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected ClassTemplatePartialSpecialization(ClassTemplatePartialSpecialization.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.ClassTemplateSpecialization.Internal*) native)
                    {
                    }

                    public ClassTemplatePartialSpecialization()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(552);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }
                }

                public unsafe partial class FunctionTemplate : CppSharp.CppParser.AST.Template, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 224)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(168)]
                        public global::System.IntPtr TemplatedDecl;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplateC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplateC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplateD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplate18getSpecializationsEj")]
                        internal static extern global::System.IntPtr getSpecializations_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplate18addSpecializationsERPNS1_30FunctionTemplateSpecializationE")]
                        internal static extern void addSpecializations_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplate23getSpecializationsCountEv")]
                        internal static extern uint getSpecializationsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16FunctionTemplate20clearSpecializationsEv")]
                        internal static extern void clearSpecializations_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new FunctionTemplate __CreateInstance(global::System.IntPtr native)
                    {
                        return new FunctionTemplate((FunctionTemplate.Internal*) native);
                    }

                    public static FunctionTemplate __CreateInstance(FunctionTemplate.Internal native)
                    {
                        return new FunctionTemplate(native);
                    }

                    private static FunctionTemplate.Internal* __CopyValue(FunctionTemplate.Internal native)
                    {
                        var ret = (FunctionTemplate.Internal*) Marshal.AllocHGlobal(224);
                        *ret = native;
                        return ret;
                    }

                    private FunctionTemplate(FunctionTemplate.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected FunctionTemplate(FunctionTemplate.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Template.Internal*) native)
                    {
                    }

                    public FunctionTemplate()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(224);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.FunctionTemplateSpecialization getSpecializations(uint i)
                    {
                        var __ret = Internal.getSpecializations_0(__Instance, i);
                        CppSharp.CppParser.AST.FunctionTemplateSpecialization __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.FunctionTemplateSpecialization.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.FunctionTemplateSpecialization) CppSharp.CppParser.AST.FunctionTemplateSpecialization.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.FunctionTemplateSpecialization.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addSpecializations(CppSharp.CppParser.AST.FunctionTemplateSpecialization s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addSpecializations_0(__Instance, arg0);
                    }

                    public uint getSpecializationsCount()
                    {
                        var __ret = Internal.getSpecializationsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearSpecializations()
                    {
                        Internal.clearSpecializations_0(__Instance);
                    }

                    public Std.Vector<CppSharp.CppParser.AST.FunctionTemplateSpecialization> Specializations
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.FunctionTemplateSpecialization>(((Internal*) __Instance)->Specializations);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Specializations = value.Internal;
                        }
                    }
                }

                public unsafe partial class FunctionTemplateSpecialization : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 48)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public global::System.IntPtr Template;

                        [FieldOffset(32)]
                        public global::System.IntPtr SpecializedFunction;

                        [FieldOffset(40)]
                        public CppSharp.CppParser.AST.TemplateSpecializationKind SpecializationKind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecializationC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecializationC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecializationD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecialization12getArgumentsEj")]
                        internal static extern void getArguments_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecialization12addArgumentsERNS1_16TemplateArgumentE")]
                        internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecialization17getArgumentsCountEv")]
                        internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST30FunctionTemplateSpecialization14clearArgumentsEv")]
                        internal static extern void clearArguments_0(global::System.IntPtr instance);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FunctionTemplateSpecialization> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FunctionTemplateSpecialization>();

                    private readonly bool __ownsNativeInstance;

                    public static FunctionTemplateSpecialization __CreateInstance(global::System.IntPtr native)
                    {
                        return new FunctionTemplateSpecialization((FunctionTemplateSpecialization.Internal*) native);
                    }

                    public static FunctionTemplateSpecialization __CreateInstance(FunctionTemplateSpecialization.Internal native)
                    {
                        return new FunctionTemplateSpecialization(native);
                    }

                    private static FunctionTemplateSpecialization.Internal* __CopyValue(FunctionTemplateSpecialization.Internal native)
                    {
                        var ret = (FunctionTemplateSpecialization.Internal*) Marshal.AllocHGlobal(48);
                        *ret = native;
                        return ret;
                    }

                    private FunctionTemplateSpecialization(FunctionTemplateSpecialization.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected FunctionTemplateSpecialization(FunctionTemplateSpecialization.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public FunctionTemplateSpecialization()
                    {
                        __Instance = Marshal.AllocHGlobal(48);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.FunctionTemplateSpecialization __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance || force)
                            Internal.dtor_0(__Instance);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.TemplateArgument getArguments(uint i)
                    {
                        var __ret = new CppSharp.CppParser.AST.TemplateArgument.Internal();
                        Internal.getArguments_0(new IntPtr(&__ret), __Instance, i);
                        return CppSharp.CppParser.AST.TemplateArgument.__CreateInstance(__ret);
                    }

                    public void addArguments(CppSharp.CppParser.AST.TemplateArgument s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addArguments_0(__Instance, arg0);
                    }

                    public uint getArgumentsCount()
                    {
                        var __ret = Internal.getArgumentsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearArguments()
                    {
                        Internal.clearArguments_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.FunctionTemplate Template
                    {
                        get
                        {
                            CppSharp.CppParser.AST.FunctionTemplate __result0;
                            if (((Internal*) __Instance)->Template == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.FunctionTemplate.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Template))
                                __result0 = (CppSharp.CppParser.AST.FunctionTemplate) CppSharp.CppParser.AST.FunctionTemplate.NativeToManagedMap[((Internal*) __Instance)->Template];
                            else __result0 = CppSharp.CppParser.AST.FunctionTemplate.__CreateInstance(((Internal*) __Instance)->Template);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Template = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.TemplateArgument> Arguments
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.TemplateArgument>(((Internal*) __Instance)->Arguments);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Arguments = value.Internal;
                        }
                    }

                    public CppSharp.CppParser.AST.Function SpecializedFunction
                    {
                        get
                        {
                            CppSharp.CppParser.AST.Function __result0;
                            if (((Internal*) __Instance)->SpecializedFunction == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.Function.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->SpecializedFunction))
                                __result0 = (CppSharp.CppParser.AST.Function) CppSharp.CppParser.AST.Function.NativeToManagedMap[((Internal*) __Instance)->SpecializedFunction];
                            else __result0 = CppSharp.CppParser.AST.Function.__CreateInstance(((Internal*) __Instance)->SpecializedFunction);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->SpecializedFunction = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }

                    public CppSharp.CppParser.AST.TemplateSpecializationKind SpecializationKind
                    {
                        get
                        {
                            return ((Internal*) __Instance)->SpecializationKind;
                        }

                        set
                        {
                            ((Internal*) __Instance)->SpecializationKind = value;
                        }
                    }
                }

                public unsafe partial class Namespace : CppSharp.CppParser.AST.DeclarationContext, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 392)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(384)]
                        public bool IsAnonymous;

                        [FieldOffset(385)]
                        public bool IsInline;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST9NamespaceC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST9NamespaceC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST9NamespaceD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new Namespace __CreateInstance(global::System.IntPtr native)
                    {
                        return new Namespace((Namespace.Internal*) native);
                    }

                    public static Namespace __CreateInstance(Namespace.Internal native)
                    {
                        return new Namespace(native);
                    }

                    private static Namespace.Internal* __CopyValue(Namespace.Internal native)
                    {
                        var ret = (Namespace.Internal*) Marshal.AllocHGlobal(392);
                        *ret = native;
                        return ret;
                    }

                    private Namespace(Namespace.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Namespace(Namespace.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.DeclarationContext.Internal*) native)
                    {
                    }

                    public Namespace()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(392);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public bool IsInline
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsInline;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsInline = value;
                        }
                    }
                }

                public unsafe partial class PreprocessedEntity : CppSharp.CppParser.AST.Declaration, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 176)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(168)]
                        public CppSharp.CppParser.AST.MacroLocation MacroLocation;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18PreprocessedEntityC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18PreprocessedEntityC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST18PreprocessedEntityD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new PreprocessedEntity __CreateInstance(global::System.IntPtr native)
                    {
                        return new PreprocessedEntity((PreprocessedEntity.Internal*) native);
                    }

                    public static PreprocessedEntity __CreateInstance(PreprocessedEntity.Internal native)
                    {
                        return new PreprocessedEntity(native);
                    }

                    private static PreprocessedEntity.Internal* __CopyValue(PreprocessedEntity.Internal native)
                    {
                        var ret = (PreprocessedEntity.Internal*) Marshal.AllocHGlobal(176);
                        *ret = native;
                        return ret;
                    }

                    private PreprocessedEntity(PreprocessedEntity.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected PreprocessedEntity(PreprocessedEntity.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Declaration.Internal*) native)
                    {
                    }

                    public PreprocessedEntity()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(176);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.MacroLocation MacroLocation
                    {
                        get
                        {
                            return ((Internal*) __Instance)->MacroLocation;
                        }

                        set
                        {
                            ((Internal*) __Instance)->MacroLocation = value;
                        }
                    }
                }

                public unsafe partial class MacroDefinition : CppSharp.CppParser.AST.PreprocessedEntity, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 200)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(168)]
                        public CppSharp.CppParser.AST.MacroLocation MacroLocation;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15MacroDefinitionC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15MacroDefinitionC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15MacroDefinitionD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15MacroDefinition13getExpressionEv")]
                        internal static extern global::System.IntPtr getExpression_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15MacroDefinition13setExpressionEPKc")]
                        internal static extern void setExpression_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new MacroDefinition __CreateInstance(global::System.IntPtr native)
                    {
                        return new MacroDefinition((MacroDefinition.Internal*) native);
                    }

                    public static MacroDefinition __CreateInstance(MacroDefinition.Internal native)
                    {
                        return new MacroDefinition(native);
                    }

                    private static MacroDefinition.Internal* __CopyValue(MacroDefinition.Internal native)
                    {
                        var ret = (MacroDefinition.Internal*) Marshal.AllocHGlobal(200);
                        *ret = native;
                        return ret;
                    }

                    private MacroDefinition(MacroDefinition.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected MacroDefinition(MacroDefinition.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.PreprocessedEntity.Internal*) native)
                    {
                    }

                    public MacroDefinition()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(200);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getExpression()
                    {
                        var __ret = Internal.getExpression_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setExpression(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setExpression_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public unsafe partial class MacroExpansion : CppSharp.CppParser.AST.PreprocessedEntity, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 208)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(168)]
                        public CppSharp.CppParser.AST.MacroLocation MacroLocation;

                        [FieldOffset(200)]
                        public global::System.IntPtr Definition;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14MacroExpansionC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14MacroExpansionC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14MacroExpansionD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14MacroExpansion7getTextEv")]
                        internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14MacroExpansion7setTextEPKc")]
                        internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new MacroExpansion __CreateInstance(global::System.IntPtr native)
                    {
                        return new MacroExpansion((MacroExpansion.Internal*) native);
                    }

                    public static MacroExpansion __CreateInstance(MacroExpansion.Internal native)
                    {
                        return new MacroExpansion(native);
                    }

                    private static MacroExpansion.Internal* __CopyValue(MacroExpansion.Internal native)
                    {
                        var ret = (MacroExpansion.Internal*) Marshal.AllocHGlobal(208);
                        *ret = native;
                        return ret;
                    }

                    private MacroExpansion(MacroExpansion.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected MacroExpansion(MacroExpansion.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.PreprocessedEntity.Internal*) native)
                    {
                    }

                    public MacroExpansion()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(208);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getText()
                    {
                        var __ret = Internal.getText_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setText(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setText_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public CppSharp.CppParser.AST.MacroDefinition Definition
                    {
                        get
                        {
                            CppSharp.CppParser.AST.MacroDefinition __result0;
                            if (((Internal*) __Instance)->Definition == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.MacroDefinition.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->Definition))
                                __result0 = (CppSharp.CppParser.AST.MacroDefinition) CppSharp.CppParser.AST.MacroDefinition.NativeToManagedMap[((Internal*) __Instance)->Definition];
                            else __result0 = CppSharp.CppParser.AST.MacroDefinition.__CreateInstance(((Internal*) __Instance)->Definition);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Definition = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }

                public unsafe partial class TranslationUnit : CppSharp.CppParser.AST.Namespace, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 448)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.DeclarationKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.AccessSpecifier Access;

                        [FieldOffset(8)]
                        public global::System.IntPtr _Namespace;

                        [FieldOffset(16)]
                        public CppSharp.CppParser.SourceLocation.Internal Location;

                        [FieldOffset(20)]
                        public int LineNumberStart;

                        [FieldOffset(24)]
                        public int LineNumberEnd;

                        [FieldOffset(56)]
                        public global::System.IntPtr Comment;

                        [FieldOffset(88)]
                        public bool IsIncomplete;

                        [FieldOffset(89)]
                        public bool IsDependent;

                        [FieldOffset(96)]
                        public global::System.IntPtr CompleteDeclaration;

                        [FieldOffset(104)]
                        public uint DefinitionOrder;

                        [FieldOffset(136)]
                        public global::System.IntPtr OriginalPtr;

                        [FieldOffset(384)]
                        public bool IsAnonymous;

                        [FieldOffset(385)]
                        public bool IsInline;

                        [FieldOffset(416)]
                        public bool IsSystemHeader;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnitC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnitC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnitD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnit11getFileNameEv")]
                        internal static extern global::System.IntPtr getFileName_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnit11setFileNameEPKc")]
                        internal static extern void setFileName_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnit9getMacrosEj")]
                        internal static extern global::System.IntPtr getMacros_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnit9addMacrosERPNS1_15MacroDefinitionE")]
                        internal static extern void addMacros_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnit14getMacrosCountEv")]
                        internal static extern uint getMacrosCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST15TranslationUnit11clearMacrosEv")]
                        internal static extern void clearMacros_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new TranslationUnit __CreateInstance(global::System.IntPtr native)
                    {
                        return new TranslationUnit((TranslationUnit.Internal*) native);
                    }

                    public static TranslationUnit __CreateInstance(TranslationUnit.Internal native)
                    {
                        return new TranslationUnit(native);
                    }

                    private static TranslationUnit.Internal* __CopyValue(TranslationUnit.Internal native)
                    {
                        var ret = (TranslationUnit.Internal*) Marshal.AllocHGlobal(448);
                        *ret = native;
                        return ret;
                    }

                    private TranslationUnit(TranslationUnit.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected TranslationUnit(TranslationUnit.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Namespace.Internal*) native)
                    {
                    }

                    public TranslationUnit()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(448);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Declaration __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getFileName()
                    {
                        var __ret = Internal.getFileName_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setFileName(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setFileName_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public CppSharp.CppParser.AST.MacroDefinition getMacros(uint i)
                    {
                        var __ret = Internal.getMacros_0(__Instance, i);
                        CppSharp.CppParser.AST.MacroDefinition __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.MacroDefinition.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.MacroDefinition) CppSharp.CppParser.AST.MacroDefinition.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.MacroDefinition.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addMacros(CppSharp.CppParser.AST.MacroDefinition s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addMacros_0(__Instance, arg0);
                    }

                    public uint getMacrosCount()
                    {
                        var __ret = Internal.getMacrosCount_0(__Instance);
                        return __ret;
                    }

                    public void clearMacros()
                    {
                        Internal.clearMacros_0(__Instance);
                    }

                    public bool IsSystemHeader
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsSystemHeader;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsSystemHeader = value;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.MacroDefinition> Macros
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.MacroDefinition>(((Internal*) __Instance)->Macros);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Macros = value.Internal;
                        }
                    }
                }

                public unsafe partial class NativeLibrary : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 80)]
                    public partial struct Internal
                    {
                        [FieldOffset(24)]
                        public CppSharp.CppParser.AST.ArchType ArchType;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibraryC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibraryC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibraryD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary11getFileNameEv")]
                        internal static extern global::System.IntPtr getFileName_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary11setFileNameEPKc")]
                        internal static extern void setFileName_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary10getSymbolsEj")]
                        internal static extern global::System.IntPtr getSymbols_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary10addSymbolsEPKc")]
                        internal static extern void addSymbols_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary15getSymbolsCountEv")]
                        internal static extern uint getSymbolsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary12clearSymbolsEv")]
                        internal static extern void clearSymbols_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary15getDependenciesEj")]
                        internal static extern global::System.IntPtr getDependencies_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary15addDependenciesEPKc")]
                        internal static extern void addDependencies_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary20getDependenciesCountEv")]
                        internal static extern uint getDependenciesCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST13NativeLibrary17clearDependenciesEv")]
                        internal static extern void clearDependencies_0(global::System.IntPtr instance);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, NativeLibrary> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, NativeLibrary>();

                    private readonly bool __ownsNativeInstance;

                    public static NativeLibrary __CreateInstance(global::System.IntPtr native)
                    {
                        return new NativeLibrary((NativeLibrary.Internal*) native);
                    }

                    public static NativeLibrary __CreateInstance(NativeLibrary.Internal native)
                    {
                        return new NativeLibrary(native);
                    }

                    private static NativeLibrary.Internal* __CopyValue(NativeLibrary.Internal native)
                    {
                        var ret = (NativeLibrary.Internal*) Marshal.AllocHGlobal(80);
                        *ret = native;
                        return ret;
                    }

                    private NativeLibrary(NativeLibrary.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected NativeLibrary(NativeLibrary.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public NativeLibrary()
                    {
                        __Instance = Marshal.AllocHGlobal(80);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.NativeLibrary __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance || force)
                            Internal.dtor_0(__Instance);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getFileName()
                    {
                        var __ret = Internal.getFileName_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setFileName(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setFileName_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public string getSymbols(uint i)
                    {
                        var __ret = Internal.getSymbols_0(__Instance, i);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void addSymbols(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.addSymbols_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public uint getSymbolsCount()
                    {
                        var __ret = Internal.getSymbolsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearSymbols()
                    {
                        Internal.clearSymbols_0(__Instance);
                    }

                    public string getDependencies(uint i)
                    {
                        var __ret = Internal.getDependencies_0(__Instance, i);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void addDependencies(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.addDependencies_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public uint getDependenciesCount()
                    {
                        var __ret = Internal.getDependenciesCount_0(__Instance);
                        return __ret;
                    }

                    public void clearDependencies()
                    {
                        Internal.clearDependencies_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.ArchType ArchType
                    {
                        get
                        {
                            return ((Internal*) __Instance)->ArchType;
                        }

                        set
                        {
                            ((Internal*) __Instance)->ArchType = value;
                        }
                    }
                }

                public unsafe partial class ASTContext : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 24)]
                    public partial struct Internal
                    {
                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContextC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContextC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContextD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContext19getTranslationUnitsEj")]
                        internal static extern global::System.IntPtr getTranslationUnits_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContext19addTranslationUnitsERPNS1_15TranslationUnitE")]
                        internal static extern void addTranslationUnits_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContext24getTranslationUnitsCountEv")]
                        internal static extern uint getTranslationUnitsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10ASTContext21clearTranslationUnitsEv")]
                        internal static extern void clearTranslationUnits_0(global::System.IntPtr instance);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ASTContext> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ASTContext>();

                    private readonly bool __ownsNativeInstance;

                    public static ASTContext __CreateInstance(global::System.IntPtr native)
                    {
                        return new ASTContext((ASTContext.Internal*) native);
                    }

                    public static ASTContext __CreateInstance(ASTContext.Internal native)
                    {
                        return new ASTContext(native);
                    }

                    private static ASTContext.Internal* __CopyValue(ASTContext.Internal native)
                    {
                        var ret = (ASTContext.Internal*) Marshal.AllocHGlobal(24);
                        *ret = native;
                        return ret;
                    }

                    private ASTContext(ASTContext.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected ASTContext(ASTContext.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public ASTContext()
                    {
                        __Instance = Marshal.AllocHGlobal(24);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.ASTContext __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance || force)
                            Internal.dtor_0(__Instance);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.TranslationUnit getTranslationUnits(uint i)
                    {
                        var __ret = Internal.getTranslationUnits_0(__Instance, i);
                        CppSharp.CppParser.AST.TranslationUnit __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.TranslationUnit.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.TranslationUnit) CppSharp.CppParser.AST.TranslationUnit.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.TranslationUnit.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addTranslationUnits(CppSharp.CppParser.AST.TranslationUnit s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addTranslationUnits_0(__Instance, arg0);
                    }

                    public uint getTranslationUnitsCount()
                    {
                        var __ret = Internal.getTranslationUnitsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearTranslationUnits()
                    {
                        Internal.clearTranslationUnits_0(__Instance);
                    }

                    public Std.Vector<CppSharp.CppParser.AST.TranslationUnit> TranslationUnits
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.TranslationUnit>(((Internal*) __Instance)->TranslationUnits);
                        }

                        set
                        {
                            ((Internal*) __Instance)->TranslationUnits = value.Internal;
                        }
                    }
                }

                public unsafe partial class Comment : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 4)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST7CommentC2ENS1_11CommentKindE")]
                        internal static extern void ctor_0(global::System.IntPtr instance, CppSharp.CppParser.AST.CommentKind kind);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST7CommentC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Comment> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Comment>();

                    private readonly bool __ownsNativeInstance;

                    public static Comment __CreateInstance(global::System.IntPtr native)
                    {
                        return new Comment((Comment.Internal*) native);
                    }

                    public static Comment __CreateInstance(Comment.Internal native)
                    {
                        return new Comment(native);
                    }

                    private static Comment.Internal* __CopyValue(Comment.Internal native)
                    {
                        var ret = (Comment.Internal*) Marshal.AllocHGlobal(4);
                        *ret = native;
                        return ret;
                    }

                    private Comment(Comment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected Comment(Comment.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public Comment(CppSharp.CppParser.AST.CommentKind kind)
                    {
                        __Instance = Marshal.AllocHGlobal(4);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = kind;
                        Internal.ctor_0(__Instance, arg0);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.CommentKind Kind
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Kind;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Kind = value;
                        }
                    }
                }

                public unsafe partial class BlockContentComment : CppSharp.CppParser.AST.Comment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 4)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockContentCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockContentCommentC2ENS1_11CommentKindE")]
                        internal static extern void ctor_1(global::System.IntPtr instance, CppSharp.CppParser.AST.CommentKind Kind);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockContentCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new BlockContentComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new BlockContentComment((BlockContentComment.Internal*) native);
                    }

                    public static BlockContentComment __CreateInstance(BlockContentComment.Internal native)
                    {
                        return new BlockContentComment(native);
                    }

                    private static BlockContentComment.Internal* __CopyValue(BlockContentComment.Internal native)
                    {
                        var ret = (BlockContentComment.Internal*) Marshal.AllocHGlobal(4);
                        *ret = native;
                        return ret;
                    }

                    private BlockContentComment(BlockContentComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected BlockContentComment(BlockContentComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Comment.Internal*) native)
                    {
                    }

                    public BlockContentComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(4);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public BlockContentComment(CppSharp.CppParser.AST.CommentKind Kind)
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(4);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = Kind;
                        Internal.ctor_1(__Instance, arg0);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }
                }

                public unsafe partial class FullComment : CppSharp.CppParser.AST.Comment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 32)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11FullCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11FullCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11FullCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11FullComment9getBlocksEj")]
                        internal static extern global::System.IntPtr getBlocks_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11FullComment9addBlocksERPNS1_19BlockContentCommentE")]
                        internal static extern void addBlocks_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11FullComment14getBlocksCountEv")]
                        internal static extern uint getBlocksCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11FullComment11clearBlocksEv")]
                        internal static extern void clearBlocks_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new FullComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new FullComment((FullComment.Internal*) native);
                    }

                    public static FullComment __CreateInstance(FullComment.Internal native)
                    {
                        return new FullComment(native);
                    }

                    private static FullComment.Internal* __CopyValue(FullComment.Internal native)
                    {
                        var ret = (FullComment.Internal*) Marshal.AllocHGlobal(32);
                        *ret = native;
                        return ret;
                    }

                    private FullComment(FullComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected FullComment(FullComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Comment.Internal*) native)
                    {
                    }

                    public FullComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(32);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.BlockContentComment getBlocks(uint i)
                    {
                        var __ret = Internal.getBlocks_0(__Instance, i);
                        CppSharp.CppParser.AST.BlockContentComment __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.BlockContentComment.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.BlockContentComment) CppSharp.CppParser.AST.BlockContentComment.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.BlockContentComment.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addBlocks(CppSharp.CppParser.AST.BlockContentComment s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addBlocks_0(__Instance, arg0);
                    }

                    public uint getBlocksCount()
                    {
                        var __ret = Internal.getBlocksCount_0(__Instance);
                        return __ret;
                    }

                    public void clearBlocks()
                    {
                        Internal.clearBlocks_0(__Instance);
                    }

                    public Std.Vector<CppSharp.CppParser.AST.BlockContentComment> Blocks
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.BlockContentComment>(((Internal*) __Instance)->Blocks);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Blocks = value.Internal;
                        }
                    }
                }

                public unsafe partial class BlockCommandComment : CppSharp.CppParser.AST.BlockContentComment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 32)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [FieldOffset(4)]
                        public uint CommandId;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandCommentC2ENS1_11CommentKindE")]
                        internal static extern void ctor_1(global::System.IntPtr instance, CppSharp.CppParser.AST.CommentKind Kind);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandCommentC2ERKS2_")]
                        internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment12getArgumentsEj")]
                        internal static extern void getArguments_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment12addArgumentsERNS2_8ArgumentE")]
                        internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment17getArgumentsCountEv")]
                        internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment14clearArgumentsEv")]
                        internal static extern void clearArguments_0(global::System.IntPtr instance);
                    }

                    public unsafe partial class Argument : IDisposable
                    {
                        [StructLayout(LayoutKind.Explicit, Size = 24)]
                        public partial struct Internal
                        {
                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment8ArgumentC2Ev")]
                            internal static extern void ctor_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment8ArgumentC2ERKS3_")]
                            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment8ArgumentD2Ev")]
                            internal static extern void dtor_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment8Argument7getTextEv")]
                            internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST19BlockCommandComment8Argument7setTextEPKc")]
                            internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                        }

                        public global::System.IntPtr __Instance { get; protected set; }
                        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Argument> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Argument>();

                        private readonly bool __ownsNativeInstance;

                        public static Argument __CreateInstance(global::System.IntPtr native)
                        {
                            return new Argument((Argument.Internal*) native);
                        }

                        public static Argument __CreateInstance(Argument.Internal native)
                        {
                            return new Argument(native);
                        }

                        private static Argument.Internal* __CopyValue(Argument.Internal native)
                        {
                            var ret = (Argument.Internal*) Marshal.AllocHGlobal(24);
                            *ret = native;
                            return ret;
                        }

                        private Argument(Argument.Internal native)
                            : this(__CopyValue(native))
                        {
                            __ownsNativeInstance = true;
                            NativeToManagedMap[__Instance] = this;
                        }

                        protected Argument(Argument.Internal* native, bool isInternalImpl = false)
                        {
                            __Instance = new global::System.IntPtr(native);
                        }

                        public Argument()
                        {
                            __Instance = Marshal.AllocHGlobal(24);
                            __ownsNativeInstance = true;
                            NativeToManagedMap[__Instance] = this;
                            Internal.ctor_0(__Instance);
                        }

                        public void Dispose()
                        {
                            Dispose(disposing: true);
                        }

                        protected virtual void Dispose(bool disposing)
                        {
                            DestroyNativeInstance(false);
                        }

                        public virtual void DestroyNativeInstance()
                        {
                            DestroyNativeInstance(true);
                        }

                        private void DestroyNativeInstance(bool force)
                        {
                            CppSharp.CppParser.AST.BlockCommandComment.Argument __dummy;
                            NativeToManagedMap.TryRemove(__Instance, out __dummy);
                            if (__ownsNativeInstance || force)
                                Internal.dtor_0(__Instance);
                            if (__ownsNativeInstance)
                                Marshal.FreeHGlobal(__Instance);
                        }

                        public string getText()
                        {
                            var __ret = Internal.getText_0(__Instance);
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        public void setText(string s)
                        {
                            var arg0 = Marshal.StringToHGlobalAnsi(s);
                            Internal.setText_0(__Instance, arg0);
                            Marshal.FreeHGlobal(arg0);
                        }
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new BlockCommandComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new BlockCommandComment((BlockCommandComment.Internal*) native);
                    }

                    public static BlockCommandComment __CreateInstance(BlockCommandComment.Internal native)
                    {
                        return new BlockCommandComment(native);
                    }

                    private static BlockCommandComment.Internal* __CopyValue(BlockCommandComment.Internal native)
                    {
                        var ret = (BlockCommandComment.Internal*) Marshal.AllocHGlobal(32);
                        *ret = native;
                        return ret;
                    }

                    private BlockCommandComment(BlockCommandComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected BlockCommandComment(BlockCommandComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.BlockContentComment.Internal*) native)
                    {
                    }

                    public BlockCommandComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(32);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public BlockCommandComment(CppSharp.CppParser.AST.CommentKind Kind)
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(32);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = Kind;
                        Internal.ctor_1(__Instance, arg0);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.BlockCommandComment.Argument getArguments(uint i)
                    {
                        var __ret = new CppSharp.CppParser.AST.BlockCommandComment.Argument.Internal();
                        Internal.getArguments_0(new IntPtr(&__ret), __Instance, i);
                        return CppSharp.CppParser.AST.BlockCommandComment.Argument.__CreateInstance(__ret);
                    }

                    public void addArguments(CppSharp.CppParser.AST.BlockCommandComment.Argument s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addArguments_0(__Instance, arg0);
                    }

                    public uint getArgumentsCount()
                    {
                        var __ret = Internal.getArgumentsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearArguments()
                    {
                        Internal.clearArguments_0(__Instance);
                    }

                    public uint CommandId
                    {
                        get
                        {
                            return ((Internal*) __Instance)->CommandId;
                        }

                        set
                        {
                            ((Internal*) __Instance)->CommandId = value;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.BlockCommandComment.Argument> Arguments
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.BlockCommandComment.Argument>(((Internal*) __Instance)->Arguments);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Arguments = value.Internal;
                        }
                    }
                }

                public unsafe partial class ParamCommandComment : CppSharp.CppParser.AST.BlockCommandComment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 40)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [FieldOffset(4)]
                        public uint CommandId;

                        [FieldOffset(32)]
                        public CppSharp.CppParser.AST.ParamCommandComment.PassDirection Direction;

                        [FieldOffset(36)]
                        public uint ParamIndex;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19ParamCommandCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19ParamCommandCommentC2ERKS2_")]
                        internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19ParamCommandCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);
                    }

                    public enum PassDirection : uint
                    {
                        In = 0,
                        Out = 1,
                        InOut = 2
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new ParamCommandComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new ParamCommandComment((ParamCommandComment.Internal*) native);
                    }

                    public static ParamCommandComment __CreateInstance(ParamCommandComment.Internal native)
                    {
                        return new ParamCommandComment(native);
                    }

                    private static ParamCommandComment.Internal* __CopyValue(ParamCommandComment.Internal native)
                    {
                        var ret = (ParamCommandComment.Internal*) Marshal.AllocHGlobal(40);
                        *ret = native;
                        return ret;
                    }

                    private ParamCommandComment(ParamCommandComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected ParamCommandComment(ParamCommandComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.BlockCommandComment.Internal*) native)
                    {
                    }

                    public ParamCommandComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(40);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.ParamCommandComment.PassDirection Direction
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Direction;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Direction = value;
                        }
                    }

                    public uint ParamIndex
                    {
                        get
                        {
                            return ((Internal*) __Instance)->ParamIndex;
                        }

                        set
                        {
                            ((Internal*) __Instance)->ParamIndex = value;
                        }
                    }
                }

                public unsafe partial class TParamCommandComment : CppSharp.CppParser.AST.BlockCommandComment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 56)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [FieldOffset(4)]
                        public uint CommandId;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandComment11getPositionEj")]
                        internal static extern uint getPosition_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandComment11addPositionERj")]
                        internal static extern void addPosition_0(global::System.IntPtr instance, uint* s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandComment16getPositionCountEv")]
                        internal static extern uint getPositionCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20TParamCommandComment13clearPositionEv")]
                        internal static extern void clearPosition_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new TParamCommandComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new TParamCommandComment((TParamCommandComment.Internal*) native);
                    }

                    public static TParamCommandComment __CreateInstance(TParamCommandComment.Internal native)
                    {
                        return new TParamCommandComment(native);
                    }

                    private static TParamCommandComment.Internal* __CopyValue(TParamCommandComment.Internal native)
                    {
                        var ret = (TParamCommandComment.Internal*) Marshal.AllocHGlobal(56);
                        *ret = native;
                        return ret;
                    }

                    private TParamCommandComment(TParamCommandComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected TParamCommandComment(TParamCommandComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.BlockCommandComment.Internal*) native)
                    {
                    }

                    public TParamCommandComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(56);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public uint getPosition(uint i)
                    {
                        var __ret = Internal.getPosition_0(__Instance, i);
                        return __ret;
                    }

                    public void addPosition(ref uint s)
                    {
                        fixed (uint* arg0 = &s)
                        {
                            Internal.addPosition_0(__Instance, arg0);
                        }
                    }

                    public uint getPositionCount()
                    {
                        var __ret = Internal.getPositionCount_0(__Instance);
                        return __ret;
                    }

                    public void clearPosition()
                    {
                        Internal.clearPosition_0(__Instance);
                    }

                    public Std.Vector<uint> Position
                    {
                        get
                        {
                            return new Std.Vector<uint>(((Internal*) __Instance)->Position);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Position = value.Internal;
                        }
                    }
                }

                public unsafe partial class VerbatimBlockLineComment : CppSharp.CppParser.AST.Comment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 32)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST24VerbatimBlockLineCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST24VerbatimBlockLineCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST24VerbatimBlockLineCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST24VerbatimBlockLineComment7getTextEv")]
                        internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST24VerbatimBlockLineComment7setTextEPKc")]
                        internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new VerbatimBlockLineComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new VerbatimBlockLineComment((VerbatimBlockLineComment.Internal*) native);
                    }

                    public static VerbatimBlockLineComment __CreateInstance(VerbatimBlockLineComment.Internal native)
                    {
                        return new VerbatimBlockLineComment(native);
                    }

                    private static VerbatimBlockLineComment.Internal* __CopyValue(VerbatimBlockLineComment.Internal native)
                    {
                        var ret = (VerbatimBlockLineComment.Internal*) Marshal.AllocHGlobal(32);
                        *ret = native;
                        return ret;
                    }

                    private VerbatimBlockLineComment(VerbatimBlockLineComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected VerbatimBlockLineComment(VerbatimBlockLineComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Comment.Internal*) native)
                    {
                    }

                    public VerbatimBlockLineComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(32);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getText()
                    {
                        var __ret = Internal.getText_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setText(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setText_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public unsafe partial class VerbatimBlockComment : CppSharp.CppParser.AST.BlockCommandComment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 56)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [FieldOffset(4)]
                        public uint CommandId;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockComment8getLinesEj")]
                        internal static extern global::System.IntPtr getLines_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockComment8addLinesERPNS1_24VerbatimBlockLineCommentE")]
                        internal static extern void addLines_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockComment13getLinesCountEv")]
                        internal static extern uint getLinesCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20VerbatimBlockComment10clearLinesEv")]
                        internal static extern void clearLines_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new VerbatimBlockComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new VerbatimBlockComment((VerbatimBlockComment.Internal*) native);
                    }

                    public static VerbatimBlockComment __CreateInstance(VerbatimBlockComment.Internal native)
                    {
                        return new VerbatimBlockComment(native);
                    }

                    private static VerbatimBlockComment.Internal* __CopyValue(VerbatimBlockComment.Internal native)
                    {
                        var ret = (VerbatimBlockComment.Internal*) Marshal.AllocHGlobal(56);
                        *ret = native;
                        return ret;
                    }

                    private VerbatimBlockComment(VerbatimBlockComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected VerbatimBlockComment(VerbatimBlockComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.BlockCommandComment.Internal*) native)
                    {
                    }

                    public VerbatimBlockComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(56);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.VerbatimBlockLineComment getLines(uint i)
                    {
                        var __ret = Internal.getLines_0(__Instance, i);
                        CppSharp.CppParser.AST.VerbatimBlockLineComment __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.VerbatimBlockLineComment.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.VerbatimBlockLineComment) CppSharp.CppParser.AST.VerbatimBlockLineComment.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.VerbatimBlockLineComment.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addLines(CppSharp.CppParser.AST.VerbatimBlockLineComment s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addLines_0(__Instance, arg0);
                    }

                    public uint getLinesCount()
                    {
                        var __ret = Internal.getLinesCount_0(__Instance);
                        return __ret;
                    }

                    public void clearLines()
                    {
                        Internal.clearLines_0(__Instance);
                    }

                    public Std.Vector<CppSharp.CppParser.AST.VerbatimBlockLineComment> Lines
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.VerbatimBlockLineComment>(((Internal*) __Instance)->Lines);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Lines = value.Internal;
                        }
                    }
                }

                public unsafe partial class VerbatimLineComment : CppSharp.CppParser.AST.BlockCommandComment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 56)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [FieldOffset(4)]
                        public uint CommandId;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19VerbatimLineCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19VerbatimLineCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19VerbatimLineCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19VerbatimLineComment7getTextEv")]
                        internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19VerbatimLineComment7setTextEPKc")]
                        internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new VerbatimLineComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new VerbatimLineComment((VerbatimLineComment.Internal*) native);
                    }

                    public static VerbatimLineComment __CreateInstance(VerbatimLineComment.Internal native)
                    {
                        return new VerbatimLineComment(native);
                    }

                    private static VerbatimLineComment.Internal* __CopyValue(VerbatimLineComment.Internal native)
                    {
                        var ret = (VerbatimLineComment.Internal*) Marshal.AllocHGlobal(56);
                        *ret = native;
                        return ret;
                    }

                    private VerbatimLineComment(VerbatimLineComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected VerbatimLineComment(VerbatimLineComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.BlockCommandComment.Internal*) native)
                    {
                    }

                    public VerbatimLineComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(56);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getText()
                    {
                        var __ret = Internal.getText_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setText(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setText_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public unsafe partial class InlineContentComment : CppSharp.CppParser.AST.Comment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 4)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineContentCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineContentCommentC2ENS1_11CommentKindE")]
                        internal static extern void ctor_1(global::System.IntPtr instance, CppSharp.CppParser.AST.CommentKind Kind);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineContentCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new InlineContentComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new InlineContentComment((InlineContentComment.Internal*) native);
                    }

                    public static InlineContentComment __CreateInstance(InlineContentComment.Internal native)
                    {
                        return new InlineContentComment(native);
                    }

                    private static InlineContentComment.Internal* __CopyValue(InlineContentComment.Internal native)
                    {
                        var ret = (InlineContentComment.Internal*) Marshal.AllocHGlobal(4);
                        *ret = native;
                        return ret;
                    }

                    private InlineContentComment(InlineContentComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected InlineContentComment(InlineContentComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.Comment.Internal*) native)
                    {
                    }

                    public InlineContentComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(4);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public InlineContentComment(CppSharp.CppParser.AST.CommentKind Kind)
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(4);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = Kind;
                        Internal.ctor_1(__Instance, arg0);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }
                }

                public unsafe partial class ParagraphComment : CppSharp.CppParser.AST.BlockContentComment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 32)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [FieldOffset(4)]
                        public bool IsWhitespace;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphComment10getContentEj")]
                        internal static extern global::System.IntPtr getContent_0(global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphComment10addContentERPNS1_20InlineContentCommentE")]
                        internal static extern void addContent_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphComment15getContentCountEv")]
                        internal static extern uint getContentCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST16ParagraphComment12clearContentEv")]
                        internal static extern void clearContent_0(global::System.IntPtr instance);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new ParagraphComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new ParagraphComment((ParagraphComment.Internal*) native);
                    }

                    public static ParagraphComment __CreateInstance(ParagraphComment.Internal native)
                    {
                        return new ParagraphComment(native);
                    }

                    private static ParagraphComment.Internal* __CopyValue(ParagraphComment.Internal native)
                    {
                        var ret = (ParagraphComment.Internal*) Marshal.AllocHGlobal(32);
                        *ret = native;
                        return ret;
                    }

                    private ParagraphComment(ParagraphComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected ParagraphComment(ParagraphComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.BlockContentComment.Internal*) native)
                    {
                    }

                    public ParagraphComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(32);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.InlineContentComment getContent(uint i)
                    {
                        var __ret = Internal.getContent_0(__Instance, i);
                        CppSharp.CppParser.AST.InlineContentComment __result0;
                        if (__ret == IntPtr.Zero) __result0 = null;
                        else if (CppSharp.CppParser.AST.InlineContentComment.NativeToManagedMap.ContainsKey(__ret))
                            __result0 = (CppSharp.CppParser.AST.InlineContentComment) CppSharp.CppParser.AST.InlineContentComment.NativeToManagedMap[__ret];
                        else __result0 = CppSharp.CppParser.AST.InlineContentComment.__CreateInstance(__ret);
                        return __result0;
                    }

                    public void addContent(CppSharp.CppParser.AST.InlineContentComment s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addContent_0(__Instance, arg0);
                    }

                    public uint getContentCount()
                    {
                        var __ret = Internal.getContentCount_0(__Instance);
                        return __ret;
                    }

                    public void clearContent()
                    {
                        Internal.clearContent_0(__Instance);
                    }

                    public bool IsWhitespace
                    {
                        get
                        {
                            return ((Internal*) __Instance)->IsWhitespace;
                        }

                        set
                        {
                            ((Internal*) __Instance)->IsWhitespace = value;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.InlineContentComment> Content
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.InlineContentComment>(((Internal*) __Instance)->Content);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Content = value.Internal;
                        }
                    }
                }

                public unsafe partial class InlineCommandComment : CppSharp.CppParser.AST.InlineContentComment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 32)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [FieldOffset(4)]
                        public CppSharp.CppParser.AST.InlineCommandComment.RenderKind CommentRenderKind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment12getArgumentsEj")]
                        internal static extern void getArguments_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment12addArgumentsERNS2_8ArgumentE")]
                        internal static extern void addArguments_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment17getArgumentsCountEv")]
                        internal static extern uint getArgumentsCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment14clearArgumentsEv")]
                        internal static extern void clearArguments_0(global::System.IntPtr instance);
                    }

                    public enum RenderKind : uint
                    {
                        RenderNormal = 0,
                        RenderBold = 1,
                        RenderMonospaced = 2,
                        RenderEmphasized = 3
                    }

                    public unsafe partial class Argument : IDisposable
                    {
                        [StructLayout(LayoutKind.Explicit, Size = 24)]
                        public partial struct Internal
                        {
                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment8ArgumentC2Ev")]
                            internal static extern void ctor_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment8ArgumentC2ERKS3_")]
                            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment8ArgumentD2Ev")]
                            internal static extern void dtor_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment8Argument7getTextEv")]
                            internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST20InlineCommandComment8Argument7setTextEPKc")]
                            internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                        }

                        public global::System.IntPtr __Instance { get; protected set; }
                        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Argument> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Argument>();

                        private readonly bool __ownsNativeInstance;

                        public static Argument __CreateInstance(global::System.IntPtr native)
                        {
                            return new Argument((Argument.Internal*) native);
                        }

                        public static Argument __CreateInstance(Argument.Internal native)
                        {
                            return new Argument(native);
                        }

                        private static Argument.Internal* __CopyValue(Argument.Internal native)
                        {
                            var ret = (Argument.Internal*) Marshal.AllocHGlobal(24);
                            *ret = native;
                            return ret;
                        }

                        private Argument(Argument.Internal native)
                            : this(__CopyValue(native))
                        {
                            __ownsNativeInstance = true;
                            NativeToManagedMap[__Instance] = this;
                        }

                        protected Argument(Argument.Internal* native, bool isInternalImpl = false)
                        {
                            __Instance = new global::System.IntPtr(native);
                        }

                        public Argument()
                        {
                            __Instance = Marshal.AllocHGlobal(24);
                            __ownsNativeInstance = true;
                            NativeToManagedMap[__Instance] = this;
                            Internal.ctor_0(__Instance);
                        }

                        public void Dispose()
                        {
                            Dispose(disposing: true);
                        }

                        protected virtual void Dispose(bool disposing)
                        {
                            DestroyNativeInstance(false);
                        }

                        public virtual void DestroyNativeInstance()
                        {
                            DestroyNativeInstance(true);
                        }

                        private void DestroyNativeInstance(bool force)
                        {
                            CppSharp.CppParser.AST.InlineCommandComment.Argument __dummy;
                            NativeToManagedMap.TryRemove(__Instance, out __dummy);
                            if (__ownsNativeInstance || force)
                                Internal.dtor_0(__Instance);
                            if (__ownsNativeInstance)
                                Marshal.FreeHGlobal(__Instance);
                        }

                        public string getText()
                        {
                            var __ret = Internal.getText_0(__Instance);
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        public void setText(string s)
                        {
                            var arg0 = Marshal.StringToHGlobalAnsi(s);
                            Internal.setText_0(__Instance, arg0);
                            Marshal.FreeHGlobal(arg0);
                        }
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new InlineCommandComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new InlineCommandComment((InlineCommandComment.Internal*) native);
                    }

                    public static InlineCommandComment __CreateInstance(InlineCommandComment.Internal native)
                    {
                        return new InlineCommandComment(native);
                    }

                    private static InlineCommandComment.Internal* __CopyValue(InlineCommandComment.Internal native)
                    {
                        var ret = (InlineCommandComment.Internal*) Marshal.AllocHGlobal(32);
                        *ret = native;
                        return ret;
                    }

                    private InlineCommandComment(InlineCommandComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected InlineCommandComment(InlineCommandComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.InlineContentComment.Internal*) native)
                    {
                    }

                    public InlineCommandComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(32);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public CppSharp.CppParser.AST.InlineCommandComment.Argument getArguments(uint i)
                    {
                        var __ret = new CppSharp.CppParser.AST.InlineCommandComment.Argument.Internal();
                        Internal.getArguments_0(new IntPtr(&__ret), __Instance, i);
                        return CppSharp.CppParser.AST.InlineCommandComment.Argument.__CreateInstance(__ret);
                    }

                    public void addArguments(CppSharp.CppParser.AST.InlineCommandComment.Argument s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addArguments_0(__Instance, arg0);
                    }

                    public uint getArgumentsCount()
                    {
                        var __ret = Internal.getArgumentsCount_0(__Instance);
                        return __ret;
                    }

                    public void clearArguments()
                    {
                        Internal.clearArguments_0(__Instance);
                    }

                    public CppSharp.CppParser.AST.InlineCommandComment.RenderKind CommentRenderKind
                    {
                        get
                        {
                            return ((Internal*) __Instance)->CommentRenderKind;
                        }

                        set
                        {
                            ((Internal*) __Instance)->CommentRenderKind = value;
                        }
                    }

                    public Std.Vector<CppSharp.CppParser.AST.InlineCommandComment.Argument> Arguments
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.InlineCommandComment.Argument>(((Internal*) __Instance)->Arguments);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Arguments = value.Internal;
                        }
                    }
                }

                public unsafe partial class HTMLTagComment : CppSharp.CppParser.AST.InlineContentComment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 4)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14HTMLTagCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14HTMLTagCommentC2ENS1_11CommentKindE")]
                        internal static extern void ctor_1(global::System.IntPtr instance, CppSharp.CppParser.AST.CommentKind Kind);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST14HTMLTagCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new HTMLTagComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new HTMLTagComment((HTMLTagComment.Internal*) native);
                    }

                    public static HTMLTagComment __CreateInstance(HTMLTagComment.Internal native)
                    {
                        return new HTMLTagComment(native);
                    }

                    private static HTMLTagComment.Internal* __CopyValue(HTMLTagComment.Internal native)
                    {
                        var ret = (HTMLTagComment.Internal*) Marshal.AllocHGlobal(4);
                        *ret = native;
                        return ret;
                    }

                    private HTMLTagComment(HTMLTagComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected HTMLTagComment(HTMLTagComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.InlineContentComment.Internal*) native)
                    {
                    }

                    public HTMLTagComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(4);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public HTMLTagComment(CppSharp.CppParser.AST.CommentKind Kind)
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(4);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        var arg0 = Kind;
                        Internal.ctor_1(__Instance, arg0);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }
                }

                public unsafe partial class HTMLStartTagComment : CppSharp.CppParser.AST.HTMLTagComment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 56)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment10getTagNameEv")]
                        internal static extern global::System.IntPtr getTagName_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment10setTagNameEPKc")]
                        internal static extern void setTagName_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment13getAttributesEj")]
                        internal static extern void getAttributes_0(global::System.IntPtr @return, global::System.IntPtr instance, uint i);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment13addAttributesERNS2_9AttributeE")]
                        internal static extern void addAttributes_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment18getAttributesCountEv")]
                        internal static extern uint getAttributesCount_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment15clearAttributesEv")]
                        internal static extern void clearAttributes_0(global::System.IntPtr instance);
                    }

                    public unsafe partial class Attribute : IDisposable
                    {
                        [StructLayout(LayoutKind.Explicit, Size = 48)]
                        public partial struct Internal
                        {
                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9AttributeC2Ev")]
                            internal static extern void ctor_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9AttributeC2ERKS3_")]
                            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9AttributeD2Ev")]
                            internal static extern void dtor_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9Attribute7getNameEv")]
                            internal static extern global::System.IntPtr getName_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9Attribute7setNameEPKc")]
                            internal static extern void setName_0(global::System.IntPtr instance, global::System.IntPtr s);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9Attribute8getValueEv")]
                            internal static extern global::System.IntPtr getValue_0(global::System.IntPtr instance);

                            [SuppressUnmanagedCodeSecurity]
                            [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                                EntryPoint="_ZN8CppSharp9CppParser3AST19HTMLStartTagComment9Attribute8setValueEPKc")]
                            internal static extern void setValue_0(global::System.IntPtr instance, global::System.IntPtr s);
                        }

                        public global::System.IntPtr __Instance { get; protected set; }
                        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Attribute> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Attribute>();

                        private readonly bool __ownsNativeInstance;

                        public static Attribute __CreateInstance(global::System.IntPtr native)
                        {
                            return new Attribute((Attribute.Internal*) native);
                        }

                        public static Attribute __CreateInstance(Attribute.Internal native)
                        {
                            return new Attribute(native);
                        }

                        private static Attribute.Internal* __CopyValue(Attribute.Internal native)
                        {
                            var ret = (Attribute.Internal*) Marshal.AllocHGlobal(48);
                            *ret = native;
                            return ret;
                        }

                        private Attribute(Attribute.Internal native)
                            : this(__CopyValue(native))
                        {
                            __ownsNativeInstance = true;
                            NativeToManagedMap[__Instance] = this;
                        }

                        protected Attribute(Attribute.Internal* native, bool isInternalImpl = false)
                        {
                            __Instance = new global::System.IntPtr(native);
                        }

                        public Attribute()
                        {
                            __Instance = Marshal.AllocHGlobal(48);
                            __ownsNativeInstance = true;
                            NativeToManagedMap[__Instance] = this;
                            Internal.ctor_0(__Instance);
                        }

                        public void Dispose()
                        {
                            Dispose(disposing: true);
                        }

                        protected virtual void Dispose(bool disposing)
                        {
                            DestroyNativeInstance(false);
                        }

                        public virtual void DestroyNativeInstance()
                        {
                            DestroyNativeInstance(true);
                        }

                        private void DestroyNativeInstance(bool force)
                        {
                            CppSharp.CppParser.AST.HTMLStartTagComment.Attribute __dummy;
                            NativeToManagedMap.TryRemove(__Instance, out __dummy);
                            if (__ownsNativeInstance || force)
                                Internal.dtor_0(__Instance);
                            if (__ownsNativeInstance)
                                Marshal.FreeHGlobal(__Instance);
                        }

                        public string getName()
                        {
                            var __ret = Internal.getName_0(__Instance);
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        public void setName(string s)
                        {
                            var arg0 = Marshal.StringToHGlobalAnsi(s);
                            Internal.setName_0(__Instance, arg0);
                            Marshal.FreeHGlobal(arg0);
                        }

                        public string getValue()
                        {
                            var __ret = Internal.getValue_0(__Instance);
                            return Marshal.PtrToStringAnsi(__ret);
                        }

                        public void setValue(string s)
                        {
                            var arg0 = Marshal.StringToHGlobalAnsi(s);
                            Internal.setValue_0(__Instance, arg0);
                            Marshal.FreeHGlobal(arg0);
                        }
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new HTMLStartTagComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new HTMLStartTagComment((HTMLStartTagComment.Internal*) native);
                    }

                    public static HTMLStartTagComment __CreateInstance(HTMLStartTagComment.Internal native)
                    {
                        return new HTMLStartTagComment(native);
                    }

                    private static HTMLStartTagComment.Internal* __CopyValue(HTMLStartTagComment.Internal native)
                    {
                        var ret = (HTMLStartTagComment.Internal*) Marshal.AllocHGlobal(56);
                        *ret = native;
                        return ret;
                    }

                    private HTMLStartTagComment(HTMLStartTagComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected HTMLStartTagComment(HTMLStartTagComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.HTMLTagComment.Internal*) native)
                    {
                    }

                    public HTMLStartTagComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(56);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getTagName()
                    {
                        var __ret = Internal.getTagName_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setTagName(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setTagName_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public CppSharp.CppParser.AST.HTMLStartTagComment.Attribute getAttributes(uint i)
                    {
                        var __ret = new CppSharp.CppParser.AST.HTMLStartTagComment.Attribute.Internal();
                        Internal.getAttributes_0(new IntPtr(&__ret), __Instance, i);
                        return CppSharp.CppParser.AST.HTMLStartTagComment.Attribute.__CreateInstance(__ret);
                    }

                    public void addAttributes(CppSharp.CppParser.AST.HTMLStartTagComment.Attribute s)
                    {
                        var arg0 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
                        Internal.addAttributes_0(__Instance, arg0);
                    }

                    public uint getAttributesCount()
                    {
                        var __ret = Internal.getAttributesCount_0(__Instance);
                        return __ret;
                    }

                    public void clearAttributes()
                    {
                        Internal.clearAttributes_0(__Instance);
                    }

                    public Std.Vector<CppSharp.CppParser.AST.HTMLStartTagComment.Attribute> Attributes
                    {
                        get
                        {
                            return new Std.Vector<CppSharp.CppParser.AST.HTMLStartTagComment.Attribute>(((Internal*) __Instance)->Attributes);
                        }

                        set
                        {
                            ((Internal*) __Instance)->Attributes = value.Internal;
                        }
                    }
                }

                public unsafe partial class HTMLEndTagComment : CppSharp.CppParser.AST.HTMLTagComment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 32)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17HTMLEndTagCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17HTMLEndTagCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17HTMLEndTagCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17HTMLEndTagComment10getTagNameEv")]
                        internal static extern global::System.IntPtr getTagName_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST17HTMLEndTagComment10setTagNameEPKc")]
                        internal static extern void setTagName_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new HTMLEndTagComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new HTMLEndTagComment((HTMLEndTagComment.Internal*) native);
                    }

                    public static HTMLEndTagComment __CreateInstance(HTMLEndTagComment.Internal native)
                    {
                        return new HTMLEndTagComment(native);
                    }

                    private static HTMLEndTagComment.Internal* __CopyValue(HTMLEndTagComment.Internal native)
                    {
                        var ret = (HTMLEndTagComment.Internal*) Marshal.AllocHGlobal(32);
                        *ret = native;
                        return ret;
                    }

                    private HTMLEndTagComment(HTMLEndTagComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected HTMLEndTagComment(HTMLEndTagComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.HTMLTagComment.Internal*) native)
                    {
                    }

                    public HTMLEndTagComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(32);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getTagName()
                    {
                        var __ret = Internal.getTagName_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setTagName(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setTagName_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public unsafe partial class TextComment : CppSharp.CppParser.AST.InlineContentComment, IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 32)]
                    public new partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.CommentKind Kind;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11TextCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11TextCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11TextCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11TextComment7getTextEv")]
                        internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST11TextComment7setTextEPKc")]
                        internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    private readonly bool __ownsNativeInstance;

                    public static new TextComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new TextComment((TextComment.Internal*) native);
                    }

                    public static TextComment __CreateInstance(TextComment.Internal native)
                    {
                        return new TextComment(native);
                    }

                    private static TextComment.Internal* __CopyValue(TextComment.Internal native)
                    {
                        var ret = (TextComment.Internal*) Marshal.AllocHGlobal(32);
                        *ret = native;
                        return ret;
                    }

                    private TextComment(TextComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected TextComment(TextComment.Internal* native, bool isInternalImpl = false)
                        : base((CppSharp.CppParser.AST.InlineContentComment.Internal*) native)
                    {
                    }

                    public TextComment()
                        : this((Internal*) null)
                    {
                        __Instance = Marshal.AllocHGlobal(32);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    protected override void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                        base.Dispose(disposing);
                    }

                    public override void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.Comment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getText()
                    {
                        var __ret = Internal.getText_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setText(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setText_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }
                }

                public unsafe partial class RawComment : IDisposable
                {
                    [StructLayout(LayoutKind.Explicit, Size = 64)]
                    public partial struct Internal
                    {
                        [FieldOffset(0)]
                        public CppSharp.CppParser.AST.RawCommentKind Kind;

                        [FieldOffset(56)]
                        public global::System.IntPtr FullCommentBlock;

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10RawCommentC2Ev")]
                        internal static extern void ctor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10RawCommentC2ERKS2_")]
                        internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10RawCommentD2Ev")]
                        internal static extern void dtor_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10RawComment7getTextEv")]
                        internal static extern global::System.IntPtr getText_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10RawComment7setTextEPKc")]
                        internal static extern void setText_0(global::System.IntPtr instance, global::System.IntPtr s);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10RawComment12getBriefTextEv")]
                        internal static extern global::System.IntPtr getBriefText_0(global::System.IntPtr instance);

                        [SuppressUnmanagedCodeSecurity]
                        [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                            EntryPoint="_ZN8CppSharp9CppParser3AST10RawComment12setBriefTextEPKc")]
                        internal static extern void setBriefText_0(global::System.IntPtr instance, global::System.IntPtr s);
                    }

                    public global::System.IntPtr __Instance { get; protected set; }
                    public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, RawComment> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, RawComment>();

                    private readonly bool __ownsNativeInstance;

                    public static RawComment __CreateInstance(global::System.IntPtr native)
                    {
                        return new RawComment((RawComment.Internal*) native);
                    }

                    public static RawComment __CreateInstance(RawComment.Internal native)
                    {
                        return new RawComment(native);
                    }

                    private static RawComment.Internal* __CopyValue(RawComment.Internal native)
                    {
                        var ret = (RawComment.Internal*) Marshal.AllocHGlobal(64);
                        *ret = native;
                        return ret;
                    }

                    private RawComment(RawComment.Internal native)
                        : this(__CopyValue(native))
                    {
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                    }

                    protected RawComment(RawComment.Internal* native, bool isInternalImpl = false)
                    {
                        __Instance = new global::System.IntPtr(native);
                    }

                    public RawComment()
                    {
                        __Instance = Marshal.AllocHGlobal(64);
                        __ownsNativeInstance = true;
                        NativeToManagedMap[__Instance] = this;
                        Internal.ctor_0(__Instance);
                    }

                    public void Dispose()
                    {
                        Dispose(disposing: true);
                    }

                    protected virtual void Dispose(bool disposing)
                    {
                        DestroyNativeInstance(false);
                    }

                    public virtual void DestroyNativeInstance()
                    {
                        DestroyNativeInstance(true);
                    }

                    private void DestroyNativeInstance(bool force)
                    {
                        CppSharp.CppParser.AST.RawComment __dummy;
                        NativeToManagedMap.TryRemove(__Instance, out __dummy);
                        if (__ownsNativeInstance || force)
                            Internal.dtor_0(__Instance);
                        if (__ownsNativeInstance)
                            Marshal.FreeHGlobal(__Instance);
                    }

                    public string getText()
                    {
                        var __ret = Internal.getText_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setText(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setText_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public string getBriefText()
                    {
                        var __ret = Internal.getBriefText_0(__Instance);
                        return Marshal.PtrToStringAnsi(__ret);
                    }

                    public void setBriefText(string s)
                    {
                        var arg0 = Marshal.StringToHGlobalAnsi(s);
                        Internal.setBriefText_0(__Instance, arg0);
                        Marshal.FreeHGlobal(arg0);
                    }

                    public CppSharp.CppParser.AST.RawCommentKind Kind
                    {
                        get
                        {
                            return ((Internal*) __Instance)->Kind;
                        }

                        set
                        {
                            ((Internal*) __Instance)->Kind = value;
                        }
                    }

                    public CppSharp.CppParser.AST.FullComment FullCommentBlock
                    {
                        get
                        {
                            CppSharp.CppParser.AST.FullComment __result0;
                            if (((Internal*) __Instance)->FullCommentBlock == IntPtr.Zero) __result0 = null;
                            else if (CppSharp.CppParser.AST.FullComment.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->FullCommentBlock))
                                __result0 = (CppSharp.CppParser.AST.FullComment) CppSharp.CppParser.AST.FullComment.NativeToManagedMap[((Internal*) __Instance)->FullCommentBlock];
                            else __result0 = CppSharp.CppParser.AST.FullComment.__CreateInstance(((Internal*) __Instance)->FullCommentBlock);
                            return __result0;
                        }

                        set
                        {
                            ((Internal*) __Instance)->FullCommentBlock = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                        }
                    }
                }
            }
        }
    }
}
