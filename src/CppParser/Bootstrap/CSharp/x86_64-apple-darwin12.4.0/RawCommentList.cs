//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace clang
    {
        public unsafe partial class RawComment : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 40)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public clang.SourceRange.Internal Range;

                [FieldOffset(8)]
                public llvm.StringRef.Internal RawText;

                [FieldOffset(24)]
                public global::System.IntPtr BriefText;

                [FieldOffset(32)]
                public bool RawTextValid;

                [FieldOffset(32)]
                public bool BriefTextValid;

                [FieldOffset(32)]
                public uint Kind;

                [FieldOffset(32)]
                public bool IsAttached;

                [FieldOffset(32)]
                public bool IsTrailingComment;

                [FieldOffset(32)]
                public bool IsAlmostTrailingComment;

                [FieldOffset(33)]
                public bool ParseAllComments;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang10RawCommentC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang10RawCommentC2ERKNS_13SourceManagerENS_11SourceRangeEbb")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr SourceMgr, clang.SourceRange.Internal SR, bool Merged, bool ParseAllComments);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang10RawCommentC2ERKS0_")]
                internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment7getKindEv")]
                internal static extern clang.RawComment.CommentKind getKind_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment9isInvalidEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isInvalid_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment8isMergedEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isMerged_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment10isAttachedEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isAttached_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang10RawComment11setAttachedEv")]
                internal static extern void setAttached_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment17isTrailingCommentEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isTrailingComment_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment23isAlmostTrailingCommentEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isAlmostTrailingComment_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment10isOrdinaryEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isOrdinary_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment15isDocumentationEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isDocumentation_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment18isParseAllCommentsEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isParseAllComments_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment10getRawTextERKNS_13SourceManagerE")]
                internal static extern llvm.StringRef.Internal getRawText_0(global::System.IntPtr instance, global::System.IntPtr SourceMgr);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment14getSourceRangeEv")]
                internal static extern clang.SourceRange.Internal getSourceRange_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment11getLocStartEv")]
                internal static extern clang.SourceLocation.Internal getLocStart_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment9getLocEndEv")]
                internal static extern clang.SourceLocation.Internal getLocEnd_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang10RawComment12getBriefTextERKNS_10ASTContextE")]
                internal static extern global::System.IntPtr getBriefText_0(global::System.IntPtr instance, global::System.IntPtr Context);
            }

            public enum CommentKind : uint
            {
                /// <summary>Invalid comment</summary>
                RCK_Invalid = 0,
                /// <summary>Any normal BCPL comments</summary>
                RCK_OrdinaryBCPL = 1,
                /// <summary>Any normal C comment</summary>
                RCK_OrdinaryC = 2,
                RCK_BCPLSlash = 3,
                RCK_BCPLExcl = 4,
                RCK_JavaDoc = 5,
                /// <summary>, also used by HeaderDoc</summary>
                RCK_Qt = 6,
                /// <summary>Two or more documentation comments merged together</summary>
                RCK_Merged = 7
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, RawComment> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, RawComment>();

            private readonly bool __ownsNativeInstance;

            public static RawComment __CreateInstance(global::System.IntPtr native)
            {
                return new RawComment((RawComment.Internal*) native);
            }

            public static RawComment __CreateInstance(RawComment.Internal native)
            {
                return new RawComment(native);
            }

            private static RawComment.Internal* __CopyValue(RawComment.Internal native)
            {
                var ret = (RawComment.Internal*) Marshal.AllocHGlobal(40);
                *ret = native;
                return ret;
            }

            private RawComment(RawComment.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected RawComment(RawComment.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public RawComment()
            {
                __Instance = Marshal.AllocHGlobal(40);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0(__Instance);
            }

            public RawComment(clang.SourceManager SourceMgr, clang.SourceRange SR, bool Merged, bool ParseAllComments)
            {
                __Instance = Marshal.AllocHGlobal(40);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(SourceMgr, null) ? global::System.IntPtr.Zero : SourceMgr.__Instance;
                var arg1 = ReferenceEquals(SR, null) ? new clang.SourceRange.Internal() : *(clang.SourceRange.Internal*) (SR.__Instance);
                Internal.ctor_1(__Instance, arg0, arg1, Merged, ParseAllComments);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                clang.RawComment __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public clang.RawComment.CommentKind getKind()
            {
                var __ret = Internal.getKind_0(__Instance);
                return __ret;
            }

            public bool isInvalid()
            {
                var __ret = Internal.isInvalid_0(__Instance);
                return __ret;
            }

            public bool isMerged()
            {
                var __ret = Internal.isMerged_0(__Instance);
                return __ret;
            }

            /// <summary>
            /// <para>Is this comment attached to any declaration?</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Is this comment attached to any declaration?</para>
            /// </remarks>
            public bool isAttached()
            {
                var __ret = Internal.isAttached_0(__Instance);
                return __ret;
            }

            public void setAttached()
            {
                Internal.setAttached_0(__Instance);
            }

            /// <summary>
            /// <para>Returns true if it is a comment that should be put after a
            /// member:</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Returns true if it is a comment that should be put after a
            /// member:</para>
            /// <para>  /// \code ///&lt; stuff \endcode</para>
            /// <para>  /// \code //!&lt; stuff \endcode</para>
            /// <para>  /// \code /**&lt; stuff */ \endcode</para>
            /// <para>  /// \code /*!&lt; stuff */ \endcode</para>
            /// </remarks>
            public bool isTrailingComment()
            {
                var __ret = Internal.isTrailingComment_0(__Instance);
                return __ret;
            }

            /// <summary>
            /// <para>Returns true if it is a probable typo:</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Returns true if it is a probable typo:</para>
            /// <para>  /// \code //&lt; stuff \endcode</para>
            /// <para>  /// \code /*&lt; stuff */ \endcode</para>
            /// </remarks>
            public bool isAlmostTrailingComment()
            {
                var __ret = Internal.isAlmostTrailingComment_0(__Instance);
                return __ret;
            }

            /// <summary>
            /// <para>Returns true if this comment is not a documentation
            /// comment.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Returns true if this comment is not a documentation
            /// comment.</para>
            /// </remarks>
            public bool isOrdinary()
            {
                var __ret = Internal.isOrdinary_0(__Instance);
                return __ret;
            }

            /// <summary>
            /// <para>Returns true if this comment any kind of a documentation
            /// comment.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Returns true if this comment any kind of a documentation
            /// comment.</para>
            /// </remarks>
            public bool isDocumentation()
            {
                var __ret = Internal.isDocumentation_0(__Instance);
                return __ret;
            }

            /// <summary>
            /// <para>Returns whether we are parsing all comments.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Returns whether we are parsing all comments.</para>
            /// </remarks>
            public bool isParseAllComments()
            {
                var __ret = Internal.isParseAllComments_0(__Instance);
                return __ret;
            }

            /// <summary>
            /// <para>Returns raw comment text with comment markers.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Returns raw comment text with comment markers.</para>
            /// </remarks>
            public llvm.StringRef getRawText(clang.SourceManager SourceMgr)
            {
                var arg0 = ReferenceEquals(SourceMgr, null) ? global::System.IntPtr.Zero : SourceMgr.__Instance;
                var __ret = Internal.getRawText_0(__Instance, arg0);
                return llvm.StringRef.__CreateInstance(__ret);
            }

            public clang.SourceRange getSourceRange()
            {
                var __ret = Internal.getSourceRange_0(__Instance);
                return clang.SourceRange.__CreateInstance(__ret);
            }

            public clang.SourceLocation getLocStart()
            {
                var __ret = Internal.getLocStart_0(__Instance);
                return clang.SourceLocation.__CreateInstance(__ret);
            }

            public clang.SourceLocation getLocEnd()
            {
                var __ret = Internal.getLocEnd_0(__Instance);
                return clang.SourceLocation.__CreateInstance(__ret);
            }

            public string getBriefText(clang.ASTContext Context)
            {
                var arg0 = ReferenceEquals(Context, null) ? global::System.IntPtr.Zero : Context.__Instance;
                var __ret = Internal.getBriefText_0(__Instance, arg0);
                return Marshal.PtrToStringAnsi(__ret);
            }
        }

        /// <summary>
        /// <para>This class represents all comments included in the translation
        /// unit, sorted in order of appearance in the translation unit.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief This class represents all comments included in the
        /// translation unit,</para>
        /// <para>/// sorted in order of appearance in the translation unit.</para>
        /// </remarks>
        public unsafe partial class RawCommentList : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 32)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr SourceMgr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang14RawCommentListC2ERNS_13SourceManagerE")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr SourceMgr);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang14RawCommentListC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang14RawCommentListD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, RawCommentList> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, RawCommentList>();

            private readonly bool __ownsNativeInstance;

            public static RawCommentList __CreateInstance(global::System.IntPtr native)
            {
                return new RawCommentList((RawCommentList.Internal*) native);
            }

            public static RawCommentList __CreateInstance(RawCommentList.Internal native)
            {
                return new RawCommentList(native);
            }

            private static RawCommentList.Internal* __CopyValue(RawCommentList.Internal native)
            {
                var ret = (RawCommentList.Internal*) Marshal.AllocHGlobal(32);
                *ret = native;
                return ret;
            }

            private RawCommentList(RawCommentList.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected RawCommentList(RawCommentList.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public RawCommentList(clang.SourceManager SourceMgr)
            {
                __Instance = Marshal.AllocHGlobal(32);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(SourceMgr, null) ? global::System.IntPtr.Zero : SourceMgr.__Instance;
                Internal.ctor_0(__Instance, arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                clang.RawCommentList __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance || force)
                    Internal.dtor_0(__Instance);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        namespace comments
        {
        }
    }
}
