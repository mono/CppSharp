//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace CppSharp
    {
        namespace CppParser
        {
            public unsafe partial class SourceLocation : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 4)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public uint ID;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser14SourceLocationC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser14SourceLocationC2Ej")]
                    internal static extern void ctor_1(global::System.IntPtr instance, uint ID);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN8CppSharp9CppParser14SourceLocationC2ERKS1_")]
                    internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, SourceLocation> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, SourceLocation>();

                private readonly bool __ownsNativeInstance;

                public static SourceLocation __CreateInstance(global::System.IntPtr native)
                {
                    return new SourceLocation((SourceLocation.Internal*) native);
                }

                public static SourceLocation __CreateInstance(SourceLocation.Internal native)
                {
                    return new SourceLocation(native);
                }

                private static SourceLocation.Internal* __CopyValue(SourceLocation.Internal native)
                {
                    var ret = (SourceLocation.Internal*) Marshal.AllocHGlobal(4);
                    *ret = native;
                    return ret;
                }

                private SourceLocation(SourceLocation.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected SourceLocation(SourceLocation.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public SourceLocation()
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0(__Instance);
                }

                public SourceLocation(uint ID)
                {
                    __Instance = Marshal.AllocHGlobal(4);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_1(__Instance, ID);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    DestroyNativeInstance(false);
                }

                public virtual void DestroyNativeInstance()
                {
                    DestroyNativeInstance(true);
                }

                private void DestroyNativeInstance(bool force)
                {
                    CppSharp.CppParser.SourceLocation __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                public uint ID
                {
                    get
                    {
                        return ((Internal*) __Instance)->ID;
                    }

                    set
                    {
                        ((Internal*) __Instance)->ID = value;
                    }
                }
            }
        }
    }
}
