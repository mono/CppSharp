//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    public unsafe partial class ErrorHandling
    {
        public partial struct Internal
        {
        }
    }

    namespace llvm
    {
        /// <summary>
        /// <para>ScopedFatalErrorHandler - This is a simple helper class which
        /// just calls install_fatal_error_handler in its constructor and
        /// remove_fatal_error_handler in its destructor.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// ScopedFatalErrorHandler - This is a simple helper class which
        /// just</para>
        /// <para>  /// calls install_fatal_error_handler in its constructor
        /// and</para>
        /// <para>  /// remove_fatal_error_handler in its destructor.</para>
        /// </remarks>
        public unsafe partial class ScopedFatalErrorHandler : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm23ScopedFatalErrorHandlerC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm23ScopedFatalErrorHandlerD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ScopedFatalErrorHandler> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, ScopedFatalErrorHandler>();

            private readonly bool __ownsNativeInstance;

            public static ScopedFatalErrorHandler __CreateInstance(global::System.IntPtr native)
            {
                return new ScopedFatalErrorHandler((ScopedFatalErrorHandler.Internal*) native);
            }

            public static ScopedFatalErrorHandler __CreateInstance(ScopedFatalErrorHandler.Internal native)
            {
                return new ScopedFatalErrorHandler(native);
            }

            private static ScopedFatalErrorHandler.Internal* __CopyValue(ScopedFatalErrorHandler.Internal native)
            {
                var ret = (ScopedFatalErrorHandler.Internal*) Marshal.AllocHGlobal(0);
                *ret = native;
                return ret;
            }

            private ScopedFatalErrorHandler(ScopedFatalErrorHandler.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ScopedFatalErrorHandler(ScopedFatalErrorHandler.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                llvm.ScopedFatalErrorHandler __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance || force)
                    Internal.dtor_0(__Instance);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public unsafe partial class ErrorHandling
        {
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm26remove_fatal_error_handlerEv")]
                internal static extern void remove_fatal_error_handler_0();

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm18report_fatal_errorEPKcb")]
                internal static extern void report_fatal_error_0(global::System.IntPtr reason, bool gen_crash_diag);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm18report_fatal_errorENS_9StringRefEb")]
                internal static extern void report_fatal_error_2(llvm.StringRef.Internal reason, bool gen_crash_diag);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm18report_fatal_errorERKNS_5TwineEb")]
                internal static extern void report_fatal_error_3(global::System.IntPtr reason, bool gen_crash_diag);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm25llvm_unreachable_internalEPKcS1_j")]
                internal static extern void llvm_unreachable_internal_0(global::System.IntPtr msg, global::System.IntPtr file, uint line);
            }

            /// <summary>
            /// <para>Restores default error handling behaviour.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Restores default error handling behaviour.</para>
            /// </remarks>
            public static void remove_fatal_error_handler()
            {
                Internal.remove_fatal_error_handler_0();
            }

            /// <summary>
            /// <para>Reports a serious error, calling any installed error handler.
            /// These functions are intended to be used for error conditions which are
            /// outside the control of the compiler (I/O errors, invalid user input,
            /// etc.)</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Reports a serious error, calling any installed error handler.
            /// These</para>
            /// <para>  /// functions are intended to be used for error conditions
            /// which are outside</para>
            /// <para>  /// the control of the compiler (I/O errors, invalid user
            /// input, etc.)</para>
            /// <para>  ///</para>
            /// <para>  /// If no error handler is installed the default is to print
            /// the message to</para>
            /// <para>  /// standard error, followed by a newline.</para>
            /// <para>  /// After the error handler is called this function will call
            /// exit(1), it </para>
            /// <para>  /// does not return.</para>
            /// </remarks>
            public static void report_fatal_error(string reason, bool gen_crash_diag)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(reason);
                Internal.report_fatal_error_0(arg0, gen_crash_diag);
                Marshal.FreeHGlobal(arg0);
            }

            public static void report_fatal_error(llvm.StringRef reason, bool gen_crash_diag)
            {
                var arg0 = ReferenceEquals(reason, null) ? new llvm.StringRef.Internal() : *(llvm.StringRef.Internal*) (reason.__Instance);
                Internal.report_fatal_error_2(arg0, gen_crash_diag);
            }

            public static void report_fatal_error(llvm.Twine reason, bool gen_crash_diag)
            {
                var arg0 = ReferenceEquals(reason, null) ? global::System.IntPtr.Zero : reason.__Instance;
                Internal.report_fatal_error_3(arg0, gen_crash_diag);
            }

            /// <summary>
            /// <para>This function calls abort(), and prints the optional message to
            /// stderr. Use the llvm_unreachable macro (that adds location info), instead
            /// of calling this function directly.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// This function calls abort(), and prints the optional message
            /// to stderr.</para>
            /// <para>  /// Use the llvm_unreachable macro (that adds location info),
            /// instead of</para>
            /// <para>  /// calling this function directly.</para>
            /// </remarks>
            public static void llvm_unreachable_internal(string msg, string file, uint line)
            {
                var arg0 = Marshal.StringToHGlobalAnsi(msg);
                var arg1 = Marshal.StringToHGlobalAnsi(file);
                Internal.llvm_unreachable_internal_0(arg0, arg1, line);
                Marshal.FreeHGlobal(arg0);
                Marshal.FreeHGlobal(arg1);
            }
        }
    }
}
