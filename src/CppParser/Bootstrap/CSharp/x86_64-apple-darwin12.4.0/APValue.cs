//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace clang
    {
        /// <summary>
        /// <para>APValue - This class implements a discriminated union of
        /// [uninitialized] [APSInt] [APFloat], [Complex APSInt] [Complex APFloat],
        /// [Expr + Offset], [Vector: N * APValue], [Array: N * APValue]</para>
        /// </summary>
        /// <remarks>
        /// <para>/// APValue - This class implements a discriminated union of
        /// [uninitialized]</para>
        /// <para>/// [APSInt] [APFloat], [Complex APSInt] [Complex APFloat], [Expr
        /// + Offset],</para>
        /// <para>/// [Vector: N * APValue], [Array: N * APValue]</para>
        /// </remarks>
        public unsafe partial class APValue : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 56)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public clang.APValue.ValueKind Kind;

                [FieldOffset(8)]
                internal llvm.AlignedCharArrayUnion.Internal Data;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValueC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValueC2EPKS0_j")]
                internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr E, uint N);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValueC2ERKS0_")]
                internal static extern void cctor_6(global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValueC2ENS0_11UninitArrayEjj")]
                internal static extern void ctor_10(global::System.IntPtr instance, clang.APValue.UninitArray.Internal _0, uint InitElts, uint Size);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValueC2ENS0_12UninitStructEjj")]
                internal static extern void ctor_11(global::System.IntPtr instance, clang.APValue.UninitStruct.Internal _0, uint B, uint M);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValueC2EPKNS_9FieldDeclERKS0_")]
                internal static extern void ctor_12(global::System.IntPtr instance, global::System.IntPtr D, global::System.IntPtr V);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValueD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue12needsCleanupEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool needsCleanup_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValue4swapERS0_")]
                internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue7getKindEv")]
                internal static extern clang.APValue.ValueKind getKind_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue8isUninitEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isUninit_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue5isIntEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isInt_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue7isFloatEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isFloat_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue12isComplexIntEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isComplexInt_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue14isComplexFloatEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isComplexFloat_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue8isLValueEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isLValue_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue8isVectorEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isVector_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue7isArrayEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isArray_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue8isStructEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isStruct_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue7isUnionEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isUnion_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue15isMemberPointerEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isMemberPointer_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue15isAddrLabelDiffEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isAddrLabelDiff_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue4dumpEv")]
                internal static extern void dump_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue4dumpERN4llvm11raw_ostreamE")]
                internal static extern void dump_1(global::System.IntPtr instance, global::System.IntPtr OS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue11printPrettyERN4llvm11raw_ostreamERNS_10ASTContextENS_8QualTypeE")]
                internal static extern void printPretty_0(global::System.IntPtr instance, global::System.IntPtr OS, global::System.IntPtr Ctx, clang.QualType.Internal Ty);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValue15getLValueOffsetEv")]
                internal static extern global::System.IntPtr getLValueOffset_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue21isLValueOnePastTheEndEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isLValueOnePastTheEnd_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue13hasLValuePathEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool hasLValuePath_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue18getLValueCallIndexEv")]
                internal static extern uint getLValueCallIndex_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValue12getVectorEltEj")]
                internal static extern global::System.IntPtr getVectorElt_0(global::System.IntPtr instance, uint I);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue15getVectorLengthEv")]
                internal static extern uint getVectorLength_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValue22getArrayInitializedEltEj")]
                internal static extern global::System.IntPtr getArrayInitializedElt_0(global::System.IntPtr instance, uint I);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue14hasArrayFillerEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool hasArrayFiller_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValue14getArrayFillerEv")]
                internal static extern global::System.IntPtr getArrayFiller_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue23getArrayInitializedEltsEv")]
                internal static extern uint getArrayInitializedElts_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue12getArraySizeEv")]
                internal static extern uint getArraySize_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue17getStructNumBasesEv")]
                internal static extern uint getStructNumBases_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue18getStructNumFieldsEv")]
                internal static extern uint getStructNumFields_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValue13getStructBaseEj")]
                internal static extern global::System.IntPtr getStructBase_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValue14getStructFieldEj")]
                internal static extern global::System.IntPtr getStructField_0(global::System.IntPtr instance, uint i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue13getUnionFieldEv")]
                internal static extern global::System.IntPtr getUnionField_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValue13getUnionValueEv")]
                internal static extern global::System.IntPtr getUnionValue_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue20getMemberPointerDeclEv")]
                internal static extern global::System.IntPtr getMemberPointerDecl_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang7APValue30isMemberPointerToDerivedMemberEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isMemberPointerToDerivedMember_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValue9setVectorEPKS0_j")]
                internal static extern void setVector_0(global::System.IntPtr instance, global::System.IntPtr E, uint N);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang7APValue8setUnionEPKNS_9FieldDeclERKS0_")]
                internal static extern void setUnion_0(global::System.IntPtr instance, global::System.IntPtr Field, global::System.IntPtr Value);
            }

            public enum ValueKind : uint
            {
                Uninitialized = 0,
                Int = 1,
                Float = 2,
                ComplexInt = 3,
                ComplexFloat = 4,
                LValue = 5,
                Vector = 6,
                Array = 7,
                Struct = 8,
                Union = 9,
                MemberPointer = 10,
                AddrLabelDiff = 11
            }

            public unsafe partial struct LValuePathEntry
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr BaseOrMember;

                    [FieldOffset(0)]
                    public ulong ArrayIndex;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN5clang7APValue15LValuePathEntryC2ERKS1_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                private LValuePathEntry.Internal __instance;
                public LValuePathEntry.Internal __Instance { get { return __instance; } }

                public static LValuePathEntry __CreateInstance(global::System.IntPtr native)
                {
                    return new LValuePathEntry((LValuePathEntry.Internal*) native);
                }

                public static LValuePathEntry __CreateInstance(LValuePathEntry.Internal native)
                {
                    return new LValuePathEntry(native);
                }

                private LValuePathEntry(LValuePathEntry.Internal native)
                    : this()
                {
                    __instance = native;
                }

                private LValuePathEntry(LValuePathEntry.Internal* native, bool isInternalImpl = false) : this()
                {
                    __instance = *native;
                }

                public global::System.IntPtr BaseOrMember
                {
                    get
                    {
                        return __instance.BaseOrMember;
                    }

                    set
                    {
                        __instance.BaseOrMember = value;
                    }
                }

                public ulong ArrayIndex
                {
                    get
                    {
                        return __instance.ArrayIndex;
                    }

                    set
                    {
                        __instance.ArrayIndex = value;
                    }
                }
            }

            public unsafe partial class NoLValuePath : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN5clang7APValue12NoLValuePathC2ERKS1_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, NoLValuePath> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, NoLValuePath>();

                private readonly bool __ownsNativeInstance;

                public static NoLValuePath __CreateInstance(global::System.IntPtr native)
                {
                    return new NoLValuePath((NoLValuePath.Internal*) native);
                }

                public static NoLValuePath __CreateInstance(NoLValuePath.Internal native)
                {
                    return new NoLValuePath(native);
                }

                private static NoLValuePath.Internal* __CopyValue(NoLValuePath.Internal native)
                {
                    var ret = (NoLValuePath.Internal*) Marshal.AllocHGlobal(0);
                    *ret = native;
                    return ret;
                }

                private NoLValuePath(NoLValuePath.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected NoLValuePath(NoLValuePath.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public NoLValuePath()
                {
                    __Instance = Marshal.AllocHGlobal(0);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    DestroyNativeInstance(false);
                }

                public virtual void DestroyNativeInstance()
                {
                    DestroyNativeInstance(true);
                }

                private void DestroyNativeInstance(bool force)
                {
                    clang.APValue.NoLValuePath __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            public unsafe partial class UninitArray : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN5clang7APValue11UninitArrayC2ERKS1_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, UninitArray> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, UninitArray>();

                private readonly bool __ownsNativeInstance;

                public static UninitArray __CreateInstance(global::System.IntPtr native)
                {
                    return new UninitArray((UninitArray.Internal*) native);
                }

                public static UninitArray __CreateInstance(UninitArray.Internal native)
                {
                    return new UninitArray(native);
                }

                private static UninitArray.Internal* __CopyValue(UninitArray.Internal native)
                {
                    var ret = (UninitArray.Internal*) Marshal.AllocHGlobal(0);
                    *ret = native;
                    return ret;
                }

                private UninitArray(UninitArray.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected UninitArray(UninitArray.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public UninitArray()
                {
                    __Instance = Marshal.AllocHGlobal(0);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    DestroyNativeInstance(false);
                }

                public virtual void DestroyNativeInstance()
                {
                    DestroyNativeInstance(true);
                }

                private void DestroyNativeInstance(bool force)
                {
                    clang.APValue.UninitArray __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            public unsafe partial class UninitStruct : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN5clang7APValue12UninitStructC2ERKS1_")]
                    internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
                }

                public global::System.IntPtr __Instance { get; protected set; }
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, UninitStruct> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, UninitStruct>();

                private readonly bool __ownsNativeInstance;

                public static UninitStruct __CreateInstance(global::System.IntPtr native)
                {
                    return new UninitStruct((UninitStruct.Internal*) native);
                }

                public static UninitStruct __CreateInstance(UninitStruct.Internal native)
                {
                    return new UninitStruct(native);
                }

                private static UninitStruct.Internal* __CopyValue(UninitStruct.Internal native)
                {
                    var ret = (UninitStruct.Internal*) Marshal.AllocHGlobal(0);
                    *ret = native;
                    return ret;
                }

                private UninitStruct(UninitStruct.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected UninitStruct(UninitStruct.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                public UninitStruct()
                {
                    __Instance = Marshal.AllocHGlobal(0);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    DestroyNativeInstance(false);
                }

                public virtual void DestroyNativeInstance()
                {
                    DestroyNativeInstance(true);
                }

                private void DestroyNativeInstance(bool force)
                {
                    clang.APValue.UninitStruct __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }
            }

            internal unsafe partial class ComplexAPSInt
            {
                [StructLayout(LayoutKind.Explicit, Size = 48)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public llvm.APSInt.Internal Real;

                    [FieldOffset(24)]
                    public llvm.APSInt.Internal Imag;
                }
            }

            internal unsafe partial class ComplexAPFloat
            {
                [StructLayout(LayoutKind.Explicit, Size = 48)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public llvm.APFloat.Internal Real;

                    [FieldOffset(24)]
                    public llvm.APFloat.Internal Imag;
                }
            }

            internal unsafe partial class Vec
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr Elts;

                    [FieldOffset(8)]
                    public uint NumElts;
                }
            }

            internal unsafe partial class Arr
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr Elts;

                    [FieldOffset(8)]
                    public uint NumElts;

                    [FieldOffset(12)]
                    public uint ArrSize;
                }
            }

            internal unsafe partial class StructData
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr Elts;

                    [FieldOffset(8)]
                    public uint NumBases;

                    [FieldOffset(12)]
                    public uint NumFields;
                }
            }

            internal unsafe partial class UnionData
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr Field;

                    [FieldOffset(8)]
                    public global::System.IntPtr Value;
                }
            }

            internal unsafe partial class AddrLabelDiffData
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr LHSExpr;

                    [FieldOffset(8)]
                    public global::System.IntPtr RHSExpr;
                }
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, APValue> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, APValue>();

            private readonly bool __ownsNativeInstance;

            public static APValue __CreateInstance(global::System.IntPtr native)
            {
                return new APValue((APValue.Internal*) native);
            }

            public static APValue __CreateInstance(APValue.Internal native)
            {
                return new APValue(native);
            }

            private static APValue.Internal* __CopyValue(APValue.Internal native)
            {
                var ret = (APValue.Internal*) Marshal.AllocHGlobal(56);
                *ret = native;
                return ret;
            }

            private APValue(APValue.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected APValue(APValue.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public APValue()
            {
                __Instance = Marshal.AllocHGlobal(56);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0(__Instance);
            }

            public APValue(clang.APValue E, uint N)
            {
                __Instance = Marshal.AllocHGlobal(56);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(E, null) ? global::System.IntPtr.Zero : E.__Instance;
                Internal.ctor_3(__Instance, arg0, N);
            }

            public APValue(clang.APValue.UninitArray _0, uint InitElts, uint Size)
            {
                __Instance = Marshal.AllocHGlobal(56);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(_0, null) ? new clang.APValue.UninitArray.Internal() : *(clang.APValue.UninitArray.Internal*) (_0.__Instance);
                Internal.ctor_10(__Instance, arg0, InitElts, Size);
            }

            public APValue(clang.APValue.UninitStruct _0, uint B, uint M)
            {
                __Instance = Marshal.AllocHGlobal(56);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(_0, null) ? new clang.APValue.UninitStruct.Internal() : *(clang.APValue.UninitStruct.Internal*) (_0.__Instance);
                Internal.ctor_11(__Instance, arg0, B, M);
            }

            public APValue(clang.FieldDecl D, clang.APValue V)
            {
                __Instance = Marshal.AllocHGlobal(56);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(D, null) ? global::System.IntPtr.Zero : D.__Instance;
                var arg1 = ReferenceEquals(V, null) ? global::System.IntPtr.Zero : V.__Instance;
                Internal.ctor_12(__Instance, arg0, arg1);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                clang.APValue __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance || force)
                    Internal.dtor_0(__Instance);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            /// <summary>
            /// <para>Returns whether the object performed allocations.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Returns whether the object performed
            /// allocations.</para>
            /// <para>  ///</para>
            /// <para>  /// If APValues are constructed via placement new, \c
            /// needsCleanup()</para>
            /// <para>  /// indicates whether the destructor must be called in order to
            /// correctly</para>
            /// <para>  /// free all allocated memory.</para>
            /// </remarks>
            public bool needsCleanup()
            {
                var __ret = Internal.needsCleanup_0(__Instance);
                return __ret;
            }

            /// <summary>
            /// <para>Swaps the contents of this and the given APValue.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Swaps the contents of this and the given
            /// APValue.</para>
            /// </remarks>
            public void swap(clang.APValue RHS)
            {
                var arg0 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                Internal.swap_0(__Instance, arg0);
            }

            public clang.APValue.ValueKind getKind()
            {
                var __ret = Internal.getKind_0(__Instance);
                return __ret;
            }

            public bool isUninit()
            {
                var __ret = Internal.isUninit_0(__Instance);
                return __ret;
            }

            public bool isInt()
            {
                var __ret = Internal.isInt_0(__Instance);
                return __ret;
            }

            public bool isFloat()
            {
                var __ret = Internal.isFloat_0(__Instance);
                return __ret;
            }

            public bool isComplexInt()
            {
                var __ret = Internal.isComplexInt_0(__Instance);
                return __ret;
            }

            public bool isComplexFloat()
            {
                var __ret = Internal.isComplexFloat_0(__Instance);
                return __ret;
            }

            public bool isLValue()
            {
                var __ret = Internal.isLValue_0(__Instance);
                return __ret;
            }

            public bool isVector()
            {
                var __ret = Internal.isVector_0(__Instance);
                return __ret;
            }

            public bool isArray()
            {
                var __ret = Internal.isArray_0(__Instance);
                return __ret;
            }

            public bool isStruct()
            {
                var __ret = Internal.isStruct_0(__Instance);
                return __ret;
            }

            public bool isUnion()
            {
                var __ret = Internal.isUnion_0(__Instance);
                return __ret;
            }

            public bool isMemberPointer()
            {
                var __ret = Internal.isMemberPointer_0(__Instance);
                return __ret;
            }

            public bool isAddrLabelDiff()
            {
                var __ret = Internal.isAddrLabelDiff_0(__Instance);
                return __ret;
            }

            public void dump()
            {
                Internal.dump_0(__Instance);
            }

            public void dump(llvm.raw_ostream OS)
            {
                var arg0 = ReferenceEquals(OS, null) ? global::System.IntPtr.Zero : OS.__Instance;
                Internal.dump_1(__Instance, arg0);
            }

            public void printPretty(llvm.raw_ostream OS, clang.ASTContext Ctx, clang.QualType Ty)
            {
                var arg0 = ReferenceEquals(OS, null) ? global::System.IntPtr.Zero : OS.__Instance;
                var arg1 = ReferenceEquals(Ctx, null) ? global::System.IntPtr.Zero : Ctx.__Instance;
                var arg2 = ReferenceEquals(Ty, null) ? new clang.QualType.Internal() : *(clang.QualType.Internal*) (Ty.__Instance);
                Internal.printPretty_0(__Instance, arg0, arg1, arg2);
            }

            public clang.CharUnits getLValueOffset()
            {
                var __ret = Internal.getLValueOffset_0(__Instance);
                clang.CharUnits __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (clang.CharUnits.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (clang.CharUnits) clang.CharUnits.NativeToManagedMap[__ret];
                else __result0 = clang.CharUnits.__CreateInstance(__ret);
                return __result0;
            }

            public bool isLValueOnePastTheEnd()
            {
                var __ret = Internal.isLValueOnePastTheEnd_0(__Instance);
                return __ret;
            }

            public bool hasLValuePath()
            {
                var __ret = Internal.hasLValuePath_0(__Instance);
                return __ret;
            }

            public uint getLValueCallIndex()
            {
                var __ret = Internal.getLValueCallIndex_0(__Instance);
                return __ret;
            }

            public clang.APValue getVectorElt(uint I)
            {
                var __ret = Internal.getVectorElt_0(__Instance, I);
                clang.APValue __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (clang.APValue.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (clang.APValue) clang.APValue.NativeToManagedMap[__ret];
                else __result0 = clang.APValue.__CreateInstance(__ret);
                return __result0;
            }

            public uint getVectorLength()
            {
                var __ret = Internal.getVectorLength_0(__Instance);
                return __ret;
            }

            public clang.APValue getArrayInitializedElt(uint I)
            {
                var __ret = Internal.getArrayInitializedElt_0(__Instance, I);
                clang.APValue __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (clang.APValue.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (clang.APValue) clang.APValue.NativeToManagedMap[__ret];
                else __result0 = clang.APValue.__CreateInstance(__ret);
                return __result0;
            }

            public bool hasArrayFiller()
            {
                var __ret = Internal.hasArrayFiller_0(__Instance);
                return __ret;
            }

            public clang.APValue getArrayFiller()
            {
                var __ret = Internal.getArrayFiller_0(__Instance);
                clang.APValue __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (clang.APValue.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (clang.APValue) clang.APValue.NativeToManagedMap[__ret];
                else __result0 = clang.APValue.__CreateInstance(__ret);
                return __result0;
            }

            public uint getArrayInitializedElts()
            {
                var __ret = Internal.getArrayInitializedElts_0(__Instance);
                return __ret;
            }

            public uint getArraySize()
            {
                var __ret = Internal.getArraySize_0(__Instance);
                return __ret;
            }

            public uint getStructNumBases()
            {
                var __ret = Internal.getStructNumBases_0(__Instance);
                return __ret;
            }

            public uint getStructNumFields()
            {
                var __ret = Internal.getStructNumFields_0(__Instance);
                return __ret;
            }

            public clang.APValue getStructBase(uint i)
            {
                var __ret = Internal.getStructBase_0(__Instance, i);
                clang.APValue __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (clang.APValue.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (clang.APValue) clang.APValue.NativeToManagedMap[__ret];
                else __result0 = clang.APValue.__CreateInstance(__ret);
                return __result0;
            }

            public clang.APValue getStructField(uint i)
            {
                var __ret = Internal.getStructField_0(__Instance, i);
                clang.APValue __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (clang.APValue.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (clang.APValue) clang.APValue.NativeToManagedMap[__ret];
                else __result0 = clang.APValue.__CreateInstance(__ret);
                return __result0;
            }

            public clang.FieldDecl getUnionField()
            {
                var __ret = Internal.getUnionField_0(__Instance);
                clang.FieldDecl __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (clang.FieldDecl.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (clang.FieldDecl) clang.FieldDecl.NativeToManagedMap[__ret];
                else clang.FieldDecl.NativeToManagedMap[__ret] = __result0 = (clang.FieldDecl) clang.FieldDecl.__CreateInstance(__ret);
                return __result0;
            }

            public clang.APValue getUnionValue()
            {
                var __ret = Internal.getUnionValue_0(__Instance);
                clang.APValue __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (clang.APValue.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (clang.APValue) clang.APValue.NativeToManagedMap[__ret];
                else __result0 = clang.APValue.__CreateInstance(__ret);
                return __result0;
            }

            public clang.ValueDecl getMemberPointerDecl()
            {
                var __ret = Internal.getMemberPointerDecl_0(__Instance);
                clang.ValueDecl __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (clang.ValueDecl.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (clang.ValueDecl) clang.ValueDecl.NativeToManagedMap[__ret];
                else clang.ValueDecl.NativeToManagedMap[__ret] = __result0 = (clang.ValueDecl) clang.ValueDecl.__CreateInstance(__ret);
                return __result0;
            }

            public bool isMemberPointerToDerivedMember()
            {
                var __ret = Internal.isMemberPointerToDerivedMember_0(__Instance);
                return __ret;
            }

            public void setVector(clang.APValue E, uint N)
            {
                var arg0 = ReferenceEquals(E, null) ? global::System.IntPtr.Zero : E.__Instance;
                Internal.setVector_0(__Instance, arg0, N);
            }

            public void setUnion(clang.FieldDecl Field, clang.APValue Value)
            {
                var arg0 = ReferenceEquals(Field, null) ? global::System.IntPtr.Zero : Field.__Instance;
                var arg1 = ReferenceEquals(Value, null) ? global::System.IntPtr.Zero : Value.__Instance;
                Internal.setUnion_0(__Instance, arg0, arg1);
            }
        }
    }
}
