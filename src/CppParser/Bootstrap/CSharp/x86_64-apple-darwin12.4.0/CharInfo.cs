//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    public unsafe partial class CharInfo
    {
        public partial struct Internal
        {
        }
    }

    namespace clang
    {
        public unsafe partial class CharInfo
        {
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL7isASCIIEc")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isASCII_0(sbyte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL16isIdentifierHeadEhb")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isIdentifierHead_0(byte c, bool AllowDollar);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL16isIdentifierBodyEhb")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isIdentifierBody_0(byte c, bool AllowDollar);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL22isHorizontalWhitespaceEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isHorizontalWhitespace_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL20isVerticalWhitespaceEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isVerticalWhitespace_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL12isWhitespaceEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isWhitespace_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL7isDigitEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isDigit_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL11isLowercaseEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isLowercase_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL11isUppercaseEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isUppercase_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL8isLetterEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isLetter_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL14isAlphanumericEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isAlphanumeric_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL10isHexDigitEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isHexDigit_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL13isPunctuationEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isPunctuation_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL11isPrintableEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isPrintable_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL25isPreprocessingNumberBodyEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isPreprocessingNumberBody_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL20isRawStringDelimBodyEh")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isRawStringDelimBody_0(byte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL11toLowercaseEc")]
                internal static extern sbyte toLowercase_0(sbyte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL11toUppercaseEc")]
                internal static extern sbyte toUppercase_0(sbyte c);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clangL17isValidIdentifierEN4llvm9StringRefE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isValidIdentifier_0(llvm.StringRef.Internal S);
            }

            /// <summary>
            /// <para>Returns true if this is an ASCII character.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Returns true if this is an ASCII character.</para>
            /// </remarks>
            public static bool isASCII(sbyte c)
            {
                var __ret = Internal.isASCII_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Returns true if this is a valid first character of a C
            /// identifier, which is [a-zA-Z_].</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Returns true if this is a valid first character of a C
            /// identifier,</para>
            /// <para>/// which is [a-zA-Z_].</para>
            /// </remarks>
            public static bool isIdentifierHead(byte c, bool AllowDollar)
            {
                var __ret = Internal.isIdentifierHead_0(c, AllowDollar);
                return __ret;
            }

            /// <summary>
            /// <para>Returns true if this is a body character of a C identifier, which
            /// is [a-zA-Z0-9_].</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Returns true if this is a body character of a C
            /// identifier,</para>
            /// <para>/// which is [a-zA-Z0-9_].</para>
            /// </remarks>
            public static bool isIdentifierBody(byte c, bool AllowDollar)
            {
                var __ret = Internal.isIdentifierBody_0(c, AllowDollar);
                return __ret;
            }

            /// <summary>
            /// <para>Returns true if this character is horizontal ASCII whitespace: '
            /// ', '\t', '\f', '\v'.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Returns true if this character is horizontal ASCII
            /// whitespace:</para>
            /// <para>/// ' ', '\\t', '\\f', '\\v'.</para>
            /// <para>///</para>
            /// <para>/// Note that this returns false for '\\0'.</para>
            /// </remarks>
            public static bool isHorizontalWhitespace(byte c)
            {
                var __ret = Internal.isHorizontalWhitespace_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Returns true if this character is vertical ASCII whitespace:
            /// '\n', '\r'.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Returns true if this character is vertical ASCII whitespace:
            /// '\\n', '\\r'.</para>
            /// <para>///</para>
            /// <para>/// Note that this returns false for '\\0'.</para>
            /// </remarks>
            public static bool isVerticalWhitespace(byte c)
            {
                var __ret = Internal.isVerticalWhitespace_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Return true if this character is horizontal or vertical ASCII
            /// whitespace: ' ', '\t', '\f', '\v', '\n', '\r'.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Return true if this character is horizontal or vertical ASCII
            /// whitespace:</para>
            /// <para>/// ' ', '\\t', '\\f', '\\v', '\\n', '\\r'.</para>
            /// <para>///</para>
            /// <para>/// Note that this returns false for '\\0'.</para>
            /// </remarks>
            public static bool isWhitespace(byte c)
            {
                var __ret = Internal.isWhitespace_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Return true if this character is an ASCII digit: [0-9]</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Return true if this character is an ASCII digit: [0-9]</para>
            /// </remarks>
            public static bool isDigit(byte c)
            {
                var __ret = Internal.isDigit_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Return true if this character is a lowercase ASCII letter:
            /// [a-z]</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Return true if this character is a lowercase ASCII letter:
            /// [a-z]</para>
            /// </remarks>
            public static bool isLowercase(byte c)
            {
                var __ret = Internal.isLowercase_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Return true if this character is an uppercase ASCII letter:
            /// [A-Z]</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Return true if this character is an uppercase ASCII letter:
            /// [A-Z]</para>
            /// </remarks>
            public static bool isUppercase(byte c)
            {
                var __ret = Internal.isUppercase_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Return true if this character is an ASCII letter: [a-zA-Z]</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Return true if this character is an ASCII letter:
            /// [a-zA-Z]</para>
            /// </remarks>
            public static bool isLetter(byte c)
            {
                var __ret = Internal.isLetter_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Return true if this character is an ASCII letter or digit:
            /// [a-zA-Z0-9]</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Return true if this character is an ASCII letter or digit:
            /// [a-zA-Z0-9]</para>
            /// </remarks>
            public static bool isAlphanumeric(byte c)
            {
                var __ret = Internal.isAlphanumeric_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Return true if this character is an ASCII hex digit:
            /// [0-9a-fA-F]</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Return true if this character is an ASCII hex digit:
            /// [0-9a-fA-F]</para>
            /// </remarks>
            public static bool isHexDigit(byte c)
            {
                var __ret = Internal.isHexDigit_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Return true if this character is an ASCII punctuation
            /// character.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Return true if this character is an ASCII punctuation
            /// character.</para>
            /// <para>///</para>
            /// <para>/// Note that '_' is both a punctuation character and an
            /// identifier character!</para>
            /// </remarks>
            public static bool isPunctuation(byte c)
            {
                var __ret = Internal.isPunctuation_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Return true if this character is an ASCII printable character;
            /// that is, a character that should take exactly one column to print in a
            /// fixed-width terminal.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Return true if this character is an ASCII printable
            /// character; that is, a</para>
            /// <para>/// character that should take exactly one column to print in a
            /// fixed-width</para>
            /// <para>/// terminal.</para>
            /// </remarks>
            public static bool isPrintable(byte c)
            {
                var __ret = Internal.isPrintable_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Return true if this is the body character of a C preprocessing
            /// number, which is [a-zA-Z0-9_.].</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Return true if this is the body character of a C
            /// preprocessing number,</para>
            /// <para>/// which is [a-zA-Z0-9_.].</para>
            /// </remarks>
            public static bool isPreprocessingNumberBody(byte c)
            {
                var __ret = Internal.isPreprocessingNumberBody_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Return true if this is the body character of a C++ raw string
            /// delimiter.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Return true if this is the body character of a C++ raw string
            /// delimiter.</para>
            /// </remarks>
            public static bool isRawStringDelimBody(byte c)
            {
                var __ret = Internal.isRawStringDelimBody_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Converts the given ASCII character to its lowercase
            /// equivalent.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Converts the given ASCII character to its lowercase
            /// equivalent.</para>
            /// <para>///</para>
            /// <para>/// If the character is not an uppercase character, it is
            /// returned as is.</para>
            /// </remarks>
            public static sbyte toLowercase(sbyte c)
            {
                var __ret = Internal.toLowercase_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Converts the given ASCII character to its uppercase
            /// equivalent.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Converts the given ASCII character to its uppercase
            /// equivalent.</para>
            /// <para>///</para>
            /// <para>/// If the character is not a lowercase character, it is returned
            /// as is.</para>
            /// </remarks>
            public static sbyte toUppercase(sbyte c)
            {
                var __ret = Internal.toUppercase_0(c);
                return __ret;
            }

            /// <summary>
            /// <para>Return true if this is a valid ASCII identifier.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Return true if this is a valid ASCII identifier.</para>
            /// <para>///</para>
            /// <para>/// Note that this is a very simple check; it does not accept '$'
            /// or UCNs as</para>
            /// <para>/// valid identifier characters.</para>
            /// </remarks>
            public static bool isValidIdentifier(llvm.StringRef S)
            {
                var arg0 = ReferenceEquals(S, null) ? new llvm.StringRef.Internal() : *(llvm.StringRef.Internal*) (S.__Instance);
                var __ret = Internal.isValidIdentifier_0(arg0);
                return __ret;
            }
        }

        namespace charinfo
        {
            [Flags]
            public enum CHAR : uint
            {
                CHAR_HORZ_WS = 0x1,
                CHAR_VERT_WS = 0x2,
                CHAR_SPACE = 0x4,
                CHAR_DIGIT = 0x8,
                CHAR_XLETTER = 0x10,
                CHAR_UPPER = 0x20,
                CHAR_LOWER = 0x40,
                CHAR_UNDER = 0x80,
                CHAR_PERIOD = 0x100,
                CHAR_RAWDEL = 0x200,
                CHAR_PUNCT = 0x400
            }

            public enum CHAR_X : uint
            {
                CHAR_XUPPER = 48,
                CHAR_XLOWER = 80
            }
        }
    }
}
