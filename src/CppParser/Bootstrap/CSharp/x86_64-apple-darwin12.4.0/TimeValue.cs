//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace llvm
    {
        namespace sys
        {
            /// <summary>
            /// <para>Provides an abstraction for a fixed point in time.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// This class is used where a precise fixed point in time is
            /// required. The</para>
            /// <para>  /// range of TimeValue spans many hundreds of billions of years
            /// both past and</para>
            /// <para>  /// present.  The precision of TimeValue is to the nanosecond.
            /// However, the</para>
            /// <para>  /// actual precision of its values will be determined by the
            /// resolution of</para>
            /// <para>  /// the system clock. The TimeValue class is used in
            /// conjunction with several</para>
            /// <para>  /// other lib/System interfaces to specify the time at which a
            /// call should</para>
            /// <para>  /// timeout, etc.</para>
            /// <para>  /// @since 1.4</para>
            /// <para>  /// @brief Provides an abstraction for a fixed point in
            /// time.</para>
            /// </remarks>
            public unsafe partial class TimeValue : IDisposable
            {
                [StructLayout(LayoutKind.Explicit, Size = 16)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public long seconds_;

                    [FieldOffset(8)]
                    public int nanos_;

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValueC2Ev")]
                    internal static extern void ctor_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValueC2Exi")]
                    internal static extern void ctor_1(global::System.IntPtr instance, long seconds, int nanos);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValueC2Ed")]
                    internal static extern void ctor_2(global::System.IntPtr instance, double new_time);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValueC2ERKS1_")]
                    internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue7MinTimeEv")]
                    internal static extern llvm.sys.TimeValue.Internal MinTime_0();

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue7MaxTimeEv")]
                    internal static extern llvm.sys.TimeValue.Internal MaxTime_0();

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue8ZeroTimeEv")]
                    internal static extern llvm.sys.TimeValue.Internal ZeroTime_0();

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue13PosixZeroTimeEv")]
                    internal static extern llvm.sys.TimeValue.Internal PosixZeroTime_0();

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue13Win32ZeroTimeEv")]
                    internal static extern llvm.sys.TimeValue.Internal Win32ZeroTime_0();

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue3nowEv")]
                    internal static extern llvm.sys.TimeValue.Internal now_0();

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK4llvm3sys9TimeValue7secondsEv")]
                    internal static extern long seconds_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK4llvm3sys9TimeValue11nanosecondsEv")]
                    internal static extern int nanoseconds_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK4llvm3sys9TimeValue12microsecondsEv")]
                    internal static extern uint microseconds_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK4llvm3sys9TimeValue12millisecondsEv")]
                    internal static extern uint milliseconds_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK4llvm3sys9TimeValue4usecEv")]
                    internal static extern ulong usec_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK4llvm3sys9TimeValue4msecEv")]
                    internal static extern ulong msec_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK4llvm3sys9TimeValue11toEpochTimeEv")]
                    internal static extern ulong toEpochTime_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK4llvm3sys9TimeValue11toWin32TimeEv")]
                    internal static extern ulong toWin32Time_0(global::System.IntPtr instance);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZNK4llvm3sys9TimeValue15getTimespecTimeERyRj")]
                    internal static extern void getTimespecTime_0(global::System.IntPtr instance, ulong* seconds, uint* nanos);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue7secondsEx")]
                    internal static extern void seconds_1(global::System.IntPtr instance, long sec);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue11nanosecondsEi")]
                    internal static extern void nanoseconds_1(global::System.IntPtr instance, int nanos);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue12microsecondsEi")]
                    internal static extern void microseconds_1(global::System.IntPtr instance, int micros);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue12millisecondsEi")]
                    internal static extern void milliseconds_1(global::System.IntPtr instance, int millis);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue4usecEx")]
                    internal static extern void usec_1(global::System.IntPtr instance, long microseconds);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue4msecEx")]
                    internal static extern void msec_1(global::System.IntPtr instance, long milliseconds);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue13fromEpochTimeEx")]
                    internal static extern void fromEpochTime_0(global::System.IntPtr instance, long seconds);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sys9TimeValue13fromWin32TimeEy")]
                    internal static extern void fromWin32Time_0(global::System.IntPtr instance, ulong win32Time);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sysplERKNS0_9TimeValueES3_")]
                    internal static extern llvm.sys.TimeValue.Internal OperatorPlus_0(global::System.IntPtr tv1, global::System.IntPtr tv2);

                    [SuppressUnmanagedCodeSecurity]
                    [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                        EntryPoint="_ZN4llvm3sysmiERKNS0_9TimeValueES3_")]
                    internal static extern llvm.sys.TimeValue.Internal OperatorMinus_0(global::System.IntPtr tv1, global::System.IntPtr tv2);
                }

                public enum TimeConversions : uint
                {
                    /// <summary>One Billion</summary>
                    NANOSECONDS_PER_SECOND = 1000000000,
                    /// <summary>One Million</summary>
                    MICROSECONDS_PER_SECOND = 1000000,
                    /// <summary>One Thousand</summary>
                    MILLISECONDS_PER_SECOND = 1000,
                    /// <summary>One Thousand</summary>
                    NANOSECONDS_PER_MICROSECOND = 1000,
                    /// <summary>One Million</summary>
                    NANOSECONDS_PER_MILLISECOND = 1000000,
                    /// <summary>Win32 tick is 10^7 Hz (10ns)</summary>
                    NANOSECONDS_PER_WIN32_TICK = 100
                }

                /// <summary>
                /// <para>@} @{</para>
                /// </summary>
                /// <remarks>
                /// <para>/// @}</para>
                /// <para>  /// @name Types</para>
                /// <para>  /// @{</para>
                /// </remarks>
                public global::System.IntPtr __Instance { get; protected set; }
                public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TimeValue> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TimeValue>();

                private readonly bool __ownsNativeInstance;

                public static TimeValue __CreateInstance(global::System.IntPtr native)
                {
                    return new TimeValue((TimeValue.Internal*) native);
                }

                public static TimeValue __CreateInstance(TimeValue.Internal native)
                {
                    return new TimeValue(native);
                }

                private static TimeValue.Internal* __CopyValue(TimeValue.Internal native)
                {
                    var ret = (TimeValue.Internal*) Marshal.AllocHGlobal(16);
                    *ret = native;
                    return ret;
                }

                private TimeValue(TimeValue.Internal native)
                    : this(__CopyValue(native))
                {
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                }

                protected TimeValue(TimeValue.Internal* native, bool isInternalImpl = false)
                {
                    __Instance = new global::System.IntPtr(native);
                }

                /// <summary>
                /// <para>Default construct a time value, initializing to ZeroTime.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// \brief Default construct a time value, initializing to
                /// ZeroTime.</para>
                /// </remarks>
                public TimeValue()
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_0(__Instance);
                }

                /// <summary>
                /// <para>Explicit constructor</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Caller provides the exact value in seconds and nanoseconds.
                /// The</para>
                /// <para>    /// \p nanos argument defaults to zero for
                /// convenience.</para>
                /// <para>    /// @brief Explicit constructor</para>
                /// </remarks>
                public TimeValue(long seconds, int nanos)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    var arg0 = seconds;
                    var arg1 = nanos;
                    Internal.ctor_1(__Instance, arg0, arg1);
                }

                /// <summary>
                /// <para>Double Constructor.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Caller provides the exact value as a double in seconds with
                /// the</para>
                /// <para>    /// fractional part representing nanoseconds.</para>
                /// <para>    /// @brief Double Constructor.</para>
                /// </remarks>
                public TimeValue(double new_time)
                {
                    __Instance = Marshal.AllocHGlobal(16);
                    __ownsNativeInstance = true;
                    NativeToManagedMap[__Instance] = this;
                    Internal.ctor_2(__Instance, new_time);
                }

                public void Dispose()
                {
                    Dispose(disposing: true);
                }

                protected virtual void Dispose(bool disposing)
                {
                    DestroyNativeInstance(false);
                }

                public virtual void DestroyNativeInstance()
                {
                    DestroyNativeInstance(true);
                }

                private void DestroyNativeInstance(bool force)
                {
                    llvm.sys.TimeValue __dummy;
                    NativeToManagedMap.TryRemove(__Instance, out __dummy);
                    if (__ownsNativeInstance)
                        Marshal.FreeHGlobal(__Instance);
                }

                /// <summary>
                /// <para>Retrieve the seconds component</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Returns only the seconds component of the TimeValue. The
                /// nanoseconds</para>
                /// <para>    /// portion is ignored. No rounding is performed.</para>
                /// <para>    /// @brief Retrieve the seconds component</para>
                /// </remarks>
                public long seconds()
                {
                    var __ret = Internal.seconds_0(__Instance);
                    return __ret;
                }

                /// <summary>
                /// <para>Retrieve the nanoseconds component.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Returns only the nanoseconds component of the TimeValue. The
                /// seconds</para>
                /// <para>    /// portion is ignored.</para>
                /// <para>    /// @brief Retrieve the nanoseconds component.</para>
                /// </remarks>
                public int nanoseconds()
                {
                    var __ret = Internal.nanoseconds_0(__Instance);
                    return __ret;
                }

                /// <summary>
                /// <para>Retrieve the fractional part as microseconds;</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Returns only the fractional portion of the TimeValue rounded
                /// down to the</para>
                /// <para>    /// nearest microsecond (divide by one thousand).</para>
                /// <para>    /// @brief Retrieve the fractional part as
                /// microseconds;</para>
                /// </remarks>
                public uint microseconds()
                {
                    var __ret = Internal.microseconds_0(__Instance);
                    return __ret;
                }

                /// <summary>
                /// <para>Retrieve the fractional part as milliseconds;</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Returns only the fractional portion of the TimeValue rounded
                /// down to the</para>
                /// <para>    /// nearest millisecond (divide by one million).</para>
                /// <para>    /// @brief Retrieve the fractional part as
                /// milliseconds;</para>
                /// </remarks>
                public uint milliseconds()
                {
                    var __ret = Internal.milliseconds_0(__Instance);
                    return __ret;
                }

                /// <summary>
                /// <para>Convert to a number of microseconds (can overflow)</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Returns the TimeValue as a number of microseconds. Note that
                /// the value</para>
                /// <para>    /// returned can overflow because the range of a uint64_t is
                /// smaller than</para>
                /// <para>    /// the range of a TimeValue. Nevertheless, this is useful on
                /// some operating</para>
                /// <para>    /// systems and is therefore provided.</para>
                /// <para>    /// @brief Convert to a number of microseconds (can
                /// overflow)</para>
                /// </remarks>
                public ulong usec()
                {
                    var __ret = Internal.usec_0(__Instance);
                    return __ret;
                }

                /// <summary>
                /// <para>Convert to a number of milliseconds (can overflow)</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Returns the TimeValue as a number of milliseconds. Note that
                /// the value</para>
                /// <para>    /// returned can overflow because the range of a uint64_t is
                /// smaller than</para>
                /// <para>    /// the range of a TimeValue. Nevertheless, this is useful on
                /// some operating</para>
                /// <para>    /// systems and is therefore provided.</para>
                /// <para>    /// @brief Convert to a number of milliseconds (can
                /// overflow)</para>
                /// </remarks>
                public ulong msec()
                {
                    var __ret = Internal.msec_0(__Instance);
                    return __ret;
                }

                /// <summary>
                /// <para>Converts the TimeValue into the corresponding number of seconds
                /// since the epoch (00:00:00 Jan 1,1970).</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Converts the TimeValue into the corresponding number of
                /// seconds</para>
                /// <para>    /// since the epoch (00:00:00 Jan 1,1970).</para>
                /// </remarks>
                public ulong toEpochTime()
                {
                    var __ret = Internal.toEpochTime_0(__Instance);
                    return __ret;
                }

                /// <summary>
                /// <para>Convert to Win32's FILETIME (100ns intervals since 00:00:00 Jan
                /// 1, 1601 UTC)</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Converts the TimeValue into the corresponding number of
                /// &quot;ticks&quot; for</para>
                /// <para>    /// Win32 platforms, correcting for the difference in Win32
                /// zero time.</para>
                /// <para>    /// @brief Convert to Win32's FILETIME</para>
                /// <para>    /// (100ns intervals since 00:00:00 Jan 1, 1601 UTC)</para>
                /// </remarks>
                public ulong toWin32Time()
                {
                    var __ret = Internal.toWin32Time_0(__Instance);
                    return __ret;
                }

                /// <summary>
                /// <para>Convert to timespec time (ala POSIX.1b)</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Provides the seconds and nanoseconds as results in its
                /// arguments after</para>
                /// <para>    /// correction for the Posix zero time.</para>
                /// <para>    /// @brief Convert to timespec time (ala POSIX.1b)</para>
                /// </remarks>
                public void getTimespecTime(ref ulong seconds, ref uint nanos)
                {
                    fixed (ulong* arg0 = &seconds)
                    {
                        fixed (uint* arg1 = &nanos)
                        {
                            Internal.getTimespecTime_0(__Instance, arg0, arg1);
                        }
                    }
                }

                /// <summary>
                /// <para>Set the seconds component.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// The seconds component of the TimeValue is set to \p sec
                /// without</para>
                /// <para>    /// modifying the nanoseconds part.  This is useful for whole
                /// second</para>
                /// <para>    /// arithmetic.</para>
                /// <para>    /// @brief Set the seconds component.</para>
                /// </remarks>
                public void seconds(long sec)
                {
                    var arg0 = sec;
                    Internal.seconds_1(__Instance, arg0);
                }

                /// <summary>
                /// <para>Set the nanoseconds component using a number of
                /// nanoseconds.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// The nanoseconds component of the TimeValue is set to \p nanos
                /// without</para>
                /// <para>    /// modifying the seconds part. This is useful for basic
                /// computations</para>
                /// <para>    /// involving just the nanoseconds portion. Note that the
                /// TimeValue will be</para>
                /// <para>    /// normalized after this call so that the fractional
                /// (nanoseconds) portion</para>
                /// <para>    /// will have the smallest equivalent value.</para>
                /// <para>    /// @brief Set the nanoseconds component using a number of
                /// nanoseconds.</para>
                /// </remarks>
                public void nanoseconds(int nanos)
                {
                    var arg0 = nanos;
                    Internal.nanoseconds_1(__Instance, arg0);
                }

                /// <summary>
                /// <para>Set the nanoseconds component using a number of
                /// microseconds.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// The seconds component remains unchanged.</para>
                /// <para>    /// @brief Set the nanoseconds component using a number of
                /// microseconds.</para>
                /// </remarks>
                public void microseconds(int micros)
                {
                    var arg0 = micros;
                    Internal.microseconds_1(__Instance, arg0);
                }

                /// <summary>
                /// <para>Set the nanoseconds component using a number of
                /// milliseconds.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// The seconds component remains unchanged.</para>
                /// <para>    /// @brief Set the nanoseconds component using a number of
                /// milliseconds.</para>
                /// </remarks>
                public void milliseconds(int millis)
                {
                    var arg0 = millis;
                    Internal.milliseconds_1(__Instance, arg0);
                }

                /// <summary>
                /// <para>Converts from microsecond format to TimeValue format</para>
                /// </summary>
                /// <remarks>
                /// <para>/// @brief Converts from microsecond format to TimeValue
                /// format</para>
                /// </remarks>
                public void usec(long microseconds)
                {
                    var arg0 = microseconds;
                    Internal.usec_1(__Instance, arg0);
                }

                /// <summary>
                /// <para>Converts from millisecond format to TimeValue format</para>
                /// </summary>
                /// <remarks>
                /// <para>/// @brief Converts from millisecond format to TimeValue
                /// format</para>
                /// </remarks>
                public void msec(long milliseconds)
                {
                    var arg0 = milliseconds;
                    Internal.msec_1(__Instance, arg0);
                }

                /// <summary>
                /// <para>Convert seconds form PosixTime to TimeValue</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Converts the \p seconds argument from PosixTime to the
                /// corresponding</para>
                /// <para>    /// TimeValue and assigns that value to \p this.</para>
                /// <para>    /// @brief Convert seconds form PosixTime to TimeValue</para>
                /// </remarks>
                public void fromEpochTime(long seconds)
                {
                    var arg0 = seconds;
                    Internal.fromEpochTime_0(__Instance, arg0);
                }

                /// <summary>
                /// <para>Convert seconds form Windows FILETIME to TimeValue</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Converts the \p win32Time argument from Windows FILETIME to
                /// the</para>
                /// <para>    /// corresponding TimeValue and assigns that value to \p
                /// this.</para>
                /// <para>    /// @brief Convert seconds form Windows FILETIME to
                /// TimeValue</para>
                /// </remarks>
                public void fromWin32Time(ulong win32Time)
                {
                    var arg0 = win32Time;
                    Internal.fromWin32Time_0(__Instance, arg0);
                }

                /// <summary>
                /// <para>The smallest possible time value.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// A constant TimeValue representing the smallest time</para>
                /// <para>    /// value permissible by the class. MinTime is some
                /// point</para>
                /// <para>    /// in the distant past, about 300 billion years BCE.</para>
                /// <para>    /// @brief The smallest possible time value.</para>
                /// </remarks>
                public static llvm.sys.TimeValue MinTime()
                {
                    var __ret = Internal.MinTime_0();
                    return llvm.sys.TimeValue.__CreateInstance(__ret);
                }

                /// <summary>
                /// <para>The largest possible time value.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// A constant TimeValue representing the largest time</para>
                /// <para>    /// value permissible by the class. MaxTime is some
                /// point</para>
                /// <para>    /// in the distant future, about 300 billion years AD.</para>
                /// <para>    /// @brief The largest possible time value.</para>
                /// </remarks>
                public static llvm.sys.TimeValue MaxTime()
                {
                    var __ret = Internal.MaxTime_0();
                    return llvm.sys.TimeValue.__CreateInstance(__ret);
                }

                /// <summary>
                /// <para>00:00:00 Jan 1, 2000 UTC.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// A constant TimeValue representing the base time,</para>
                /// <para>    /// or zero time of 00:00:00 (midnight) January 1st,
                /// 2000.</para>
                /// <para>    /// @brief 00:00:00 Jan 1, 2000 UTC.</para>
                /// </remarks>
                public static llvm.sys.TimeValue ZeroTime()
                {
                    var __ret = Internal.ZeroTime_0();
                    return llvm.sys.TimeValue.__CreateInstance(__ret);
                }

                /// <summary>
                /// <para>00:00:00 Jan 1, 1970 UTC.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// A constant TimeValue for the Posix base time which is</para>
                /// <para>    /// 00:00:00 (midnight) January 1st, 1970.</para>
                /// <para>    /// @brief 00:00:00 Jan 1, 1970 UTC.</para>
                /// </remarks>
                public static llvm.sys.TimeValue PosixZeroTime()
                {
                    var __ret = Internal.PosixZeroTime_0();
                    return llvm.sys.TimeValue.__CreateInstance(__ret);
                }

                /// <summary>
                /// <para>00:00:00 Jan 1, 1601 UTC.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// A constant TimeValue for the Win32 base time which is</para>
                /// <para>    /// 00:00:00 (midnight) January 1st, 1601.</para>
                /// <para>    /// @brief 00:00:00 Jan 1, 1601 UTC.</para>
                /// </remarks>
                public static llvm.sys.TimeValue Win32ZeroTime()
                {
                    var __ret = Internal.Win32ZeroTime_0();
                    return llvm.sys.TimeValue.__CreateInstance(__ret);
                }

                /// <summary>
                /// <para>Creates a TimeValue with the current time (UTC).</para>
                /// </summary>
                /// <remarks>
                /// <para>/// This is a static constructor that returns a TimeValue that
                /// represents</para>
                /// <para>    /// the current time.</para>
                /// <para>    /// @brief Creates a TimeValue with the current time
                /// (UTC).</para>
                /// </remarks>
                public static llvm.sys.TimeValue now()
                {
                    var __ret = Internal.now_0();
                    return llvm.sys.TimeValue.__CreateInstance(__ret);
                }

                /// <summary>
                /// <para>Addition operator.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Adds two TimeValue objects together.</para>
                /// <para>    /// @returns The sum of the two operands as a new
                /// TimeValue</para>
                /// <para>    /// @brief Addition operator.</para>
                /// </remarks>
                public static llvm.sys.TimeValue operator +(llvm.sys.TimeValue tv1, llvm.sys.TimeValue tv2)
                {
                    var arg0 = ReferenceEquals(tv1, null) ? global::System.IntPtr.Zero : tv1.__Instance;
                    var arg1 = ReferenceEquals(tv2, null) ? global::System.IntPtr.Zero : tv2.__Instance;
                    var __ret = Internal.OperatorPlus_0(arg0, arg1);
                    return llvm.sys.TimeValue.__CreateInstance(__ret);
                }

                /// <summary>
                /// <para>Subtraction operator.</para>
                /// </summary>
                /// <remarks>
                /// <para>/// Subtracts two TimeValue objects.</para>
                /// <para>    /// @returns The difference of the two operands as a new
                /// TimeValue</para>
                /// <para>    /// @brief Subtraction operator.</para>
                /// </remarks>
                public static llvm.sys.TimeValue operator -(llvm.sys.TimeValue tv1, llvm.sys.TimeValue tv2)
                {
                    var arg0 = ReferenceEquals(tv1, null) ? global::System.IntPtr.Zero : tv1.__Instance;
                    var arg1 = ReferenceEquals(tv2, null) ? global::System.IntPtr.Zero : tv2.__Instance;
                    var __ret = Internal.OperatorMinus_0(arg0, arg1);
                    return llvm.sys.TimeValue.__CreateInstance(__ret);
                }
            }
        }
    }
}
