//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace clang
    {
        /// <summary>
        /// <para>Keeps track of options that affect how file operations are
        /// performed.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Keeps track of options that affect how file operations
        /// are performed.</para>
        /// </remarks>
        public unsafe partial class FileSystemOptions : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 24)]
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang17FileSystemOptionsC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang17FileSystemOptionsC2Ev")]
                internal static extern void ctor_2(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang17FileSystemOptionsD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FileSystemOptions> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FileSystemOptions>();

            private readonly bool __ownsNativeInstance;

            public static FileSystemOptions __CreateInstance(global::System.IntPtr native)
            {
                return new FileSystemOptions((FileSystemOptions.Internal*) native);
            }

            public static FileSystemOptions __CreateInstance(FileSystemOptions.Internal native)
            {
                return new FileSystemOptions(native);
            }

            private static FileSystemOptions.Internal* __CopyValue(FileSystemOptions.Internal native)
            {
                var ret = (FileSystemOptions.Internal*) Marshal.AllocHGlobal(24);
                *ret = native;
                return ret;
            }

            private FileSystemOptions(FileSystemOptions.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected FileSystemOptions(FileSystemOptions.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public FileSystemOptions()
            {
                __Instance = Marshal.AllocHGlobal(24);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_2(__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                clang.FileSystemOptions __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance || force)
                    Internal.dtor_0(__Instance);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }
    }
}
