//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace clang
    {
        /// <summary>
        /// <para>Describes the kind of translation unit being processed.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Describes the kind of translation unit being
        /// processed.</para>
        /// </remarks>
        public enum TranslationUnitKind : uint
        {
            /// <summary>The translation unit is a complete translation unit.</summary>
            TU_Complete = 0,
            /// <summary>The translation unit is a prefix to a translation unit, and is not complete.</summary>
            TU_Prefix = 1,
            /// <summary>The translation unit is a module.</summary>
            TU_Module = 2
        }

        /// <summary>
        /// <para>Bitfields of LangOptions, split out from LangOptions in order to
        /// ensure that this large collection of bitfields is a trivial class
        /// type.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// Bitfields of LangOptions, split out from LangOptions in order
        /// to ensure that</para>
        /// <para>/// this large collection of bitfields is a trivial class
        /// type.</para>
        /// </remarks>
        public unsafe partial class LangOptionsBase : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 60)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public uint C99;

                [FieldOffset(0)]
                public uint C11;

                [FieldOffset(0)]
                public uint MSVCCompat;

                [FieldOffset(0)]
                public uint MicrosoftExt;

                [FieldOffset(0)]
                public uint AsmBlocks;

                [FieldOffset(0)]
                public uint Borland;

                [FieldOffset(0)]
                public uint CPlusPlus;

                [FieldOffset(0)]
                public uint CPlusPlus11;

                [FieldOffset(1)]
                public uint CPlusPlus14;

                [FieldOffset(1)]
                public uint CPlusPlus1z;

                [FieldOffset(1)]
                public uint ObjC1;

                [FieldOffset(1)]
                public uint ObjC2;

                [FieldOffset(1)]
                public uint ObjCDefaultSynthProperties;

                [FieldOffset(1)]
                public uint EncodeExtendedBlockSig;

                [FieldOffset(1)]
                public uint ObjCInferRelatedResultType;

                [FieldOffset(1)]
                public uint Trigraphs;

                [FieldOffset(2)]
                public uint LineComment;

                [FieldOffset(2)]
                public uint Bool;

                [FieldOffset(2)]
                public uint Half;

                [FieldOffset(2)]
                public uint WChar;

                [FieldOffset(2)]
                public uint DollarIdents;

                [FieldOffset(2)]
                public uint AsmPreprocessor;

                [FieldOffset(2)]
                public uint GNUMode;

                [FieldOffset(2)]
                public uint GNUKeywords;

                [FieldOffset(3)]
                public uint ImplicitInt;

                [FieldOffset(3)]
                public uint Digraphs;

                [FieldOffset(3)]
                public uint HexFloats;

                [FieldOffset(3)]
                public uint CXXOperatorNames;

                [FieldOffset(3)]
                public uint AppleKext;

                [FieldOffset(3)]
                public uint PascalStrings;

                [FieldOffset(3)]
                public uint WritableStrings;

                [FieldOffset(3)]
                public uint ConstStrings;

                [FieldOffset(4)]
                public uint LaxVectorConversions;

                [FieldOffset(4)]
                public uint AltiVec;

                [FieldOffset(4)]
                public uint Exceptions;

                [FieldOffset(4)]
                public uint ObjCExceptions;

                [FieldOffset(4)]
                public uint CXXExceptions;

                [FieldOffset(4)]
                public uint SjLjExceptions;

                [FieldOffset(4)]
                public uint TraditionalCPP;

                [FieldOffset(4)]
                public uint RTTI;

                [FieldOffset(5)]
                public uint RTTIData;

                [FieldOffset(5)]
                public uint MSBitfields;

                [FieldOffset(5)]
                public uint Freestanding;

                [FieldOffset(5)]
                public uint NoBuiltin;

                [FieldOffset(5)]
                public uint NoMathBuiltin;

                [FieldOffset(5)]
                public uint GNUAsm;

                [FieldOffset(5)]
                public uint ThreadsafeStatics;

                [FieldOffset(5)]
                public uint POSIXThreads;

                [FieldOffset(6)]
                public uint Blocks;

                [FieldOffset(6)]
                public uint EmitAllDecls;

                [FieldOffset(6)]
                public uint MathErrno;

                [FieldOffset(6)]
                public uint HeinousExtensions;

                [FieldOffset(6)]
                public uint Modules;

                [FieldOffset(6)]
                public uint ModulesDeclUse;

                [FieldOffset(6)]
                public uint ModulesSearchAll;

                [FieldOffset(6)]
                public uint ModulesStrictDeclUse;

                [FieldOffset(7)]
                public uint ModulesErrorRecovery;

                [FieldOffset(7)]
                public uint ModulesImplicitMaps;

                [FieldOffset(7)]
                public uint ImplicitModules;

                [FieldOffset(7)]
                public uint Optimize;

                [FieldOffset(7)]
                public uint OptimizeSize;

                [FieldOffset(7)]
                public uint Static;

                [FieldOffset(8)]
                public uint PackStruct;

                [FieldOffset(12)]
                public uint MaxTypeAlign;

                [FieldOffset(16)]
                public uint PICLevel;

                [FieldOffset(16)]
                public uint PIELevel;

                [FieldOffset(16)]
                public uint GNUInline;

                [FieldOffset(16)]
                public uint NoInlineDefine;

                [FieldOffset(16)]
                public uint Deprecated;

                [FieldOffset(16)]
                public uint FastMath;

                [FieldOffset(17)]
                public uint FiniteMathOnly;

                [FieldOffset(17)]
                public uint ObjCGCBitmapPrint;

                [FieldOffset(17)]
                public uint AccessControl;

                [FieldOffset(17)]
                public uint CharIsSigned;

                [FieldOffset(17)]
                public uint ShortWChar;

                [FieldOffset(17)]
                public uint ShortEnums;

                [FieldOffset(17)]
                public uint OpenCL;

                [FieldOffset(20)]
                public uint OpenCLVersion;

                [FieldOffset(24)]
                public uint NativeHalfType;

                [FieldOffset(24)]
                public uint HalfArgsAndReturns;

                [FieldOffset(24)]
                public uint CUDA;

                [FieldOffset(24)]
                public uint OpenMP;

                [FieldOffset(24)]
                public uint CUDAIsDevice;

                [FieldOffset(24)]
                public uint AssumeSaneOperatorNew;

                [FieldOffset(24)]
                public uint SizedDeallocation;

                [FieldOffset(24)]
                public uint DefineSizedDeallocation;

                [FieldOffset(25)]
                public uint ElideConstructors;

                [FieldOffset(25)]
                public uint DumpRecordLayouts;

                [FieldOffset(25)]
                public uint DumpRecordLayoutsSimple;

                [FieldOffset(25)]
                public uint DumpVTableLayouts;

                [FieldOffset(25)]
                public uint NoConstantCFStrings;

                [FieldOffset(25)]
                public uint InlineVisibilityHidden;

                [FieldOffset(25)]
                public uint ParseUnknownAnytype;

                [FieldOffset(25)]
                public uint DebuggerSupport;

                [FieldOffset(26)]
                public uint DebuggerCastResultToId;

                [FieldOffset(26)]
                public uint DebuggerObjCLiteral;

                [FieldOffset(26)]
                public uint SpellChecking;

                [FieldOffset(26)]
                public uint SinglePrecisionConstants;

                [FieldOffset(26)]
                public uint FastRelaxedMath;

                [FieldOffset(26)]
                public uint DefaultFPContract;

                [FieldOffset(26)]
                public uint NoBitFieldTypeAlign;

                [FieldOffset(26)]
                public uint HexagonQdsp6Compat;

                [FieldOffset(27)]
                public uint ObjCAutoRefCount;

                [FieldOffset(27)]
                public uint ObjCARCWeak;

                [FieldOffset(27)]
                public uint ObjCSubscriptingLegacyRuntime;

                [FieldOffset(27)]
                public uint FakeAddressSpaceMap;

                [FieldOffset(27)]
                public uint MRTD;

                [FieldOffset(27)]
                public uint DelayedTemplateParsing;

                [FieldOffset(27)]
                public uint BlocksRuntimeOptional;

                [FieldOffset(28)]
                public uint ArrowDepth;

                [FieldOffset(32)]
                public uint InstantiationDepth;

                [FieldOffset(36)]
                public uint ConstexprCallDepth;

                [FieldOffset(40)]
                public uint ConstexprStepLimit;

                [FieldOffset(44)]
                public uint BracketDepth;

                [FieldOffset(48)]
                public uint NumLargeByValueCopy;

                [FieldOffset(52)]
                public uint MSCompatibilityVersion;

                [FieldOffset(56)]
                public uint VtorDispMode;

                [FieldOffset(56)]
                public uint ApplePragmaPack;

                [FieldOffset(56)]
                public uint RetainCommentsFromSystemHeaders;

                [FieldOffset(56)]
                public uint SanitizeAddressFieldPadding;

                [FieldOffset(56)]
                public uint MSPointerToMemberRepresentationMethod;

                [FieldOffset(57)]
                public uint AddressSpaceMapMangling;

                [FieldOffset(57)]
                public uint GC;

                [FieldOffset(57)]
                public uint ValueVisibilityMode;

                [FieldOffset(57)]
                public uint TypeVisibilityMode;

                [FieldOffset(58)]
                public uint StackProtector;

                [FieldOffset(58)]
                public uint SignedOverflowBehavior;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang15LangOptionsBaseC2ERKS0_")]
                internal static extern void cctor_0(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, LangOptionsBase> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, LangOptionsBase>();

            private readonly bool __ownsNativeInstance;

            public static LangOptionsBase __CreateInstance(global::System.IntPtr native)
            {
                return new LangOptionsBase((LangOptionsBase.Internal*) native);
            }

            public static LangOptionsBase __CreateInstance(LangOptionsBase.Internal native)
            {
                return new LangOptionsBase(native);
            }

            private static LangOptionsBase.Internal* __CopyValue(LangOptionsBase.Internal native)
            {
                var ret = (LangOptionsBase.Internal*) Marshal.AllocHGlobal(60);
                *ret = native;
                return ret;
            }

            private LangOptionsBase(LangOptionsBase.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected LangOptionsBase(LangOptionsBase.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public LangOptionsBase()
            {
                __Instance = Marshal.AllocHGlobal(60);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                clang.LangOptionsBase __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public uint C99
            {
                get
                {
                    return ((Internal*) __Instance)->C99;
                }

                set
                {
                    ((Internal*) __Instance)->C99 = value;
                }
            }

            public uint C11
            {
                get
                {
                    return ((Internal*) __Instance)->C11;
                }

                set
                {
                    ((Internal*) __Instance)->C11 = value;
                }
            }

            public uint MSVCCompat
            {
                get
                {
                    return ((Internal*) __Instance)->MSVCCompat;
                }

                set
                {
                    ((Internal*) __Instance)->MSVCCompat = value;
                }
            }

            public uint MicrosoftExt
            {
                get
                {
                    return ((Internal*) __Instance)->MicrosoftExt;
                }

                set
                {
                    ((Internal*) __Instance)->MicrosoftExt = value;
                }
            }

            public uint AsmBlocks
            {
                get
                {
                    return ((Internal*) __Instance)->AsmBlocks;
                }

                set
                {
                    ((Internal*) __Instance)->AsmBlocks = value;
                }
            }

            public uint Borland
            {
                get
                {
                    return ((Internal*) __Instance)->Borland;
                }

                set
                {
                    ((Internal*) __Instance)->Borland = value;
                }
            }

            public uint CPlusPlus
            {
                get
                {
                    return ((Internal*) __Instance)->CPlusPlus;
                }

                set
                {
                    ((Internal*) __Instance)->CPlusPlus = value;
                }
            }

            public uint CPlusPlus11
            {
                get
                {
                    return ((Internal*) __Instance)->CPlusPlus11;
                }

                set
                {
                    ((Internal*) __Instance)->CPlusPlus11 = value;
                }
            }

            public uint CPlusPlus14
            {
                get
                {
                    return ((Internal*) __Instance)->CPlusPlus14;
                }

                set
                {
                    ((Internal*) __Instance)->CPlusPlus14 = value;
                }
            }

            public uint CPlusPlus1z
            {
                get
                {
                    return ((Internal*) __Instance)->CPlusPlus1z;
                }

                set
                {
                    ((Internal*) __Instance)->CPlusPlus1z = value;
                }
            }

            public uint ObjC1
            {
                get
                {
                    return ((Internal*) __Instance)->ObjC1;
                }

                set
                {
                    ((Internal*) __Instance)->ObjC1 = value;
                }
            }

            public uint ObjC2
            {
                get
                {
                    return ((Internal*) __Instance)->ObjC2;
                }

                set
                {
                    ((Internal*) __Instance)->ObjC2 = value;
                }
            }

            public uint ObjCDefaultSynthProperties
            {
                get
                {
                    return ((Internal*) __Instance)->ObjCDefaultSynthProperties;
                }

                set
                {
                    ((Internal*) __Instance)->ObjCDefaultSynthProperties = value;
                }
            }

            public uint EncodeExtendedBlockSig
            {
                get
                {
                    return ((Internal*) __Instance)->EncodeExtendedBlockSig;
                }

                set
                {
                    ((Internal*) __Instance)->EncodeExtendedBlockSig = value;
                }
            }

            public uint ObjCInferRelatedResultType
            {
                get
                {
                    return ((Internal*) __Instance)->ObjCInferRelatedResultType;
                }

                set
                {
                    ((Internal*) __Instance)->ObjCInferRelatedResultType = value;
                }
            }

            public uint Trigraphs
            {
                get
                {
                    return ((Internal*) __Instance)->Trigraphs;
                }

                set
                {
                    ((Internal*) __Instance)->Trigraphs = value;
                }
            }

            public uint LineComment
            {
                get
                {
                    return ((Internal*) __Instance)->LineComment;
                }

                set
                {
                    ((Internal*) __Instance)->LineComment = value;
                }
            }

            public uint Bool
            {
                get
                {
                    return ((Internal*) __Instance)->Bool;
                }

                set
                {
                    ((Internal*) __Instance)->Bool = value;
                }
            }

            public uint Half
            {
                get
                {
                    return ((Internal*) __Instance)->Half;
                }

                set
                {
                    ((Internal*) __Instance)->Half = value;
                }
            }

            public uint WChar
            {
                get
                {
                    return ((Internal*) __Instance)->WChar;
                }

                set
                {
                    ((Internal*) __Instance)->WChar = value;
                }
            }

            public uint DollarIdents
            {
                get
                {
                    return ((Internal*) __Instance)->DollarIdents;
                }

                set
                {
                    ((Internal*) __Instance)->DollarIdents = value;
                }
            }

            public uint AsmPreprocessor
            {
                get
                {
                    return ((Internal*) __Instance)->AsmPreprocessor;
                }

                set
                {
                    ((Internal*) __Instance)->AsmPreprocessor = value;
                }
            }

            public uint GNUMode
            {
                get
                {
                    return ((Internal*) __Instance)->GNUMode;
                }

                set
                {
                    ((Internal*) __Instance)->GNUMode = value;
                }
            }

            public uint GNUKeywords
            {
                get
                {
                    return ((Internal*) __Instance)->GNUKeywords;
                }

                set
                {
                    ((Internal*) __Instance)->GNUKeywords = value;
                }
            }

            public uint ImplicitInt
            {
                get
                {
                    return ((Internal*) __Instance)->ImplicitInt;
                }

                set
                {
                    ((Internal*) __Instance)->ImplicitInt = value;
                }
            }

            public uint Digraphs
            {
                get
                {
                    return ((Internal*) __Instance)->Digraphs;
                }

                set
                {
                    ((Internal*) __Instance)->Digraphs = value;
                }
            }

            public uint HexFloats
            {
                get
                {
                    return ((Internal*) __Instance)->HexFloats;
                }

                set
                {
                    ((Internal*) __Instance)->HexFloats = value;
                }
            }

            public uint CXXOperatorNames
            {
                get
                {
                    return ((Internal*) __Instance)->CXXOperatorNames;
                }

                set
                {
                    ((Internal*) __Instance)->CXXOperatorNames = value;
                }
            }

            public uint AppleKext
            {
                get
                {
                    return ((Internal*) __Instance)->AppleKext;
                }

                set
                {
                    ((Internal*) __Instance)->AppleKext = value;
                }
            }

            public uint PascalStrings
            {
                get
                {
                    return ((Internal*) __Instance)->PascalStrings;
                }

                set
                {
                    ((Internal*) __Instance)->PascalStrings = value;
                }
            }

            public uint WritableStrings
            {
                get
                {
                    return ((Internal*) __Instance)->WritableStrings;
                }

                set
                {
                    ((Internal*) __Instance)->WritableStrings = value;
                }
            }

            public uint ConstStrings
            {
                get
                {
                    return ((Internal*) __Instance)->ConstStrings;
                }

                set
                {
                    ((Internal*) __Instance)->ConstStrings = value;
                }
            }

            public uint LaxVectorConversions
            {
                get
                {
                    return ((Internal*) __Instance)->LaxVectorConversions;
                }

                set
                {
                    ((Internal*) __Instance)->LaxVectorConversions = value;
                }
            }

            public uint AltiVec
            {
                get
                {
                    return ((Internal*) __Instance)->AltiVec;
                }

                set
                {
                    ((Internal*) __Instance)->AltiVec = value;
                }
            }

            public uint Exceptions
            {
                get
                {
                    return ((Internal*) __Instance)->Exceptions;
                }

                set
                {
                    ((Internal*) __Instance)->Exceptions = value;
                }
            }

            public uint ObjCExceptions
            {
                get
                {
                    return ((Internal*) __Instance)->ObjCExceptions;
                }

                set
                {
                    ((Internal*) __Instance)->ObjCExceptions = value;
                }
            }

            public uint CXXExceptions
            {
                get
                {
                    return ((Internal*) __Instance)->CXXExceptions;
                }

                set
                {
                    ((Internal*) __Instance)->CXXExceptions = value;
                }
            }

            public uint SjLjExceptions
            {
                get
                {
                    return ((Internal*) __Instance)->SjLjExceptions;
                }

                set
                {
                    ((Internal*) __Instance)->SjLjExceptions = value;
                }
            }

            public uint TraditionalCPP
            {
                get
                {
                    return ((Internal*) __Instance)->TraditionalCPP;
                }

                set
                {
                    ((Internal*) __Instance)->TraditionalCPP = value;
                }
            }

            public uint RTTI
            {
                get
                {
                    return ((Internal*) __Instance)->RTTI;
                }

                set
                {
                    ((Internal*) __Instance)->RTTI = value;
                }
            }

            public uint RTTIData
            {
                get
                {
                    return ((Internal*) __Instance)->RTTIData;
                }

                set
                {
                    ((Internal*) __Instance)->RTTIData = value;
                }
            }

            public uint MSBitfields
            {
                get
                {
                    return ((Internal*) __Instance)->MSBitfields;
                }

                set
                {
                    ((Internal*) __Instance)->MSBitfields = value;
                }
            }

            public uint Freestanding
            {
                get
                {
                    return ((Internal*) __Instance)->Freestanding;
                }

                set
                {
                    ((Internal*) __Instance)->Freestanding = value;
                }
            }

            public uint NoBuiltin
            {
                get
                {
                    return ((Internal*) __Instance)->NoBuiltin;
                }

                set
                {
                    ((Internal*) __Instance)->NoBuiltin = value;
                }
            }

            public uint NoMathBuiltin
            {
                get
                {
                    return ((Internal*) __Instance)->NoMathBuiltin;
                }

                set
                {
                    ((Internal*) __Instance)->NoMathBuiltin = value;
                }
            }

            public uint GNUAsm
            {
                get
                {
                    return ((Internal*) __Instance)->GNUAsm;
                }

                set
                {
                    ((Internal*) __Instance)->GNUAsm = value;
                }
            }

            public uint ThreadsafeStatics
            {
                get
                {
                    return ((Internal*) __Instance)->ThreadsafeStatics;
                }

                set
                {
                    ((Internal*) __Instance)->ThreadsafeStatics = value;
                }
            }

            public uint POSIXThreads
            {
                get
                {
                    return ((Internal*) __Instance)->POSIXThreads;
                }

                set
                {
                    ((Internal*) __Instance)->POSIXThreads = value;
                }
            }

            public uint Blocks
            {
                get
                {
                    return ((Internal*) __Instance)->Blocks;
                }

                set
                {
                    ((Internal*) __Instance)->Blocks = value;
                }
            }

            public uint EmitAllDecls
            {
                get
                {
                    return ((Internal*) __Instance)->EmitAllDecls;
                }

                set
                {
                    ((Internal*) __Instance)->EmitAllDecls = value;
                }
            }

            public uint MathErrno
            {
                get
                {
                    return ((Internal*) __Instance)->MathErrno;
                }

                set
                {
                    ((Internal*) __Instance)->MathErrno = value;
                }
            }

            public uint HeinousExtensions
            {
                get
                {
                    return ((Internal*) __Instance)->HeinousExtensions;
                }

                set
                {
                    ((Internal*) __Instance)->HeinousExtensions = value;
                }
            }

            public uint Modules
            {
                get
                {
                    return ((Internal*) __Instance)->Modules;
                }

                set
                {
                    ((Internal*) __Instance)->Modules = value;
                }
            }

            public uint ModulesDeclUse
            {
                get
                {
                    return ((Internal*) __Instance)->ModulesDeclUse;
                }

                set
                {
                    ((Internal*) __Instance)->ModulesDeclUse = value;
                }
            }

            public uint ModulesSearchAll
            {
                get
                {
                    return ((Internal*) __Instance)->ModulesSearchAll;
                }

                set
                {
                    ((Internal*) __Instance)->ModulesSearchAll = value;
                }
            }

            public uint ModulesStrictDeclUse
            {
                get
                {
                    return ((Internal*) __Instance)->ModulesStrictDeclUse;
                }

                set
                {
                    ((Internal*) __Instance)->ModulesStrictDeclUse = value;
                }
            }

            public uint ModulesErrorRecovery
            {
                get
                {
                    return ((Internal*) __Instance)->ModulesErrorRecovery;
                }

                set
                {
                    ((Internal*) __Instance)->ModulesErrorRecovery = value;
                }
            }

            public uint ModulesImplicitMaps
            {
                get
                {
                    return ((Internal*) __Instance)->ModulesImplicitMaps;
                }

                set
                {
                    ((Internal*) __Instance)->ModulesImplicitMaps = value;
                }
            }

            public uint ImplicitModules
            {
                get
                {
                    return ((Internal*) __Instance)->ImplicitModules;
                }

                set
                {
                    ((Internal*) __Instance)->ImplicitModules = value;
                }
            }

            public uint Optimize
            {
                get
                {
                    return ((Internal*) __Instance)->Optimize;
                }

                set
                {
                    ((Internal*) __Instance)->Optimize = value;
                }
            }

            public uint OptimizeSize
            {
                get
                {
                    return ((Internal*) __Instance)->OptimizeSize;
                }

                set
                {
                    ((Internal*) __Instance)->OptimizeSize = value;
                }
            }

            public uint Static
            {
                get
                {
                    return ((Internal*) __Instance)->Static;
                }

                set
                {
                    ((Internal*) __Instance)->Static = value;
                }
            }

            public uint PackStruct
            {
                get
                {
                    return ((Internal*) __Instance)->PackStruct;
                }

                set
                {
                    ((Internal*) __Instance)->PackStruct = value;
                }
            }

            public uint MaxTypeAlign
            {
                get
                {
                    return ((Internal*) __Instance)->MaxTypeAlign;
                }

                set
                {
                    ((Internal*) __Instance)->MaxTypeAlign = value;
                }
            }

            public uint PICLevel
            {
                get
                {
                    return ((Internal*) __Instance)->PICLevel;
                }

                set
                {
                    ((Internal*) __Instance)->PICLevel = value;
                }
            }

            public uint PIELevel
            {
                get
                {
                    return ((Internal*) __Instance)->PIELevel;
                }

                set
                {
                    ((Internal*) __Instance)->PIELevel = value;
                }
            }

            public uint GNUInline
            {
                get
                {
                    return ((Internal*) __Instance)->GNUInline;
                }

                set
                {
                    ((Internal*) __Instance)->GNUInline = value;
                }
            }

            public uint NoInlineDefine
            {
                get
                {
                    return ((Internal*) __Instance)->NoInlineDefine;
                }

                set
                {
                    ((Internal*) __Instance)->NoInlineDefine = value;
                }
            }

            public uint Deprecated
            {
                get
                {
                    return ((Internal*) __Instance)->Deprecated;
                }

                set
                {
                    ((Internal*) __Instance)->Deprecated = value;
                }
            }

            public uint FastMath
            {
                get
                {
                    return ((Internal*) __Instance)->FastMath;
                }

                set
                {
                    ((Internal*) __Instance)->FastMath = value;
                }
            }

            public uint FiniteMathOnly
            {
                get
                {
                    return ((Internal*) __Instance)->FiniteMathOnly;
                }

                set
                {
                    ((Internal*) __Instance)->FiniteMathOnly = value;
                }
            }

            public uint ObjCGCBitmapPrint
            {
                get
                {
                    return ((Internal*) __Instance)->ObjCGCBitmapPrint;
                }

                set
                {
                    ((Internal*) __Instance)->ObjCGCBitmapPrint = value;
                }
            }

            public uint AccessControl
            {
                get
                {
                    return ((Internal*) __Instance)->AccessControl;
                }

                set
                {
                    ((Internal*) __Instance)->AccessControl = value;
                }
            }

            public uint CharIsSigned
            {
                get
                {
                    return ((Internal*) __Instance)->CharIsSigned;
                }

                set
                {
                    ((Internal*) __Instance)->CharIsSigned = value;
                }
            }

            public uint ShortWChar
            {
                get
                {
                    return ((Internal*) __Instance)->ShortWChar;
                }

                set
                {
                    ((Internal*) __Instance)->ShortWChar = value;
                }
            }

            public uint ShortEnums
            {
                get
                {
                    return ((Internal*) __Instance)->ShortEnums;
                }

                set
                {
                    ((Internal*) __Instance)->ShortEnums = value;
                }
            }

            public uint OpenCL
            {
                get
                {
                    return ((Internal*) __Instance)->OpenCL;
                }

                set
                {
                    ((Internal*) __Instance)->OpenCL = value;
                }
            }

            public uint OpenCLVersion
            {
                get
                {
                    return ((Internal*) __Instance)->OpenCLVersion;
                }

                set
                {
                    ((Internal*) __Instance)->OpenCLVersion = value;
                }
            }

            public uint NativeHalfType
            {
                get
                {
                    return ((Internal*) __Instance)->NativeHalfType;
                }

                set
                {
                    ((Internal*) __Instance)->NativeHalfType = value;
                }
            }

            public uint HalfArgsAndReturns
            {
                get
                {
                    return ((Internal*) __Instance)->HalfArgsAndReturns;
                }

                set
                {
                    ((Internal*) __Instance)->HalfArgsAndReturns = value;
                }
            }

            public uint CUDA
            {
                get
                {
                    return ((Internal*) __Instance)->CUDA;
                }

                set
                {
                    ((Internal*) __Instance)->CUDA = value;
                }
            }

            public uint OpenMP
            {
                get
                {
                    return ((Internal*) __Instance)->OpenMP;
                }

                set
                {
                    ((Internal*) __Instance)->OpenMP = value;
                }
            }

            public uint CUDAIsDevice
            {
                get
                {
                    return ((Internal*) __Instance)->CUDAIsDevice;
                }

                set
                {
                    ((Internal*) __Instance)->CUDAIsDevice = value;
                }
            }

            public uint AssumeSaneOperatorNew
            {
                get
                {
                    return ((Internal*) __Instance)->AssumeSaneOperatorNew;
                }

                set
                {
                    ((Internal*) __Instance)->AssumeSaneOperatorNew = value;
                }
            }

            public uint SizedDeallocation
            {
                get
                {
                    return ((Internal*) __Instance)->SizedDeallocation;
                }

                set
                {
                    ((Internal*) __Instance)->SizedDeallocation = value;
                }
            }

            public uint DefineSizedDeallocation
            {
                get
                {
                    return ((Internal*) __Instance)->DefineSizedDeallocation;
                }

                set
                {
                    ((Internal*) __Instance)->DefineSizedDeallocation = value;
                }
            }

            public uint ElideConstructors
            {
                get
                {
                    return ((Internal*) __Instance)->ElideConstructors;
                }

                set
                {
                    ((Internal*) __Instance)->ElideConstructors = value;
                }
            }

            public uint DumpRecordLayouts
            {
                get
                {
                    return ((Internal*) __Instance)->DumpRecordLayouts;
                }

                set
                {
                    ((Internal*) __Instance)->DumpRecordLayouts = value;
                }
            }

            public uint DumpRecordLayoutsSimple
            {
                get
                {
                    return ((Internal*) __Instance)->DumpRecordLayoutsSimple;
                }

                set
                {
                    ((Internal*) __Instance)->DumpRecordLayoutsSimple = value;
                }
            }

            public uint DumpVTableLayouts
            {
                get
                {
                    return ((Internal*) __Instance)->DumpVTableLayouts;
                }

                set
                {
                    ((Internal*) __Instance)->DumpVTableLayouts = value;
                }
            }

            public uint NoConstantCFStrings
            {
                get
                {
                    return ((Internal*) __Instance)->NoConstantCFStrings;
                }

                set
                {
                    ((Internal*) __Instance)->NoConstantCFStrings = value;
                }
            }

            public uint InlineVisibilityHidden
            {
                get
                {
                    return ((Internal*) __Instance)->InlineVisibilityHidden;
                }

                set
                {
                    ((Internal*) __Instance)->InlineVisibilityHidden = value;
                }
            }

            public uint ParseUnknownAnytype
            {
                get
                {
                    return ((Internal*) __Instance)->ParseUnknownAnytype;
                }

                set
                {
                    ((Internal*) __Instance)->ParseUnknownAnytype = value;
                }
            }

            public uint DebuggerSupport
            {
                get
                {
                    return ((Internal*) __Instance)->DebuggerSupport;
                }

                set
                {
                    ((Internal*) __Instance)->DebuggerSupport = value;
                }
            }

            public uint DebuggerCastResultToId
            {
                get
                {
                    return ((Internal*) __Instance)->DebuggerCastResultToId;
                }

                set
                {
                    ((Internal*) __Instance)->DebuggerCastResultToId = value;
                }
            }

            public uint DebuggerObjCLiteral
            {
                get
                {
                    return ((Internal*) __Instance)->DebuggerObjCLiteral;
                }

                set
                {
                    ((Internal*) __Instance)->DebuggerObjCLiteral = value;
                }
            }

            public uint SpellChecking
            {
                get
                {
                    return ((Internal*) __Instance)->SpellChecking;
                }

                set
                {
                    ((Internal*) __Instance)->SpellChecking = value;
                }
            }

            public uint SinglePrecisionConstants
            {
                get
                {
                    return ((Internal*) __Instance)->SinglePrecisionConstants;
                }

                set
                {
                    ((Internal*) __Instance)->SinglePrecisionConstants = value;
                }
            }

            public uint FastRelaxedMath
            {
                get
                {
                    return ((Internal*) __Instance)->FastRelaxedMath;
                }

                set
                {
                    ((Internal*) __Instance)->FastRelaxedMath = value;
                }
            }

            public uint DefaultFPContract
            {
                get
                {
                    return ((Internal*) __Instance)->DefaultFPContract;
                }

                set
                {
                    ((Internal*) __Instance)->DefaultFPContract = value;
                }
            }

            public uint NoBitFieldTypeAlign
            {
                get
                {
                    return ((Internal*) __Instance)->NoBitFieldTypeAlign;
                }

                set
                {
                    ((Internal*) __Instance)->NoBitFieldTypeAlign = value;
                }
            }

            public uint HexagonQdsp6Compat
            {
                get
                {
                    return ((Internal*) __Instance)->HexagonQdsp6Compat;
                }

                set
                {
                    ((Internal*) __Instance)->HexagonQdsp6Compat = value;
                }
            }

            public uint ObjCAutoRefCount
            {
                get
                {
                    return ((Internal*) __Instance)->ObjCAutoRefCount;
                }

                set
                {
                    ((Internal*) __Instance)->ObjCAutoRefCount = value;
                }
            }

            public uint ObjCARCWeak
            {
                get
                {
                    return ((Internal*) __Instance)->ObjCARCWeak;
                }

                set
                {
                    ((Internal*) __Instance)->ObjCARCWeak = value;
                }
            }

            public uint ObjCSubscriptingLegacyRuntime
            {
                get
                {
                    return ((Internal*) __Instance)->ObjCSubscriptingLegacyRuntime;
                }

                set
                {
                    ((Internal*) __Instance)->ObjCSubscriptingLegacyRuntime = value;
                }
            }

            public uint FakeAddressSpaceMap
            {
                get
                {
                    return ((Internal*) __Instance)->FakeAddressSpaceMap;
                }

                set
                {
                    ((Internal*) __Instance)->FakeAddressSpaceMap = value;
                }
            }

            public uint MRTD
            {
                get
                {
                    return ((Internal*) __Instance)->MRTD;
                }

                set
                {
                    ((Internal*) __Instance)->MRTD = value;
                }
            }

            public uint DelayedTemplateParsing
            {
                get
                {
                    return ((Internal*) __Instance)->DelayedTemplateParsing;
                }

                set
                {
                    ((Internal*) __Instance)->DelayedTemplateParsing = value;
                }
            }

            public uint BlocksRuntimeOptional
            {
                get
                {
                    return ((Internal*) __Instance)->BlocksRuntimeOptional;
                }

                set
                {
                    ((Internal*) __Instance)->BlocksRuntimeOptional = value;
                }
            }

            public uint ArrowDepth
            {
                get
                {
                    return ((Internal*) __Instance)->ArrowDepth;
                }

                set
                {
                    ((Internal*) __Instance)->ArrowDepth = value;
                }
            }

            public uint InstantiationDepth
            {
                get
                {
                    return ((Internal*) __Instance)->InstantiationDepth;
                }

                set
                {
                    ((Internal*) __Instance)->InstantiationDepth = value;
                }
            }

            public uint ConstexprCallDepth
            {
                get
                {
                    return ((Internal*) __Instance)->ConstexprCallDepth;
                }

                set
                {
                    ((Internal*) __Instance)->ConstexprCallDepth = value;
                }
            }

            public uint ConstexprStepLimit
            {
                get
                {
                    return ((Internal*) __Instance)->ConstexprStepLimit;
                }

                set
                {
                    ((Internal*) __Instance)->ConstexprStepLimit = value;
                }
            }

            public uint BracketDepth
            {
                get
                {
                    return ((Internal*) __Instance)->BracketDepth;
                }

                set
                {
                    ((Internal*) __Instance)->BracketDepth = value;
                }
            }

            public uint NumLargeByValueCopy
            {
                get
                {
                    return ((Internal*) __Instance)->NumLargeByValueCopy;
                }

                set
                {
                    ((Internal*) __Instance)->NumLargeByValueCopy = value;
                }
            }

            public uint MSCompatibilityVersion
            {
                get
                {
                    return ((Internal*) __Instance)->MSCompatibilityVersion;
                }

                set
                {
                    ((Internal*) __Instance)->MSCompatibilityVersion = value;
                }
            }

            public uint VtorDispMode
            {
                get
                {
                    return ((Internal*) __Instance)->VtorDispMode;
                }

                set
                {
                    ((Internal*) __Instance)->VtorDispMode = value;
                }
            }

            public uint ApplePragmaPack
            {
                get
                {
                    return ((Internal*) __Instance)->ApplePragmaPack;
                }

                set
                {
                    ((Internal*) __Instance)->ApplePragmaPack = value;
                }
            }

            public uint RetainCommentsFromSystemHeaders
            {
                get
                {
                    return ((Internal*) __Instance)->RetainCommentsFromSystemHeaders;
                }

                set
                {
                    ((Internal*) __Instance)->RetainCommentsFromSystemHeaders = value;
                }
            }

            public uint SanitizeAddressFieldPadding
            {
                get
                {
                    return ((Internal*) __Instance)->SanitizeAddressFieldPadding;
                }

                set
                {
                    ((Internal*) __Instance)->SanitizeAddressFieldPadding = value;
                }
            }

            protected uint MSPointerToMemberRepresentationMethod
            {
                get
                {
                    return ((Internal*) __Instance)->MSPointerToMemberRepresentationMethod;
                }

                set
                {
                    ((Internal*) __Instance)->MSPointerToMemberRepresentationMethod = value;
                }
            }

            protected uint AddressSpaceMapMangling
            {
                get
                {
                    return ((Internal*) __Instance)->AddressSpaceMapMangling;
                }

                set
                {
                    ((Internal*) __Instance)->AddressSpaceMapMangling = value;
                }
            }

            protected uint GC
            {
                get
                {
                    return ((Internal*) __Instance)->GC;
                }

                set
                {
                    ((Internal*) __Instance)->GC = value;
                }
            }

            protected uint ValueVisibilityMode
            {
                get
                {
                    return ((Internal*) __Instance)->ValueVisibilityMode;
                }

                set
                {
                    ((Internal*) __Instance)->ValueVisibilityMode = value;
                }
            }

            protected uint TypeVisibilityMode
            {
                get
                {
                    return ((Internal*) __Instance)->TypeVisibilityMode;
                }

                set
                {
                    ((Internal*) __Instance)->TypeVisibilityMode = value;
                }
            }

            protected uint StackProtector
            {
                get
                {
                    return ((Internal*) __Instance)->StackProtector;
                }

                set
                {
                    ((Internal*) __Instance)->StackProtector = value;
                }
            }

            protected uint SignedOverflowBehavior
            {
                get
                {
                    return ((Internal*) __Instance)->SignedOverflowBehavior;
                }

                set
                {
                    ((Internal*) __Instance)->SignedOverflowBehavior = value;
                }
            }
        }

        /// <summary>
        /// <para>Keeps track of the various options that can be enabled, which
        /// controls the dialect of C or C++ that is accepted.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Keeps track of the various options that can be</para>
        /// <para>/// enabled, which controls the dialect of C or C++ that is
        /// accepted.</para>
        /// </remarks>
        public unsafe partial class LangOptions : clang.LangOptionsBase, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 264)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public uint C99;

                [FieldOffset(0)]
                public uint C11;

                [FieldOffset(0)]
                public uint MSVCCompat;

                [FieldOffset(0)]
                public uint MicrosoftExt;

                [FieldOffset(0)]
                public uint AsmBlocks;

                [FieldOffset(0)]
                public uint Borland;

                [FieldOffset(0)]
                public uint CPlusPlus;

                [FieldOffset(0)]
                public uint CPlusPlus11;

                [FieldOffset(1)]
                public uint CPlusPlus14;

                [FieldOffset(1)]
                public uint CPlusPlus1z;

                [FieldOffset(1)]
                public uint ObjC1;

                [FieldOffset(1)]
                public uint ObjC2;

                [FieldOffset(1)]
                public uint ObjCDefaultSynthProperties;

                [FieldOffset(1)]
                public uint EncodeExtendedBlockSig;

                [FieldOffset(1)]
                public uint ObjCInferRelatedResultType;

                [FieldOffset(1)]
                public uint Trigraphs;

                [FieldOffset(2)]
                public uint LineComment;

                [FieldOffset(2)]
                public uint Bool;

                [FieldOffset(2)]
                public uint Half;

                [FieldOffset(2)]
                public uint WChar;

                [FieldOffset(2)]
                public uint DollarIdents;

                [FieldOffset(2)]
                public uint AsmPreprocessor;

                [FieldOffset(2)]
                public uint GNUMode;

                [FieldOffset(2)]
                public uint GNUKeywords;

                [FieldOffset(3)]
                public uint ImplicitInt;

                [FieldOffset(3)]
                public uint Digraphs;

                [FieldOffset(3)]
                public uint HexFloats;

                [FieldOffset(3)]
                public uint CXXOperatorNames;

                [FieldOffset(3)]
                public uint AppleKext;

                [FieldOffset(3)]
                public uint PascalStrings;

                [FieldOffset(3)]
                public uint WritableStrings;

                [FieldOffset(3)]
                public uint ConstStrings;

                [FieldOffset(4)]
                public uint LaxVectorConversions;

                [FieldOffset(4)]
                public uint AltiVec;

                [FieldOffset(4)]
                public uint Exceptions;

                [FieldOffset(4)]
                public uint ObjCExceptions;

                [FieldOffset(4)]
                public uint CXXExceptions;

                [FieldOffset(4)]
                public uint SjLjExceptions;

                [FieldOffset(4)]
                public uint TraditionalCPP;

                [FieldOffset(4)]
                public uint RTTI;

                [FieldOffset(5)]
                public uint RTTIData;

                [FieldOffset(5)]
                public uint MSBitfields;

                [FieldOffset(5)]
                public uint Freestanding;

                [FieldOffset(5)]
                public uint NoBuiltin;

                [FieldOffset(5)]
                public uint NoMathBuiltin;

                [FieldOffset(5)]
                public uint GNUAsm;

                [FieldOffset(5)]
                public uint ThreadsafeStatics;

                [FieldOffset(5)]
                public uint POSIXThreads;

                [FieldOffset(6)]
                public uint Blocks;

                [FieldOffset(6)]
                public uint EmitAllDecls;

                [FieldOffset(6)]
                public uint MathErrno;

                [FieldOffset(6)]
                public uint HeinousExtensions;

                [FieldOffset(6)]
                public uint Modules;

                [FieldOffset(6)]
                public uint ModulesDeclUse;

                [FieldOffset(6)]
                public uint ModulesSearchAll;

                [FieldOffset(6)]
                public uint ModulesStrictDeclUse;

                [FieldOffset(7)]
                public uint ModulesErrorRecovery;

                [FieldOffset(7)]
                public uint ModulesImplicitMaps;

                [FieldOffset(7)]
                public uint ImplicitModules;

                [FieldOffset(7)]
                public uint Optimize;

                [FieldOffset(7)]
                public uint OptimizeSize;

                [FieldOffset(7)]
                public uint Static;

                [FieldOffset(8)]
                public uint PackStruct;

                [FieldOffset(12)]
                public uint MaxTypeAlign;

                [FieldOffset(16)]
                public uint PICLevel;

                [FieldOffset(16)]
                public uint PIELevel;

                [FieldOffset(16)]
                public uint GNUInline;

                [FieldOffset(16)]
                public uint NoInlineDefine;

                [FieldOffset(16)]
                public uint Deprecated;

                [FieldOffset(16)]
                public uint FastMath;

                [FieldOffset(17)]
                public uint FiniteMathOnly;

                [FieldOffset(17)]
                public uint ObjCGCBitmapPrint;

                [FieldOffset(17)]
                public uint AccessControl;

                [FieldOffset(17)]
                public uint CharIsSigned;

                [FieldOffset(17)]
                public uint ShortWChar;

                [FieldOffset(17)]
                public uint ShortEnums;

                [FieldOffset(17)]
                public uint OpenCL;

                [FieldOffset(20)]
                public uint OpenCLVersion;

                [FieldOffset(24)]
                public uint NativeHalfType;

                [FieldOffset(24)]
                public uint HalfArgsAndReturns;

                [FieldOffset(24)]
                public uint CUDA;

                [FieldOffset(24)]
                public uint OpenMP;

                [FieldOffset(24)]
                public uint CUDAIsDevice;

                [FieldOffset(24)]
                public uint AssumeSaneOperatorNew;

                [FieldOffset(24)]
                public uint SizedDeallocation;

                [FieldOffset(24)]
                public uint DefineSizedDeallocation;

                [FieldOffset(25)]
                public uint ElideConstructors;

                [FieldOffset(25)]
                public uint DumpRecordLayouts;

                [FieldOffset(25)]
                public uint DumpRecordLayoutsSimple;

                [FieldOffset(25)]
                public uint DumpVTableLayouts;

                [FieldOffset(25)]
                public uint NoConstantCFStrings;

                [FieldOffset(25)]
                public uint InlineVisibilityHidden;

                [FieldOffset(25)]
                public uint ParseUnknownAnytype;

                [FieldOffset(25)]
                public uint DebuggerSupport;

                [FieldOffset(26)]
                public uint DebuggerCastResultToId;

                [FieldOffset(26)]
                public uint DebuggerObjCLiteral;

                [FieldOffset(26)]
                public uint SpellChecking;

                [FieldOffset(26)]
                public uint SinglePrecisionConstants;

                [FieldOffset(26)]
                public uint FastRelaxedMath;

                [FieldOffset(26)]
                public uint DefaultFPContract;

                [FieldOffset(26)]
                public uint NoBitFieldTypeAlign;

                [FieldOffset(26)]
                public uint HexagonQdsp6Compat;

                [FieldOffset(27)]
                public uint ObjCAutoRefCount;

                [FieldOffset(27)]
                public uint ObjCARCWeak;

                [FieldOffset(27)]
                public uint ObjCSubscriptingLegacyRuntime;

                [FieldOffset(27)]
                public uint FakeAddressSpaceMap;

                [FieldOffset(27)]
                public uint MRTD;

                [FieldOffset(27)]
                public uint DelayedTemplateParsing;

                [FieldOffset(27)]
                public uint BlocksRuntimeOptional;

                [FieldOffset(28)]
                public uint ArrowDepth;

                [FieldOffset(32)]
                public uint InstantiationDepth;

                [FieldOffset(36)]
                public uint ConstexprCallDepth;

                [FieldOffset(40)]
                public uint ConstexprStepLimit;

                [FieldOffset(44)]
                public uint BracketDepth;

                [FieldOffset(48)]
                public uint NumLargeByValueCopy;

                [FieldOffset(52)]
                public uint MSCompatibilityVersion;

                [FieldOffset(56)]
                public uint VtorDispMode;

                [FieldOffset(56)]
                public uint ApplePragmaPack;

                [FieldOffset(56)]
                public uint RetainCommentsFromSystemHeaders;

                [FieldOffset(56)]
                public uint SanitizeAddressFieldPadding;

                [FieldOffset(56)]
                public uint MSPointerToMemberRepresentationMethod;

                [FieldOffset(57)]
                public uint AddressSpaceMapMangling;

                [FieldOffset(57)]
                public uint GC;

                [FieldOffset(57)]
                public uint ValueVisibilityMode;

                [FieldOffset(57)]
                public uint TypeVisibilityMode;

                [FieldOffset(58)]
                public uint StackProtector;

                [FieldOffset(58)]
                public uint SignedOverflowBehavior;

                [FieldOffset(60)]
                public clang.SanitizerSet.Internal Sanitize;

                [FieldOffset(88)]
                public clang.ObjCRuntime.Internal ObjCRuntime;

                [FieldOffset(232)]
                public clang.CommentOptions.Internal CommentOpts;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LangOptionsC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LangOptionsC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LangOptionsD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang11LangOptions40getMSPointerToMemberRepresentationMethodEv")]
                internal static extern clang.LangOptions.PragmaMSPointersToMembersKind getMSPointerToMemberRepresentationMethod_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LangOptions40setMSPointerToMemberRepresentationMethodENS0_29PragmaMSPointersToMembersKindE")]
                internal static extern void setMSPointerToMemberRepresentationMethod_0(global::System.IntPtr instance, clang.LangOptions.PragmaMSPointersToMembersKind Value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang11LangOptions26getAddressSpaceMapManglingEv")]
                internal static extern clang.LangOptions.AddrSpaceMapMangling getAddressSpaceMapMangling_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LangOptions26setAddressSpaceMapManglingENS0_20AddrSpaceMapManglingE")]
                internal static extern void setAddressSpaceMapMangling_0(global::System.IntPtr instance, clang.LangOptions.AddrSpaceMapMangling Value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang11LangOptions5getGCEv")]
                internal static extern clang.LangOptions.GCMode getGC_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LangOptions5setGCENS0_6GCModeE")]
                internal static extern void setGC_0(global::System.IntPtr instance, clang.LangOptions.GCMode Value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang11LangOptions22getValueVisibilityModeEv")]
                internal static extern clang.Visibility getValueVisibilityMode_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LangOptions22setValueVisibilityModeENS_10VisibilityE")]
                internal static extern void setValueVisibilityMode_0(global::System.IntPtr instance, clang.Visibility Value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang11LangOptions21getTypeVisibilityModeEv")]
                internal static extern clang.Visibility getTypeVisibilityMode_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LangOptions21setTypeVisibilityModeENS_10VisibilityE")]
                internal static extern void setTypeVisibilityMode_0(global::System.IntPtr instance, clang.Visibility Value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang11LangOptions17getStackProtectorEv")]
                internal static extern clang.LangOptions.StackProtectorMode getStackProtector_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LangOptions17setStackProtectorENS0_18StackProtectorModeE")]
                internal static extern void setStackProtector_0(global::System.IntPtr instance, clang.LangOptions.StackProtectorMode Value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang11LangOptions25getSignedOverflowBehaviorEv")]
                internal static extern clang.LangOptions.SignedOverflowBehaviorTy getSignedOverflowBehavior_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LangOptions25setSignedOverflowBehaviorENS0_24SignedOverflowBehaviorTyE")]
                internal static extern void setSignedOverflowBehavior_0(global::System.IntPtr instance, clang.LangOptions.SignedOverflowBehaviorTy Value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang11LangOptions23isSignedOverflowDefinedEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isSignedOverflowDefined_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK5clang11LangOptions28isSubscriptPointerArithmeticEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isSubscriptPointerArithmetic_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang11LangOptions22resetNonModularOptionsEv")]
                internal static extern void resetNonModularOptions_0(global::System.IntPtr instance);
            }

            public enum GCMode : uint
            {
                NonGC = 0,
                GCOnly = 1,
                HybridGC = 2
            }

            public enum StackProtectorMode : uint
            {
                SSPOff = 0,
                SSPOn = 1,
                SSPStrong = 2,
                SSPReq = 3
            }

            public enum SignedOverflowBehaviorTy : uint
            {
                SOB_Undefined = 0,
                SOB_Defined = 1,
                SOB_Trapping = 2
            }

            public enum PragmaMSPointersToMembersKind : uint
            {
                PPTMK_BestCase = 0,
                PPTMK_FullGeneralitySingleInheritance = 1,
                PPTMK_FullGeneralityMultipleInheritance = 2,
                PPTMK_FullGeneralityVirtualInheritance = 3
            }

            public enum AddrSpaceMapMangling : uint
            {
                ASMM_Target = 0,
                ASMM_On = 1,
                ASMM_Off = 2
            }

            private readonly bool __ownsNativeInstance;

            public static new LangOptions __CreateInstance(global::System.IntPtr native)
            {
                return new LangOptions((LangOptions.Internal*) native);
            }

            public static LangOptions __CreateInstance(LangOptions.Internal native)
            {
                return new LangOptions(native);
            }

            private static LangOptions.Internal* __CopyValue(LangOptions.Internal native)
            {
                var ret = (LangOptions.Internal*) Marshal.AllocHGlobal(264);
                *ret = native;
                return ret;
            }

            private LangOptions(LangOptions.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected LangOptions(LangOptions.Internal* native, bool isInternalImpl = false)
                : base((clang.LangOptionsBase.Internal*) native)
            {
            }

            public LangOptions()
                : this((Internal*) null)
            {
                __Instance = Marshal.AllocHGlobal(264);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0(__Instance);
            }

            protected override void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
                base.Dispose(disposing);
            }

            public override void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                clang.LangOptionsBase __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public clang.LangOptions.PragmaMSPointersToMembersKind getMSPointerToMemberRepresentationMethod()
            {
                var __ret = Internal.getMSPointerToMemberRepresentationMethod_0(__Instance);
                return __ret;
            }

            public void setMSPointerToMemberRepresentationMethod(clang.LangOptions.PragmaMSPointersToMembersKind Value)
            {
                var arg0 = Value;
                Internal.setMSPointerToMemberRepresentationMethod_0(__Instance, arg0);
            }

            public clang.LangOptions.AddrSpaceMapMangling getAddressSpaceMapMangling()
            {
                var __ret = Internal.getAddressSpaceMapMangling_0(__Instance);
                return __ret;
            }

            public void setAddressSpaceMapMangling(clang.LangOptions.AddrSpaceMapMangling Value)
            {
                var arg0 = Value;
                Internal.setAddressSpaceMapMangling_0(__Instance, arg0);
            }

            public clang.LangOptions.GCMode getGC()
            {
                var __ret = Internal.getGC_0(__Instance);
                return __ret;
            }

            public void setGC(clang.LangOptions.GCMode Value)
            {
                var arg0 = Value;
                Internal.setGC_0(__Instance, arg0);
            }

            public clang.Visibility getValueVisibilityMode()
            {
                var __ret = Internal.getValueVisibilityMode_0(__Instance);
                return __ret;
            }

            public void setValueVisibilityMode(clang.Visibility Value)
            {
                var arg0 = Value;
                Internal.setValueVisibilityMode_0(__Instance, arg0);
            }

            public clang.Visibility getTypeVisibilityMode()
            {
                var __ret = Internal.getTypeVisibilityMode_0(__Instance);
                return __ret;
            }

            public void setTypeVisibilityMode(clang.Visibility Value)
            {
                var arg0 = Value;
                Internal.setTypeVisibilityMode_0(__Instance, arg0);
            }

            public clang.LangOptions.StackProtectorMode getStackProtector()
            {
                var __ret = Internal.getStackProtector_0(__Instance);
                return __ret;
            }

            public void setStackProtector(clang.LangOptions.StackProtectorMode Value)
            {
                var arg0 = Value;
                Internal.setStackProtector_0(__Instance, arg0);
            }

            public clang.LangOptions.SignedOverflowBehaviorTy getSignedOverflowBehavior()
            {
                var __ret = Internal.getSignedOverflowBehavior_0(__Instance);
                return __ret;
            }

            public void setSignedOverflowBehavior(clang.LangOptions.SignedOverflowBehaviorTy Value)
            {
                var arg0 = Value;
                Internal.setSignedOverflowBehavior_0(__Instance, arg0);
            }

            public bool isSignedOverflowDefined()
            {
                var __ret = Internal.isSignedOverflowDefined_0(__Instance);
                return __ret;
            }

            public bool isSubscriptPointerArithmetic()
            {
                var __ret = Internal.isSubscriptPointerArithmetic_0(__Instance);
                return __ret;
            }

            /// <summary>
            /// <para>Reset all of the options that are not considered when building a
            /// module.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Reset all of the options that are not considered when
            /// building a</para>
            /// <para>  /// module.</para>
            /// </remarks>
            public void resetNonModularOptions()
            {
                Internal.resetNonModularOptions_0(__Instance);
            }

            public clang.SanitizerSet Sanitize
            {
                get
                {
                    return clang.SanitizerSet.__CreateInstance(((Internal*) __Instance)->Sanitize);
                }

                set
                {
                    ((Internal*) __Instance)->Sanitize = ReferenceEquals(value, null) ? new clang.SanitizerSet.Internal() : *(clang.SanitizerSet.Internal*) (value.__Instance);
                }
            }

            public clang.ObjCRuntime ObjCRuntime
            {
                get
                {
                    return clang.ObjCRuntime.__CreateInstance(((Internal*) __Instance)->ObjCRuntime);
                }

                set
                {
                    ((Internal*) __Instance)->ObjCRuntime = ReferenceEquals(value, null) ? new clang.ObjCRuntime.Internal() : *(clang.ObjCRuntime.Internal*) (value.__Instance);
                }
            }

            public clang.CommentOptions CommentOpts
            {
                get
                {
                    return clang.CommentOptions.__CreateInstance(((Internal*) __Instance)->CommentOpts);
                }

                set
                {
                    ((Internal*) __Instance)->CommentOpts = ReferenceEquals(value, null) ? new clang.CommentOptions.Internal() : *(clang.CommentOptions.Internal*) (value.__Instance);
                }
            }
        }

        /// <summary>
        /// <para>Floating point control options</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Floating point control options</para>
        /// </remarks>
        public unsafe partial class FPOptions : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public uint fp_contract;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang9FPOptionsC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang9FPOptionsC2ERKNS_11LangOptionsE")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr LangOpts);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang9FPOptionsC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FPOptions> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, FPOptions>();

            private readonly bool __ownsNativeInstance;

            public static FPOptions __CreateInstance(global::System.IntPtr native)
            {
                return new FPOptions((FPOptions.Internal*) native);
            }

            public static FPOptions __CreateInstance(FPOptions.Internal native)
            {
                return new FPOptions(native);
            }

            private static FPOptions.Internal* __CopyValue(FPOptions.Internal native)
            {
                var ret = (FPOptions.Internal*) Marshal.AllocHGlobal(4);
                *ret = native;
                return ret;
            }

            private FPOptions(FPOptions.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected FPOptions(FPOptions.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public FPOptions()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0(__Instance);
            }

            public FPOptions(clang.LangOptions LangOpts)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(LangOpts, null) ? global::System.IntPtr.Zero : LangOpts.__Instance;
                Internal.ctor_1(__Instance, arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                clang.FPOptions __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public uint fp_contract
            {
                get
                {
                    return ((Internal*) __Instance)->fp_contract;
                }

                set
                {
                    ((Internal*) __Instance)->fp_contract = value;
                }
            }
        }

        /// <summary>
        /// <para>OpenCL volatile options</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief OpenCL volatile options</para>
        /// </remarks>
        public unsafe partial class OpenCLOptions : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public uint cl_khr_fp64;

                [FieldOffset(0)]
                public uint cl_khr_int64_base_atomics;

                [FieldOffset(0)]
                public uint cl_khr_int64_extended_atomics;

                [FieldOffset(0)]
                public uint cl_khr_fp16;

                [FieldOffset(0)]
                public uint cl_khr_gl_sharing;

                [FieldOffset(0)]
                public uint cl_khr_gl_event;

                [FieldOffset(0)]
                public uint cl_khr_d3d10_sharing;

                [FieldOffset(0)]
                public uint cl_khr_global_int32_base_atomics;

                [FieldOffset(1)]
                public uint cl_khr_global_int32_extended_atomics;

                [FieldOffset(1)]
                public uint cl_khr_local_int32_base_atomics;

                [FieldOffset(1)]
                public uint cl_khr_local_int32_extended_atomics;

                [FieldOffset(1)]
                public uint cl_khr_byte_addressable_store;

                [FieldOffset(1)]
                public uint cl_khr_3d_image_writes;

                [FieldOffset(1)]
                public uint cl_clang_storage_class_specifiers;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang13OpenCLOptionsC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN5clang13OpenCLOptionsC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, OpenCLOptions> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, OpenCLOptions>();

            private readonly bool __ownsNativeInstance;

            public static OpenCLOptions __CreateInstance(global::System.IntPtr native)
            {
                return new OpenCLOptions((OpenCLOptions.Internal*) native);
            }

            public static OpenCLOptions __CreateInstance(OpenCLOptions.Internal native)
            {
                return new OpenCLOptions(native);
            }

            private static OpenCLOptions.Internal* __CopyValue(OpenCLOptions.Internal native)
            {
                var ret = (OpenCLOptions.Internal*) Marshal.AllocHGlobal(4);
                *ret = native;
                return ret;
            }

            private OpenCLOptions(OpenCLOptions.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected OpenCLOptions(OpenCLOptions.Internal* native, bool isInternalImpl = false)
            {
                __Instance = new global::System.IntPtr(native);
            }

            public OpenCLOptions()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0(__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
            }

            public virtual void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                clang.OpenCLOptions __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public uint cl_khr_fp64
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_fp64;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_fp64 = value;
                }
            }

            public uint cl_khr_int64_base_atomics
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_int64_base_atomics;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_int64_base_atomics = value;
                }
            }

            public uint cl_khr_int64_extended_atomics
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_int64_extended_atomics;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_int64_extended_atomics = value;
                }
            }

            public uint cl_khr_fp16
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_fp16;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_fp16 = value;
                }
            }

            public uint cl_khr_gl_sharing
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_gl_sharing;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_gl_sharing = value;
                }
            }

            public uint cl_khr_gl_event
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_gl_event;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_gl_event = value;
                }
            }

            public uint cl_khr_d3d10_sharing
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_d3d10_sharing;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_d3d10_sharing = value;
                }
            }

            public uint cl_khr_global_int32_base_atomics
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_global_int32_base_atomics;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_global_int32_base_atomics = value;
                }
            }

            public uint cl_khr_global_int32_extended_atomics
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_global_int32_extended_atomics;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_global_int32_extended_atomics = value;
                }
            }

            public uint cl_khr_local_int32_base_atomics
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_local_int32_base_atomics;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_local_int32_base_atomics = value;
                }
            }

            public uint cl_khr_local_int32_extended_atomics
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_local_int32_extended_atomics;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_local_int32_extended_atomics = value;
                }
            }

            public uint cl_khr_byte_addressable_store
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_byte_addressable_store;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_byte_addressable_store = value;
                }
            }

            public uint cl_khr_3d_image_writes
            {
                get
                {
                    return ((Internal*) __Instance)->cl_khr_3d_image_writes;
                }

                set
                {
                    ((Internal*) __Instance)->cl_khr_3d_image_writes = value;
                }
            }

            public uint cl_clang_storage_class_specifiers
            {
                get
                {
                    return ((Internal*) __Instance)->cl_clang_storage_class_specifiers;
                }

                set
                {
                    ((Internal*) __Instance)->cl_clang_storage_class_specifiers = value;
                }
            }
        }
    }
}
