//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace llvm
    {
        public unsafe partial class APSInt : llvm.APInt, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 24)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public uint BitWidth;

                [FieldOffset(8)]
                internal llvm.APInt._.Internal _0;

                [FieldOffset(16)]
                public bool IsUnsigned;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSIntC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSIntC2Ejb")]
                internal static extern void ctor_1(global::System.IntPtr instance, uint BitWidth, bool isUnsigned);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSIntC2ENS_5APIntEb")]
                internal static extern void ctor_2(global::System.IntPtr instance, llvm.APInt.Internal I, bool isUnsigned);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSIntC2ERKS0_")]
                internal static extern void cctor_4(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSIntD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInt8isSignedEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isSigned_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInt10isUnsignedEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isUnsigned_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSInt13setIsUnsignedEb")]
                internal static extern void setIsUnsigned_0(global::System.IntPtr instance, bool Val);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSInt11setIsSignedEb")]
                internal static extern void setIsSigned_0(global::System.IntPtr instance, bool Val);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInt11getExtValueEv")]
                internal static extern long getExtValue_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInt5truncEj")]
                internal static extern void trunc_0(global::System.IntPtr @return, global::System.IntPtr instance, uint width);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInt6extendEj")]
                internal static extern void extend_0(global::System.IntPtr @return, global::System.IntPtr instance, uint width);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInt10extOrTruncEj")]
                internal static extern void extOrTrunc_0(global::System.IntPtr @return, global::System.IntPtr instance, uint width);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntrmERKS0_")]
                internal static extern void OperatorPercent_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntdvERKS0_")]
                internal static extern void OperatorSlash_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntltERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLess_0(global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntgtERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreater_0(global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntleERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLessEqual_0(global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntgeERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreaterEqual_0(global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInteqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInteqEx")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_1(global::System.IntPtr instance, long RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntneEx")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_1(global::System.IntPtr instance, long RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntleEx")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLessEqual_1(global::System.IntPtr instance, long RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntgeEx")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreaterEqual_1(global::System.IntPtr instance, long RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntltEx")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLess_1(global::System.IntPtr instance, long RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntgtEx")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreater_1(global::System.IntPtr instance, long RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSIntppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSIntmmEv")]
                internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntngEv")]
                internal static extern void OperatorMinus_0(global::System.IntPtr @return, global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntanERKS0_")]
                internal static extern void OperatorAmp_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInt3AndERKS0_")]
                internal static extern void And_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntorERKS0_")]
                internal static extern void OperatorPipe_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInt2OrERKS0_")]
                internal static extern void Or_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInteoERKS0_")]
                internal static extern void OperatorCaret_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInt3XorERKS0_")]
                internal static extern void Xor_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntmlERKS0_")]
                internal static extern void OperatorStar_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntplERKS0_")]
                internal static extern void OperatorPlus_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntmiERKS0_")]
                internal static extern void OperatorMinus_1(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr RHS);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSIntcoEv")]
                internal static extern void OperatorTilde_0(global::System.IntPtr @return, global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSInt11getMaxValueEjb")]
                internal static extern void getMaxValue_0(global::System.IntPtr @return, uint numBits, bool Unsigned);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSInt11getMinValueEjb")]
                internal static extern void getMinValue_0(global::System.IntPtr @return, uint numBits, bool Unsigned);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSInt11isSameValueERKS0_S2_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool isSameValue_0(global::System.IntPtr I1, global::System.IntPtr I2);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSInt13compareValuesERKS0_S2_")]
                internal static extern int compareValues_0(global::System.IntPtr I1, global::System.IntPtr I2);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSInt3getEx")]
                internal static extern void get_0(global::System.IntPtr @return, long X);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvm6APSInt11getUnsignedEy")]
                internal static extern void getUnsigned_0(global::System.IntPtr @return, ulong X);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK4llvm6APSInt7ProfileERNS_16FoldingSetNodeIDE")]
                internal static extern void Profile_0(global::System.IntPtr instance, global::System.IntPtr ID);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvmeqExRKNS_6APSIntE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_2(long V1, global::System.IntPtr V2);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvmneExRKNS_6APSIntE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_2(long V1, global::System.IntPtr V2);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvmleExRKNS_6APSIntE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLessEqual_2(long V1, global::System.IntPtr V2);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvmgeExRKNS_6APSIntE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreaterEqual_2(long V1, global::System.IntPtr V2);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvmltExRKNS_6APSIntE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLess_2(long V1, global::System.IntPtr V2);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("CppSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN4llvmgtExRKNS_6APSIntE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreater_2(long V1, global::System.IntPtr V2);
            }

            private readonly bool __ownsNativeInstance;

            public static new APSInt __CreateInstance(global::System.IntPtr native)
            {
                return new APSInt((APSInt.Internal*) native);
            }

            public static APSInt __CreateInstance(APSInt.Internal native)
            {
                return new APSInt(native);
            }

            private static APSInt.Internal* __CopyValue(APSInt.Internal native)
            {
                var ret = (APSInt.Internal*) Marshal.AllocHGlobal(24);
                *ret = native;
                return ret;
            }

            private APSInt(APSInt.Internal native)
                : this(__CopyValue(native))
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected APSInt(APSInt.Internal* native, bool isInternalImpl = false)
                : base((llvm.APInt.Internal*) native)
            {
            }

            /// <summary>
            /// <para>Default constructor that creates an uninitialized APInt.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Default constructor that creates an uninitialized
            /// APInt.</para>
            /// </remarks>
            public APSInt()
                : this((Internal*) null)
            {
                __Instance = Marshal.AllocHGlobal(24);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0(__Instance);
            }

            /// <summary>
            /// <para>APSInt ctor - Create an APSInt with the specified width, default
            /// to unsigned.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// APSInt ctor - Create an APSInt with the specified width,
            /// default to</para>
            /// <para>  /// unsigned.</para>
            /// </remarks>
            public APSInt(uint BitWidth, bool isUnsigned)
                : this((Internal*) null)
            {
                __Instance = Marshal.AllocHGlobal(24);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = BitWidth;
                Internal.ctor_1(__Instance, arg0, isUnsigned);
            }

            public APSInt(llvm.APInt I, bool isUnsigned)
                : this((Internal*) null)
            {
                __Instance = Marshal.AllocHGlobal(24);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(I, null) ? new llvm.APInt.Internal() : *(llvm.APInt.Internal*) (I.__Instance);
                Internal.ctor_2(__Instance, arg0, isUnsigned);
            }

            protected override void Dispose(bool disposing)
            {
                DestroyNativeInstance(false);
                base.Dispose(disposing);
            }

            public override void DestroyNativeInstance()
            {
                DestroyNativeInstance(true);
            }

            private void DestroyNativeInstance(bool force)
            {
                llvm.APInt __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public bool isSigned()
            {
                var __ret = Internal.isSigned_0(__Instance);
                return __ret;
            }

            public bool isUnsigned()
            {
                var __ret = Internal.isUnsigned_0(__Instance);
                return __ret;
            }

            public void setIsUnsigned(bool Val)
            {
                Internal.setIsUnsigned_0(__Instance, Val);
            }

            public void setIsSigned(bool Val)
            {
                Internal.setIsSigned_0(__Instance, Val);
            }

            /// <summary>
            /// <para>Get the correctly-extended int64_t value.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Get the correctly-extended \c int64_t value.</para>
            /// </remarks>
            public long getExtValue()
            {
                var __ret = Internal.getExtValue_0(__Instance);
                return __ret;
            }

            public llvm.APSInt trunc(uint width)
            {
                var arg0 = width;
                var __ret = new llvm.APSInt.Internal();
                Internal.trunc_0(new IntPtr(&__ret), __Instance, arg0);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public llvm.APSInt extend(uint width)
            {
                var arg0 = width;
                var __ret = new llvm.APSInt.Internal();
                Internal.extend_0(new IntPtr(&__ret), __Instance, arg0);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public llvm.APSInt extOrTrunc(uint width)
            {
                var arg0 = width;
                var __ret = new llvm.APSInt.Internal();
                Internal.extOrTrunc_0(new IntPtr(&__ret), __Instance, arg0);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public static llvm.APSInt operator +(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.OperatorPercent_0(new IntPtr(&__ret), arg0, arg1);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public static llvm.APSInt operator /(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.OperatorSlash_0(new IntPtr(&__ret), arg0, arg1);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public static bool operator <(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = Internal.OperatorLess_0(arg0, arg1);
                return __ret;
            }

            public static bool operator >(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = Internal.OperatorGreater_0(arg0, arg1);
                return __ret;
            }

            public static bool operator <=(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = Internal.OperatorLessEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator >=(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = Internal.OperatorGreaterEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(llvm.APSInt __op, llvm.APSInt RHS)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool RHSNull = ReferenceEquals(RHS, null);
                if (__opNull || RHSNull)
                    return __opNull && RHSNull;
                var arg0 = __op.__Instance;
                var arg1 = RHS.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as APSInt;
            }

            public static bool operator !=(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(llvm.APSInt __op, long RHS)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool RHSNull = ReferenceEquals(RHS, null);
                if (__opNull || RHSNull)
                    return __opNull && RHSNull;
                var arg0 = __op.__Instance;
                var arg1 = RHS;
                var __ret = Internal.OperatorEqualEqual_1(arg0, arg1);
                return __ret;
            }

            public static bool operator !=(llvm.APSInt __op, long RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = RHS;
                var __ret = Internal.OperatorExclaimEqual_1(arg0, arg1);
                return __ret;
            }

            public static bool operator <=(llvm.APSInt __op, long RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = RHS;
                var __ret = Internal.OperatorLessEqual_1(arg0, arg1);
                return __ret;
            }

            public static bool operator >=(llvm.APSInt __op, long RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = RHS;
                var __ret = Internal.OperatorGreaterEqual_1(arg0, arg1);
                return __ret;
            }

            public static bool operator <(llvm.APSInt __op, long RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = RHS;
                var __ret = Internal.OperatorLess_1(arg0, arg1);
                return __ret;
            }

            public static bool operator >(llvm.APSInt __op, long RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = RHS;
                var __ret = Internal.OperatorGreater_1(arg0, arg1);
                return __ret;
            }

            public static llvm.APSInt operator ++(llvm.APSInt __op)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                llvm.APSInt __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (llvm.APSInt.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (llvm.APSInt) llvm.APSInt.NativeToManagedMap[__ret];
                else __result0 = llvm.APSInt.__CreateInstance(__ret);
                return __result0;
            }

            public static llvm.APSInt operator --(llvm.APSInt __op)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var __ret = Internal.OperatorMinusMinus_0(arg0);
                llvm.APSInt __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (llvm.APSInt.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (llvm.APSInt) llvm.APSInt.NativeToManagedMap[__ret];
                else __result0 = llvm.APSInt.__CreateInstance(__ret);
                return __result0;
            }

            public static llvm.APSInt operator -(llvm.APSInt __op)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.OperatorMinus_0(new IntPtr(&__ret), arg0);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public static llvm.APSInt operator &(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.OperatorAmp_0(new IntPtr(&__ret), arg0, arg1);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public llvm.APSInt And(llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.And_0(new IntPtr(&__ret), __Instance, arg0);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public static llvm.APSInt operator |(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.OperatorPipe_0(new IntPtr(&__ret), arg0, arg1);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public llvm.APSInt Or(llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.Or_0(new IntPtr(&__ret), __Instance, arg0);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public static llvm.APSInt operator ^(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.OperatorCaret_0(new IntPtr(&__ret), arg0, arg1);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public llvm.APSInt Xor(llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.Xor_0(new IntPtr(&__ret), __Instance, arg0);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public static llvm.APSInt operator *(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.OperatorStar_0(new IntPtr(&__ret), arg0, arg1);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public static llvm.APSInt operator +(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.OperatorPlus_0(new IntPtr(&__ret), arg0, arg1);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public static llvm.APSInt operator -(llvm.APSInt __op, llvm.APSInt RHS)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var arg1 = ReferenceEquals(RHS, null) ? global::System.IntPtr.Zero : RHS.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.OperatorMinus_1(new IntPtr(&__ret), arg0, arg1);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public static llvm.APSInt operator ~(llvm.APSInt __op)
            {
                var arg0 = ReferenceEquals(__op, null) ? global::System.IntPtr.Zero : __op.__Instance;
                var __ret = new llvm.APSInt.Internal();
                Internal.OperatorTilde_0(new IntPtr(&__ret), arg0);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            /// <summary>
            /// <para>Profile - Used to insert APSInt objects, or objects that contain
            /// APSInt objects, into FoldingSets.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// Profile - Used to insert APSInt objects, or objects that
            /// contain APSInt</para>
            /// <para>  ///  objects, into FoldingSets.</para>
            /// </remarks>
            public void Profile(llvm.FoldingSetNodeID ID)
            {
                var arg0 = ReferenceEquals(ID, null) ? global::System.IntPtr.Zero : ID.__Instance;
                Internal.Profile_0(__Instance, arg0);
            }

            /// <summary>
            /// <para>getMaxValue - Return the APSInt representing the maximum integer
            /// value with the given bit width and signedness.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// getMaxValue - Return the APSInt representing the maximum
            /// integer value</para>
            /// <para>  ///  with the given bit width and signedness.</para>
            /// </remarks>
            public static llvm.APSInt getMaxValue(uint numBits, bool Unsigned)
            {
                var arg0 = numBits;
                var __ret = new llvm.APSInt.Internal();
                Internal.getMaxValue_0(new IntPtr(&__ret), arg0, Unsigned);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            /// <summary>
            /// <para>getMinValue - Return the APSInt representing the minimum integer
            /// value with the given bit width and signedness.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// getMinValue - Return the APSInt representing the minimum
            /// integer value</para>
            /// <para>  ///  with the given bit width and signedness.</para>
            /// </remarks>
            public static llvm.APSInt getMinValue(uint numBits, bool Unsigned)
            {
                var arg0 = numBits;
                var __ret = new llvm.APSInt.Internal();
                Internal.getMinValue_0(new IntPtr(&__ret), arg0, Unsigned);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            /// <summary>
            /// <para>Determine if two APSInts have the same value, zero- or
            /// sign-extending as needed.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Determine if two APSInts have the same value, zero-
            /// or</para>
            /// <para>  /// sign-extending as needed.  </para>
            /// </remarks>
            public static bool isSameValue(llvm.APSInt I1, llvm.APSInt I2)
            {
                var arg0 = ReferenceEquals(I1, null) ? global::System.IntPtr.Zero : I1.__Instance;
                var arg1 = ReferenceEquals(I2, null) ? global::System.IntPtr.Zero : I2.__Instance;
                var __ret = Internal.isSameValue_0(arg0, arg1);
                return __ret;
            }

            /// <summary>
            /// <para>Compare underlying values of two numbers.</para>
            /// </summary>
            /// <remarks>
            /// <para>/// \brief Compare underlying values of two numbers.</para>
            /// </remarks>
            public static int compareValues(llvm.APSInt I1, llvm.APSInt I2)
            {
                var arg0 = ReferenceEquals(I1, null) ? global::System.IntPtr.Zero : I1.__Instance;
                var arg1 = ReferenceEquals(I2, null) ? global::System.IntPtr.Zero : I2.__Instance;
                var __ret = Internal.compareValues_0(arg0, arg1);
                return __ret;
            }

            public static llvm.APSInt get(long X)
            {
                var arg0 = X;
                var __ret = new llvm.APSInt.Internal();
                Internal.get_0(new IntPtr(&__ret), arg0);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public static llvm.APSInt getUnsigned(ulong X)
            {
                var arg0 = X;
                var __ret = new llvm.APSInt.Internal();
                Internal.getUnsigned_0(new IntPtr(&__ret), arg0);
                return llvm.APSInt.__CreateInstance(__ret);
            }

            public static bool operator ==(long V1, llvm.APSInt V2)
            {
                bool V1Null = ReferenceEquals(V1, null);
                bool V2Null = ReferenceEquals(V2, null);
                if (V1Null || V2Null)
                    return V1Null && V2Null;
                var arg0 = V1;
                var arg1 = V2.__Instance;
                var __ret = Internal.OperatorEqualEqual_2(arg0, arg1);
                return __ret;
            }

            public static bool operator !=(long V1, llvm.APSInt V2)
            {
                var arg0 = V1;
                var arg1 = ReferenceEquals(V2, null) ? global::System.IntPtr.Zero : V2.__Instance;
                var __ret = Internal.OperatorExclaimEqual_2(arg0, arg1);
                return __ret;
            }

            public static bool operator <=(long V1, llvm.APSInt V2)
            {
                var arg0 = V1;
                var arg1 = ReferenceEquals(V2, null) ? global::System.IntPtr.Zero : V2.__Instance;
                var __ret = Internal.OperatorLessEqual_2(arg0, arg1);
                return __ret;
            }

            public static bool operator >=(long V1, llvm.APSInt V2)
            {
                var arg0 = V1;
                var arg1 = ReferenceEquals(V2, null) ? global::System.IntPtr.Zero : V2.__Instance;
                var __ret = Internal.OperatorGreaterEqual_2(arg0, arg1);
                return __ret;
            }

            public static bool operator <(long V1, llvm.APSInt V2)
            {
                var arg0 = V1;
                var arg1 = ReferenceEquals(V2, null) ? global::System.IntPtr.Zero : V2.__Instance;
                var __ret = Internal.OperatorLess_2(arg0, arg1);
                return __ret;
            }

            public static bool operator >(long V1, llvm.APSInt V2)
            {
                var arg0 = V1;
                var arg1 = ReferenceEquals(V2, null) ? global::System.IntPtr.Zero : V2.__Instance;
                var __ret = Internal.OperatorGreater_2(arg0, arg1);
                return __ret;
            }
        }
    }
}
