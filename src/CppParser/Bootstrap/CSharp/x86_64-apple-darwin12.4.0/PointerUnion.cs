//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharp
{
    namespace llvm
    {
        public unsafe static partial class PointerUnionTypeSelectorReturn
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }
        }

        /// <summary>
        /// <para>Get a type based on whether two types are the same or not. For:
        /// Ret will be EQ type if T1 is same as T2 or NE type otherwise.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// \brief Get a type based on whether two types are the same or
        /// not. For:</para>
        /// <para>  /// @code</para>
        /// <para>  /// typedef typename PointerUnionTypeSelector&lt;T1, T2, EQ,
        /// NE&gt;::Return Ret;</para>
        /// <para>  /// @endcode</para>
        /// <para>  /// Ret will be EQ type if T1 is same as T2 or NE type
        /// otherwise.</para>
        /// </remarks>
        public unsafe static partial class PointerUnionTypeSelector
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }
        }

        /// <summary>
        /// <para>Provide PointerLikeTypeTraits for void* that is used by
        /// PointerUnion for the two template arguments.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// Provide PointerLikeTypeTraits for void* that is used by
        /// PointerUnion</para>
        /// <para>  /// for the two template arguments.</para>
        /// </remarks>
        public unsafe static partial class PointerUnionUIntTraits
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }
        }

        /// <summary>
        /// <para>PointerUnion - This implements a discriminated union of two
        /// pointer types, and keeps the discriminator bit-mangled into the low bits of
        /// the pointer. This allows the implementation to be extremely efficient in
        /// space, but permits a very natural and type-safe API.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// PointerUnion - This implements a discriminated union of two
        /// pointer types,</para>
        /// <para>  /// and keeps the discriminator bit-mangled into the low bits
        /// of the pointer.</para>
        /// <para>  /// This allows the implementation to be extremely efficient in
        /// space, but</para>
        /// <para>  /// permits a very natural and type-safe API.</para>
        /// <para>  ///</para>
        /// <para>  /// Common use patterns would be something like this:</para>
        /// <para>  ///    PointerUnion&lt;int*, float*&gt; P;</para>
        /// <para>  ///    P = (int*)0;</para>
        /// <para>  ///    printf(&quot;%d %d&quot;, P.is&lt;int*&gt;(),
        /// P.is&lt;float*&gt;());  // prints &quot;1 0&quot;</para>
        /// <para>  ///    X = P.get&lt;int*&gt;();     // ok.</para>
        /// <para>  ///    Y = P.get&lt;float*&gt;();   // runtime assertion
        /// failure.</para>
        /// <para>  ///    Z = P.get&lt;double*&gt;();  // compile time
        /// failure.</para>
        /// <para>  ///    P = (float*)0;</para>
        /// <para>  ///    Y = P.get&lt;float*&gt;();   // ok.</para>
        /// <para>  ///    X = P.get&lt;int*&gt;();     // runtime assertion
        /// failure.</para>
        /// </remarks>
        public unsafe partial class PointerUnion
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }

            internal unsafe partial class IsPT1
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                }
            }

            internal unsafe partial class IsPT2
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                }
            }

            public unsafe partial class UNION_DOESNT_CONTAIN_TYPE
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                }
            }
        }

        /// <summary>
        /// <para>PointerUnion3 - This is a pointer union of three pointer types.
        /// See documentation for PointerUnion for usage.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// PointerUnion3 - This is a pointer union of three pointer
        /// types.  See</para>
        /// <para>  /// documentation for PointerUnion for usage.</para>
        /// </remarks>
        public unsafe partial class PointerUnion3
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }

            internal unsafe partial class IsInnerUnion
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                }
            }

            internal unsafe partial class IsPT3
            {
                [StructLayout(LayoutKind.Explicit, Size = 0)]
                public partial struct Internal
                {
                }
            }
        }

        /// <summary>
        /// <para>PointerUnion4 - This is a pointer union of four pointer types.
        /// See documentation for PointerUnion for usage.</para>
        /// </summary>
        /// <remarks>
        /// <para>/// PointerUnion4 - This is a pointer union of four pointer
        /// types.  See</para>
        /// <para>  /// documentation for PointerUnion for usage.</para>
        /// </remarks>
        public unsafe partial class PointerUnion4
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }
        }
    }
}
